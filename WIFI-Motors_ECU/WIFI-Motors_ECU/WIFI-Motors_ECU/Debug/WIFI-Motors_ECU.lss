
WIFI-Motors_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002512  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00800060  00002512  000025a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  008001b0  008001b0  000026f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002728  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  00002764  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000548c  00000000  00000000  00002b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001525  00000000  00000000  00008000  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000294f  00000000  00000000  00009525  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000dfc  00000000  00000000  0000be74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f56  00000000  00000000  0000cc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000045c0  00000000  00000000  0000dbc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f8  00000000  00000000  00012186  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_11>
      30:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__vector_12>
      34:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__vector_13>
      38:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__vector_14>
      3c:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3d       	cpi	r26, 0xD6	; 214
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 67 05 	call	0xace	; 0xace <main>
      8a:	0c 94 87 12 	jmp	0x250e	; 0x250e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_set_pin_dir>:
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
	
	//return the state of the pin 	
	return (GET_BIT(*(PIN_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port));
}
      92:	e8 2f       	mov	r30, r24
      94:	e6 95       	lsr	r30
      96:	e6 95       	lsr	r30
      98:	e6 95       	lsr	r30
      9a:	87 70       	andi	r24, 0x07	; 7
      9c:	62 30       	cpi	r22, 0x02	; 2
      9e:	e1 f0       	breq	.+56     	; 0xd8 <dio_set_pin_dir+0x46>
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	9f 01       	movw	r18, r30
      a4:	22 0f       	add	r18, r18
      a6:	33 1f       	adc	r19, r19
      a8:	e2 0f       	add	r30, r18
      aa:	f3 1f       	adc	r31, r19
      ac:	f1 95       	neg	r31
      ae:	e1 95       	neg	r30
      b0:	f1 09       	sbc	r31, r1
      b2:	22 ad       	ldd	r18, Z+58	; 0x3a
      b4:	41 e0       	ldi	r20, 0x01	; 1
      b6:	50 e0       	ldi	r21, 0x00	; 0
      b8:	08 2e       	mov	r0, r24
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <dio_set_pin_dir+0x2e>
      bc:	44 0f       	add	r20, r20
      be:	55 1f       	adc	r21, r21
      c0:	0a 94       	dec	r0
      c2:	e2 f7       	brpl	.-8      	; 0xbc <dio_set_pin_dir+0x2a>
      c4:	94 2f       	mov	r25, r20
      c6:	90 95       	com	r25
      c8:	92 23       	and	r25, r18
      ca:	01 c0       	rjmp	.+2      	; 0xce <dio_set_pin_dir+0x3c>
      cc:	66 0f       	add	r22, r22
      ce:	8a 95       	dec	r24
      d0:	ea f7       	brpl	.-6      	; 0xcc <dio_set_pin_dir+0x3a>
      d2:	69 2b       	or	r22, r25
      d4:	62 af       	std	Z+58, r22	; 0x3a
      d6:	08 95       	ret
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	9f 01       	movw	r18, r30
      dc:	22 0f       	add	r18, r18
      de:	33 1f       	adc	r19, r19
      e0:	e2 0f       	add	r30, r18
      e2:	f3 1f       	adc	r31, r19
      e4:	f1 95       	neg	r31
      e6:	e1 95       	neg	r30
      e8:	f1 09       	sbc	r31, r1
      ea:	42 ad       	ldd	r20, Z+58	; 0x3a
      ec:	21 e0       	ldi	r18, 0x01	; 1
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	b9 01       	movw	r22, r18
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <dio_set_pin_dir+0x66>
      f4:	66 0f       	add	r22, r22
      f6:	77 1f       	adc	r23, r23
      f8:	8a 95       	dec	r24
      fa:	e2 f7       	brpl	.-8      	; 0xf4 <dio_set_pin_dir+0x62>
      fc:	cb 01       	movw	r24, r22
      fe:	96 2f       	mov	r25, r22
     100:	90 95       	com	r25
     102:	94 23       	and	r25, r20
     104:	92 af       	std	Z+58, r25	; 0x3a
     106:	93 ad       	ldd	r25, Z+59	; 0x3b
     108:	89 2b       	or	r24, r25
     10a:	83 af       	std	Z+59, r24	; 0x3b
     10c:	08 95       	ret

0000010e <dio_set_pin_val>:


void dio_set_pin_val(uint8_t a_pin_no, uint8_t PinVal)
{
     10e:	96 2f       	mov	r25, r22
	//determine the port that was addressed from the dio_pin number
	uint8_t pin_port = a_pin_no / NUM_PIN_PER_PORT;
     110:	38 2f       	mov	r19, r24
     112:	36 95       	lsr	r19
     114:	36 95       	lsr	r19
     116:	36 95       	lsr	r19
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
	
	//assign the value to the specific pin_no in the specific port 
	ASSIGN_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, PinVal);
     118:	e3 2f       	mov	r30, r19
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	af 01       	movw	r20, r30
     11e:	44 0f       	add	r20, r20
     120:	55 1f       	adc	r21, r21
     122:	e4 0f       	add	r30, r20
     124:	f5 1f       	adc	r31, r21
     126:	f1 95       	neg	r31
     128:	e1 95       	neg	r30
     12a:	f1 09       	sbc	r31, r1
     12c:	63 ad       	ldd	r22, Z+59	; 0x3b
     12e:	33 0f       	add	r19, r19
     130:	33 0f       	add	r19, r19
     132:	33 0f       	add	r19, r19
     134:	83 1b       	sub	r24, r19
     136:	21 e0       	ldi	r18, 0x01	; 1
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	08 2e       	mov	r0, r24
     13c:	02 c0       	rjmp	.+4      	; 0x142 <dio_set_pin_val+0x34>
     13e:	22 0f       	add	r18, r18
     140:	33 1f       	adc	r19, r19
     142:	0a 94       	dec	r0
     144:	e2 f7       	brpl	.-8      	; 0x13e <dio_set_pin_val+0x30>
     146:	20 95       	com	r18
     148:	26 23       	and	r18, r22
     14a:	69 2f       	mov	r22, r25
     14c:	70 e0       	ldi	r23, 0x00	; 0
     14e:	02 c0       	rjmp	.+4      	; 0x154 <dio_set_pin_val+0x46>
     150:	66 0f       	add	r22, r22
     152:	77 1f       	adc	r23, r23
     154:	8a 95       	dec	r24
     156:	e2 f7       	brpl	.-8      	; 0x150 <dio_set_pin_val+0x42>
     158:	62 2b       	or	r22, r18
     15a:	63 af       	std	Z+59, r22	; 0x3b
     15c:	08 95       	ret

0000015e <dio_togg_pin>:
}

void dio_togg_pin(uint8_t a_pin_no)
{
	//determine the port that was addressed from the dio_pin number
	uint8_t pin_port = a_pin_no / NUM_PIN_PER_PORT;
     15e:	28 2f       	mov	r18, r24
     160:	26 95       	lsr	r18
     162:	26 95       	lsr	r18
     164:	26 95       	lsr	r18
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
	
	//toggle the specific pin_no in the specific port 
	TOGGLE_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port);
     166:	e2 2f       	mov	r30, r18
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	af 01       	movw	r20, r30
     16c:	44 0f       	add	r20, r20
     16e:	55 1f       	adc	r21, r21
     170:	e4 0f       	add	r30, r20
     172:	f5 1f       	adc	r31, r21
     174:	f1 95       	neg	r31
     176:	e1 95       	neg	r30
     178:	f1 09       	sbc	r31, r1
     17a:	33 ad       	ldd	r19, Z+59	; 0x3b
     17c:	22 0f       	add	r18, r18
     17e:	22 0f       	add	r18, r18
     180:	22 0f       	add	r18, r18
     182:	82 1b       	sub	r24, r18
     184:	28 2f       	mov	r18, r24
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	02 c0       	rjmp	.+4      	; 0x190 <dio_togg_pin+0x32>
     18c:	88 0f       	add	r24, r24
     18e:	99 1f       	adc	r25, r25
     190:	2a 95       	dec	r18
     192:	e2 f7       	brpl	.-8      	; 0x18c <dio_togg_pin+0x2e>
     194:	83 27       	eor	r24, r19
     196:	83 af       	std	Z+59, r24	; 0x3b
     198:	08 95       	ret

0000019a <uart_rx_handler>:
		{
			esp_send(": SMOKE", ch_num);
		}
		else if (alert[1] == '0')
		{
			esp_send(": NOBREAK!", ch_num);
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <__data_end>
     1a0:	8c b1       	in	r24, 0x0c	; 12
     1a2:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <temp>
     1a6:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <receive_flag>
     1aa:	8e 3f       	cpi	r24, 0xFE	; 254
     1ac:	89 f4       	brne	.+34     	; 0x1d0 <uart_rx_handler+0x36>
     1ae:	83 e0       	ldi	r24, 0x03	; 3
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <millis>
     1b6:	8f ef       	ldi	r24, 0xFF	; 255
     1b8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <receive_flag>
     1bc:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <temp>
     1c0:	8b 37       	cpi	r24, 0x7B	; 123
     1c2:	09 f0       	breq	.+2      	; 0x1c6 <uart_rx_handler+0x2c>
     1c4:	50 c0       	rjmp	.+160    	; 0x266 <uart_rx_handler+0xcc>
     1c6:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <receive_flag>
     1ca:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <string_counter>
     1ce:	08 95       	ret
     1d0:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <receive_flag>
     1d4:	8f 3f       	cpi	r24, 0xFF	; 255
     1d6:	51 f4       	brne	.+20     	; 0x1ec <uart_rx_handler+0x52>
     1d8:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <temp>
     1dc:	8b 37       	cpi	r24, 0x7B	; 123
     1de:	09 f0       	breq	.+2      	; 0x1e2 <uart_rx_handler+0x48>
     1e0:	42 c0       	rjmp	.+132    	; 0x266 <uart_rx_handler+0xcc>
     1e2:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <receive_flag>
     1e6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <string_counter>
     1ea:	08 95       	ret
     1ec:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <receive_flag>
     1f0:	81 11       	cpse	r24, r1
     1f2:	08 c0       	rjmp	.+16     	; 0x204 <uart_rx_handler+0x6a>
     1f4:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <temp>
     1f8:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <req_type>
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <receive_flag>
     202:	08 95       	ret
     204:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <receive_flag>
     208:	81 30       	cpi	r24, 0x01	; 1
     20a:	69 f5       	brne	.+90     	; 0x266 <uart_rx_handler+0xcc>
     20c:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <temp>
     210:	8d 37       	cpi	r24, 0x7D	; 125
     212:	89 f4       	brne	.+34     	; 0x236 <uart_rx_handler+0x9c>
     214:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <string_counter>
     218:	0e 2e       	mov	r0, r30
     21a:	00 0c       	add	r0, r0
     21c:	ff 0b       	sbc	r31, r31
     21e:	eb 53       	subi	r30, 0x3B	; 59
     220:	fe 4f       	sbci	r31, 0xFE	; 254
     222:	10 82       	st	Z, r1
     224:	8f ef       	ldi	r24, 0xFF	; 255
     226:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <receive_flag>
     22a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <string_counter>
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <str_reached>
     234:	08 95       	ret
     236:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <string_counter>
     23a:	0e 2e       	mov	r0, r30
     23c:	00 0c       	add	r0, r0
     23e:	ff 0b       	sbc	r31, r31
     240:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <temp>
     244:	eb 53       	subi	r30, 0x3B	; 59
     246:	fe 4f       	sbci	r31, 0xFE	; 254
     248:	80 83       	st	Z, r24
     24a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <string_counter>
     24e:	8f 5f       	subi	r24, 0xFF	; 255
     250:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <string_counter>
     254:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <string_counter>
     258:	8b 30       	cpi	r24, 0x0B	; 11
     25a:	2c f0       	brlt	.+10     	; 0x266 <uart_rx_handler+0xcc>
     25c:	8f ef       	ldi	r24, 0xFF	; 255
     25e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <string_counter>
     262:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <receive_flag>
     266:	08 95       	ret

00000268 <turn_right>:
     268:	61 e0       	ldi	r22, 0x01	; 1
     26a:	8a e0       	ldi	r24, 0x0A	; 10
     26c:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	8b e0       	ldi	r24, 0x0B	; 11
     274:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	88 e0       	ldi	r24, 0x08	; 8
     27c:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     280:	61 e0       	ldi	r22, 0x01	; 1
     282:	89 e0       	ldi	r24, 0x09	; 9
     284:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     288:	08 95       	ret

0000028a <move_backward>:
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	88 e0       	ldi	r24, 0x08	; 8
     28e:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	89 e0       	ldi	r24, 0x09	; 9
     296:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     29a:	60 e0       	ldi	r22, 0x00	; 0
     29c:	8a e0       	ldi	r24, 0x0A	; 10
     29e:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     2a2:	61 e0       	ldi	r22, 0x01	; 1
     2a4:	8b e0       	ldi	r24, 0x0B	; 11
     2a6:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     2aa:	08 95       	ret

000002ac <turn_left>:
     2ac:	61 e0       	ldi	r22, 0x01	; 1
     2ae:	88 e0       	ldi	r24, 0x08	; 8
     2b0:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	89 e0       	ldi	r24, 0x09	; 9
     2b8:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	8a e0       	ldi	r24, 0x0A	; 10
     2c0:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     2c4:	61 e0       	ldi	r22, 0x01	; 1
     2c6:	8b e0       	ldi	r24, 0x0B	; 11
     2c8:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     2cc:	08 95       	ret

000002ce <motors_init>:
     2ce:	61 e0       	ldi	r22, 0x01	; 1
     2d0:	88 e0       	ldi	r24, 0x08	; 8
     2d2:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
     2d6:	61 e0       	ldi	r22, 0x01	; 1
     2d8:	89 e0       	ldi	r24, 0x09	; 9
     2da:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	8a e0       	ldi	r24, 0x0A	; 10
     2e2:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
     2e6:	61 e0       	ldi	r22, 0x01	; 1
     2e8:	8b e0       	ldi	r24, 0x0B	; 11
     2ea:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
     2ee:	18 ba       	out	0x18, r1	; 24
     2f0:	68 ee       	ldi	r22, 0xE8	; 232
     2f2:	73 e0       	ldi	r23, 0x03	; 3
     2f4:	86 e0       	ldi	r24, 0x06	; 6
     2f6:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <pwm_init>
     2fa:	86 e0       	ldi	r24, 0x06	; 6
     2fc:	0e 94 b3 0c 	call	0x1966	; 0x1966 <pwm_start>
     300:	6a e0       	ldi	r22, 0x0A	; 10
     302:	82 e0       	ldi	r24, 0x02	; 2
     304:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <pwm_setDuty>
     308:	6a e5       	ldi	r22, 0x5A	; 90
     30a:	84 e0       	ldi	r24, 0x04	; 4
     30c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <pwm_setDuty>
     310:	08 95       	ret

00000312 <store_data>:
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <list>
     31e:	f0 91 c4 01 	lds	r31, 0x01C4	; 0x8001c4 <list+0x1>
     322:	84 81       	ldd	r24, Z+4	; 0x04
     324:	95 81       	ldd	r25, Z+5	; 0x05
     326:	04 97       	sbiw	r24, 0x04	; 4
     328:	88 f5       	brcc	.+98     	; 0x38c <store_data+0x7a>
     32a:	00 91 72 00 	lds	r16, 0x0072	; 0x800072 <e_ptr>
     32e:	10 91 73 00 	lds	r17, 0x0073	; 0x800073 <e_ptr+0x1>
     332:	c5 ec       	ldi	r28, 0xC5	; 197
     334:	d1 e0       	ldi	r29, 0x01	; 1
     336:	fe 01       	movw	r30, r28
     338:	01 90       	ld	r0, Z+
     33a:	00 20       	and	r0, r0
     33c:	e9 f7       	brne	.-6      	; 0x338 <store_data+0x26>
     33e:	cf 01       	movw	r24, r30
     340:	85 5c       	subi	r24, 0xC5	; 197
     342:	91 40       	sbci	r25, 0x01	; 1
     344:	0e 94 28 11 	call	0x2250	; 0x2250 <malloc>
     348:	f8 01       	movw	r30, r16
     34a:	91 83       	std	Z+1, r25	; 0x01
     34c:	80 83       	st	Z, r24
     34e:	09 90       	ld	r0, Y+
     350:	00 20       	and	r0, r0
     352:	e9 f7       	brne	.-6      	; 0x34e <store_data+0x3c>
     354:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <e_ptr>
     358:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <e_ptr+0x1>
     35c:	ae 01       	movw	r20, r28
     35e:	45 5c       	subi	r20, 0xC5	; 197
     360:	51 40       	sbci	r21, 0x01	; 1
     362:	65 ec       	ldi	r22, 0xC5	; 197
     364:	71 e0       	ldi	r23, 0x01	; 1
     366:	80 81       	ld	r24, Z
     368:	91 81       	ldd	r25, Z+1	; 0x01
     36a:	0e 94 49 12 	call	0x2492	; 0x2492 <memcpy>
     36e:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <e_ptr>
     372:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <e_ptr+0x1>
     376:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <req_type>
     37a:	fb 01       	movw	r30, r22
     37c:	82 83       	std	Z+2, r24	; 0x02
     37e:	43 e0       	ldi	r20, 0x03	; 3
     380:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <list>
     384:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <list+0x1>
     388:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <push>
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	08 95       	ret

00000396 <timer0_ovf_handler>:
     396:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <receive_flag>
     39a:	8e 3f       	cpi	r24, 0xFE	; 254
     39c:	61 f1       	breq	.+88     	; 0x3f6 <timer0_ovf_handler+0x60>
     39e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <__data_end>
     3a2:	81 30       	cpi	r24, 0x01	; 1
     3a4:	81 f4       	brne	.+32     	; 0x3c6 <timer0_ovf_handler+0x30>
     3a6:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <__data_end>
     3aa:	83 e0       	ldi	r24, 0x03	; 3
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 37 0a 	call	0x146e	; 0x146e <millis_reset_tmr>
     3b2:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <counter>
     3b6:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <counter+0x1>
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <counter+0x1>
     3c0:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <counter>
     3c4:	08 95       	ret
     3c6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <__data_end>
     3ca:	81 11       	cpse	r24, r1
     3cc:	14 c0       	rjmp	.+40     	; 0x3f6 <timer0_ovf_handler+0x60>
     3ce:	0e 94 30 0a 	call	0x1460	; 0x1460 <millis_disable_tmr>
     3d2:	8e ef       	ldi	r24, 0xFE	; 254
     3d4:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <receive_flag>
     3d8:	8f ef       	ldi	r24, 0xFF	; 255
     3da:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <string_counter>
     3de:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <counter+0x1>
     3e2:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <counter>
     3e6:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <str_reached>
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	21 f4       	brne	.+8      	; 0x3f6 <timer0_ovf_handler+0x60>
     3ee:	0e 94 89 01 	call	0x312	; 0x312 <store_data>
     3f2:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <str_reached>
     3f6:	08 95       	ret

000003f8 <sensor_to_esp_buff>:
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	ec 01       	movw	r28, r24
     3fe:	e8 e6       	ldi	r30, 0x68	; 104
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	8b e7       	ldi	r24, 0x7B	; 123
     404:	80 83       	st	Z, r24
     406:	61 83       	std	Z+1, r22	; 0x01
     408:	98 81       	ld	r25, Y
     40a:	99 23       	and	r25, r25
     40c:	79 f0       	breq	.+30     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     40e:	e0 e0       	ldi	r30, 0x00	; 0
     410:	ae 2f       	mov	r26, r30
     412:	b0 e0       	ldi	r27, 0x00	; 0
     414:	a8 59       	subi	r26, 0x98	; 152
     416:	bf 4f       	sbci	r27, 0xFF	; 255
     418:	12 96       	adiw	r26, 0x02	; 2
     41a:	9c 93       	st	X, r25
     41c:	ef 5f       	subi	r30, 0xFF	; 255
     41e:	de 01       	movw	r26, r28
     420:	ae 0f       	add	r26, r30
     422:	b1 1d       	adc	r27, r1
     424:	9c 91       	ld	r25, X
     426:	91 11       	cpse	r25, r1
     428:	f3 cf       	rjmp	.-26     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     42a:	01 c0       	rjmp	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42c:	e0 e0       	ldi	r30, 0x00	; 0
     42e:	ae 2f       	mov	r26, r30
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	a8 59       	subi	r26, 0x98	; 152
     434:	bf 4f       	sbci	r27, 0xFF	; 255
     436:	8d e7       	ldi	r24, 0x7D	; 125
     438:	12 96       	adiw	r26, 0x02	; 2
     43a:	8c 93       	st	X, r24
     43c:	ef 5f       	subi	r30, 0xFF	; 255
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	e8 59       	subi	r30, 0x98	; 152
     442:	ff 4f       	sbci	r31, 0xFF	; 255
     444:	12 82       	std	Z+2, r1	; 0x02
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <no_data_alarm>:
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	03 e0       	ldi	r16, 0x03	; 3
     456:	10 e0       	ldi	r17, 0x00	; 0
     458:	c8 ec       	ldi	r28, 0xC8	; 200
     45a:	d0 e0       	ldi	r29, 0x00	; 0
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	0e 94 af 00 	call	0x15e	; 0x15e <dio_togg_pin>
     462:	80 ed       	ldi	r24, 0xD0	; 208
     464:	97 e0       	ldi	r25, 0x07	; 7
     466:	fe 01       	movw	r30, r28
     468:	31 97       	sbiw	r30, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <__stack+0x9>
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	d9 f7       	brne	.-10     	; 0x466 <__stack+0x7>
     470:	01 50       	subi	r16, 0x01	; 1
     472:	11 09       	sbc	r17, r1
     474:	99 f7       	brne	.-26     	; 0x45c <no_data_alarm+0x10>
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	1f 91       	pop	r17
     47c:	0f 91       	pop	r16
     47e:	08 95       	ret

00000480 <alarm>:
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	c5 e0       	ldi	r28, 0x05	; 5
     486:	d0 e0       	ldi	r29, 0x00	; 0
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	0e 94 af 00 	call	0x15e	; 0x15e <dio_togg_pin>
     48e:	2f ef       	ldi	r18, 0xFF	; 255
     490:	80 e7       	ldi	r24, 0x70	; 112
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	21 50       	subi	r18, 0x01	; 1
     496:	80 40       	sbci	r24, 0x00	; 0
     498:	90 40       	sbci	r25, 0x00	; 0
     49a:	e1 f7       	brne	.-8      	; 0x494 <alarm+0x14>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <alarm+0x1e>
     49e:	00 00       	nop
     4a0:	21 97       	sbiw	r28, 0x01	; 1
     4a2:	91 f7       	brne	.-28     	; 0x488 <alarm+0x8>
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <error_alarm>:
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	05 e0       	ldi	r16, 0x05	; 5
     4b4:	10 e0       	ldi	r17, 0x00	; 0
     4b6:	c8 ec       	ldi	r28, 0xC8	; 200
     4b8:	d0 e0       	ldi	r29, 0x00	; 0
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	0e 94 af 00 	call	0x15e	; 0x15e <dio_togg_pin>
     4c0:	88 ee       	ldi	r24, 0xE8	; 232
     4c2:	93 e0       	ldi	r25, 0x03	; 3
     4c4:	fe 01       	movw	r30, r28
     4c6:	31 97       	sbiw	r30, 0x01	; 1
     4c8:	f1 f7       	brne	.-4      	; 0x4c6 <error_alarm+0x1c>
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	d9 f7       	brne	.-10     	; 0x4c4 <error_alarm+0x1a>
     4ce:	01 50       	subi	r16, 0x01	; 1
     4d0:	11 09       	sbc	r17, r1
     4d2:	99 f7       	brne	.-26     	; 0x4ba <error_alarm+0x10>
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	1f 91       	pop	r17
     4da:	0f 91       	pop	r16
     4dc:	08 95       	ret

000004de <esp_send>:
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	00 d0       	rcall	.+0      	; 0x4e8 <esp_send+0xa>
     4e8:	00 d0       	rcall	.+0      	; 0x4ea <esp_send+0xc>
     4ea:	1f 92       	push	r1
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
     4f0:	8c 01       	movw	r16, r24
     4f2:	6d 83       	std	Y+5, r22	; 0x05
     4f4:	19 82       	std	Y+1, r1	; 0x01
     4f6:	1a 82       	std	Y+2, r1	; 0x02
     4f8:	1b 82       	std	Y+3, r1	; 0x03
     4fa:	1c 82       	std	Y+4, r1	; 0x04
     4fc:	fc 01       	movw	r30, r24
     4fe:	01 90       	ld	r0, Z+
     500:	00 20       	and	r0, r0
     502:	e9 f7       	brne	.-6      	; 0x4fe <esp_send+0x20>
     504:	cf 01       	movw	r24, r30
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	4a e0       	ldi	r20, 0x0A	; 10
     50a:	be 01       	movw	r22, r28
     50c:	6f 5f       	subi	r22, 0xFF	; 255
     50e:	7f 4f       	sbci	r23, 0xFF	; 255
     510:	80 1b       	sub	r24, r16
     512:	91 0b       	sbc	r25, r17
     514:	0e 94 52 12 	call	0x24a4	; 0x24a4 <__itoa_ncheck>
     518:	8d 81       	ldd	r24, Y+5	; 0x05
     51a:	80 5d       	subi	r24, 0xD0	; 208
     51c:	8d 83       	std	Y+5, r24	; 0x05
     51e:	40 e0       	ldi	r20, 0x00	; 0
     520:	50 e0       	ldi	r21, 0x00	; 0
     522:	6b e7       	ldi	r22, 0x7B	; 123
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <uart_send_until>
     52c:	41 e0       	ldi	r20, 0x01	; 1
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	be 01       	movw	r22, r28
     532:	6b 5f       	subi	r22, 0xFB	; 251
     534:	7f 4f       	sbci	r23, 0xFF	; 255
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <uart_send>
     53c:	41 e0       	ldi	r20, 0x01	; 1
     53e:	50 e0       	ldi	r21, 0x00	; 0
     540:	67 e8       	ldi	r22, 0x87	; 135
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <uart_send>
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	be 01       	movw	r22, r28
     550:	6f 5f       	subi	r22, 0xFF	; 255
     552:	7f 4f       	sbci	r23, 0xFF	; 255
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <uart_send_until>
     55a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <receive_flag>
     55e:	8e 3f       	cpi	r24, 0xFE	; 254
     560:	e1 f7       	brne	.-8      	; 0x55a <esp_send+0x7c>
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	0e 94 3d 10 	call	0x207a	; 0x207a <uart_set_rx_int>
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	50 e0       	ldi	r21, 0x00	; 0
     56e:	6f e1       	ldi	r22, 0x1F	; 31
     570:	71 e0       	ldi	r23, 0x01	; 1
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <uart_send_until>
     578:	88 e4       	ldi	r24, 0x48	; 72
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	9f 93       	push	r25
     57e:	8f 93       	push	r24
     580:	89 e8       	ldi	r24, 0x89	; 137
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	9f 93       	push	r25
     586:	8f 93       	push	r24
     588:	1f 92       	push	r1
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	8f 93       	push	r24
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	8f 93       	push	r24
     592:	84 ef       	ldi	r24, 0xF4	; 244
     594:	8f 93       	push	r24
     596:	0e 94 6e 10 	call	0x20dc	; 0x20dc <check_strings>
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
     5a4:	81 11       	cpse	r24, r1
     5a6:	03 c0       	rjmp	.+6      	; 0x5ae <esp_send+0xd0>
     5a8:	0e 94 26 02 	call	0x44c	; 0x44c <no_data_alarm>
     5ac:	04 c0       	rjmp	.+8      	; 0x5b6 <esp_send+0xd8>
     5ae:	82 30       	cpi	r24, 0x02	; 2
     5b0:	11 f4       	brne	.+4      	; 0x5b6 <esp_send+0xd8>
     5b2:	0e 94 55 02 	call	0x4aa	; 0x4aa <error_alarm>
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	0e 94 3d 10 	call	0x207a	; 0x207a <uart_set_rx_int>
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	b8 01       	movw	r22, r16
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <uart_send_until>
     5ca:	40 e0       	ldi	r20, 0x00	; 0
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	6f e1       	ldi	r22, 0x1F	; 31
     5d0:	71 e0       	ldi	r23, 0x01	; 1
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <uart_send_until>
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	1f 91       	pop	r17
     5e8:	0f 91       	pop	r16
     5ea:	08 95       	ret

000005ec <esp_send_smoke>:
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	cd b7       	in	r28, 0x3d	; 61
     5f8:	de b7       	in	r29, 0x3e	; 62
     5fa:	29 97       	sbiw	r28, 0x09	; 9
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	f8 2e       	mov	r15, r24
     608:	85 e0       	ldi	r24, 0x05	; 5
     60a:	e4 e7       	ldi	r30, 0x74	; 116
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	de 01       	movw	r26, r28
     610:	11 96       	adiw	r26, 0x01	; 1
     612:	01 90       	ld	r0, Z+
     614:	0d 92       	st	X+, r0
     616:	8a 95       	dec	r24
     618:	e1 f7       	brne	.-8      	; 0x612 <esp_send_smoke+0x26>
     61a:	1f 82       	std	Y+7, r1	; 0x07
     61c:	1e 82       	std	Y+6, r1	; 0x06
     61e:	68 e0       	ldi	r22, 0x08	; 8
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	0e 94 80 09 	call	0x1300	; 0x1300 <mcp_send_remoteframe>
     626:	8c ed       	ldi	r24, 0xDC	; 220
     628:	95 e0       	ldi	r25, 0x05	; 5
     62a:	99 87       	std	Y+9, r25	; 0x09
     62c:	88 87       	std	Y+8, r24	; 0x08
     62e:	00 ed       	ldi	r16, 0xD0	; 208
     630:	17 e0       	ldi	r17, 0x07	; 7
     632:	03 c0       	rjmp	.+6      	; 0x63a <esp_send_smoke+0x4e>
     634:	c8 01       	movw	r24, r16
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <esp_send_smoke+0x4a>
     63a:	85 e0       	ldi	r24, 0x05	; 5
     63c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <mcp_check_flag>
     640:	81 11       	cpse	r24, r1
     642:	07 c0       	rjmp	.+14     	; 0x652 <esp_send_smoke+0x66>
     644:	88 85       	ldd	r24, Y+8	; 0x08
     646:	99 85       	ldd	r25, Y+9	; 0x09
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	99 87       	std	Y+9, r25	; 0x09
     64c:	88 87       	std	Y+8, r24	; 0x08
     64e:	89 2b       	or	r24, r25
     650:	89 f7       	brne	.-30     	; 0x634 <esp_send_smoke+0x48>
     652:	88 85       	ldd	r24, Y+8	; 0x08
     654:	99 85       	ldd	r25, Y+9	; 0x09
     656:	89 2b       	or	r24, r25
     658:	91 f1       	breq	.+100    	; 0x6be <esp_send_smoke+0xd2>
     65a:	85 e0       	ldi	r24, 0x05	; 5
     65c:	0e 94 4b 09 	call	0x1296	; 0x1296 <mcp_clear_flag>
     660:	84 ec       	ldi	r24, 0xC4	; 196
     662:	99 e0       	ldi	r25, 0x09	; 9
     664:	99 87       	std	Y+9, r25	; 0x09
     666:	88 87       	std	Y+8, r24	; 0x08
     668:	00 ea       	ldi	r16, 0xA0	; 160
     66a:	1f e0       	ldi	r17, 0x0F	; 15
     66c:	03 c0       	rjmp	.+6      	; 0x674 <esp_send_smoke+0x88>
     66e:	c8 01       	movw	r24, r16
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	f1 f7       	brne	.-4      	; 0x670 <esp_send_smoke+0x84>
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <mcp_check_flag>
     67a:	81 11       	cpse	r24, r1
     67c:	07 c0       	rjmp	.+14     	; 0x68c <esp_send_smoke+0xa0>
     67e:	88 85       	ldd	r24, Y+8	; 0x08
     680:	99 85       	ldd	r25, Y+9	; 0x09
     682:	01 97       	sbiw	r24, 0x01	; 1
     684:	99 87       	std	Y+9, r25	; 0x09
     686:	88 87       	std	Y+8, r24	; 0x08
     688:	89 2b       	or	r24, r25
     68a:	89 f7       	brne	.-30     	; 0x66e <esp_send_smoke+0x82>
     68c:	88 85       	ldd	r24, Y+8	; 0x08
     68e:	99 85       	ldd	r25, Y+9	; 0x09
     690:	89 2b       	or	r24, r25
     692:	b9 f0       	breq	.+46     	; 0x6c2 <esp_send_smoke+0xd6>
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	0e 94 4b 09 	call	0x1296	; 0x1296 <mcp_clear_flag>
     69a:	be 01       	movw	r22, r28
     69c:	6f 5f       	subi	r22, 0xFF	; 255
     69e:	7f 4f       	sbci	r23, 0xFF	; 255
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	0e 94 c3 07 	call	0xf86	; 0xf86 <mcp_get_rx_data>
     6a6:	63 e5       	ldi	r22, 0x53	; 83
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <sensor_to_esp_buff>
     6b0:	6f 2d       	mov	r22, r15
     6b2:	88 e6       	ldi	r24, 0x68	; 104
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 6f 02 	call	0x4de	; 0x4de <esp_send>
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <esp_send_smoke+0xd8>
     6be:	8e ef       	ldi	r24, 0xFE	; 254
     6c0:	01 c0       	rjmp	.+2      	; 0x6c4 <esp_send_smoke+0xd8>
     6c2:	8b ef       	ldi	r24, 0xFB	; 251
     6c4:	29 96       	adiw	r28, 0x09	; 9
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	ff 90       	pop	r15
     6da:	08 95       	ret

000006dc <esp_send_temp>:
     6dc:	ef 92       	push	r14
     6de:	ff 92       	push	r15
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	2f 97       	sbiw	r28, 0x0f	; 15
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	f8 94       	cli
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	cd bf       	out	0x3d, r28	; 61
     6f6:	18 2f       	mov	r17, r24
     6f8:	81 e3       	ldi	r24, 0x31	; 49
     6fa:	92 e3       	ldi	r25, 0x32	; 50
     6fc:	9a 83       	std	Y+2, r25	; 0x02
     6fe:	89 83       	std	Y+1, r24	; 0x01
     700:	1c 82       	std	Y+4, r1	; 0x04
     702:	1b 82       	std	Y+3, r1	; 0x03
     704:	65 e0       	ldi	r22, 0x05	; 5
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	0e 94 80 09 	call	0x1300	; 0x1300 <mcp_send_remoteframe>
     70c:	8c ed       	ldi	r24, 0xDC	; 220
     70e:	95 e0       	ldi	r25, 0x05	; 5
     710:	9f 87       	std	Y+15, r25	; 0x0f
     712:	8e 87       	std	Y+14, r24	; 0x0e
     714:	06 c0       	rjmp	.+12     	; 0x722 <esp_send_temp+0x46>
     716:	8f ec       	ldi	r24, 0xCF	; 207
     718:	97 e0       	ldi	r25, 0x07	; 7
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <esp_send_temp+0x3e>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <esp_send_temp+0x44>
     720:	00 00       	nop
     722:	83 e0       	ldi	r24, 0x03	; 3
     724:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <mcp_check_flag>
     728:	81 11       	cpse	r24, r1
     72a:	07 c0       	rjmp	.+14     	; 0x73a <esp_send_temp+0x5e>
     72c:	8e 85       	ldd	r24, Y+14	; 0x0e
     72e:	9f 85       	ldd	r25, Y+15	; 0x0f
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	9f 87       	std	Y+15, r25	; 0x0f
     734:	8e 87       	std	Y+14, r24	; 0x0e
     736:	89 2b       	or	r24, r25
     738:	71 f7       	brne	.-36     	; 0x716 <esp_send_temp+0x3a>
     73a:	8e 85       	ldd	r24, Y+14	; 0x0e
     73c:	9f 85       	ldd	r25, Y+15	; 0x0f
     73e:	89 2b       	or	r24, r25
     740:	09 f4       	brne	.+2      	; 0x744 <esp_send_temp+0x68>
     742:	3d c0       	rjmp	.+122    	; 0x7be <esp_send_temp+0xe2>
     744:	83 e0       	ldi	r24, 0x03	; 3
     746:	0e 94 4b 09 	call	0x1296	; 0x1296 <mcp_clear_flag>
     74a:	8c ed       	ldi	r24, 0xDC	; 220
     74c:	95 e0       	ldi	r25, 0x05	; 5
     74e:	9f 87       	std	Y+15, r25	; 0x0f
     750:	8e 87       	std	Y+14, r24	; 0x0e
     752:	0f 2e       	mov	r0, r31
     754:	f0 ed       	ldi	r31, 0xD0	; 208
     756:	ef 2e       	mov	r14, r31
     758:	f7 e0       	ldi	r31, 0x07	; 7
     75a:	ff 2e       	mov	r15, r31
     75c:	f0 2d       	mov	r31, r0
     75e:	03 c0       	rjmp	.+6      	; 0x766 <esp_send_temp+0x8a>
     760:	c7 01       	movw	r24, r14
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	f1 f7       	brne	.-4      	; 0x762 <esp_send_temp+0x86>
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <mcp_check_flag>
     76c:	81 11       	cpse	r24, r1
     76e:	07 c0       	rjmp	.+14     	; 0x77e <esp_send_temp+0xa2>
     770:	8e 85       	ldd	r24, Y+14	; 0x0e
     772:	9f 85       	ldd	r25, Y+15	; 0x0f
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	9f 87       	std	Y+15, r25	; 0x0f
     778:	8e 87       	std	Y+14, r24	; 0x0e
     77a:	89 2b       	or	r24, r25
     77c:	89 f7       	brne	.-30     	; 0x760 <esp_send_temp+0x84>
     77e:	8e 85       	ldd	r24, Y+14	; 0x0e
     780:	9f 85       	ldd	r25, Y+15	; 0x0f
     782:	89 2b       	or	r24, r25
     784:	f1 f0       	breq	.+60     	; 0x7c2 <esp_send_temp+0xe6>
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	0e 94 4b 09 	call	0x1296	; 0x1296 <mcp_clear_flag>
     78c:	be 01       	movw	r22, r28
     78e:	6b 5f       	subi	r22, 0xFB	; 251
     790:	7f 4f       	sbci	r23, 0xFF	; 255
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	0e 94 c3 07 	call	0xf86	; 0xf86 <mcp_get_rx_data>
     798:	8f 81       	ldd	r24, Y+7	; 0x07
     79a:	89 83       	std	Y+1, r24	; 0x01
     79c:	88 85       	ldd	r24, Y+8	; 0x08
     79e:	8a 83       	std	Y+2, r24	; 0x02
     7a0:	89 85       	ldd	r24, Y+9	; 0x09
     7a2:	8b 83       	std	Y+3, r24	; 0x03
     7a4:	1c 82       	std	Y+4, r1	; 0x04
     7a6:	64 e5       	ldi	r22, 0x54	; 84
     7a8:	ce 01       	movw	r24, r28
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <sensor_to_esp_buff>
     7b0:	61 2f       	mov	r22, r17
     7b2:	88 e6       	ldi	r24, 0x68	; 104
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 6f 02 	call	0x4de	; 0x4de <esp_send>
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <esp_send_temp+0xe8>
     7be:	8f ef       	ldi	r24, 0xFF	; 255
     7c0:	01 c0       	rjmp	.+2      	; 0x7c4 <esp_send_temp+0xe8>
     7c2:	8c ef       	ldi	r24, 0xFC	; 252
     7c4:	2f 96       	adiw	r28, 0x0f	; 15
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	f8 94       	cli
     7ca:	de bf       	out	0x3e, r29	; 62
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	1f 91       	pop	r17
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	08 95       	ret

000007dc <esp_send_H2O>:
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	2e 97       	sbiw	r28, 0x0e	; 14
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	f8 2e       	mov	r15, r24
     7f8:	88 e3       	ldi	r24, 0x38	; 56
     7fa:	99 e3       	ldi	r25, 0x39	; 57
     7fc:	9a 83       	std	Y+2, r25	; 0x02
     7fe:	89 83       	std	Y+1, r24	; 0x01
     800:	1b 82       	std	Y+3, r1	; 0x03
     802:	68 e0       	ldi	r22, 0x08	; 8
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	0e 94 80 09 	call	0x1300	; 0x1300 <mcp_send_remoteframe>
     80a:	8c ed       	ldi	r24, 0xDC	; 220
     80c:	95 e0       	ldi	r25, 0x05	; 5
     80e:	9e 87       	std	Y+14, r25	; 0x0e
     810:	8d 87       	std	Y+13, r24	; 0x0d
     812:	00 ed       	ldi	r16, 0xD0	; 208
     814:	17 e0       	ldi	r17, 0x07	; 7
     816:	03 c0       	rjmp	.+6      	; 0x81e <esp_send_H2O+0x42>
     818:	c8 01       	movw	r24, r16
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	f1 f7       	brne	.-4      	; 0x81a <esp_send_H2O+0x3e>
     81e:	83 e0       	ldi	r24, 0x03	; 3
     820:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <mcp_check_flag>
     824:	81 11       	cpse	r24, r1
     826:	07 c0       	rjmp	.+14     	; 0x836 <esp_send_H2O+0x5a>
     828:	8d 85       	ldd	r24, Y+13	; 0x0d
     82a:	9e 85       	ldd	r25, Y+14	; 0x0e
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	9e 87       	std	Y+14, r25	; 0x0e
     830:	8d 87       	std	Y+13, r24	; 0x0d
     832:	89 2b       	or	r24, r25
     834:	89 f7       	brne	.-30     	; 0x818 <esp_send_H2O+0x3c>
     836:	8d 85       	ldd	r24, Y+13	; 0x0d
     838:	9e 85       	ldd	r25, Y+14	; 0x0e
     83a:	89 2b       	or	r24, r25
     83c:	b9 f1       	breq	.+110    	; 0x8ac <esp_send_H2O+0xd0>
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	0e 94 4b 09 	call	0x1296	; 0x1296 <mcp_clear_flag>
     844:	8c ed       	ldi	r24, 0xDC	; 220
     846:	95 e0       	ldi	r25, 0x05	; 5
     848:	9e 87       	std	Y+14, r25	; 0x0e
     84a:	8d 87       	std	Y+13, r24	; 0x0d
     84c:	00 ed       	ldi	r16, 0xD0	; 208
     84e:	17 e0       	ldi	r17, 0x07	; 7
     850:	03 c0       	rjmp	.+6      	; 0x858 <esp_send_H2O+0x7c>
     852:	c8 01       	movw	r24, r16
     854:	01 97       	sbiw	r24, 0x01	; 1
     856:	f1 f7       	brne	.-4      	; 0x854 <esp_send_H2O+0x78>
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <mcp_check_flag>
     85e:	81 11       	cpse	r24, r1
     860:	07 c0       	rjmp	.+14     	; 0x870 <esp_send_H2O+0x94>
     862:	8d 85       	ldd	r24, Y+13	; 0x0d
     864:	9e 85       	ldd	r25, Y+14	; 0x0e
     866:	01 97       	sbiw	r24, 0x01	; 1
     868:	9e 87       	std	Y+14, r25	; 0x0e
     86a:	8d 87       	std	Y+13, r24	; 0x0d
     86c:	89 2b       	or	r24, r25
     86e:	89 f7       	brne	.-30     	; 0x852 <esp_send_H2O+0x76>
     870:	8d 85       	ldd	r24, Y+13	; 0x0d
     872:	9e 85       	ldd	r25, Y+14	; 0x0e
     874:	89 2b       	or	r24, r25
     876:	e1 f0       	breq	.+56     	; 0x8b0 <esp_send_H2O+0xd4>
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	0e 94 4b 09 	call	0x1296	; 0x1296 <mcp_clear_flag>
     87e:	be 01       	movw	r22, r28
     880:	6c 5f       	subi	r22, 0xFC	; 252
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 c3 07 	call	0xf86	; 0xf86 <mcp_get_rx_data>
     88a:	8c 81       	ldd	r24, Y+4	; 0x04
     88c:	89 83       	std	Y+1, r24	; 0x01
     88e:	8d 81       	ldd	r24, Y+5	; 0x05
     890:	8a 83       	std	Y+2, r24	; 0x02
     892:	1b 82       	std	Y+3, r1	; 0x03
     894:	68 e4       	ldi	r22, 0x48	; 72
     896:	ce 01       	movw	r24, r28
     898:	01 96       	adiw	r24, 0x01	; 1
     89a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <sensor_to_esp_buff>
     89e:	6f 2d       	mov	r22, r15
     8a0:	88 e6       	ldi	r24, 0x68	; 104
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 6f 02 	call	0x4de	; 0x4de <esp_send>
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <esp_send_H2O+0xd6>
     8ac:	8f ef       	ldi	r24, 0xFF	; 255
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <esp_send_H2O+0xd6>
     8b0:	8c ef       	ldi	r24, 0xFC	; 252
     8b2:	2e 96       	adiw	r28, 0x0e	; 14
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	f8 94       	cli
     8b8:	de bf       	out	0x3e, r29	; 62
     8ba:	0f be       	out	0x3f, r0	; 63
     8bc:	cd bf       	out	0x3d, r28	; 61
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	08 95       	ret

000008ca <esp_init>:

void esp_init()
{
	uint8_t at_flag;
	
	uart_set_rx_int(UART0, false);
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	0e 94 3d 10 	call	0x207a	; 0x207a <uart_set_rx_int>
	
	uart_send_until(UART0, "AT\r\n", 0);
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	50 e0       	ldi	r21, 0x00	; 0
     8d6:	6b ea       	ldi	r22, 0xAB	; 171
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <uart_send_until>

	
	at_flag = check_strings(200, 2, "OK\r\n", "ERROR\r\n");
     8e0:	88 e4       	ldi	r24, 0x48	; 72
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	9f 93       	push	r25
     8e6:	8f 93       	push	r24
     8e8:	89 e8       	ldi	r24, 0x89	; 137
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	9f 93       	push	r25
     8ee:	8f 93       	push	r24
     8f0:	1f 92       	push	r1
     8f2:	82 e0       	ldi	r24, 0x02	; 2
     8f4:	8f 93       	push	r24
     8f6:	1f 92       	push	r1
     8f8:	88 ec       	ldi	r24, 0xC8	; 200
     8fa:	8f 93       	push	r24
     8fc:	0e 94 6e 10 	call	0x20dc	; 0x20dc <check_strings>
	if (!at_flag)
     900:	2d b7       	in	r18, 0x3d	; 61
     902:	3e b7       	in	r19, 0x3e	; 62
     904:	28 5f       	subi	r18, 0xF8	; 248
     906:	3f 4f       	sbci	r19, 0xFF	; 255
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	3e bf       	out	0x3e, r19	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	2d bf       	out	0x3d, r18	; 61
     912:	81 11       	cpse	r24, r1
     914:	03 c0       	rjmp	.+6      	; 0x91c <esp_init+0x52>
	{
		no_data_alarm();
     916:	0e 94 26 02 	call	0x44c	; 0x44c <no_data_alarm>
     91a:	07 c0       	rjmp	.+14     	; 0x92a <esp_init+0x60>
	}
	else if (at_flag == AT_ERROR)
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	19 f4       	brne	.+6      	; 0x926 <esp_init+0x5c>
	{
		error_alarm();
     920:	0e 94 55 02 	call	0x4aa	; 0x4aa <error_alarm>
     924:	02 c0       	rjmp	.+4      	; 0x92a <esp_init+0x60>
	}
	else
	{
		alarm();
     926:	0e 94 40 02 	call	0x480	; 0x480 <alarm>
	}
	
	
	uart_send_until(UART0, "AT+CWMODE=1\r\n", 0);
     92a:	40 e0       	ldi	r20, 0x00	; 0
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	60 eb       	ldi	r22, 0xB0	; 176
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <uart_send_until>
	
	at_flag = check_strings(200, 2, "OK\r\n", "ERROR\r\n");
     938:	88 e4       	ldi	r24, 0x48	; 72
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	9f 93       	push	r25
     93e:	8f 93       	push	r24
     940:	89 e8       	ldi	r24, 0x89	; 137
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	9f 93       	push	r25
     946:	8f 93       	push	r24
     948:	1f 92       	push	r1
     94a:	82 e0       	ldi	r24, 0x02	; 2
     94c:	8f 93       	push	r24
     94e:	1f 92       	push	r1
     950:	88 ec       	ldi	r24, 0xC8	; 200
     952:	8f 93       	push	r24
     954:	0e 94 6e 10 	call	0x20dc	; 0x20dc <check_strings>
	if (!at_flag)
     958:	2d b7       	in	r18, 0x3d	; 61
     95a:	3e b7       	in	r19, 0x3e	; 62
     95c:	28 5f       	subi	r18, 0xF8	; 248
     95e:	3f 4f       	sbci	r19, 0xFF	; 255
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	3e bf       	out	0x3e, r19	; 62
     966:	0f be       	out	0x3f, r0	; 63
     968:	2d bf       	out	0x3d, r18	; 61
     96a:	81 11       	cpse	r24, r1
     96c:	03 c0       	rjmp	.+6      	; 0x974 <esp_init+0xaa>
	{
		no_data_alarm();
     96e:	0e 94 26 02 	call	0x44c	; 0x44c <no_data_alarm>
     972:	04 c0       	rjmp	.+8      	; 0x97c <esp_init+0xb2>
	}
	else if (at_flag == AT_ERROR)
     974:	82 30       	cpi	r24, 0x02	; 2
     976:	11 f4       	brne	.+4      	; 0x97c <esp_init+0xb2>
	{
		error_alarm();
     978:	0e 94 55 02 	call	0x4aa	; 0x4aa <error_alarm>
	}
	
	
	uart_send_until(UART0, "AT+CIPMUX=1\r\n", 0);
     97c:	40 e0       	ldi	r20, 0x00	; 0
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	6e eb       	ldi	r22, 0xBE	; 190
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <uart_send_until>
	at_flag = check_strings(200, 2, "OK\r\n", "ERROR\r\n");
     98a:	88 e4       	ldi	r24, 0x48	; 72
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	9f 93       	push	r25
     990:	8f 93       	push	r24
     992:	89 e8       	ldi	r24, 0x89	; 137
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	9f 93       	push	r25
     998:	8f 93       	push	r24
     99a:	1f 92       	push	r1
     99c:	82 e0       	ldi	r24, 0x02	; 2
     99e:	8f 93       	push	r24
     9a0:	1f 92       	push	r1
     9a2:	88 ec       	ldi	r24, 0xC8	; 200
     9a4:	8f 93       	push	r24
     9a6:	0e 94 6e 10 	call	0x20dc	; 0x20dc <check_strings>
	if (!at_flag)
     9aa:	2d b7       	in	r18, 0x3d	; 61
     9ac:	3e b7       	in	r19, 0x3e	; 62
     9ae:	28 5f       	subi	r18, 0xF8	; 248
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	3e bf       	out	0x3e, r19	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	2d bf       	out	0x3d, r18	; 61
     9bc:	81 11       	cpse	r24, r1
     9be:	03 c0       	rjmp	.+6      	; 0x9c6 <esp_init+0xfc>
	{
		no_data_alarm();
     9c0:	0e 94 26 02 	call	0x44c	; 0x44c <no_data_alarm>
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <esp_init+0x104>
	}
	else if (at_flag == AT_ERROR)
     9c6:	82 30       	cpi	r24, 0x02	; 2
     9c8:	11 f4       	brne	.+4      	; 0x9ce <esp_init+0x104>
	{
		error_alarm();
     9ca:	0e 94 55 02 	call	0x4aa	; 0x4aa <error_alarm>
	}
	
	
	uart_send_until(UART0, "AT+CIFSR\r\n", 0);
     9ce:	40 e0       	ldi	r20, 0x00	; 0
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	6c ec       	ldi	r22, 0xCC	; 204
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <uart_send_until>
	at_flag = check_strings(200, 2, "OK\r\n", "ERROR\r\n");
     9dc:	88 e4       	ldi	r24, 0x48	; 72
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	9f 93       	push	r25
     9e2:	8f 93       	push	r24
     9e4:	89 e8       	ldi	r24, 0x89	; 137
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	9f 93       	push	r25
     9ea:	8f 93       	push	r24
     9ec:	1f 92       	push	r1
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	8f 93       	push	r24
     9f2:	1f 92       	push	r1
     9f4:	88 ec       	ldi	r24, 0xC8	; 200
     9f6:	8f 93       	push	r24
     9f8:	0e 94 6e 10 	call	0x20dc	; 0x20dc <check_strings>
	if (!at_flag)
     9fc:	2d b7       	in	r18, 0x3d	; 61
     9fe:	3e b7       	in	r19, 0x3e	; 62
     a00:	28 5f       	subi	r18, 0xF8	; 248
     a02:	3f 4f       	sbci	r19, 0xFF	; 255
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	3e bf       	out	0x3e, r19	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	2d bf       	out	0x3d, r18	; 61
     a0e:	81 11       	cpse	r24, r1
     a10:	03 c0       	rjmp	.+6      	; 0xa18 <esp_init+0x14e>
	{
		no_data_alarm();
     a12:	0e 94 26 02 	call	0x44c	; 0x44c <no_data_alarm>
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <esp_init+0x156>
	}
	else if (at_flag == AT_ERROR)
     a18:	82 30       	cpi	r24, 0x02	; 2
     a1a:	11 f4       	brne	.+4      	; 0xa20 <esp_init+0x156>
	{
		error_alarm();
     a1c:	0e 94 55 02 	call	0x4aa	; 0x4aa <error_alarm>
	}
	
	uart_send_until(UART0, "AT+CIPSERVER=1,80\r\n", 0);
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	67 ed       	ldi	r22, 0xD7	; 215
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <uart_send_until>
	at_flag = check_strings(200, 2, "OK\r\n", "ERROR\r\n");
     a2e:	88 e4       	ldi	r24, 0x48	; 72
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	9f 93       	push	r25
     a34:	8f 93       	push	r24
     a36:	89 e8       	ldi	r24, 0x89	; 137
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	9f 93       	push	r25
     a3c:	8f 93       	push	r24
     a3e:	1f 92       	push	r1
     a40:	82 e0       	ldi	r24, 0x02	; 2
     a42:	8f 93       	push	r24
     a44:	1f 92       	push	r1
     a46:	88 ec       	ldi	r24, 0xC8	; 200
     a48:	8f 93       	push	r24
     a4a:	0e 94 6e 10 	call	0x20dc	; 0x20dc <check_strings>
	if (!at_flag)
     a4e:	2d b7       	in	r18, 0x3d	; 61
     a50:	3e b7       	in	r19, 0x3e	; 62
     a52:	28 5f       	subi	r18, 0xF8	; 248
     a54:	3f 4f       	sbci	r19, 0xFF	; 255
     a56:	0f b6       	in	r0, 0x3f	; 63
     a58:	f8 94       	cli
     a5a:	3e bf       	out	0x3e, r19	; 62
     a5c:	0f be       	out	0x3f, r0	; 63
     a5e:	2d bf       	out	0x3d, r18	; 61
     a60:	81 11       	cpse	r24, r1
     a62:	03 c0       	rjmp	.+6      	; 0xa6a <esp_init+0x1a0>
	{
		no_data_alarm();
     a64:	0e 94 26 02 	call	0x44c	; 0x44c <no_data_alarm>
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <esp_init+0x1a8>
	}
	else if (at_flag == AT_ERROR)
     a6a:	82 30       	cpi	r24, 0x02	; 2
     a6c:	11 f4       	brne	.+4      	; 0xa72 <esp_init+0x1a8>
	{
		error_alarm();
     a6e:	0e 94 55 02 	call	0x4aa	; 0x4aa <error_alarm>
	}
	
	uart_send_until(UART0, "AT+CIPSTO=1000\r\n", 0);
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	50 e0       	ldi	r21, 0x00	; 0
     a76:	6b ee       	ldi	r22, 0xEB	; 235
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <uart_send_until>
	at_flag = check_strings(200, 2, "OK\r\n", "ERROR\r\n");
     a80:	88 e4       	ldi	r24, 0x48	; 72
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	9f 93       	push	r25
     a86:	8f 93       	push	r24
     a88:	89 e8       	ldi	r24, 0x89	; 137
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	9f 93       	push	r25
     a8e:	8f 93       	push	r24
     a90:	1f 92       	push	r1
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	8f 93       	push	r24
     a96:	1f 92       	push	r1
     a98:	88 ec       	ldi	r24, 0xC8	; 200
     a9a:	8f 93       	push	r24
     a9c:	0e 94 6e 10 	call	0x20dc	; 0x20dc <check_strings>
	if (!at_flag)
     aa0:	2d b7       	in	r18, 0x3d	; 61
     aa2:	3e b7       	in	r19, 0x3e	; 62
     aa4:	28 5f       	subi	r18, 0xF8	; 248
     aa6:	3f 4f       	sbci	r19, 0xFF	; 255
     aa8:	0f b6       	in	r0, 0x3f	; 63
     aaa:	f8 94       	cli
     aac:	3e bf       	out	0x3e, r19	; 62
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	2d bf       	out	0x3d, r18	; 61
     ab2:	81 11       	cpse	r24, r1
     ab4:	03 c0       	rjmp	.+6      	; 0xabc <esp_init+0x1f2>
	{
		no_data_alarm();
     ab6:	0e 94 26 02 	call	0x44c	; 0x44c <no_data_alarm>
     aba:	04 c0       	rjmp	.+8      	; 0xac4 <esp_init+0x1fa>
	}
	else if (at_flag == AT_ERROR)
     abc:	82 30       	cpi	r24, 0x02	; 2
     abe:	11 f4       	brne	.+4      	; 0xac4 <esp_init+0x1fa>
	{
		error_alarm();
     ac0:	0e 94 55 02 	call	0x4aa	; 0x4aa <error_alarm>
	}
	
	uart_set_rx_int(UART0, true);
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	0e 94 3d 10 	call	0x207a	; 0x207a <uart_set_rx_int>
     acc:	08 95       	ret

00000ace <main>:
//********************************************************************************************************

//********************************************************************************************************

int main(void)
{
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	cd b7       	in	r28, 0x3d	; 61
     ad4:	de b7       	in	r29, 0x3e	; 62
     ad6:	28 97       	sbiw	r28, 0x08	; 8
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
	uint8_t f_st = SUCCESS;
	uint8_t receive_buff[9];
	uint8_t i = 0;
	uint8_t h2o[3] = {0};
	uint8_t temp[4] = {0};
	char ch_num[2] = {0};
     ae2:	1a 82       	std	Y+2, r1	; 0x02
     ae4:	19 82       	std	Y+1, r1	; 0x01
		
	char esp_data[12] = {0};
	char break_f[6];
	uint8_t barrier_flag = 0;
	sei();
     ae6:	78 94       	sei

	DIO_SET_DIR(31, DIO_OUTPUT);
     ae8:	61 e0       	ldi	r22, 0x01	; 1
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(29, DIO_OUTPUT);
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(0, DIO_OUTPUT);
     af8:	61 e0       	ldi	r22, 0x01	; 1
     afa:	88 e0       	ldi	r24, 0x08	; 8
     afc:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(15, DIO_OUTPUT);	
     b00:	61 e0       	ldi	r22, 0x01	; 1
     b02:	8f e1       	ldi	r24, 0x1F	; 31
     b04:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(30, DIO_OUTPUT);
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	
	

	list = create_list(); // create the queue that is going to hold the esp requests
     b10:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <create_list>
     b14:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <list+0x1>
     b18:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <list>
	
	motors_init();
     b1c:	0e 94 67 01 	call	0x2ce	; 0x2ce <motors_init>
	
	//move_forward();
	
	uart_init(UART0, 9600, DATA_BITS_8, TX_RX, PARITY_NO, STOP_BITS_1, TX_R_RX_F);
     b20:	a1 2c       	mov	r10, r1
     b22:	c1 2c       	mov	r12, r1
     b24:	e1 2c       	mov	r14, r1
     b26:	03 e0       	ldi	r16, 0x03	; 3
     b28:	23 e0       	ldi	r18, 0x03	; 3
     b2a:	40 e8       	ldi	r20, 0x80	; 128
     b2c:	55 e2       	ldi	r21, 0x25	; 37
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <uart_init>
	
	uart_set_rx_int(UART0, true);
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	0e 94 3d 10 	call	0x207a	; 0x207a <uart_set_rx_int>
	uart_set_rx_isr(UART0, uart_rx_handler);
     b40:	6d ec       	ldi	r22, 0xCD	; 205
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	0e 94 48 10 	call	0x2090	; 0x2090 <uart_set_rx_isr>
	uart_send_until(UART0, "hello\r\n", 0);
     b4a:	40 e0       	ldi	r20, 0x00	; 0
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	6c ef       	ldi	r22, 0xFC	; 252
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <uart_send_until>
	
	millis_add_ovf_isr(timer0_ovf_handler);
     b58:	8b ec       	ldi	r24, 0xCB	; 203
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <millis_add_ovf_isr>
	
	esp_init();
     b60:	0e 94 65 04 	call	0x8ca	; 0x8ca <esp_init>

	
#if MCP == 1
	if (mcp_init() == ERROR)
     b64:	0e 94 52 08 	call	0x10a4	; 0x10a4 <mcp_init>
     b68:	81 11       	cpse	r24, r1
     b6a:	05 c0       	rjmp	.+10     	; 0xb76 <main+0xa8>
	{
		uart_send_str(UART0, "SPI ERROR");	
     b6c:	64 e0       	ldi	r22, 0x04	; 4
     b6e:	71 e0       	ldi	r23, 0x01	; 1
     b70:	0e 94 1b 10 	call	0x2036	; 0x2036 <uart_send_str>
     b74:	ff cf       	rjmp	.-2      	; 0xb74 <main+0xa6>
		while (1);
	}
	
	mcp_set_tx_id(MCP_TX(0), 0, 0x058f);//000 1111 0111 001 10 00110101 10001111
     b76:	2f e8       	ldi	r18, 0x8F	; 143
     b78:	35 e0       	ldi	r19, 0x05	; 5
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	0e 94 55 07 	call	0xeaa	; 0xeaa <mcp_set_tx_id>
	mcp_set_tx_id(MCP_TX(1), 0, 0x057f);//000 1111 0111 001 10 00110101 10001111
     b86:	2f e7       	ldi	r18, 0x7F	; 127
     b88:	35 e0       	ldi	r19, 0x05	; 5
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	50 e0       	ldi	r21, 0x00	; 0
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	0e 94 55 07 	call	0xeaa	; 0xeaa <mcp_set_tx_id>
	mcp_set_tx_id(MCP_TX(2), 0, 0x056f);//000 1111 0111 001 10 00110101 10001111
     b96:	2f e6       	ldi	r18, 0x6F	; 111
     b98:	35 e0       	ldi	r19, 0x05	; 5
     b9a:	40 e0       	ldi	r20, 0x00	; 0
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	84 e0       	ldi	r24, 0x04	; 4
     ba2:	0e 94 55 07 	call	0xeaa	; 0xeaa <mcp_set_tx_id>
#endif



	 uart_send_until(UART0, "READY", 0);
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	6e e0       	ldi	r22, 0x0E	; 14
     bac:	71 e0       	ldi	r23, 0x01	; 1
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <uart_send_until>
	uint8_t temp[4] = {0};
	char ch_num[2] = {0};
		
	char esp_data[12] = {0};
	char break_f[6];
	uint8_t barrier_flag = 0;
     bb4:	00 e0       	ldi	r16, 0x00	; 0

//********************************************************************************************************

int main(void)
{
	uint8_t f_st = SUCCESS;
     bb6:	11 e0       	ldi	r17, 0x01	; 1
						esp_send("{BB}", ch_num);
					}
					else if (break_f[1] == '0')
					{
						barrier_flag = 0;
						esp_send("{BN}", ch_num);
     bb8:	ce 01       	movw	r24, r28
     bba:	01 96       	adiw	r24, 0x01	; 1
     bbc:	7c 01       	movw	r14, r24
		/* Replace with your application code */
		while (1)
		{

#if MCP == 1
			if (mcp_check_flag(TX1IF_BIT))
     bbe:	85 e0       	ldi	r24, 0x05	; 5
     bc0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <mcp_check_flag>
     bc4:	88 23       	and	r24, r24
     bc6:	19 f0       	breq	.+6      	; 0xbce <main+0x100>
			{
				//UART_sendStrByMark("SENT1\r\n", 0);
				mcp_clear_flag(TX1IF_BIT);
     bc8:	85 e0       	ldi	r24, 0x05	; 5
     bca:	0e 94 4b 09 	call	0x1296	; 0x1296 <mcp_clear_flag>
			}
			
			if (mcp_check_flag(TX2IF_BIT))
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <mcp_check_flag>
     bd4:	88 23       	and	r24, r24
     bd6:	19 f0       	breq	.+6      	; 0xbde <main+0x110>
			{
				//UART_sendStrByMark("SENT2\r\n", 0);
				mcp_clear_flag(TX2IF_BIT);
     bd8:	87 e0       	ldi	r24, 0x07	; 7
     bda:	0e 94 4b 09 	call	0x1296	; 0x1296 <mcp_clear_flag>
			}
			
			if (mcp_check_flag(RX1IF_BIT))
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <mcp_check_flag>
     be4:	88 23       	and	r24, r24
     be6:	09 f1       	breq	.+66     	; 0xc2a <main+0x15c>
			{
				
				DIO_TOGGLE(31);
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	0e 94 af 00 	call	0x15e	; 0x15e <dio_togg_pin>
				//PORTA ^= (1 << 2);
				mcp_clear_flag(RX1IF_BIT);
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	0e 94 4b 09 	call	0x1296	; 0x1296 <mcp_clear_flag>
				mcp_get_rx_data(MCP_RX(1), break_f);
     bf4:	be 01       	movw	r22, r28
     bf6:	6d 5f       	subi	r22, 0xFD	; 253
     bf8:	7f 4f       	sbci	r23, 0xFF	; 255
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	0e 94 c3 07 	call	0xf86	; 0xf86 <mcp_get_rx_data>
				
				if (break_f[0] == 'B')
     c00:	8b 81       	ldd	r24, Y+3	; 0x03
     c02:	82 34       	cpi	r24, 0x42	; 66
     c04:	91 f4       	brne	.+36     	; 0xc2a <main+0x15c>
				{
					
					if (break_f[1] == '1')
     c06:	8c 81       	ldd	r24, Y+4	; 0x04
     c08:	81 33       	cpi	r24, 0x31	; 49
     c0a:	39 f4       	brne	.+14     	; 0xc1a <main+0x14c>
					{
						barrier_flag = 1;
						esp_send("{BB}", ch_num);
     c0c:	6e 2d       	mov	r22, r14
     c0e:	8e e8       	ldi	r24, 0x8E	; 142
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 6f 02 	call	0x4de	; 0x4de <esp_send>
				if (break_f[0] == 'B')
				{
					
					if (break_f[1] == '1')
					{
						barrier_flag = 1;
     c16:	01 e0       	ldi	r16, 0x01	; 1
     c18:	08 c0       	rjmp	.+16     	; 0xc2a <main+0x15c>
						esp_send("{BB}", ch_num);
					}
					else if (break_f[1] == '0')
     c1a:	80 33       	cpi	r24, 0x30	; 48
     c1c:	31 f4       	brne	.+12     	; 0xc2a <main+0x15c>
					{
						barrier_flag = 0;
						esp_send("{BN}", ch_num);
     c1e:	6e 2d       	mov	r22, r14
     c20:	83 e9       	ldi	r24, 0x93	; 147
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 6f 02 	call	0x4de	; 0x4de <esp_send>
						barrier_flag = 1;
						esp_send("{BB}", ch_num);
					}
					else if (break_f[1] == '0')
					{
						barrier_flag = 0;
     c28:	00 e0       	ldi	r16, 0x00	; 0
				//esp_send_alert(break_f, ch_num);		
			}
#endif
			
			//ESP CODE
			if (list->size > 0)
     c2a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <list>
     c2e:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <list+0x1>
     c32:	fc 01       	movw	r30, r24
     c34:	24 81       	ldd	r18, Z+4	; 0x04
     c36:	35 81       	ldd	r19, Z+5	; 0x05
     c38:	23 2b       	or	r18, r19
     c3a:	09 f2       	breq	.-126    	; 0xbbe <main+0xf0>
			{
				
				pop(list, e_ptr, sizeof(element_t));
     c3c:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <e_ptr>
     c40:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <e_ptr+0x1>
     c44:	43 e0       	ldi	r20, 0x03	; 3
     c46:	50 e0       	ldi	r21, 0x00	; 0
     c48:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <pop>
				uart_send_until(UART0, "\r\nsize > 1 \r\n", 0);
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	64 e1       	ldi	r22, 0x14	; 20
     c52:	71 e0       	ldi	r23, 0x01	; 1
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <uart_send_until>
/*				DIO_TOGGLE(0);*/
				
				//then it's an esp request
				if (e_ptr->request_type == 'S')
     c5a:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <e_ptr>
     c5e:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <e_ptr+0x1>
     c62:	82 81       	ldd	r24, Z+2	; 0x02
     c64:	83 35       	cpi	r24, 0x53	; 83
     c66:	a9 f4       	brne	.+42     	; 0xc92 <main+0x1c4>
				{
					f_st = esp_send_smoke(ch_num[0]);
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <esp_send_smoke>
     c6e:	18 2f       	mov	r17, r24
					
					if (f_st == TX1_FAIL)
     c70:	8e 3f       	cpi	r24, 0xFE	; 254
     c72:	31 f4       	brne	.+12     	; 0xc80 <main+0x1b2>
					{
						uart_send_str(UART0, "\r\nSMOKE CAN TX ERROR\r\n");
     c74:	62 e2       	ldi	r22, 0x22	; 34
     c76:	71 e0       	ldi	r23, 0x01	; 1
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	0e 94 1b 10 	call	0x2036	; 0x2036 <uart_send_str>
     c7e:	79 c0       	rjmp	.+242    	; 0xd72 <main+0x2a4>
					}
					else if (f_st == RX1_FAIL)
     c80:	8b 3f       	cpi	r24, 0xFB	; 251
     c82:	09 f0       	breq	.+2      	; 0xc86 <main+0x1b8>
     c84:	76 c0       	rjmp	.+236    	; 0xd72 <main+0x2a4>
					{
						uart_send_str(UART0, "\r\nSMOKE CAN RX ERROR\r\n");
     c86:	69 e3       	ldi	r22, 0x39	; 57
     c88:	71 e0       	ldi	r23, 0x01	; 1
     c8a:	80 e0       	ldi	r24, 0x00	; 0
     c8c:	0e 94 1b 10 	call	0x2036	; 0x2036 <uart_send_str>
     c90:	70 c0       	rjmp	.+224    	; 0xd72 <main+0x2a4>
					
					
					
					
				}
				else if (e_ptr->request_type == 'T')
     c92:	82 81       	ldd	r24, Z+2	; 0x02
     c94:	84 35       	cpi	r24, 0x54	; 84
     c96:	a9 f4       	brne	.+42     	; 0xcc2 <main+0x1f4>
				{
					f_st = esp_send_temp(ch_num[0]);
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <esp_send_temp>
     c9e:	18 2f       	mov	r17, r24
					
					if (f_st == TX0_FAIL)
     ca0:	8f 3f       	cpi	r24, 0xFF	; 255
     ca2:	31 f4       	brne	.+12     	; 0xcb0 <main+0x1e2>
					{
						uart_send_str(UART0, "\r\nTEMP CAN TX ERROR\r\n");
     ca4:	60 e5       	ldi	r22, 0x50	; 80
     ca6:	71 e0       	ldi	r23, 0x01	; 1
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	0e 94 1b 10 	call	0x2036	; 0x2036 <uart_send_str>
     cae:	61 c0       	rjmp	.+194    	; 0xd72 <main+0x2a4>
					}
					else if (f_st == RX0_FAIL)
     cb0:	8c 3f       	cpi	r24, 0xFC	; 252
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <main+0x1e8>
     cb4:	5e c0       	rjmp	.+188    	; 0xd72 <main+0x2a4>
					{
						uart_send_str(UART0, "\r\nTEMP CAN RX ERROR\r\n");
     cb6:	66 e6       	ldi	r22, 0x66	; 102
     cb8:	71 e0       	ldi	r23, 0x01	; 1
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	0e 94 1b 10 	call	0x2036	; 0x2036 <uart_send_str>
     cc0:	58 c0       	rjmp	.+176    	; 0xd72 <main+0x2a4>
					}
				}
				else if (e_ptr->request_type == 'H')
     cc2:	82 81       	ldd	r24, Z+2	; 0x02
     cc4:	88 34       	cpi	r24, 0x48	; 72
     cc6:	a1 f4       	brne	.+40     	; 0xcf0 <main+0x222>
				{
					esp_send_H2O(ch_num[0]);
     cc8:	89 81       	ldd	r24, Y+1	; 0x01
     cca:	0e 94 ee 03 	call	0x7dc	; 0x7dc <esp_send_H2O>
					
					if (f_st == TX0_FAIL)
     cce:	1f 3f       	cpi	r17, 0xFF	; 255
     cd0:	31 f4       	brne	.+12     	; 0xcde <main+0x210>
					{
						uart_send_str(UART0, "\r\nhumidity CAN TX ERROR\r\n");
     cd2:	6c e7       	ldi	r22, 0x7C	; 124
     cd4:	71 e0       	ldi	r23, 0x01	; 1
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	0e 94 1b 10 	call	0x2036	; 0x2036 <uart_send_str>
     cdc:	4a c0       	rjmp	.+148    	; 0xd72 <main+0x2a4>
					}
					else if (f_st == RX0_FAIL)
     cde:	1c 3f       	cpi	r17, 0xFC	; 252
     ce0:	09 f0       	breq	.+2      	; 0xce4 <main+0x216>
     ce2:	47 c0       	rjmp	.+142    	; 0xd72 <main+0x2a4>
					{
						uart_send_str(UART0, "\r\nhumidity CAN RX ERROR\r\n");
     ce4:	66 e9       	ldi	r22, 0x96	; 150
     ce6:	71 e0       	ldi	r23, 0x01	; 1
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	0e 94 1b 10 	call	0x2036	; 0x2036 <uart_send_str>
     cee:	41 c0       	rjmp	.+130    	; 0xd72 <main+0x2a4>
					}
				}
				else if (e_ptr->request_type == 'D')
     cf0:	82 81       	ldd	r24, Z+2	; 0x02
     cf2:	84 34       	cpi	r24, 0x44	; 68
     cf4:	f1 f5       	brne	.+124    	; 0xd72 <main+0x2a4>
				{
					if ( e_ptr->str[0] == 'R')
     cf6:	01 90       	ld	r0, Z+
     cf8:	f0 81       	ld	r31, Z
     cfa:	e0 2d       	mov	r30, r0
     cfc:	80 81       	ld	r24, Z
     cfe:	82 35       	cpi	r24, 0x52	; 82
     d00:	19 f4       	brne	.+6      	; 0xd08 <main+0x23a>
					{
						turn_right();
     d02:	0e 94 34 01 	call	0x268	; 0x268 <turn_right>
     d06:	35 c0       	rjmp	.+106    	; 0xd72 <main+0x2a4>
					}
					else if ( e_ptr->str[0] == 'L')
     d08:	80 81       	ld	r24, Z
     d0a:	8c 34       	cpi	r24, 0x4C	; 76
     d0c:	19 f4       	brne	.+6      	; 0xd14 <main+0x246>
					{
						turn_left();
     d0e:	0e 94 56 01 	call	0x2ac	; 0x2ac <turn_left>
     d12:	2f c0       	rjmp	.+94     	; 0xd72 <main+0x2a4>
					}
					else if ( e_ptr->str[0] == 'F')
     d14:	80 81       	ld	r24, Z
     d16:	86 34       	cpi	r24, 0x46	; 70
     d18:	99 f4       	brne	.+38     	; 0xd40 <main+0x272>
					{
						if (!barrier_flag)
     d1a:	01 11       	cpse	r16, r1
     d1c:	2a c0       	rjmp	.+84     	; 0xd72 <main+0x2a4>
	DIO_SET_VAL(R_BACKWARD, DIO_LOW);
}

inline void move_forward()
{
	DIO_SET_VAL(R_FORWARD, DIO_HIGH);
     d1e:	61 e0       	ldi	r22, 0x01	; 1
     d20:	88 e0       	ldi	r24, 0x08	; 8
     d22:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
	DIO_SET_VAL(R_BACKWARD, DIO_LOW);
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	89 e0       	ldi	r24, 0x09	; 9
     d2a:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
	DIO_SET_VAL(L_FORWARD, DIO_HIGH);
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	8a e0       	ldi	r24, 0x0A	; 10
     d32:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
	DIO_SET_VAL(L_BACKWARD, DIO_LOW);
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	8b e0       	ldi	r24, 0x0B	; 11
     d3a:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     d3e:	19 c0       	rjmp	.+50     	; 0xd72 <main+0x2a4>
						{
							move_forward();
						}
						
					}
					else if ( e_ptr->str[0] == 'B')
     d40:	80 81       	ld	r24, Z
     d42:	82 34       	cpi	r24, 0x42	; 66
     d44:	19 f4       	brne	.+6      	; 0xd4c <main+0x27e>
					{
						move_backward();
     d46:	0e 94 45 01 	call	0x28a	; 0x28a <move_backward>
     d4a:	13 c0       	rjmp	.+38     	; 0xd72 <main+0x2a4>
					}
					else if ( e_ptr->str[0] == 'S')
     d4c:	80 81       	ld	r24, Z
     d4e:	83 35       	cpi	r24, 0x53	; 83
     d50:	81 f4       	brne	.+32     	; 0xd72 <main+0x2a4>
	DIO_SET_VAL(R_BACKWARD, DIO_HIGH);
}

inline void motors_stop()
{
	DIO_SET_VAL(L_FORWARD, DIO_LOW);
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	8a e0       	ldi	r24, 0x0A	; 10
     d56:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
	DIO_SET_VAL(L_BACKWARD, DIO_LOW);
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	8b e0       	ldi	r24, 0x0B	; 11
     d5e:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
	DIO_SET_VAL(R_FORWARD, DIO_LOW);
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	88 e0       	ldi	r24, 0x08	; 8
     d66:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
	DIO_SET_VAL(R_BACKWARD, DIO_LOW);
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	89 e0       	ldi	r24, 0x09	; 9
     d6e:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
						motors_stop();
					}
					
				}
				
				alarm();
     d72:	0e 94 40 02 	call	0x480	; 0x480 <alarm>
     d76:	23 cf       	rjmp	.-442    	; 0xbbe <main+0xf0>

00000d78 <mcp_reset>:

void mcp_send_dataframe(uint8_t tx_no, uint8_t * data_buff, uint8_t size) // could be inline
{
	mcp_set_tx_data(tx_no, DATA_FRAME, data_buff, size);
	mcp_tx_trigger(tx_no);
}
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	8c e0       	ldi	r24, 0x0C	; 12
     d7c:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     d80:	60 ec       	ldi	r22, 0xC0	; 192
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	8c e0       	ldi	r24, 0x0C	; 12
     d8c:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     d90:	08 95       	ret

00000d92 <mcp_read_reg>:
     d92:	0f 93       	push	r16
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	d8 2f       	mov	r29, r24
     d9c:	8b 01       	movw	r16, r22
     d9e:	c4 2f       	mov	r28, r20
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	8c e0       	ldi	r24, 0x0C	; 12
     da4:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     da8:	63 e0       	ldi	r22, 0x03	; 3
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     db0:	6d 2f       	mov	r22, r29
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     db8:	c1 30       	cpi	r28, 0x01	; 1
     dba:	39 f4       	brne	.+14     	; 0xdca <mcp_read_reg+0x38>
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     dc4:	f8 01       	movw	r30, r16
     dc6:	80 83       	st	Z, r24
     dc8:	05 c0       	rjmp	.+10     	; 0xdd4 <mcp_read_reg+0x42>
     dca:	4c 2f       	mov	r20, r28
     dcc:	b8 01       	movw	r22, r16
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <spi_read>
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	8c e0       	ldi	r24, 0x0C	; 12
     dd8:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	08 95       	ret

00000de6 <mcp_set_mask_or_filter>:
     de6:	cf 92       	push	r12
     de8:	df 92       	push	r13
     dea:	ef 92       	push	r14
     dec:	ff 92       	push	r15
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	d8 2f       	mov	r29, r24
     df4:	c6 2f       	mov	r28, r22
     df6:	69 01       	movw	r12, r18
     df8:	7a 01       	movw	r14, r20
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	8c e0       	ldi	r24, 0x0C	; 12
     dfe:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     e02:	62 e0       	ldi	r22, 0x02	; 2
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     e0a:	6d 2f       	mov	r22, r29
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     e12:	c1 30       	cpi	r28, 0x01	; 1
     e14:	71 f5       	brne	.+92     	; 0xe72 <mcp_set_mask_or_filter+0x8c>
     e16:	c7 01       	movw	r24, r14
     e18:	b6 01       	movw	r22, r12
     e1a:	05 2e       	mov	r0, r21
     e1c:	55 e1       	ldi	r21, 0x15	; 21
     e1e:	96 95       	lsr	r25
     e20:	87 95       	ror	r24
     e22:	77 95       	ror	r23
     e24:	67 95       	ror	r22
     e26:	5a 95       	dec	r21
     e28:	d1 f7       	brne	.-12     	; 0xe1e <mcp_set_mask_or_filter+0x38>
     e2a:	50 2d       	mov	r21, r0
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     e32:	d7 01       	movw	r26, r14
     e34:	c6 01       	movw	r24, r12
     e36:	07 2e       	mov	r0, r23
     e38:	7d e0       	ldi	r23, 0x0D	; 13
     e3a:	b6 95       	lsr	r27
     e3c:	a7 95       	ror	r26
     e3e:	97 95       	ror	r25
     e40:	87 95       	ror	r24
     e42:	7a 95       	dec	r23
     e44:	d1 f7       	brne	.-12     	; 0xe3a <mcp_set_mask_or_filter+0x54>
     e46:	70 2d       	mov	r23, r0
     e48:	68 2f       	mov	r22, r24
     e4a:	60 7e       	andi	r22, 0xE0	; 224
     e4c:	8e 2d       	mov	r24, r14
     e4e:	83 70       	andi	r24, 0x03	; 3
     e50:	68 2b       	or	r22, r24
     e52:	68 60       	ori	r22, 0x08	; 8
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     e5a:	99 27       	eor	r25, r25
     e5c:	8f 2d       	mov	r24, r15
     e5e:	7e 2d       	mov	r23, r14
     e60:	6d 2d       	mov	r22, r13
     e62:	80 e0       	ldi	r24, 0x00	; 0
     e64:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     e68:	6c 2d       	mov	r22, r12
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     e70:	11 c0       	rjmp	.+34     	; 0xe94 <mcp_set_mask_or_filter+0xae>
     e72:	b6 01       	movw	r22, r12
     e74:	76 95       	lsr	r23
     e76:	67 95       	ror	r22
     e78:	76 95       	lsr	r23
     e7a:	67 95       	ror	r22
     e7c:	76 95       	lsr	r23
     e7e:	67 95       	ror	r22
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     e86:	6c 2d       	mov	r22, r12
     e88:	62 95       	swap	r22
     e8a:	66 0f       	add	r22, r22
     e8c:	60 7e       	andi	r22, 0xE0	; 224
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	8c e0       	ldi	r24, 0x0C	; 12
     e98:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	08 95       	ret

00000eaa <mcp_set_tx_id>:
     eaa:	cf 92       	push	r12
     eac:	df 92       	push	r13
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	c8 2f       	mov	r28, r24
     eb8:	d6 2f       	mov	r29, r22
     eba:	69 01       	movw	r12, r18
     ebc:	7a 01       	movw	r14, r20
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	8c e0       	ldi	r24, 0x0C	; 12
     ec2:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     ec6:	d1 30       	cpi	r29, 0x01	; 1
     ec8:	d1 f5       	brne	.+116    	; 0xf3e <mcp_set_tx_id+0x94>
     eca:	62 e0       	ldi	r22, 0x02	; 2
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     ed2:	c6 95       	lsr	r28
     ed4:	c2 95       	swap	r28
     ed6:	c0 7f       	andi	r28, 0xF0	; 240
     ed8:	61 e3       	ldi	r22, 0x31	; 49
     eda:	6c 0f       	add	r22, r28
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     ee2:	c7 01       	movw	r24, r14
     ee4:	b6 01       	movw	r22, r12
     ee6:	05 2e       	mov	r0, r21
     ee8:	55 e1       	ldi	r21, 0x15	; 21
     eea:	96 95       	lsr	r25
     eec:	87 95       	ror	r24
     eee:	77 95       	ror	r23
     ef0:	67 95       	ror	r22
     ef2:	5a 95       	dec	r21
     ef4:	d1 f7       	brne	.-12     	; 0xeea <mcp_set_tx_id+0x40>
     ef6:	50 2d       	mov	r21, r0
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     efe:	d7 01       	movw	r26, r14
     f00:	c6 01       	movw	r24, r12
     f02:	07 2e       	mov	r0, r23
     f04:	7d e0       	ldi	r23, 0x0D	; 13
     f06:	b6 95       	lsr	r27
     f08:	a7 95       	ror	r26
     f0a:	97 95       	ror	r25
     f0c:	87 95       	ror	r24
     f0e:	7a 95       	dec	r23
     f10:	d1 f7       	brne	.-12     	; 0xf06 <mcp_set_tx_id+0x5c>
     f12:	70 2d       	mov	r23, r0
     f14:	68 2f       	mov	r22, r24
     f16:	60 7e       	andi	r22, 0xE0	; 224
     f18:	8e 2d       	mov	r24, r14
     f1a:	83 70       	andi	r24, 0x03	; 3
     f1c:	68 2b       	or	r22, r24
     f1e:	68 60       	ori	r22, 0x08	; 8
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     f26:	99 27       	eor	r25, r25
     f28:	8f 2d       	mov	r24, r15
     f2a:	7e 2d       	mov	r23, r14
     f2c:	6d 2d       	mov	r22, r13
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     f34:	6c 2d       	mov	r22, r12
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     f3c:	19 c0       	rjmp	.+50     	; 0xf70 <mcp_set_tx_id+0xc6>
     f3e:	c1 30       	cpi	r28, 0x01	; 1
     f40:	09 f4       	brne	.+2      	; 0xf44 <mcp_set_tx_id+0x9a>
     f42:	c0 e0       	ldi	r28, 0x00	; 0
     f44:	6c 2f       	mov	r22, r28
     f46:	60 64       	ori	r22, 0x40	; 64
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     f4e:	b6 01       	movw	r22, r12
     f50:	76 95       	lsr	r23
     f52:	67 95       	ror	r22
     f54:	76 95       	lsr	r23
     f56:	67 95       	ror	r22
     f58:	76 95       	lsr	r23
     f5a:	67 95       	ror	r22
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     f62:	6c 2d       	mov	r22, r12
     f64:	62 95       	swap	r22
     f66:	66 0f       	add	r22, r22
     f68:	60 7e       	andi	r22, 0xE0	; 224
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	8c e0       	ldi	r24, 0x0C	; 12
     f74:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	ff 90       	pop	r15
     f7e:	ef 90       	pop	r14
     f80:	df 90       	pop	r13
     f82:	cf 90       	pop	r12
     f84:	08 95       	ret

00000f86 <mcp_get_rx_data>:
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	c8 2f       	mov	r28, r24
     f8e:	8b 01       	movw	r16, r22
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	8c e0       	ldi	r24, 0x0C	; 12
     f94:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     f98:	63 e0       	ldi	r22, 0x03	; 3
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     fa0:	6c 2f       	mov	r22, r28
     fa2:	62 95       	swap	r22
     fa4:	60 7f       	andi	r22, 0xF0	; 240
     fa6:	6b 59       	subi	r22, 0x9B	; 155
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     fae:	60 e0       	ldi	r22, 0x00	; 0
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     fb6:	48 2f       	mov	r20, r24
     fb8:	4f 70       	andi	r20, 0x0F	; 15
     fba:	b8 01       	movw	r22, r16
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <spi_read>
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	8c e0       	ldi	r24, 0x0C	; 12
     fc6:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	08 95       	ret

00000fd2 <mcp_set_tx_data>:
     fd2:	ff 92       	push	r15
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
     fdc:	c8 2f       	mov	r28, r24
     fde:	d6 2f       	mov	r29, r22
     fe0:	8a 01       	movw	r16, r20
     fe2:	f2 2e       	mov	r15, r18
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	8c e0       	ldi	r24, 0x0C	; 12
     fe8:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
     fec:	62 e0       	ldi	r22, 0x02	; 2
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
     ff4:	6c 2f       	mov	r22, r28
     ff6:	66 95       	lsr	r22
     ff8:	62 95       	swap	r22
     ffa:	60 7f       	andi	r22, 0xF0	; 240
     ffc:	6b 5c       	subi	r22, 0xCB	; 203
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
    1004:	80 e4       	ldi	r24, 0x40	; 64
    1006:	d8 9f       	mul	r29, r24
    1008:	b0 01       	movw	r22, r0
    100a:	11 24       	eor	r1, r1
    100c:	6f 29       	or	r22, r15
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
    1014:	d1 11       	cpse	r29, r1
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <mcp_set_tx_data+0x50>
    1018:	4f 2d       	mov	r20, r15
    101a:	b8 01       	movw	r22, r16
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <spi_send>
    1022:	61 e0       	ldi	r22, 0x01	; 1
    1024:	8c e0       	ldi	r24, 0x0C	; 12
    1026:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	1f 91       	pop	r17
    1030:	0f 91       	pop	r16
    1032:	ff 90       	pop	r15
    1034:	08 95       	ret

00001036 <mcp_tx_trigger>:
    1036:	cf 93       	push	r28
    1038:	c8 2f       	mov	r28, r24
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	8c e0       	ldi	r24, 0x0C	; 12
    103e:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
    1042:	6c 2f       	mov	r22, r28
    1044:	60 68       	ori	r22, 0x80	; 128
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	8c e0       	ldi	r24, 0x0C	; 12
    1050:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
    1054:	80 e1       	ldi	r24, 0x10	; 16
    1056:	97 e2       	ldi	r25, 0x27	; 39
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	f1 f7       	brne	.-4      	; 0x1058 <mcp_tx_trigger+0x22>
    105c:	cf 91       	pop	r28
    105e:	08 95       	ret

00001060 <mcp_bit_modify>:
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	18 2f       	mov	r17, r24
    1068:	d6 2f       	mov	r29, r22
    106a:	c4 2f       	mov	r28, r20
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	8c e0       	ldi	r24, 0x0C	; 12
    1070:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
    1074:	65 e0       	ldi	r22, 0x05	; 5
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
    107c:	61 2f       	mov	r22, r17
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
    1084:	6d 2f       	mov	r22, r29
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
    108c:	6c 2f       	mov	r22, r28
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	8c e0       	ldi	r24, 0x0C	; 12
    1098:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	08 95       	ret

000010a4 <mcp_init>:
    10a4:	ef 92       	push	r14
    10a6:	0f 93       	push	r16
    10a8:	e1 2c       	mov	r14, r1
    10aa:	00 e0       	ldi	r16, 0x00	; 0
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	40 e8       	ldi	r20, 0x80	; 128
    10b0:	54 e8       	ldi	r21, 0x84	; 132
    10b2:	6e e1       	ldi	r22, 0x1E	; 30
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <spi_init_master>
    10bc:	88 23       	and	r24, r24
    10be:	09 f4       	brne	.+2      	; 0x10c2 <mcp_init+0x1e>
    10c0:	58 c0       	rjmp	.+176    	; 0x1172 <mcp_init+0xce>
    10c2:	0e 94 bc 06 	call	0xd78	; 0xd78 <mcp_reset>
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	6f e0       	ldi	r22, 0x0F	; 15
    10ca:	8c e0       	ldi	r24, 0x0C	; 12
    10cc:	0e 94 30 08 	call	0x1060	; 0x1060 <mcp_bit_modify>
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	67 e0       	ldi	r22, 0x07	; 7
    10d4:	8d e0       	ldi	r24, 0x0D	; 13
    10d6:	0e 94 30 08 	call	0x1060	; 0x1060 <mcp_bit_modify>
    10da:	40 e0       	ldi	r20, 0x00	; 0
    10dc:	60 e6       	ldi	r22, 0x60	; 96
    10de:	80 e6       	ldi	r24, 0x60	; 96
    10e0:	0e 94 30 08 	call	0x1060	; 0x1060 <mcp_bit_modify>
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	60 e6       	ldi	r22, 0x60	; 96
    10e8:	80 e7       	ldi	r24, 0x70	; 112
    10ea:	0e 94 30 08 	call	0x1060	; 0x1060 <mcp_bit_modify>
    10ee:	4f ef       	ldi	r20, 0xFF	; 255
    10f0:	6f ef       	ldi	r22, 0xFF	; 255
    10f2:	8b e2       	ldi	r24, 0x2B	; 43
    10f4:	0e 94 30 08 	call	0x1060	; 0x1060 <mcp_bit_modify>
    10f8:	41 e4       	ldi	r20, 0x41	; 65
    10fa:	6f ef       	ldi	r22, 0xFF	; 255
    10fc:	8a e2       	ldi	r24, 0x2A	; 42
    10fe:	0e 94 30 08 	call	0x1060	; 0x1060 <mcp_bit_modify>
    1102:	41 eb       	ldi	r20, 0xB1	; 177
    1104:	6f ef       	ldi	r22, 0xFF	; 255
    1106:	89 e2       	ldi	r24, 0x29	; 41
    1108:	0e 94 30 08 	call	0x1060	; 0x1060 <mcp_bit_modify>
    110c:	45 e0       	ldi	r20, 0x05	; 5
    110e:	67 e4       	ldi	r22, 0x47	; 71
    1110:	88 e2       	ldi	r24, 0x28	; 40
    1112:	0e 94 30 08 	call	0x1060	; 0x1060 <mcp_bit_modify>
    1116:	2f ef       	ldi	r18, 0xFF	; 255
    1118:	3f e0       	ldi	r19, 0x0F	; 15
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	80 e2       	ldi	r24, 0x20	; 32
    1122:	0e 94 f3 06 	call	0xde6	; 0xde6 <mcp_set_mask_or_filter>
    1126:	2f ef       	ldi	r18, 0xFF	; 255
    1128:	3f e0       	ldi	r19, 0x0F	; 15
    112a:	40 e0       	ldi	r20, 0x00	; 0
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	84 e2       	ldi	r24, 0x24	; 36
    1132:	0e 94 f3 06 	call	0xde6	; 0xde6 <mcp_set_mask_or_filter>
    1136:	2f e8       	ldi	r18, 0x8F	; 143
    1138:	35 e0       	ldi	r19, 0x05	; 5
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	80 e0       	ldi	r24, 0x00	; 0
    1142:	0e 94 f3 06 	call	0xde6	; 0xde6 <mcp_set_mask_or_filter>
    1146:	2f e7       	ldi	r18, 0x7F	; 127
    1148:	35 e0       	ldi	r19, 0x05	; 5
    114a:	40 e0       	ldi	r20, 0x00	; 0
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	88 e0       	ldi	r24, 0x08	; 8
    1152:	0e 94 f3 06 	call	0xde6	; 0xde6 <mcp_set_mask_or_filter>
    1156:	2f e6       	ldi	r18, 0x6F	; 111
    1158:	35 e0       	ldi	r19, 0x05	; 5
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	50 e0       	ldi	r21, 0x00	; 0
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	80 e1       	ldi	r24, 0x10	; 16
    1162:	0e 94 f3 06 	call	0xde6	; 0xde6 <mcp_set_mask_or_filter>
    1166:	48 e0       	ldi	r20, 0x08	; 8
    1168:	6f ef       	ldi	r22, 0xFF	; 255
    116a:	8f e2       	ldi	r24, 0x2F	; 47
    116c:	0e 94 30 08 	call	0x1060	; 0x1060 <mcp_bit_modify>
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	0f 91       	pop	r16
    1174:	ef 90       	pop	r14
    1176:	08 95       	ret

00001178 <mcp_get_status>:
    1178:	cf 93       	push	r28
    117a:	60 e0       	ldi	r22, 0x00	; 0
    117c:	8c e0       	ldi	r24, 0x0C	; 12
    117e:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
    1182:	60 ea       	ldi	r22, 0xA0	; 160
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
    1192:	c8 2f       	mov	r28, r24
    1194:	61 e0       	ldi	r22, 0x01	; 1
    1196:	8c e0       	ldi	r24, 0x0C	; 12
    1198:	0e 94 87 00 	call	0x10e	; 0x10e <dio_set_pin_val>
    119c:	8c 2f       	mov	r24, r28
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <mcp_check_flag>:
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	1f 92       	push	r1
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	18 2f       	mov	r17, r24
    11b0:	88 30       	cpi	r24, 0x08	; 8
    11b2:	58 f4       	brcc	.+22     	; 0x11ca <mcp_check_flag+0x28>
    11b4:	0e 94 bc 08 	call	0x1178	; 0x1178 <mcp_get_status>
    11b8:	21 e0       	ldi	r18, 0x01	; 1
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <mcp_check_flag+0x20>
    11be:	22 0f       	add	r18, r18
    11c0:	33 1f       	adc	r19, r19
    11c2:	1a 95       	dec	r17
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <mcp_check_flag+0x1c>
    11c6:	82 23       	and	r24, r18
    11c8:	61 c0       	rjmp	.+194    	; 0x128c <mcp_check_flag+0xea>
    11ca:	80 31       	cpi	r24, 0x10	; 16
    11cc:	90 f4       	brcc	.+36     	; 0x11f2 <mcp_check_flag+0x50>
    11ce:	41 e0       	ldi	r20, 0x01	; 1
    11d0:	be 01       	movw	r22, r28
    11d2:	6f 5f       	subi	r22, 0xFF	; 255
    11d4:	7f 4f       	sbci	r23, 0xFF	; 255
    11d6:	8c e2       	ldi	r24, 0x2C	; 44
    11d8:	0e 94 c9 06 	call	0xd92	; 0xd92 <mcp_read_reg>
    11dc:	18 50       	subi	r17, 0x08	; 8
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <mcp_check_flag+0x46>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	1a 95       	dec	r17
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <mcp_check_flag+0x42>
    11ec:	29 81       	ldd	r18, Y+1	; 0x01
    11ee:	82 23       	and	r24, r18
    11f0:	4d c0       	rjmp	.+154    	; 0x128c <mcp_check_flag+0xea>
    11f2:	88 31       	cpi	r24, 0x18	; 24
    11f4:	90 f4       	brcc	.+36     	; 0x121a <mcp_check_flag+0x78>
    11f6:	41 e0       	ldi	r20, 0x01	; 1
    11f8:	be 01       	movw	r22, r28
    11fa:	6f 5f       	subi	r22, 0xFF	; 255
    11fc:	7f 4f       	sbci	r23, 0xFF	; 255
    11fe:	80 e3       	ldi	r24, 0x30	; 48
    1200:	0e 94 c9 06 	call	0xd92	; 0xd92 <mcp_read_reg>
    1204:	10 51       	subi	r17, 0x10	; 16
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <mcp_check_flag+0x6e>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	1a 95       	dec	r17
    1212:	e2 f7       	brpl	.-8      	; 0x120c <mcp_check_flag+0x6a>
    1214:	29 81       	ldd	r18, Y+1	; 0x01
    1216:	82 23       	and	r24, r18
    1218:	39 c0       	rjmp	.+114    	; 0x128c <mcp_check_flag+0xea>
    121a:	80 32       	cpi	r24, 0x20	; 32
    121c:	90 f4       	brcc	.+36     	; 0x1242 <mcp_check_flag+0xa0>
    121e:	41 e0       	ldi	r20, 0x01	; 1
    1220:	be 01       	movw	r22, r28
    1222:	6f 5f       	subi	r22, 0xFF	; 255
    1224:	7f 4f       	sbci	r23, 0xFF	; 255
    1226:	80 e4       	ldi	r24, 0x40	; 64
    1228:	0e 94 c9 06 	call	0xd92	; 0xd92 <mcp_read_reg>
    122c:	18 51       	subi	r17, 0x18	; 24
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <mcp_check_flag+0x96>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	1a 95       	dec	r17
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <mcp_check_flag+0x92>
    123c:	29 81       	ldd	r18, Y+1	; 0x01
    123e:	82 23       	and	r24, r18
    1240:	25 c0       	rjmp	.+74     	; 0x128c <mcp_check_flag+0xea>
    1242:	88 32       	cpi	r24, 0x28	; 40
    1244:	90 f4       	brcc	.+36     	; 0x126a <mcp_check_flag+0xc8>
    1246:	41 e0       	ldi	r20, 0x01	; 1
    1248:	be 01       	movw	r22, r28
    124a:	6f 5f       	subi	r22, 0xFF	; 255
    124c:	7f 4f       	sbci	r23, 0xFF	; 255
    124e:	80 e5       	ldi	r24, 0x50	; 80
    1250:	0e 94 c9 06 	call	0xd92	; 0xd92 <mcp_read_reg>
    1254:	10 52       	subi	r17, 0x20	; 32
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <mcp_check_flag+0xbe>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	1a 95       	dec	r17
    1262:	e2 f7       	brpl	.-8      	; 0x125c <mcp_check_flag+0xba>
    1264:	29 81       	ldd	r18, Y+1	; 0x01
    1266:	82 23       	and	r24, r18
    1268:	11 c0       	rjmp	.+34     	; 0x128c <mcp_check_flag+0xea>
    126a:	41 e0       	ldi	r20, 0x01	; 1
    126c:	be 01       	movw	r22, r28
    126e:	6f 5f       	subi	r22, 0xFF	; 255
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	8d e2       	ldi	r24, 0x2D	; 45
    1274:	0e 94 c9 06 	call	0xd92	; 0xd92 <mcp_read_reg>
    1278:	18 52       	subi	r17, 0x28	; 40
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <mcp_check_flag+0xe2>
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	1a 95       	dec	r17
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <mcp_check_flag+0xde>
    1288:	29 81       	ldd	r18, Y+1	; 0x01
    128a:	82 23       	and	r24, r18
    128c:	0f 90       	pop	r0
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	08 95       	ret

00001296 <mcp_clear_flag>:
    1296:	88 30       	cpi	r24, 0x08	; 8
    1298:	b8 f4       	brcc	.+46     	; 0x12c8 <mcp_clear_flag+0x32>
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	31 f0       	breq	.+12     	; 0x12aa <mcp_clear_flag+0x14>
    129e:	85 30       	cpi	r24, 0x05	; 5
    12a0:	31 f0       	breq	.+12     	; 0x12ae <mcp_clear_flag+0x18>
    12a2:	87 30       	cpi	r24, 0x07	; 7
    12a4:	29 f4       	brne	.+10     	; 0x12b0 <mcp_clear_flag+0x1a>
    12a6:	84 e0       	ldi	r24, 0x04	; 4
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <mcp_clear_flag+0x1a>
    12aa:	82 e0       	ldi	r24, 0x02	; 2
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <mcp_clear_flag+0x1a>
    12ae:	83 e0       	ldi	r24, 0x03	; 3
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <mcp_clear_flag+0x24>
    12b6:	66 0f       	add	r22, r22
    12b8:	77 1f       	adc	r23, r23
    12ba:	8a 95       	dec	r24
    12bc:	e2 f7       	brpl	.-8      	; 0x12b6 <mcp_clear_flag+0x20>
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	8c e2       	ldi	r24, 0x2C	; 44
    12c2:	0e 94 30 08 	call	0x1060	; 0x1060 <mcp_bit_modify>
    12c6:	08 95       	ret
    12c8:	80 31       	cpi	r24, 0x10	; 16
    12ca:	68 f4       	brcc	.+26     	; 0x12e6 <mcp_clear_flag+0x50>
    12cc:	88 50       	subi	r24, 0x08	; 8
    12ce:	61 e0       	ldi	r22, 0x01	; 1
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <mcp_clear_flag+0x42>
    12d4:	66 0f       	add	r22, r22
    12d6:	77 1f       	adc	r23, r23
    12d8:	8a 95       	dec	r24
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <mcp_clear_flag+0x3e>
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	8c e2       	ldi	r24, 0x2C	; 44
    12e0:	0e 94 30 08 	call	0x1060	; 0x1060 <mcp_bit_modify>
    12e4:	08 95       	ret
    12e6:	88 52       	subi	r24, 0x28	; 40
    12e8:	61 e0       	ldi	r22, 0x01	; 1
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <mcp_clear_flag+0x5c>
    12ee:	66 0f       	add	r22, r22
    12f0:	77 1f       	adc	r23, r23
    12f2:	8a 95       	dec	r24
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <mcp_clear_flag+0x58>
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	8c e2       	ldi	r24, 0x2C	; 44
    12fa:	0e 94 30 08 	call	0x1060	; 0x1060 <mcp_bit_modify>
    12fe:	08 95       	ret

00001300 <mcp_send_remoteframe>:

void mcp_send_remoteframe(uint8_t tx_no, uint8_t size)
{
    1300:	cf 93       	push	r28
    1302:	c8 2f       	mov	r28, r24
    1304:	26 2f       	mov	r18, r22
	mcp_set_tx_data(tx_no, REMOTE_FRAME, NULL, size);
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	61 e0       	ldi	r22, 0x01	; 1
    130c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <mcp_set_tx_data>
	mcp_tx_trigger(tx_no);
    1310:	8c 2f       	mov	r24, r28
    1312:	0e 94 1b 08 	call	0x1036	; 0x1036 <mcp_tx_trigger>
}
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

0000131a <__vector_11>:
	g_ovf_count = 0;
}

void millis_reset_ticks()
{
	TCNT0 = 0;
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	2f 93       	push	r18
    1326:	3f 93       	push	r19
    1328:	4f 93       	push	r20
    132a:	5f 93       	push	r21
    132c:	6f 93       	push	r22
    132e:	7f 93       	push	r23
    1330:	8f 93       	push	r24
    1332:	9f 93       	push	r25
    1334:	af 93       	push	r26
    1336:	bf 93       	push	r27
    1338:	ef 93       	push	r30
    133a:	ff 93       	push	r31
    133c:	f8 94       	cli
    133e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <g_ovf_count>
    1342:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <g_ovf_count+0x1>
    1346:	89 2b       	or	r24, r25
    1348:	99 f0       	breq	.+38     	; 0x1370 <__vector_11+0x56>
    134a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <g_ovf_count>
    134e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <g_ovf_count+0x1>
    1352:	01 97       	sbiw	r24, 0x01	; 1
    1354:	21 f4       	brne	.+8      	; 0x135e <__vector_11+0x44>
    1356:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <g_last_ticks>
    135a:	81 95       	neg	r24
    135c:	82 bf       	out	0x32, r24	; 50
    135e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <g_ovf_count>
    1362:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <g_ovf_count+0x1>
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <g_ovf_count+0x1>
    136c:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <g_ovf_count>
    1370:	e0 91 b9 01 	lds	r30, 0x01B9	; 0x8001b9 <gp_tmr0_ovf_isr>
    1374:	f0 91 ba 01 	lds	r31, 0x01BA	; 0x8001ba <gp_tmr0_ovf_isr+0x1>
    1378:	30 97       	sbiw	r30, 0x00	; 0
    137a:	09 f0       	breq	.+2      	; 0x137e <__vector_11+0x64>
    137c:	09 95       	icall
    137e:	78 94       	sei
    1380:	ff 91       	pop	r31
    1382:	ef 91       	pop	r30
    1384:	bf 91       	pop	r27
    1386:	af 91       	pop	r26
    1388:	9f 91       	pop	r25
    138a:	8f 91       	pop	r24
    138c:	7f 91       	pop	r23
    138e:	6f 91       	pop	r22
    1390:	5f 91       	pop	r21
    1392:	4f 91       	pop	r20
    1394:	3f 91       	pop	r19
    1396:	2f 91       	pop	r18
    1398:	0f 90       	pop	r0
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	0f 90       	pop	r0
    139e:	1f 90       	pop	r1
    13a0:	18 95       	reti

000013a2 <millis>:
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <g_ovf_count>
    13aa:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <g_ovf_count+0x1>
    13ae:	45 2b       	or	r20, r21
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <millis+0x12>
    13b2:	43 c0       	rjmp	.+134    	; 0x143a <millis+0x98>
    13b4:	23 b7       	in	r18, 0x33	; 51
    13b6:	21 11       	cpse	r18, r1
    13b8:	40 c0       	rjmp	.+128    	; 0x143a <millis+0x98>
    13ba:	9c 01       	movw	r18, r24
    13bc:	a8 ee       	ldi	r26, 0xE8	; 232
    13be:	b3 e0       	ldi	r27, 0x03	; 3
    13c0:	0e 94 19 11 	call	0x2232	; 0x2232 <__umulhisi3>
    13c4:	8b 01       	movw	r16, r22
    13c6:	9c 01       	movw	r18, r24
    13c8:	0f 2e       	mov	r0, r31
    13ca:	ff e0       	ldi	r31, 0x0F	; 15
    13cc:	36 95       	lsr	r19
    13ce:	27 95       	ror	r18
    13d0:	17 95       	ror	r17
    13d2:	07 95       	ror	r16
    13d4:	fa 95       	dec	r31
    13d6:	d1 f7       	brne	.-12     	; 0x13cc <millis+0x2a>
    13d8:	f0 2d       	mov	r31, r0
    13da:	0f 5f       	subi	r16, 0xFF	; 255
    13dc:	1f 4f       	sbci	r17, 0xFF	; 255
    13de:	10 93 b7 01 	sts	0x01B7, r17	; 0x8001b7 <g_ovf_count+0x1>
    13e2:	00 93 b6 01 	sts	0x01B6, r16	; 0x8001b6 <g_ovf_count>
    13e6:	25 e0       	ldi	r18, 0x05	; 5
    13e8:	23 bf       	out	0x33, r18	; 51
    13ea:	29 b7       	in	r18, 0x39	; 57
    13ec:	21 60       	ori	r18, 0x01	; 1
    13ee:	29 bf       	out	0x39, r18	; 57
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	88 7f       	andi	r24, 0xF8	; 248
    13f6:	9f 77       	andi	r25, 0x7F	; 127
    13f8:	aa 27       	eor	r26, r26
    13fa:	bb 27       	eor	r27, r27
    13fc:	68 94       	set
    13fe:	16 f8       	bld	r1, 6
    1400:	b6 95       	lsr	r27
    1402:	a7 95       	ror	r26
    1404:	97 95       	ror	r25
    1406:	87 95       	ror	r24
    1408:	16 94       	lsr	r1
    140a:	d1 f7       	brne	.-12     	; 0x1400 <millis+0x5e>
    140c:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <g_last_ticks>
    1410:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <g_ovf_count>
    1414:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <g_ovf_count+0x1>
    1418:	21 30       	cpi	r18, 0x01	; 1
    141a:	31 05       	cpc	r19, r1
    141c:	29 f4       	brne	.+10     	; 0x1428 <millis+0x86>
    141e:	68 2f       	mov	r22, r24
    1420:	61 95       	neg	r22
    1422:	62 bf       	out	0x32, r22	; 50
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	19 c0       	rjmp	.+50     	; 0x145a <millis+0xb8>
    1428:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <g_ovf_count>
    142c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <g_ovf_count+0x1>
    1430:	02 97       	sbiw	r24, 0x02	; 2
    1432:	80 f0       	brcs	.+32     	; 0x1454 <millis+0xb2>
    1434:	12 be       	out	0x32, r1	; 50
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	10 c0       	rjmp	.+32     	; 0x145a <millis+0xb8>
    143a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <g_ovf_count>
    143e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <g_ovf_count+0x1>
    1442:	89 2b       	or	r24, r25
    1444:	49 f4       	brne	.+18     	; 0x1458 <millis+0xb6>
    1446:	13 be       	out	0x33, r1	; 51
    1448:	12 be       	out	0x32, r1	; 50
    144a:	89 b7       	in	r24, 0x39	; 57
    144c:	8e 7f       	andi	r24, 0xFE	; 254
    144e:	89 bf       	out	0x39, r24	; 57
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	03 c0       	rjmp	.+6      	; 0x145a <millis+0xb8>
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	01 c0       	rjmp	.+2      	; 0x145a <millis+0xb8>
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	08 95       	ret

00001460 <millis_disable_tmr>:
    1460:	13 be       	out	0x33, r1	; 51
    1462:	12 be       	out	0x32, r1	; 50
    1464:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <g_ovf_count+0x1>
    1468:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <g_ovf_count>
    146c:	08 95       	ret

0000146e <millis_reset_tmr>:
}

void millis_reset_tmr(uint16_t t)
{
    146e:	0f 93       	push	r16
    1470:	1f 93       	push	r17
	g_ovf_count = NUMBER_OF_OVFLOWS + 1;
    1472:	9c 01       	movw	r18, r24
    1474:	a8 ee       	ldi	r26, 0xE8	; 232
    1476:	b3 e0       	ldi	r27, 0x03	; 3
    1478:	0e 94 19 11 	call	0x2232	; 0x2232 <__umulhisi3>
    147c:	8b 01       	movw	r16, r22
    147e:	9c 01       	movw	r18, r24
    1480:	0f 2e       	mov	r0, r31
    1482:	ff e0       	ldi	r31, 0x0F	; 15
    1484:	36 95       	lsr	r19
    1486:	27 95       	ror	r18
    1488:	17 95       	ror	r17
    148a:	07 95       	ror	r16
    148c:	fa 95       	dec	r31
    148e:	d1 f7       	brne	.-12     	; 0x1484 <millis_reset_tmr+0x16>
    1490:	f0 2d       	mov	r31, r0
    1492:	0f 5f       	subi	r16, 0xFF	; 255
    1494:	1f 4f       	sbci	r17, 0xFF	; 255
    1496:	10 93 b7 01 	sts	0x01B7, r17	; 0x8001b7 <g_ovf_count+0x1>
    149a:	00 93 b6 01 	sts	0x01B6, r16	; 0x8001b6 <g_ovf_count>
#if (MILLIS_INTERRUPT == 1)
	TIMSK = 1; //enable timer0 interrupt
    149e:	21 e0       	ldi	r18, 0x01	; 1
    14a0:	29 bf       	out	0x39, r18	; 57
	//if the number of ovf is 1 meaning there is just the remaining ticks
	//make TCNT0=265-REMAINING_TICKS;
	//else TCNT=0
	g_last_ticks = REMAINING_TICKS;
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	88 7f       	andi	r24, 0xF8	; 248
    14a8:	9f 77       	andi	r25, 0x7F	; 127
    14aa:	aa 27       	eor	r26, r26
    14ac:	bb 27       	eor	r27, r27
    14ae:	68 94       	set
    14b0:	16 f8       	bld	r1, 6
    14b2:	b6 95       	lsr	r27
    14b4:	a7 95       	ror	r26
    14b6:	97 95       	ror	r25
    14b8:	87 95       	ror	r24
    14ba:	16 94       	lsr	r1
    14bc:	d1 f7       	brne	.-12     	; 0x14b2 <millis_reset_tmr+0x44>
    14be:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <g_last_ticks>
#endif
}
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	08 95       	ret

000014c8 <millis_add_ovf_isr>:

void millis_add_ovf_isr(void ( * additional_tmr_ovf_isr)(void))
{
	gp_tmr0_ovf_isr = additional_tmr_ovf_isr;
    14c8:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <gp_tmr0_ovf_isr+0x1>
    14cc:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <gp_tmr0_ovf_isr>
    14d0:	08 95       	ret

000014d2 <pwm_init>:

#include "pwm1.h"

#if defined(ATMEGA32) || defined(ATMEGA16)
void pwm_init(uint8_t pwm_no, uint16_t freq) // sets the frequency ..and setes the timer as 
{
    14d2:	4f 92       	push	r4
    14d4:	5f 92       	push	r5
    14d6:	6f 92       	push	r6
    14d8:	7f 92       	push	r7
    14da:	8f 92       	push	r8
    14dc:	9f 92       	push	r9
    14de:	af 92       	push	r10
    14e0:	bf 92       	push	r11
    14e2:	cf 92       	push	r12
    14e4:	df 92       	push	r13
    14e6:	ef 92       	push	r14
    14e8:	ff 92       	push	r15
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	18 2f       	mov	r17, r24
    14f4:	eb 01       	movw	r28, r22
	if (pwm_no & PWM0)
    14f6:	80 ff       	sbrs	r24, 0
    14f8:	91 c0       	rjmp	.+290    	; 0x161c <pwm_init+0x14a>
	{
		TCCR0 &= ~(0x07); // clear any previous prescalers
    14fa:	83 b7       	in	r24, 0x33	; 51
    14fc:	88 7f       	andi	r24, 0xF8	; 248
    14fe:	83 bf       	out	0x33, r24	; 51
		
		if(NUM_REQUIRED_TICKS_NO_PRE < 255) //apply the frequency formula on prescaler = 1 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=1 for it) we have to increase the prescaler and apply the formulA again
    1500:	6b 01       	movw	r12, r22
    1502:	e1 2c       	mov	r14, r1
    1504:	f1 2c       	mov	r15, r1
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	72 e1       	ldi	r23, 0x12	; 18
    150a:	8a e7       	ldi	r24, 0x7A	; 122
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	a7 01       	movw	r20, r14
    1510:	96 01       	movw	r18, r12
    1512:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    1516:	2f 3f       	cpi	r18, 0xFF	; 255
    1518:	31 05       	cpc	r19, r1
    151a:	41 05       	cpc	r20, r1
    151c:	51 05       	cpc	r21, r1
    151e:	18 f4       	brcc	.+6      	; 0x1526 <pwm_init+0x54>
		{
			TCCR0 = (1<<CS00);
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	83 bf       	out	0x33, r24	; 51
    1524:	78 c0       	rjmp	.+240    	; 0x1616 <pwm_init+0x144>
		}
		else if(NUM_REQUIRED_TICKS_8_PRE < 255) //apply the frequency formula on prescaler = 8 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler = 8 for it) we have to increase the prescaler and apply the formulA again
    1526:	d7 01       	movw	r26, r14
    1528:	c6 01       	movw	r24, r12
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	aa 1f       	adc	r26, r26
    1530:	bb 1f       	adc	r27, r27
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	aa 1f       	adc	r26, r26
    1538:	bb 1f       	adc	r27, r27
    153a:	9c 01       	movw	r18, r24
    153c:	ad 01       	movw	r20, r26
    153e:	22 0f       	add	r18, r18
    1540:	33 1f       	adc	r19, r19
    1542:	44 1f       	adc	r20, r20
    1544:	55 1f       	adc	r21, r21
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	72 e1       	ldi	r23, 0x12	; 18
    154a:	8a e7       	ldi	r24, 0x7A	; 122
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    1552:	2f 3f       	cpi	r18, 0xFF	; 255
    1554:	31 05       	cpc	r19, r1
    1556:	41 05       	cpc	r20, r1
    1558:	51 05       	cpc	r21, r1
    155a:	20 f4       	brcc	.+8      	; 0x1564 <pwm_init+0x92>
		{
			TCCR0 |= (1<<CS01); //
    155c:	83 b7       	in	r24, 0x33	; 51
    155e:	82 60       	ori	r24, 0x02	; 2
    1560:	83 bf       	out	0x33, r24	; 51
    1562:	59 c0       	rjmp	.+178    	; 0x1616 <pwm_init+0x144>
		}
		else if(NUM_REQUIRED_TICKS_64_PRE < 255)//apply the frequency formula on prescaler = 64 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=64 for it) we have to increase the prescaler and apply the formulA again
    1564:	d7 01       	movw	r26, r14
    1566:	c6 01       	movw	r24, r12
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	aa 1f       	adc	r26, r26
    156e:	bb 1f       	adc	r27, r27
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	aa 1f       	adc	r26, r26
    1576:	bb 1f       	adc	r27, r27
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	aa 1f       	adc	r26, r26
    157e:	bb 1f       	adc	r27, r27
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	aa 1f       	adc	r26, r26
    1586:	bb 1f       	adc	r27, r27
    1588:	9c 01       	movw	r18, r24
    158a:	ad 01       	movw	r20, r26
    158c:	22 0f       	add	r18, r18
    158e:	33 1f       	adc	r19, r19
    1590:	44 1f       	adc	r20, r20
    1592:	55 1f       	adc	r21, r21
    1594:	22 0f       	add	r18, r18
    1596:	33 1f       	adc	r19, r19
    1598:	44 1f       	adc	r20, r20
    159a:	55 1f       	adc	r21, r21
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	72 e1       	ldi	r23, 0x12	; 18
    15a0:	8a e7       	ldi	r24, 0x7A	; 122
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    15a8:	2f 3f       	cpi	r18, 0xFF	; 255
    15aa:	31 05       	cpc	r19, r1
    15ac:	41 05       	cpc	r20, r1
    15ae:	51 05       	cpc	r21, r1
    15b0:	20 f4       	brcc	.+8      	; 0x15ba <pwm_init+0xe8>
		{
			TCCR0 |= (1<<CS10)|(1<<CS11); //
    15b2:	83 b7       	in	r24, 0x33	; 51
    15b4:	83 60       	ori	r24, 0x03	; 3
    15b6:	83 bf       	out	0x33, r24	; 51
    15b8:	2e c0       	rjmp	.+92     	; 0x1616 <pwm_init+0x144>
		}
		else if(NUM_REQUIRED_TICKS_256_PRE < 255)//apply the frequency formula on prescaler = 256 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=256 for it) we have to increase the prescaler and apply the formulA again
    15ba:	88 24       	eor	r8, r8
    15bc:	9c 2c       	mov	r9, r12
    15be:	ad 2c       	mov	r10, r13
    15c0:	be 2c       	mov	r11, r14
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	72 e1       	ldi	r23, 0x12	; 18
    15c6:	8a e7       	ldi	r24, 0x7A	; 122
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	a5 01       	movw	r20, r10
    15cc:	94 01       	movw	r18, r8
    15ce:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    15d2:	2f 3f       	cpi	r18, 0xFF	; 255
    15d4:	31 05       	cpc	r19, r1
    15d6:	41 05       	cpc	r20, r1
    15d8:	51 05       	cpc	r21, r1
    15da:	20 f4       	brcc	.+8      	; 0x15e4 <pwm_init+0x112>
		{
			TCCR0 |= (1<<CS02); //
    15dc:	83 b7       	in	r24, 0x33	; 51
    15de:	84 60       	ori	r24, 0x04	; 4
    15e0:	83 bf       	out	0x33, r24	; 51
    15e2:	19 c0       	rjmp	.+50     	; 0x1616 <pwm_init+0x144>
		}
		else if(NUM_REQUIRED_TICKS_1024_PRE < 255)//apply the frequency formulA on prescaler=1 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=1 for it) we have to increase the prescaler and apply the formulA again
    15e4:	a7 01       	movw	r20, r14
    15e6:	96 01       	movw	r18, r12
    15e8:	01 2e       	mov	r0, r17
    15ea:	1a e0       	ldi	r17, 0x0A	; 10
    15ec:	22 0f       	add	r18, r18
    15ee:	33 1f       	adc	r19, r19
    15f0:	44 1f       	adc	r20, r20
    15f2:	55 1f       	adc	r21, r21
    15f4:	1a 95       	dec	r17
    15f6:	d1 f7       	brne	.-12     	; 0x15ec <pwm_init+0x11a>
    15f8:	10 2d       	mov	r17, r0
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	72 e1       	ldi	r23, 0x12	; 18
    15fe:	8a e7       	ldi	r24, 0x7A	; 122
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    1606:	2f 3f       	cpi	r18, 0xFF	; 255
    1608:	31 05       	cpc	r19, r1
    160a:	41 05       	cpc	r20, r1
    160c:	51 05       	cpc	r21, r1
    160e:	18 f4       	brcc	.+6      	; 0x1616 <pwm_init+0x144>
		{
			TCCR0 |= (1<<CS00)|(1<<CS02);
    1610:	83 b7       	in	r24, 0x33	; 51
    1612:	85 60       	ori	r24, 0x05	; 5
    1614:	83 bf       	out	0x33, r24	; 51
		}

		TCCR0 |= (1<<WGM00) | (1<<WGM01); // SET THE BIT (FAST PWM WITH ICR1 AS TOP)
    1616:	83 b7       	in	r24, 0x33	; 51
    1618:	88 64       	ori	r24, 0x48	; 72
    161a:	83 bf       	out	0x33, r24	; 51
	}
	
	if ((pwm_no & (PWM1)) || (pwm_no & (PWM2)))
    161c:	81 2f       	mov	r24, r17
    161e:	86 70       	andi	r24, 0x06	; 6
    1620:	09 f4       	brne	.+2      	; 0x1624 <pwm_init+0x152>
    1622:	a7 c0       	rjmp	.+334    	; 0x1772 <pwm_init+0x2a0>
	{
		TCCR1A &= ~(0x07); // clear any previous pre scalers
    1624:	8f b5       	in	r24, 0x2f	; 47
    1626:	88 7f       	andi	r24, 0xF8	; 248
    1628:	8f bd       	out	0x2f, r24	; 47
		uint16_t ICR1_buffer = NUM_REQUIRED_TICKS_NO_PRE; // default value
    162a:	6e 01       	movw	r12, r28
    162c:	e1 2c       	mov	r14, r1
    162e:	f1 2c       	mov	r15, r1
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	72 e1       	ldi	r23, 0x12	; 18
    1634:	8a e7       	ldi	r24, 0x7A	; 122
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	a7 01       	movw	r20, r14
    163a:	96 01       	movw	r18, r12
    163c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    1640:	02 2f       	mov	r16, r18
    1642:	b3 2e       	mov	r11, r19
		if(NUM_REQUIRED_TICKS_NO_PRE < (uint32_t)65535) //apply the frequency formula on prescaler = 1 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=1 for it) we have to increase the prescaler and apply the formulA again
    1644:	2f 3f       	cpi	r18, 0xFF	; 255
    1646:	3f 4f       	sbci	r19, 0xFF	; 255
    1648:	41 05       	cpc	r20, r1
    164a:	51 05       	cpc	r21, r1
    164c:	18 f4       	brcc	.+6      	; 0x1654 <pwm_init+0x182>
		{
			TCCR1B = (1<<CS10);
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	8e bd       	out	0x2e, r24	; 46
    1652:	84 c0       	rjmp	.+264    	; 0x175c <pwm_init+0x28a>
			ICR1_buffer = NUM_REQUIRED_TICKS_NO_PRE;
		}
		else if(NUM_REQUIRED_TICKS_8_PRE < (uint32_t)65535) //apply the frequency formulA on prescaler = 8 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler = 8 for it) we have to increase the prescaler and apply the formulA again
    1654:	d7 01       	movw	r26, r14
    1656:	c6 01       	movw	r24, r12
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	aa 1f       	adc	r26, r26
    165e:	bb 1f       	adc	r27, r27
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	aa 1f       	adc	r26, r26
    1666:	bb 1f       	adc	r27, r27
    1668:	9c 01       	movw	r18, r24
    166a:	ad 01       	movw	r20, r26
    166c:	22 0f       	add	r18, r18
    166e:	33 1f       	adc	r19, r19
    1670:	44 1f       	adc	r20, r20
    1672:	55 1f       	adc	r21, r21
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	72 e1       	ldi	r23, 0x12	; 18
    1678:	8a e7       	ldi	r24, 0x7A	; 122
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    1680:	2f 3f       	cpi	r18, 0xFF	; 255
    1682:	8f ef       	ldi	r24, 0xFF	; 255
    1684:	38 07       	cpc	r19, r24
    1686:	41 05       	cpc	r20, r1
    1688:	51 05       	cpc	r21, r1
    168a:	30 f4       	brcc	.+12     	; 0x1698 <pwm_init+0x1c6>
		{
			TCCR1B |= (1<<CS11); //
    168c:	8e b5       	in	r24, 0x2e	; 46
    168e:	82 60       	ori	r24, 0x02	; 2
    1690:	8e bd       	out	0x2e, r24	; 46
			ICR1_buffer = NUM_REQUIRED_TICKS_8_PRE;
    1692:	02 2f       	mov	r16, r18
    1694:	b3 2e       	mov	r11, r19
    1696:	62 c0       	rjmp	.+196    	; 0x175c <pwm_init+0x28a>
		}
		else if(NUM_REQUIRED_TICKS_64_PRE < (uint32_t)65535)//apply the frequency formulA on prescaler = 64 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=64 for it) we have to increase the prescaler and apply the formulA again
    1698:	d7 01       	movw	r26, r14
    169a:	c6 01       	movw	r24, r12
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	aa 1f       	adc	r26, r26
    16a2:	bb 1f       	adc	r27, r27
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	aa 1f       	adc	r26, r26
    16aa:	bb 1f       	adc	r27, r27
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	aa 1f       	adc	r26, r26
    16b2:	bb 1f       	adc	r27, r27
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	aa 1f       	adc	r26, r26
    16ba:	bb 1f       	adc	r27, r27
    16bc:	9c 01       	movw	r18, r24
    16be:	ad 01       	movw	r20, r26
    16c0:	22 0f       	add	r18, r18
    16c2:	33 1f       	adc	r19, r19
    16c4:	44 1f       	adc	r20, r20
    16c6:	55 1f       	adc	r21, r21
    16c8:	22 0f       	add	r18, r18
    16ca:	33 1f       	adc	r19, r19
    16cc:	44 1f       	adc	r20, r20
    16ce:	55 1f       	adc	r21, r21
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	72 e1       	ldi	r23, 0x12	; 18
    16d4:	8a e7       	ldi	r24, 0x7A	; 122
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    16dc:	2f 3f       	cpi	r18, 0xFF	; 255
    16de:	8f ef       	ldi	r24, 0xFF	; 255
    16e0:	38 07       	cpc	r19, r24
    16e2:	41 05       	cpc	r20, r1
    16e4:	51 05       	cpc	r21, r1
    16e6:	30 f4       	brcc	.+12     	; 0x16f4 <pwm_init+0x222>
		{
			TCCR1B |= (1<<CS10)|(1<<CS11); //
    16e8:	8e b5       	in	r24, 0x2e	; 46
    16ea:	83 60       	ori	r24, 0x03	; 3
    16ec:	8e bd       	out	0x2e, r24	; 46
			ICR1_buffer = NUM_REQUIRED_TICKS_64_PRE;
    16ee:	02 2f       	mov	r16, r18
    16f0:	b3 2e       	mov	r11, r19
    16f2:	34 c0       	rjmp	.+104    	; 0x175c <pwm_init+0x28a>
		}
		else if(NUM_REQUIRED_TICKS_256_PRE < (uint32_t)65535)//apply the frequency formulA on prescaler=256 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=256 for it) we have to increase the prescaler and apply the formulA again
    16f4:	44 24       	eor	r4, r4
    16f6:	5c 2c       	mov	r5, r12
    16f8:	6d 2c       	mov	r6, r13
    16fa:	7e 2c       	mov	r7, r14
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	72 e1       	ldi	r23, 0x12	; 18
    1700:	8a e7       	ldi	r24, 0x7A	; 122
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	a3 01       	movw	r20, r6
    1706:	92 01       	movw	r18, r4
    1708:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    170c:	2f 3f       	cpi	r18, 0xFF	; 255
    170e:	8f ef       	ldi	r24, 0xFF	; 255
    1710:	38 07       	cpc	r19, r24
    1712:	41 05       	cpc	r20, r1
    1714:	51 05       	cpc	r21, r1
    1716:	30 f4       	brcc	.+12     	; 0x1724 <pwm_init+0x252>
		{
			TCCR1B |= (1<<CS12); //
    1718:	8e b5       	in	r24, 0x2e	; 46
    171a:	84 60       	ori	r24, 0x04	; 4
    171c:	8e bd       	out	0x2e, r24	; 46
			ICR1_buffer = NUM_REQUIRED_TICKS_256_PRE;
    171e:	02 2f       	mov	r16, r18
    1720:	b3 2e       	mov	r11, r19
    1722:	1c c0       	rjmp	.+56     	; 0x175c <pwm_init+0x28a>
		}
		else if(NUM_REQUIRED_TICKS_1024_PRE < (uint16_t)65535)//apply the frequency formulA on prescaler=1 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=1 for it) we have to increase the prescaler and apply the formulA again
    1724:	a7 01       	movw	r20, r14
    1726:	96 01       	movw	r18, r12
    1728:	01 2e       	mov	r0, r17
    172a:	1a e0       	ldi	r17, 0x0A	; 10
    172c:	22 0f       	add	r18, r18
    172e:	33 1f       	adc	r19, r19
    1730:	44 1f       	adc	r20, r20
    1732:	55 1f       	adc	r21, r21
    1734:	1a 95       	dec	r17
    1736:	d1 f7       	brne	.-12     	; 0x172c <pwm_init+0x25a>
    1738:	10 2d       	mov	r17, r0
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	72 e1       	ldi	r23, 0x12	; 18
    173e:	8a e7       	ldi	r24, 0x7A	; 122
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    1746:	2f 3f       	cpi	r18, 0xFF	; 255
    1748:	8f ef       	ldi	r24, 0xFF	; 255
    174a:	38 07       	cpc	r19, r24
    174c:	41 05       	cpc	r20, r1
    174e:	51 05       	cpc	r21, r1
    1750:	28 f4       	brcc	.+10     	; 0x175c <pwm_init+0x28a>
		{
			TCCR1B |= (1<<CS10)|(1<<CS12); //
    1752:	8e b5       	in	r24, 0x2e	; 46
    1754:	85 60       	ori	r24, 0x05	; 5
    1756:	8e bd       	out	0x2e, r24	; 46
			ICR1_buffer = NUM_REQUIRED_TICKS_1024_PRE;
    1758:	02 2f       	mov	r16, r18
    175a:	b3 2e       	mov	r11, r19
		}

		ICR1H=ICR1_buffer >> 8;
    175c:	b7 bc       	out	0x27, r11	; 39
		ICR1L=(ICR1_buffer & 0x00ff);
    175e:	06 bd       	out	0x26, r16	; 38
		TCCR1B |= (1<<WGM12)|(1<<WGM13); // SET THE BIT (FAST PWM WITH ICR1 AS TOP)
    1760:	8e b5       	in	r24, 0x2e	; 46
    1762:	88 61       	ori	r24, 0x18	; 24
    1764:	8e bd       	out	0x2e, r24	; 46
		TCCR1A |= (1<<WGM11);
    1766:	8f b5       	in	r24, 0x2f	; 47
    1768:	82 60       	ori	r24, 0x02	; 2
    176a:	8f bd       	out	0x2f, r24	; 47
		TCCR1A &= ~(1 << WGM10);
    176c:	8f b5       	in	r24, 0x2f	; 47
    176e:	8e 7f       	andi	r24, 0xFE	; 254
    1770:	8f bd       	out	0x2f, r24	; 47
	}
	
	
	
	if (pwm_no & PWM3)
    1772:	13 ff       	sbrs	r17, 3
    1774:	e7 c0       	rjmp	.+462    	; 0x1944 <pwm_init+0x472>
	{
		TCCR2 &= ~(0x07); // clear any previous pre scalers
    1776:	85 b5       	in	r24, 0x25	; 37
    1778:	88 7f       	andi	r24, 0xF8	; 248
    177a:	85 bd       	out	0x25, r24	; 37
		
		if(NUM_REQUIRED_TICKS_NO_PRE < 255) //apply the frequency formula on prescaler = 1 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=1 for it) we have to increase the prescaler and apply the formulA again
    177c:	6e 01       	movw	r12, r28
    177e:	e1 2c       	mov	r14, r1
    1780:	f1 2c       	mov	r15, r1
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	72 e1       	ldi	r23, 0x12	; 18
    1786:	8a e7       	ldi	r24, 0x7A	; 122
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	a7 01       	movw	r20, r14
    178c:	96 01       	movw	r18, r12
    178e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    1792:	2f 3f       	cpi	r18, 0xFF	; 255
    1794:	31 05       	cpc	r19, r1
    1796:	41 05       	cpc	r20, r1
    1798:	51 05       	cpc	r21, r1
    179a:	18 f4       	brcc	.+6      	; 0x17a2 <pwm_init+0x2d0>
		{
			TCCR2 = (1 << CS20);
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	85 bd       	out	0x25, r24	; 37
    17a0:	ce c0       	rjmp	.+412    	; 0x193e <pwm_init+0x46c>
		}
		else if(NUM_REQUIRED_TICKS_8_PRE < 255) //apply the frequency formula on prescaler = 8 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler = 8 for it) we have to increase the prescaler and apply the formulA again
    17a2:	d7 01       	movw	r26, r14
    17a4:	c6 01       	movw	r24, r12
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	aa 1f       	adc	r26, r26
    17ac:	bb 1f       	adc	r27, r27
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	aa 1f       	adc	r26, r26
    17b4:	bb 1f       	adc	r27, r27
    17b6:	9c 01       	movw	r18, r24
    17b8:	ad 01       	movw	r20, r26
    17ba:	22 0f       	add	r18, r18
    17bc:	33 1f       	adc	r19, r19
    17be:	44 1f       	adc	r20, r20
    17c0:	55 1f       	adc	r21, r21
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	72 e1       	ldi	r23, 0x12	; 18
    17c6:	8a e7       	ldi	r24, 0x7A	; 122
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    17ce:	2f 3f       	cpi	r18, 0xFF	; 255
    17d0:	31 05       	cpc	r19, r1
    17d2:	41 05       	cpc	r20, r1
    17d4:	51 05       	cpc	r21, r1
    17d6:	20 f4       	brcc	.+8      	; 0x17e0 <pwm_init+0x30e>
		{
			TCCR2 |= (1<<CS21); //
    17d8:	85 b5       	in	r24, 0x25	; 37
    17da:	82 60       	ori	r24, 0x02	; 2
    17dc:	85 bd       	out	0x25, r24	; 37
    17de:	af c0       	rjmp	.+350    	; 0x193e <pwm_init+0x46c>
		}
		else if(NUM_REQUIRED_TICKS_32_PRE < 255) //apply the frequency formula on prescaler = 8 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler = 8 for it) we have to increase the prescaler and apply the formulA again
    17e0:	d7 01       	movw	r26, r14
    17e2:	c6 01       	movw	r24, r12
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	aa 1f       	adc	r26, r26
    17ea:	bb 1f       	adc	r27, r27
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	aa 1f       	adc	r26, r26
    17f2:	bb 1f       	adc	r27, r27
    17f4:	88 0f       	add	r24, r24
    17f6:	99 1f       	adc	r25, r25
    17f8:	aa 1f       	adc	r26, r26
    17fa:	bb 1f       	adc	r27, r27
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	aa 1f       	adc	r26, r26
    1802:	bb 1f       	adc	r27, r27
    1804:	9c 01       	movw	r18, r24
    1806:	ad 01       	movw	r20, r26
    1808:	22 0f       	add	r18, r18
    180a:	33 1f       	adc	r19, r19
    180c:	44 1f       	adc	r20, r20
    180e:	55 1f       	adc	r21, r21
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	72 e1       	ldi	r23, 0x12	; 18
    1814:	8a e7       	ldi	r24, 0x7A	; 122
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    181c:	2f 3f       	cpi	r18, 0xFF	; 255
    181e:	31 05       	cpc	r19, r1
    1820:	41 05       	cpc	r20, r1
    1822:	51 05       	cpc	r21, r1
    1824:	20 f4       	brcc	.+8      	; 0x182e <pwm_init+0x35c>
		{
			TCCR2 |= (1 << CS20) | (1 << CS21); //
    1826:	85 b5       	in	r24, 0x25	; 37
    1828:	83 60       	ori	r24, 0x03	; 3
    182a:	85 bd       	out	0x25, r24	; 37
    182c:	88 c0       	rjmp	.+272    	; 0x193e <pwm_init+0x46c>
		}
		else if(NUM_REQUIRED_TICKS_64_PRE < 255)//apply the frequency formula on prescaler = 64 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=64 for it) we have to increase the prescaler and apply the formulA again
    182e:	d7 01       	movw	r26, r14
    1830:	c6 01       	movw	r24, r12
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	aa 1f       	adc	r26, r26
    1838:	bb 1f       	adc	r27, r27
    183a:	88 0f       	add	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	aa 1f       	adc	r26, r26
    1840:	bb 1f       	adc	r27, r27
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	aa 1f       	adc	r26, r26
    1848:	bb 1f       	adc	r27, r27
    184a:	88 0f       	add	r24, r24
    184c:	99 1f       	adc	r25, r25
    184e:	aa 1f       	adc	r26, r26
    1850:	bb 1f       	adc	r27, r27
    1852:	9c 01       	movw	r18, r24
    1854:	ad 01       	movw	r20, r26
    1856:	22 0f       	add	r18, r18
    1858:	33 1f       	adc	r19, r19
    185a:	44 1f       	adc	r20, r20
    185c:	55 1f       	adc	r21, r21
    185e:	22 0f       	add	r18, r18
    1860:	33 1f       	adc	r19, r19
    1862:	44 1f       	adc	r20, r20
    1864:	55 1f       	adc	r21, r21
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	72 e1       	ldi	r23, 0x12	; 18
    186a:	8a e7       	ldi	r24, 0x7A	; 122
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    1872:	2f 3f       	cpi	r18, 0xFF	; 255
    1874:	31 05       	cpc	r19, r1
    1876:	41 05       	cpc	r20, r1
    1878:	51 05       	cpc	r21, r1
    187a:	20 f4       	brcc	.+8      	; 0x1884 <pwm_init+0x3b2>
		{
			TCCR2 |= (1 << CS22); //
    187c:	85 b5       	in	r24, 0x25	; 37
    187e:	84 60       	ori	r24, 0x04	; 4
    1880:	85 bd       	out	0x25, r24	; 37
    1882:	5d c0       	rjmp	.+186    	; 0x193e <pwm_init+0x46c>
		}
		else if(NUM_REQUIRED_TICKS_128_PRE < 255)//apply the frequency formula on prescaler = 256 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=256 for it) we have to increase the prescaler and apply the formulA again
    1884:	d7 01       	movw	r26, r14
    1886:	c6 01       	movw	r24, r12
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	aa 1f       	adc	r26, r26
    188e:	bb 1f       	adc	r27, r27
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	aa 1f       	adc	r26, r26
    1896:	bb 1f       	adc	r27, r27
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	aa 1f       	adc	r26, r26
    189e:	bb 1f       	adc	r27, r27
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	aa 1f       	adc	r26, r26
    18a6:	bb 1f       	adc	r27, r27
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	aa 1f       	adc	r26, r26
    18ae:	bb 1f       	adc	r27, r27
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	aa 1f       	adc	r26, r26
    18b6:	bb 1f       	adc	r27, r27
    18b8:	9c 01       	movw	r18, r24
    18ba:	ad 01       	movw	r20, r26
    18bc:	22 0f       	add	r18, r18
    18be:	33 1f       	adc	r19, r19
    18c0:	44 1f       	adc	r20, r20
    18c2:	55 1f       	adc	r21, r21
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	72 e1       	ldi	r23, 0x12	; 18
    18c8:	8a e7       	ldi	r24, 0x7A	; 122
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    18d0:	2f 3f       	cpi	r18, 0xFF	; 255
    18d2:	31 05       	cpc	r19, r1
    18d4:	41 05       	cpc	r20, r1
    18d6:	51 05       	cpc	r21, r1
    18d8:	20 f4       	brcc	.+8      	; 0x18e2 <pwm_init+0x410>
		{
			TCCR2 |= (1 << CS20) | (1 << CS22); //
    18da:	85 b5       	in	r24, 0x25	; 37
    18dc:	85 60       	ori	r24, 0x05	; 5
    18de:	85 bd       	out	0x25, r24	; 37
    18e0:	2e c0       	rjmp	.+92     	; 0x193e <pwm_init+0x46c>

		}
		else if(NUM_REQUIRED_TICKS_256_PRE < 255)//apply the frequency formula on prescaler = 256 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=256 for it) we have to increase the prescaler and apply the formulA again
    18e2:	3e 2d       	mov	r19, r14
    18e4:	2d 2d       	mov	r18, r13
    18e6:	1c 2d       	mov	r17, r12
    18e8:	00 27       	eor	r16, r16
    18ea:	60 e0       	ldi	r22, 0x00	; 0
    18ec:	72 e1       	ldi	r23, 0x12	; 18
    18ee:	8a e7       	ldi	r24, 0x7A	; 122
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	a9 01       	movw	r20, r18
    18f4:	98 01       	movw	r18, r16
    18f6:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    18fa:	2f 3f       	cpi	r18, 0xFF	; 255
    18fc:	31 05       	cpc	r19, r1
    18fe:	41 05       	cpc	r20, r1
    1900:	51 05       	cpc	r21, r1
    1902:	20 f4       	brcc	.+8      	; 0x190c <pwm_init+0x43a>
		{
			TCCR2 |= (1 << CS21) | (1 << CS22); //
    1904:	85 b5       	in	r24, 0x25	; 37
    1906:	86 60       	ori	r24, 0x06	; 6
    1908:	85 bd       	out	0x25, r24	; 37
    190a:	19 c0       	rjmp	.+50     	; 0x193e <pwm_init+0x46c>
		}
		else if(NUM_REQUIRED_TICKS_1024_PRE < 255)//apply the frequency formulA on prescaler=1 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=1 for it) we have to increase the prescaler and apply the formulA again
    190c:	a7 01       	movw	r20, r14
    190e:	96 01       	movw	r18, r12
    1910:	01 2e       	mov	r0, r17
    1912:	1a e0       	ldi	r17, 0x0A	; 10
    1914:	22 0f       	add	r18, r18
    1916:	33 1f       	adc	r19, r19
    1918:	44 1f       	adc	r20, r20
    191a:	55 1f       	adc	r21, r21
    191c:	1a 95       	dec	r17
    191e:	d1 f7       	brne	.-12     	; 0x1914 <pwm_init+0x442>
    1920:	10 2d       	mov	r17, r0
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	72 e1       	ldi	r23, 0x12	; 18
    1926:	8a e7       	ldi	r24, 0x7A	; 122
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    192e:	2f 3f       	cpi	r18, 0xFF	; 255
    1930:	31 05       	cpc	r19, r1
    1932:	41 05       	cpc	r20, r1
    1934:	51 05       	cpc	r21, r1
    1936:	18 f4       	brcc	.+6      	; 0x193e <pwm_init+0x46c>
		{
			TCCR2 |= (1 << CS20) | (1 << CS22) | (1 << CS21);    
    1938:	85 b5       	in	r24, 0x25	; 37
    193a:	87 60       	ori	r24, 0x07	; 7
    193c:	85 bd       	out	0x25, r24	; 37
		}

		TCCR2 |= (1<<WGM20) | (1<<WGM21); // SET THE BIT (FAST PWM WITH ICR1 AS TOP)
    193e:	85 b5       	in	r24, 0x25	; 37
    1940:	88 64       	ori	r24, 0x48	; 72
    1942:	85 bd       	out	0x25, r24	; 37
	}
	
}
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	1f 91       	pop	r17
    194a:	0f 91       	pop	r16
    194c:	ff 90       	pop	r15
    194e:	ef 90       	pop	r14
    1950:	df 90       	pop	r13
    1952:	cf 90       	pop	r12
    1954:	bf 90       	pop	r11
    1956:	af 90       	pop	r10
    1958:	9f 90       	pop	r9
    195a:	8f 90       	pop	r8
    195c:	7f 90       	pop	r7
    195e:	6f 90       	pop	r6
    1960:	5f 90       	pop	r5
    1962:	4f 90       	pop	r4
    1964:	08 95       	ret

00001966 <pwm_start>:

void pwm_start(uint8_t pwm_no)
{
    1966:	cf 93       	push	r28
    1968:	c8 2f       	mov	r28, r24
	if (pwm_no & PWM0)
    196a:	80 ff       	sbrs	r24, 0
    196c:	0a c0       	rjmp	.+20     	; 0x1982 <pwm_start+0x1c>
	{
		DIO_SET_DIR(DIO_OC0, DIO_OUTPUT);
    196e:	61 e0       	ldi	r22, 0x01	; 1
    1970:	8b e0       	ldi	r24, 0x0B	; 11
    1972:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
		TCCR0 |= (1 << COM01);
    1976:	83 b7       	in	r24, 0x33	; 51
    1978:	80 62       	ori	r24, 0x20	; 32
    197a:	83 bf       	out	0x33, r24	; 51
		TCCR0 &= ~(1<<COM00);
    197c:	83 b7       	in	r24, 0x33	; 51
    197e:	8f 7e       	andi	r24, 0xEF	; 239
    1980:	83 bf       	out	0x33, r24	; 51
	}
	
	if (pwm_no & PWM1)
    1982:	c1 ff       	sbrs	r28, 1
    1984:	0a c0       	rjmp	.+20     	; 0x199a <pwm_start+0x34>
	{
		DIO_SET_DIR(DIO_OC1A, DIO_OUTPUT);
    1986:	61 e0       	ldi	r22, 0x01	; 1
    1988:	8d e1       	ldi	r24, 0x1D	; 29
    198a:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
		TCCR1A &= ~(1 << COM1A0);
    198e:	8f b5       	in	r24, 0x2f	; 47
    1990:	8f 7b       	andi	r24, 0xBF	; 191
    1992:	8f bd       	out	0x2f, r24	; 47
		TCCR1A |= (1 << COM1A1); // SET THE BIT( START CLEAR ON COMPARE) (FAST PWM WITH ICR1 AS TOP) respectively
    1994:	8f b5       	in	r24, 0x2f	; 47
    1996:	80 68       	ori	r24, 0x80	; 128
    1998:	8f bd       	out	0x2f, r24	; 47
	}
	
	if (pwm_no & PWM2)
    199a:	c2 ff       	sbrs	r28, 2
    199c:	0a c0       	rjmp	.+20     	; 0x19b2 <pwm_start+0x4c>
	{
		DIO_SET_DIR(DIO_OC1B, DIO_OUTPUT);
    199e:	61 e0       	ldi	r22, 0x01	; 1
    19a0:	8c e1       	ldi	r24, 0x1C	; 28
    19a2:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
		TCCR1A &= ~(1 << COM1B0);
    19a6:	8f b5       	in	r24, 0x2f	; 47
    19a8:	8f 7e       	andi	r24, 0xEF	; 239
    19aa:	8f bd       	out	0x2f, r24	; 47
		TCCR1A |= (1 << COM1B1); // SET THE BIT ON (SET ON START, CLEAR ON COMPARE) (FAST PWM WITH ICR1 AS TOP)
    19ac:	8f b5       	in	r24, 0x2f	; 47
    19ae:	80 62       	ori	r24, 0x20	; 32
    19b0:	8f bd       	out	0x2f, r24	; 47
	}
	
	if (pwm_no & PWM3)
    19b2:	c3 ff       	sbrs	r28, 3
    19b4:	0b c0       	rjmp	.+22     	; 0x19cc <pwm_start+0x66>
	{
		DIO_SET_DIR(DIO_OC2, DIO_OUTPUT);
    19b6:	61 e0       	ldi	r22, 0x01	; 1
    19b8:	8f e1       	ldi	r24, 0x1F	; 31
    19ba:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
		DDRD |= (1 << 7);
    19be:	8f 9a       	sbi	0x11, 7	; 17
		TCCR2 |= (1 << COM21);
    19c0:	85 b5       	in	r24, 0x25	; 37
    19c2:	80 62       	ori	r24, 0x20	; 32
    19c4:	85 bd       	out	0x25, r24	; 37
		TCCR2 &= ~(1 << COM20);
    19c6:	85 b5       	in	r24, 0x25	; 37
    19c8:	8f 7e       	andi	r24, 0xEF	; 239
    19ca:	85 bd       	out	0x25, r24	; 37
	}
	
	
}
    19cc:	cf 91       	pop	r28
    19ce:	08 95       	ret

000019d0 <pwm_setDuty>:

void pwm_setDuty(uint8_t pwn_no, uint8_t duty_percent)
{
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	d8 2f       	mov	r29, r24
    19d6:	c6 2f       	mov	r28, r22
	if (pwn_no & PWM0)
    19d8:	80 ff       	sbrs	r24, 0
    19da:	19 c0       	rjmp	.+50     	; 0x1a0e <pwm_setDuty+0x3e>
	{
		if (duty_percent == 100) // if the duty cycle is 100% putting OCR1A the same number as as top value will cause A compare and overflow at the same time which only one of the is going to be activated so we put it equal TOP value( which held in ICR1)-1
    19dc:	64 36       	cpi	r22, 0x64	; 100
    19de:	29 f4       	brne	.+10     	; 0x19ea <pwm_setDuty+0x1a>
			OCR0 = 255;
    19e0:	8f ef       	ldi	r24, 0xFF	; 255
    19e2:	8c bf       	out	0x3c, r24	; 60
		else
			OCR0 = (255 * (uint16_t)duty_percent) / 100;
	}
	
	if (pwn_no & PWM1)    
    19e4:	d1 fd       	sbrc	r29, 1
    19e6:	17 c0       	rjmp	.+46     	; 0x1a16 <pwm_setDuty+0x46>
    19e8:	7b c0       	rjmp	.+246    	; 0x1ae0 <pwm_setDuty+0x110>
	if (pwn_no & PWM0)
	{
		if (duty_percent == 100) // if the duty cycle is 100% putting OCR1A the same number as as top value will cause A compare and overflow at the same time which only one of the is going to be activated so we put it equal TOP value( which held in ICR1)-1
			OCR0 = 255;
		else
			OCR0 = (255 * (uint16_t)duty_percent) / 100;
    19ea:	8f ef       	ldi	r24, 0xFF	; 255
    19ec:	68 9f       	mul	r22, r24
    19ee:	90 01       	movw	r18, r0
    19f0:	11 24       	eor	r1, r1
    19f2:	36 95       	lsr	r19
    19f4:	27 95       	ror	r18
    19f6:	36 95       	lsr	r19
    19f8:	27 95       	ror	r18
    19fa:	ab e7       	ldi	r26, 0x7B	; 123
    19fc:	b4 e1       	ldi	r27, 0x14	; 20
    19fe:	0e 94 19 11 	call	0x2232	; 0x2232 <__umulhisi3>
    1a02:	96 95       	lsr	r25
    1a04:	87 95       	ror	r24
    1a06:	8c bf       	out	0x3c, r24	; 60
	}
	
	if (pwn_no & PWM1)    
    1a08:	d1 fd       	sbrc	r29, 1
    1a0a:	14 c0       	rjmp	.+40     	; 0x1a34 <pwm_setDuty+0x64>
    1a0c:	6c c0       	rjmp	.+216    	; 0x1ae6 <pwm_setDuty+0x116>
    1a0e:	81 ff       	sbrs	r24, 1
    1a10:	27 c0       	rjmp	.+78     	; 0x1a60 <pwm_setDuty+0x90>
	{
		if (duty_percent == 100) // if the duty cycle is 100% putting OCR1A the same number as as top value will cause A compare and overflow at the same time which only one of the is going to be activated so we put it equal TOP value( which held in ICR1)-1
    1a12:	64 36       	cpi	r22, 0x64	; 100
    1a14:	79 f4       	brne	.+30     	; 0x1a34 <pwm_setDuty+0x64>
			OCR1A = ((ICR1L) + ((uint16_t)ICR1H << 8)) - 1;
    1a16:	96 b5       	in	r25, 0x26	; 38
    1a18:	27 b5       	in	r18, 0x27	; 39
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	32 2f       	mov	r19, r18
    1a1e:	22 27       	eor	r18, r18
    1a20:	89 2f       	mov	r24, r25
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	82 0f       	add	r24, r18
    1a28:	93 1f       	adc	r25, r19
    1a2a:	9b bd       	out	0x2b, r25	; 43
    1a2c:	8a bd       	out	0x2a, r24	; 42
		else
			OCR1A = ((uint32_t)((ICR1L) + ((uint16_t)ICR1H << 8)) * duty_percent) / 100;
	}
	
	if (pwn_no & PWM2)    
    1a2e:	d2 fd       	sbrc	r29, 2
    1a30:	1b c0       	rjmp	.+54     	; 0x1a68 <pwm_setDuty+0x98>
    1a32:	3f c0       	rjmp	.+126    	; 0x1ab2 <pwm_setDuty+0xe2>
	if (pwn_no & PWM1)    
	{
		if (duty_percent == 100) // if the duty cycle is 100% putting OCR1A the same number as as top value will cause A compare and overflow at the same time which only one of the is going to be activated so we put it equal TOP value( which held in ICR1)-1
			OCR1A = ((ICR1L) + ((uint16_t)ICR1H << 8)) - 1;
		else
			OCR1A = ((uint32_t)((ICR1L) + ((uint16_t)ICR1H << 8)) * duty_percent) / 100;
    1a34:	86 b5       	in	r24, 0x26	; 38
    1a36:	27 b5       	in	r18, 0x27	; 39
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	32 2f       	mov	r19, r18
    1a3c:	22 27       	eor	r18, r18
    1a3e:	28 0f       	add	r18, r24
    1a40:	31 1d       	adc	r19, r1
    1a42:	ac 2f       	mov	r26, r28
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	0e 94 19 11 	call	0x2232	; 0x2232 <__umulhisi3>
    1a4a:	24 e6       	ldi	r18, 0x64	; 100
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    1a56:	3b bd       	out	0x2b, r19	; 43
    1a58:	2a bd       	out	0x2a, r18	; 42
	}
	
	if (pwn_no & PWM2)    
    1a5a:	d2 fd       	sbrc	r29, 2
    1a5c:	14 c0       	rjmp	.+40     	; 0x1a86 <pwm_setDuty+0xb6>
    1a5e:	29 c0       	rjmp	.+82     	; 0x1ab2 <pwm_setDuty+0xe2>
    1a60:	82 ff       	sbrs	r24, 2
    1a62:	27 c0       	rjmp	.+78     	; 0x1ab2 <pwm_setDuty+0xe2>
	{
		if (duty_percent == 100)// if the duty cycle is 100% putting OCR1A the same number as as top value will cause A compare and overflow at the same time which only one of the is going to be activated so we put it equal TOP value( which held in ICR1)-1
    1a64:	64 36       	cpi	r22, 0x64	; 100
    1a66:	79 f4       	brne	.+30     	; 0x1a86 <pwm_setDuty+0xb6>
			OCR1B = ((ICR1L) + ((uint16_t)ICR1H << 8)) - 1;
    1a68:	96 b5       	in	r25, 0x26	; 38
    1a6a:	27 b5       	in	r18, 0x27	; 39
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	32 2f       	mov	r19, r18
    1a70:	22 27       	eor	r18, r18
    1a72:	89 2f       	mov	r24, r25
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	82 0f       	add	r24, r18
    1a7a:	93 1f       	adc	r25, r19
    1a7c:	99 bd       	out	0x29, r25	; 41
    1a7e:	88 bd       	out	0x28, r24	; 40
		else
			OCR1B =((uint32_t)((ICR1L) + ((uint16_t)ICR1H << 8))  * duty_percent) / 100;
	}
	
	if (pwn_no & PWM3)
    1a80:	d3 fd       	sbrc	r29, 3
    1a82:	1b c0       	rjmp	.+54     	; 0x1aba <pwm_setDuty+0xea>
    1a84:	33 c0       	rjmp	.+102    	; 0x1aec <pwm_setDuty+0x11c>
	if (pwn_no & PWM2)    
	{
		if (duty_percent == 100)// if the duty cycle is 100% putting OCR1A the same number as as top value will cause A compare and overflow at the same time which only one of the is going to be activated so we put it equal TOP value( which held in ICR1)-1
			OCR1B = ((ICR1L) + ((uint16_t)ICR1H << 8)) - 1;
		else
			OCR1B =((uint32_t)((ICR1L) + ((uint16_t)ICR1H << 8))  * duty_percent) / 100;
    1a86:	86 b5       	in	r24, 0x26	; 38
    1a88:	27 b5       	in	r18, 0x27	; 39
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	32 2f       	mov	r19, r18
    1a8e:	22 27       	eor	r18, r18
    1a90:	28 0f       	add	r18, r24
    1a92:	31 1d       	adc	r19, r1
    1a94:	ac 2f       	mov	r26, r28
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	0e 94 19 11 	call	0x2232	; 0x2232 <__umulhisi3>
    1a9c:	24 e6       	ldi	r18, 0x64	; 100
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	50 e0       	ldi	r21, 0x00	; 0
    1aa4:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    1aa8:	39 bd       	out	0x29, r19	; 41
    1aaa:	28 bd       	out	0x28, r18	; 40
	}
	
	if (pwn_no & PWM3)
    1aac:	d3 fd       	sbrc	r29, 3
    1aae:	08 c0       	rjmp	.+16     	; 0x1ac0 <pwm_setDuty+0xf0>
    1ab0:	1d c0       	rjmp	.+58     	; 0x1aec <pwm_setDuty+0x11c>
    1ab2:	d3 ff       	sbrs	r29, 3
    1ab4:	1b c0       	rjmp	.+54     	; 0x1aec <pwm_setDuty+0x11c>
	{
		if (duty_percent == 100) // if the duty cycle is 100% putting OCR1A the same number as as top value will cause A compare and overflow at the same time which only one of the is going to be activated so we put it equal TOP value( which held in ICR1)-1
    1ab6:	c4 36       	cpi	r28, 0x64	; 100
    1ab8:	19 f4       	brne	.+6      	; 0x1ac0 <pwm_setDuty+0xf0>
			OCR2 = 255;
    1aba:	8f ef       	ldi	r24, 0xFF	; 255
    1abc:	83 bd       	out	0x23, r24	; 35
    1abe:	16 c0       	rjmp	.+44     	; 0x1aec <pwm_setDuty+0x11c>
		else
			OCR2 = (255 * (uint16_t)duty_percent) / 100;
    1ac0:	8f ef       	ldi	r24, 0xFF	; 255
    1ac2:	c8 9f       	mul	r28, r24
    1ac4:	90 01       	movw	r18, r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	36 95       	lsr	r19
    1aca:	27 95       	ror	r18
    1acc:	36 95       	lsr	r19
    1ace:	27 95       	ror	r18
    1ad0:	ab e7       	ldi	r26, 0x7B	; 123
    1ad2:	b4 e1       	ldi	r27, 0x14	; 20
    1ad4:	0e 94 19 11 	call	0x2232	; 0x2232 <__umulhisi3>
    1ad8:	96 95       	lsr	r25
    1ada:	87 95       	ror	r24
    1adc:	83 bd       	out	0x23, r24	; 35
	}

}
    1ade:	06 c0       	rjmp	.+12     	; 0x1aec <pwm_setDuty+0x11c>
			OCR1A = ((ICR1L) + ((uint16_t)ICR1H << 8)) - 1;
		else
			OCR1A = ((uint32_t)((ICR1L) + ((uint16_t)ICR1H << 8)) * duty_percent) / 100;
	}
	
	if (pwn_no & PWM2)    
    1ae0:	d2 fd       	sbrc	r29, 2
    1ae2:	c2 cf       	rjmp	.-124    	; 0x1a68 <pwm_setDuty+0x98>
    1ae4:	e6 cf       	rjmp	.-52     	; 0x1ab2 <pwm_setDuty+0xe2>
    1ae6:	d2 fd       	sbrc	r29, 2
    1ae8:	ce cf       	rjmp	.-100    	; 0x1a86 <pwm_setDuty+0xb6>
    1aea:	e3 cf       	rjmp	.-58     	; 0x1ab2 <pwm_setDuty+0xe2>
			OCR2 = 255;
		else
			OCR2 = (255 * (uint16_t)duty_percent) / 100;
	}

}
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	08 95       	ret

00001af2 <create_list>:
}

uint8_t get_size(start_t * st)
{
    return st->size;
}
    1af2:	86 e0       	ldi	r24, 0x06	; 6
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	0e 94 28 11 	call	0x2250	; 0x2250 <malloc>
    1afa:	fc 01       	movw	r30, r24
    1afc:	11 82       	std	Z+1, r1	; 0x01
    1afe:	10 82       	st	Z, r1
    1b00:	13 82       	std	Z+3, r1	; 0x03
    1b02:	12 82       	std	Z+2, r1	; 0x02
    1b04:	15 82       	std	Z+5, r1	; 0x05
    1b06:	14 82       	std	Z+4, r1	; 0x04
    1b08:	08 95       	ret

00001b0a <push>:

void push(volatile start_t * st, void * element, uint8_t element_size)
{
    1b0a:	cf 92       	push	r12
    1b0c:	df 92       	push	r13
    1b0e:	ef 92       	push	r14
    1b10:	ff 92       	push	r15
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	cf 93       	push	r28
    1b18:	df 93       	push	r29
    1b1a:	ec 01       	movw	r28, r24
    1b1c:	6b 01       	movw	r12, r22
    1b1e:	04 2f       	mov	r16, r20
	return st;
}

static void * create_node(void * entry, uint8_t size)
{
	node_t * tmp_node = malloc(sizeof(node_t));//allocate a node to be added to the list
    1b20:	84 e0       	ldi	r24, 0x04	; 4
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	0e 94 28 11 	call	0x2250	; 0x2250 <malloc>
    1b28:	7c 01       	movw	r14, r24
	//allocate an element that will contain the element data
	tmp_node->p_element = malloc(size);
    1b2a:	10 e0       	ldi	r17, 0x00	; 0
    1b2c:	c8 01       	movw	r24, r16
    1b2e:	0e 94 28 11 	call	0x2250	; 0x2250 <malloc>
    1b32:	f7 01       	movw	r30, r14
    1b34:	91 83       	std	Z+1, r25	; 0x01
    1b36:	80 83       	st	Z, r24
	//copy the data in *entry to the element side
	memcpy(tmp_node->p_element, entry, size);//(destination, source, element_size)
    1b38:	a8 01       	movw	r20, r16
    1b3a:	b6 01       	movw	r22, r12
    1b3c:	0e 94 49 12 	call	0x2492	; 0x2492 <memcpy>

	tmp_node->next = NULL;
    1b40:	f7 01       	movw	r30, r14
    1b42:	13 82       	std	Z+3, r1	; 0x03
    1b44:	12 82       	std	Z+2, r1	; 0x02

void push(volatile start_t * st, void * element, uint8_t element_size)
{
    node_t * p_new_node = create_node(element, element_size);

    if (st->size == 0) // if its empty .. put one node and make the front and the rear point at it
    1b46:	8c 81       	ldd	r24, Y+4	; 0x04
    1b48:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4a:	89 2b       	or	r24, r25
    1b4c:	29 f4       	brne	.+10     	; 0x1b58 <push+0x4e>
    {
        st->front = p_new_node;
    1b4e:	f9 82       	std	Y+1, r15	; 0x01
    1b50:	e8 82       	st	Y, r14
        st->rear = p_new_node;
    1b52:	fb 82       	std	Y+3, r15	; 0x03
    1b54:	ea 82       	std	Y+2, r14	; 0x02
    1b56:	0a c0       	rjmp	.+20     	; 0x1b6c <push+0x62>
    }
    else //if it's not empty ... make the add it at the rear side and make the rear point at it
    {
        st->rear->next = p_new_node;
    1b58:	ea 81       	ldd	r30, Y+2	; 0x02
    1b5a:	fb 81       	ldd	r31, Y+3	; 0x03
    1b5c:	f3 82       	std	Z+3, r15	; 0x03
    1b5e:	e2 82       	std	Z+2, r14	; 0x02
        st->rear = st->rear->next;
    1b60:	ea 81       	ldd	r30, Y+2	; 0x02
    1b62:	fb 81       	ldd	r31, Y+3	; 0x03
    1b64:	82 81       	ldd	r24, Z+2	; 0x02
    1b66:	93 81       	ldd	r25, Z+3	; 0x03
    1b68:	9b 83       	std	Y+3, r25	; 0x03
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
    }

    st->size += 1;
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b70:	01 96       	adiw	r24, 0x01	; 1
    1b72:	9d 83       	std	Y+5, r25	; 0x05
    1b74:	8c 83       	std	Y+4, r24	; 0x04
}
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	ff 90       	pop	r15
    1b80:	ef 90       	pop	r14
    1b82:	df 90       	pop	r13
    1b84:	cf 90       	pop	r12
    1b86:	08 95       	ret

00001b88 <pop>:

uint8_t pop(start_t * const st, void * popped_e, uint16_t element_size)
{
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29

    if (st->size == 0)
    1b90:	fc 01       	movw	r30, r24
    1b92:	24 81       	ldd	r18, Z+4	; 0x04
    1b94:	35 81       	ldd	r19, Z+5	; 0x05
    1b96:	23 2b       	or	r18, r19
    1b98:	f9 f0       	breq	.+62     	; 0x1bd8 <pop+0x50>
    1b9a:	9b 01       	movw	r18, r22
    1b9c:	ec 01       	movw	r28, r24
    else
    {
        
		
		//copy the front node's element to the popped_e .. because we are going to free the front node after pop operation finishes
		memcpy(popped_e, st->front->p_element, element_size);
    1b9e:	01 90       	ld	r0, Z+
    1ba0:	f0 81       	ld	r31, Z
    1ba2:	e0 2d       	mov	r30, r0
    1ba4:	60 81       	ld	r22, Z
    1ba6:	71 81       	ldd	r23, Z+1	; 0x01
    1ba8:	c9 01       	movw	r24, r18
    1baa:	0e 94 49 12 	call	0x2492	; 0x2492 <memcpy>
		
		//define a pointer that points to the front node
		node_t * tmp_node = st->front;
    1bae:	08 81       	ld	r16, Y
    1bb0:	19 81       	ldd	r17, Y+1	; 0x01
        //make the front pointer points to the next node
        st->front = st->front->next;
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	99 83       	std	Y+1, r25	; 0x01
    1bba:	88 83       	st	Y, r24
		
		//free the node that was popped
		free(tmp_node->p_element);
    1bbc:	80 81       	ld	r24, Z
    1bbe:	91 81       	ldd	r25, Z+1	; 0x01
    1bc0:	0e 94 c0 11 	call	0x2380	; 0x2380 <free>
		free(tmp_node);
    1bc4:	c8 01       	movw	r24, r16
    1bc6:	0e 94 c0 11 	call	0x2380	; 0x2380 <free>
		
        (st->size) -= 1;
    1bca:	8c 81       	ldd	r24, Y+4	; 0x04
    1bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	9d 83       	std	Y+5, r25	; 0x05
    1bd2:	8c 83       	std	Y+4, r24	; 0x04

        return 1;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	01 c0       	rjmp	.+2      	; 0x1bda <pop+0x52>
uint8_t pop(start_t * const st, void * popped_e, uint16_t element_size)
{

    if (st->size == 0)
    {
        return ERROR;
    1bd8:	8f ef       	ldi	r24, 0xFF	; 255
        (st->size) -= 1;

        return 1;
    }

}
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	08 95       	ret

00001be4 <spi_send>:
	{
		spi_exchange(spi_num, Str[i]);
		i++;
	}
	
}
    1be4:	ff 92       	push	r15
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	44 23       	and	r20, r20
    1bf0:	81 f0       	breq	.+32     	; 0x1c12 <spi_send+0x2e>
    1bf2:	f8 2e       	mov	r15, r24
    1bf4:	eb 01       	movw	r28, r22
    1bf6:	41 50       	subi	r20, 0x01	; 1
    1bf8:	04 2f       	mov	r16, r20
    1bfa:	10 e0       	ldi	r17, 0x00	; 0
    1bfc:	0f 5f       	subi	r16, 0xFF	; 255
    1bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    1c00:	06 0f       	add	r16, r22
    1c02:	17 1f       	adc	r17, r23
    1c04:	69 91       	ld	r22, Y+
    1c06:	8f 2d       	mov	r24, r15
    1c08:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
    1c0c:	c0 17       	cp	r28, r16
    1c0e:	d1 07       	cpc	r29, r17
    1c10:	c9 f7       	brne	.-14     	; 0x1c04 <spi_send+0x20>
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	ff 90       	pop	r15
    1c1c:	08 95       	ret

00001c1e <spi_read>:

void spi_read(const uint8_t spi_num, unint8_t *Str, const unint8_t size)
{
    1c1e:	ff 92       	push	r15
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
	unsigned char i = 0;
	
	while (i < size)
    1c28:	44 23       	and	r20, r20
    1c2a:	89 f0       	breq	.+34     	; 0x1c4e <spi_read+0x30>
    1c2c:	f8 2e       	mov	r15, r24
    1c2e:	eb 01       	movw	r28, r22
    1c30:	41 50       	subi	r20, 0x01	; 1
    1c32:	04 2f       	mov	r16, r20
    1c34:	10 e0       	ldi	r17, 0x00	; 0
    1c36:	0f 5f       	subi	r16, 0xFF	; 255
    1c38:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3a:	06 0f       	add	r16, r22
    1c3c:	17 1f       	adc	r17, r23
	{
		Str[i] = spi_exchange(spi_num, 0x00);
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	8f 2d       	mov	r24, r15
    1c42:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <spi_exchange>
    1c46:	89 93       	st	Y+, r24

void spi_read(const uint8_t spi_num, unint8_t *Str, const unint8_t size)
{
	unsigned char i = 0;
	
	while (i < size)
    1c48:	c0 17       	cp	r28, r16
    1c4a:	d1 07       	cpc	r29, r17
    1c4c:	c1 f7       	brne	.-16     	; 0x1c3e <spi_read+0x20>
	{
		Str[i] = spi_exchange(spi_num, 0x00);
		i++;
	}
	
}
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	1f 91       	pop	r17
    1c54:	0f 91       	pop	r16
    1c56:	ff 90       	pop	r15
    1c58:	08 95       	ret

00001c5a <__vector_12>:
	DIO_SET_DIR(SS, DIO_INPUT);
	DIO_SET_DIR(SCK, DIO_INPUT);
	DIO_SET_DIR(MISO, DIO_OUTPUT);
	
	SPCR = (1 << SPE) | (data_order << DORD) | (polarity << CPOL) | (phase << CPHA);
}
    1c5a:	1f 92       	push	r1
    1c5c:	0f 92       	push	r0
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	0f 92       	push	r0
    1c62:	11 24       	eor	r1, r1
    1c64:	2f 93       	push	r18
    1c66:	3f 93       	push	r19
    1c68:	4f 93       	push	r20
    1c6a:	5f 93       	push	r21
    1c6c:	6f 93       	push	r22
    1c6e:	7f 93       	push	r23
    1c70:	8f 93       	push	r24
    1c72:	9f 93       	push	r25
    1c74:	af 93       	push	r26
    1c76:	bf 93       	push	r27
    1c78:	ef 93       	push	r30
    1c7a:	ff 93       	push	r31
    1c7c:	f8 94       	cli
    1c7e:	e0 91 bb 01 	lds	r30, 0x01BB	; 0x8001bb <gp_spi_isr>
    1c82:	f0 91 bc 01 	lds	r31, 0x01BC	; 0x8001bc <gp_spi_isr+0x1>
    1c86:	30 97       	sbiw	r30, 0x00	; 0
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <__vector_12+0x32>
    1c8a:	09 95       	icall
    1c8c:	78 94       	sei
    1c8e:	ff 91       	pop	r31
    1c90:	ef 91       	pop	r30
    1c92:	bf 91       	pop	r27
    1c94:	af 91       	pop	r26
    1c96:	9f 91       	pop	r25
    1c98:	8f 91       	pop	r24
    1c9a:	7f 91       	pop	r23
    1c9c:	6f 91       	pop	r22
    1c9e:	5f 91       	pop	r21
    1ca0:	4f 91       	pop	r20
    1ca2:	3f 91       	pop	r19
    1ca4:	2f 91       	pop	r18
    1ca6:	0f 90       	pop	r0
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	0f 90       	pop	r0
    1cac:	1f 90       	pop	r1
    1cae:	18 95       	reti

00001cb0 <spi_init_master>:
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	cf 93       	push	r28
    1cb8:	81 11       	cpse	r24, r1
    1cba:	62 c0       	rjmp	.+196    	; 0x1d80 <spi_init_master+0xd0>
    1cbc:	41 15       	cp	r20, r1
    1cbe:	89 e0       	ldi	r24, 0x09	; 9
    1cc0:	58 07       	cpc	r21, r24
    1cc2:	8d e3       	ldi	r24, 0x3D	; 61
    1cc4:	68 07       	cpc	r22, r24
    1cc6:	71 05       	cpc	r23, r1
    1cc8:	29 f4       	brne	.+10     	; 0x1cd4 <spi_init_master+0x24>
    1cca:	8d b1       	in	r24, 0x0d	; 13
    1ccc:	8c 7f       	andi	r24, 0xFC	; 252
    1cce:	8d b9       	out	0x0d, r24	; 13
    1cd0:	70 9a       	sbi	0x0e, 0	; 14
    1cd2:	35 c0       	rjmp	.+106    	; 0x1d3e <spi_init_master+0x8e>
    1cd4:	40 38       	cpi	r20, 0x80	; 128
    1cd6:	84 e8       	ldi	r24, 0x84	; 132
    1cd8:	58 07       	cpc	r21, r24
    1cda:	8e e1       	ldi	r24, 0x1E	; 30
    1cdc:	68 07       	cpc	r22, r24
    1cde:	71 05       	cpc	r23, r1
    1ce0:	29 f4       	brne	.+10     	; 0x1cec <spi_init_master+0x3c>
    1ce2:	8d b1       	in	r24, 0x0d	; 13
    1ce4:	8c 7f       	andi	r24, 0xFC	; 252
    1ce6:	8d b9       	out	0x0d, r24	; 13
    1ce8:	70 98       	cbi	0x0e, 0	; 14
    1cea:	29 c0       	rjmp	.+82     	; 0x1d3e <spi_init_master+0x8e>
    1cec:	40 34       	cpi	r20, 0x40	; 64
    1cee:	82 e4       	ldi	r24, 0x42	; 66
    1cf0:	58 07       	cpc	r21, r24
    1cf2:	8f e0       	ldi	r24, 0x0F	; 15
    1cf4:	68 07       	cpc	r22, r24
    1cf6:	71 05       	cpc	r23, r1
    1cf8:	21 f4       	brne	.+8      	; 0x1d02 <spi_init_master+0x52>
    1cfa:	69 98       	cbi	0x0d, 1	; 13
    1cfc:	68 9a       	sbi	0x0d, 0	; 13
    1cfe:	70 9a       	sbi	0x0e, 0	; 14
    1d00:	1e c0       	rjmp	.+60     	; 0x1d3e <spi_init_master+0x8e>
    1d02:	40 32       	cpi	r20, 0x20	; 32
    1d04:	81 ea       	ldi	r24, 0xA1	; 161
    1d06:	58 07       	cpc	r21, r24
    1d08:	87 e0       	ldi	r24, 0x07	; 7
    1d0a:	68 07       	cpc	r22, r24
    1d0c:	71 05       	cpc	r23, r1
    1d0e:	21 f4       	brne	.+8      	; 0x1d18 <spi_init_master+0x68>
    1d10:	69 98       	cbi	0x0d, 1	; 13
    1d12:	68 9a       	sbi	0x0d, 0	; 13
    1d14:	70 98       	cbi	0x0e, 0	; 14
    1d16:	13 c0       	rjmp	.+38     	; 0x1d3e <spi_init_master+0x8e>
    1d18:	40 39       	cpi	r20, 0x90	; 144
    1d1a:	80 ed       	ldi	r24, 0xD0	; 208
    1d1c:	58 07       	cpc	r21, r24
    1d1e:	83 e0       	ldi	r24, 0x03	; 3
    1d20:	68 07       	cpc	r22, r24
    1d22:	71 05       	cpc	r23, r1
    1d24:	21 f4       	brne	.+8      	; 0x1d2e <spi_init_master+0x7e>
    1d26:	68 98       	cbi	0x0d, 0	; 13
    1d28:	69 9a       	sbi	0x0d, 1	; 13
    1d2a:	70 9a       	sbi	0x0e, 0	; 14
    1d2c:	08 c0       	rjmp	.+16     	; 0x1d3e <spi_init_master+0x8e>
    1d2e:	48 34       	cpi	r20, 0x48	; 72
    1d30:	58 4e       	sbci	r21, 0xE8	; 232
    1d32:	61 40       	sbci	r22, 0x01	; 1
    1d34:	71 05       	cpc	r23, r1
    1d36:	31 f5       	brne	.+76     	; 0x1d84 <spi_init_master+0xd4>
    1d38:	68 98       	cbi	0x0d, 0	; 13
    1d3a:	69 9a       	sbi	0x0d, 1	; 13
    1d3c:	70 98       	cbi	0x0e, 0	; 14
    1d3e:	c2 2f       	mov	r28, r18
    1d40:	61 e0       	ldi	r22, 0x01	; 1
    1d42:	8d e0       	ldi	r24, 0x0D	; 13
    1d44:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
    1d48:	61 e0       	ldi	r22, 0x01	; 1
    1d4a:	8c e0       	ldi	r24, 0x0C	; 12
    1d4c:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
    1d50:	61 e0       	ldi	r22, 0x01	; 1
    1d52:	8f e0       	ldi	r24, 0x0F	; 15
    1d54:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
    1d58:	60 e0       	ldi	r22, 0x00	; 0
    1d5a:	8e e0       	ldi	r24, 0x0E	; 14
    1d5c:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
    1d60:	2c 2f       	mov	r18, r28
    1d62:	22 0f       	add	r18, r18
    1d64:	22 0f       	add	r18, r18
    1d66:	20 65       	ori	r18, 0x50	; 80
    1d68:	00 0f       	add	r16, r16
    1d6a:	00 0f       	add	r16, r16
    1d6c:	00 0f       	add	r16, r16
    1d6e:	20 2b       	or	r18, r16
    1d70:	80 e2       	ldi	r24, 0x20	; 32
    1d72:	e8 9e       	mul	r14, r24
    1d74:	70 01       	movw	r14, r0
    1d76:	11 24       	eor	r1, r1
    1d78:	2e 29       	or	r18, r14
    1d7a:	2d b9       	out	0x0d, r18	; 13
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	03 c0       	rjmp	.+6      	; 0x1d86 <spi_init_master+0xd6>
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	01 c0       	rjmp	.+2      	; 0x1d86 <spi_init_master+0xd6>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	cf 91       	pop	r28
    1d88:	0f 91       	pop	r16
    1d8a:	ff 90       	pop	r15
    1d8c:	ef 90       	pop	r14
    1d8e:	08 95       	ret

00001d90 <spi_exchange>:

uint8_t spi_exchange(uint8_t spi_num, uint8_t sent_byte)
{
	SPDR = sent_byte; //send datA by SPI
    1d90:	6f b9       	out	0x0f, r22	; 15

inline bool spi_int_stat(uint8_t spi_num)
{
	if (spi_num == SPI0)
	{
		return ((BIT_IS_SET(SREG, I)) && (BIT_IS_SET(SPCR, SPIE)));
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	07 fe       	sbrs	r0, 7
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <spi_exchange+0xc>
    1d98:	6f 99       	sbic	0x0d, 7	; 13
    1d9a:	04 c0       	rjmp	.+8      	; 0x1da4 <spi_exchange+0x14>
	
	if (spi_int_stat(SPI0) == false)
	{
		while(BIT_IS_CLEAR(SPSR,SPIF))
    1d9c:	77 9b       	sbis	0x0e, 7	; 14
    1d9e:	fe cf       	rjmp	.-4      	; 0x1d9c <spi_exchange+0xc>
		{
			
		} //wait until SPI flag becomes 1 (data is sent correctly)
		
		return SPDR;
    1da0:	8f b1       	in	r24, 0x0f	; 15
    1da2:	08 95       	ret
	}
	
	return SUCCESS;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
}
    1da6:	08 95       	ret

00001da8 <__vector_15>:
{
	
	if (UART0 == a_uart_no)
	{
		//if b_state was true then set the bit otherwise clear it
		UCSRB = (ab_state ? UCSRB | (1 << UDRIE) : UCSRB & ~(1 << UDRIE));
    1da8:	1f 92       	push	r1
    1daa:	0f 92       	push	r0
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	0f 92       	push	r0
    1db0:	11 24       	eor	r1, r1
    1db2:	2f 93       	push	r18
    1db4:	3f 93       	push	r19
    1db6:	4f 93       	push	r20
    1db8:	5f 93       	push	r21
    1dba:	6f 93       	push	r22
    1dbc:	7f 93       	push	r23
    1dbe:	8f 93       	push	r24
    1dc0:	9f 93       	push	r25
    1dc2:	af 93       	push	r26
    1dc4:	bf 93       	push	r27
    1dc6:	ef 93       	push	r30
    1dc8:	ff 93       	push	r31
    1dca:	f8 94       	cli
    1dcc:	e0 91 c1 01 	lds	r30, 0x01C1	; 0x8001c1 <gp_uart_txc_isr>
    1dd0:	f0 91 c2 01 	lds	r31, 0x01C2	; 0x8001c2 <gp_uart_txc_isr+0x1>
    1dd4:	30 97       	sbiw	r30, 0x00	; 0
    1dd6:	09 f0       	breq	.+2      	; 0x1dda <__vector_15+0x32>
    1dd8:	09 95       	icall
    1dda:	78 94       	sei
    1ddc:	ff 91       	pop	r31
    1dde:	ef 91       	pop	r30
    1de0:	bf 91       	pop	r27
    1de2:	af 91       	pop	r26
    1de4:	9f 91       	pop	r25
    1de6:	8f 91       	pop	r24
    1de8:	7f 91       	pop	r23
    1dea:	6f 91       	pop	r22
    1dec:	5f 91       	pop	r21
    1dee:	4f 91       	pop	r20
    1df0:	3f 91       	pop	r19
    1df2:	2f 91       	pop	r18
    1df4:	0f 90       	pop	r0
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	0f 90       	pop	r0
    1dfa:	1f 90       	pop	r1
    1dfc:	18 95       	reti

00001dfe <__vector_13>:
    1dfe:	1f 92       	push	r1
    1e00:	0f 92       	push	r0
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	0f 92       	push	r0
    1e06:	11 24       	eor	r1, r1
    1e08:	2f 93       	push	r18
    1e0a:	3f 93       	push	r19
    1e0c:	4f 93       	push	r20
    1e0e:	5f 93       	push	r21
    1e10:	6f 93       	push	r22
    1e12:	7f 93       	push	r23
    1e14:	8f 93       	push	r24
    1e16:	9f 93       	push	r25
    1e18:	af 93       	push	r26
    1e1a:	bf 93       	push	r27
    1e1c:	ef 93       	push	r30
    1e1e:	ff 93       	push	r31
    1e20:	f8 94       	cli
    1e22:	e0 91 bf 01 	lds	r30, 0x01BF	; 0x8001bf <gp_uart_rxc_isr>
    1e26:	f0 91 c0 01 	lds	r31, 0x01C0	; 0x8001c0 <gp_uart_rxc_isr+0x1>
    1e2a:	30 97       	sbiw	r30, 0x00	; 0
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <__vector_13+0x32>
    1e2e:	09 95       	icall
    1e30:	78 94       	sei
    1e32:	ff 91       	pop	r31
    1e34:	ef 91       	pop	r30
    1e36:	bf 91       	pop	r27
    1e38:	af 91       	pop	r26
    1e3a:	9f 91       	pop	r25
    1e3c:	8f 91       	pop	r24
    1e3e:	7f 91       	pop	r23
    1e40:	6f 91       	pop	r22
    1e42:	5f 91       	pop	r21
    1e44:	4f 91       	pop	r20
    1e46:	3f 91       	pop	r19
    1e48:	2f 91       	pop	r18
    1e4a:	0f 90       	pop	r0
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	0f 90       	pop	r0
    1e50:	1f 90       	pop	r1
    1e52:	18 95       	reti

00001e54 <__vector_14>:
    1e54:	f8 94       	cli
    1e56:	5d 9a       	sbi	0x0b, 5	; 11
    1e58:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <gp_uart_udre_isr>
    1e5c:	f0 91 be 01 	lds	r31, 0x01BE	; 0x8001be <gp_uart_udre_isr+0x1>
    1e60:	30 97       	sbiw	r30, 0x00	; 0
    1e62:	09 f0       	breq	.+2      	; 0x1e66 <__vector_14+0x12>
    1e64:	09 95       	icall
    1e66:	78 94       	sei
    1e68:	08 95       	ret

00001e6a <uart_init>:
    1e6a:	af 92       	push	r10
    1e6c:	cf 92       	push	r12
    1e6e:	ef 92       	push	r14
    1e70:	ff 92       	push	r15
    1e72:	0f 93       	push	r16
    1e74:	cf 93       	push	r28
    1e76:	c2 2f       	mov	r28, r18
    1e78:	81 11       	cpse	r24, r1
    1e7a:	42 c0       	rjmp	.+132    	; 0x1f00 <uart_init+0x96>
    1e7c:	db 01       	movw	r26, r22
    1e7e:	ca 01       	movw	r24, r20
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	aa 1f       	adc	r26, r26
    1e86:	bb 1f       	adc	r27, r27
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	aa 1f       	adc	r26, r26
    1e8e:	bb 1f       	adc	r27, r27
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	aa 1f       	adc	r26, r26
    1e96:	bb 1f       	adc	r27, r27
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	aa 1f       	adc	r26, r26
    1e9e:	bb 1f       	adc	r27, r27
    1ea0:	9c 01       	movw	r18, r24
    1ea2:	ad 01       	movw	r20, r26
    1ea4:	20 7f       	andi	r18, 0xF0	; 240
    1ea6:	5f 77       	andi	r21, 0x7F	; 127
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	78 e4       	ldi	r23, 0x48	; 72
    1eac:	88 ee       	ldi	r24, 0xE8	; 232
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	0e 94 f7 10 	call	0x21ee	; 0x21ee <__udivmodsi4>
    1eb4:	22 50       	subi	r18, 0x02	; 2
    1eb6:	31 09       	sbc	r19, r1
    1eb8:	20 ff       	sbrs	r18, 0
    1eba:	05 c0       	rjmp	.+10     	; 0x1ec6 <uart_init+0x5c>
    1ebc:	36 95       	lsr	r19
    1ebe:	27 95       	ror	r18
    1ec0:	2f 5f       	subi	r18, 0xFF	; 255
    1ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <uart_init+0x60>
    1ec6:	36 95       	lsr	r19
    1ec8:	27 95       	ror	r18
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	8b b9       	out	0x0b, r24	; 11
    1ece:	00 0f       	add	r16, r16
    1ed0:	00 0f       	add	r16, r16
    1ed2:	00 0f       	add	r16, r16
    1ed4:	8c 2f       	mov	r24, r28
    1ed6:	84 70       	andi	r24, 0x04	; 4
    1ed8:	08 2b       	or	r16, r24
    1eda:	0a b9       	out	0x0a, r16	; 10
    1edc:	cc 0c       	add	r12, r12
    1ede:	cc 0c       	add	r12, r12
    1ee0:	cc 0c       	add	r12, r12
    1ee2:	8a 2d       	mov	r24, r10
    1ee4:	80 68       	ori	r24, 0x80	; 128
    1ee6:	ac 2c       	mov	r10, r12
    1ee8:	a8 2a       	or	r10, r24
    1eea:	80 e1       	ldi	r24, 0x10	; 16
    1eec:	e8 9e       	mul	r14, r24
    1eee:	70 01       	movw	r14, r0
    1ef0:	11 24       	eor	r1, r1
    1ef2:	ea 28       	or	r14, r10
    1ef4:	c3 70       	andi	r28, 0x03	; 3
    1ef6:	cc 0f       	add	r28, r28
    1ef8:	ec 2a       	or	r14, r28
    1efa:	e0 bc       	out	0x20, r14	; 32
    1efc:	30 bd       	out	0x20, r19	; 32
    1efe:	29 b9       	out	0x09, r18	; 9
    1f00:	cf 91       	pop	r28
    1f02:	0f 91       	pop	r16
    1f04:	ff 90       	pop	r15
    1f06:	ef 90       	pop	r14
    1f08:	cf 90       	pop	r12
    1f0a:	af 90       	pop	r10
    1f0c:	08 95       	ret

00001f0e <uart_send>:
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	ea 01       	movw	r28, r20
    1f14:	20 97       	sbiw	r28, 0x00	; 0
    1f16:	c1 f1       	breq	.+112    	; 0x1f88 <uart_send+0x7a>
    1f18:	55 9b       	sbis	0x0a, 5	; 10
    1f1a:	04 c0       	rjmp	.+8      	; 0x1f24 <uart_send+0x16>
    1f1c:	36 c0       	rjmp	.+108    	; 0x1f8a <uart_send+0x7c>
    1f1e:	55 9b       	sbis	0x0a, 5	; 10
    1f20:	06 c0       	rjmp	.+12     	; 0x1f2e <uart_send+0x20>
    1f22:	33 c0       	rjmp	.+102    	; 0x1f8a <uart_send+0x7c>
    1f24:	a0 e0       	ldi	r26, 0x00	; 0
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	50 e0       	ldi	r21, 0x00	; 0
    1f2a:	e8 ee       	ldi	r30, 0xE8	; 232
    1f2c:	f3 e0       	ldi	r31, 0x03	; 3
    1f2e:	5d 99       	sbic	0x0b, 5	; 11
    1f30:	0d c0       	rjmp	.+26     	; 0x1f4c <uart_send+0x3e>
    1f32:	27 ee       	ldi	r18, 0xE7	; 231
    1f34:	33 e0       	ldi	r19, 0x03	; 3
    1f36:	cf 01       	movw	r24, r30
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <uart_send+0x2a>
    1f3c:	5d 99       	sbic	0x0b, 5	; 11
    1f3e:	04 c0       	rjmp	.+8      	; 0x1f48 <uart_send+0x3a>
    1f40:	21 50       	subi	r18, 0x01	; 1
    1f42:	31 09       	sbc	r19, r1
    1f44:	c1 f7       	brne	.-16     	; 0x1f36 <uart_send+0x28>
    1f46:	21 c0       	rjmp	.+66     	; 0x1f8a <uart_send+0x7c>
    1f48:	23 2b       	or	r18, r19
    1f4a:	f9 f0       	breq	.+62     	; 0x1f8a <uart_send+0x7c>
    1f4c:	52 99       	sbic	0x0a, 2	; 10
    1f4e:	05 c0       	rjmp	.+10     	; 0x1f5a <uart_send+0x4c>
    1f50:	a6 0f       	add	r26, r22
    1f52:	b7 1f       	adc	r27, r23
    1f54:	8c 91       	ld	r24, X
    1f56:	8c b9       	out	0x0c, r24	; 12
    1f58:	11 c0       	rjmp	.+34     	; 0x1f7c <uart_send+0x6e>
    1f5a:	aa 0f       	add	r26, r26
    1f5c:	bb 1f       	adc	r27, r27
    1f5e:	a6 0f       	add	r26, r22
    1f60:	b7 1f       	adc	r27, r23
    1f62:	8d 91       	ld	r24, X+
    1f64:	9c 91       	ld	r25, X
    1f66:	11 97       	sbiw	r26, 0x01	; 1
    1f68:	90 ff       	sbrs	r25, 0
    1f6a:	03 c0       	rjmp	.+6      	; 0x1f72 <uart_send+0x64>
    1f6c:	8a b1       	in	r24, 0x0a	; 10
    1f6e:	81 60       	ori	r24, 0x01	; 1
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <uart_send+0x68>
    1f72:	8a b1       	in	r24, 0x0a	; 10
    1f74:	8e 7f       	andi	r24, 0xFE	; 254
    1f76:	8a b9       	out	0x0a, r24	; 10
    1f78:	8c 91       	ld	r24, X
    1f7a:	8c b9       	out	0x0c, r24	; 12
    1f7c:	5f 5f       	subi	r21, 0xFF	; 255
    1f7e:	a5 2f       	mov	r26, r21
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	ac 17       	cp	r26, r28
    1f84:	bd 07       	cpc	r27, r29
    1f86:	58 f2       	brcs	.-106    	; 0x1f1e <uart_send+0x10>
    1f88:	01 c0       	rjmp	.+2      	; 0x1f8c <uart_send+0x7e>
    1f8a:	80 e0       	ldi	r24, 0x00	; 0
    1f8c:	df 91       	pop	r29
    1f8e:	cf 91       	pop	r28
    1f90:	08 95       	ret

00001f92 <uart_send_until>:
    1f92:	cf 93       	push	r28
    1f94:	df 93       	push	r29
    1f96:	ea 01       	movw	r28, r20
    1f98:	50 e0       	ldi	r21, 0x00	; 0
    1f9a:	e8 ee       	ldi	r30, 0xE8	; 232
    1f9c:	f3 e0       	ldi	r31, 0x03	; 3
    1f9e:	2c c0       	rjmp	.+88     	; 0x1ff8 <uart_send_until+0x66>
    1fa0:	27 ee       	ldi	r18, 0xE7	; 231
    1fa2:	33 e0       	ldi	r19, 0x03	; 3
    1fa4:	cf 01       	movw	r24, r30
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	f1 f7       	brne	.-4      	; 0x1fa6 <uart_send_until+0x14>
    1faa:	9b b1       	in	r25, 0x0b	; 11
    1fac:	89 2f       	mov	r24, r25
    1fae:	80 72       	andi	r24, 0x20	; 32
    1fb0:	95 fd       	sbrc	r25, 5
    1fb2:	04 c0       	rjmp	.+8      	; 0x1fbc <uart_send_until+0x2a>
    1fb4:	21 50       	subi	r18, 0x01	; 1
    1fb6:	31 09       	sbc	r19, r1
    1fb8:	a9 f7       	brne	.-22     	; 0x1fa4 <uart_send_until+0x12>
    1fba:	3a c0       	rjmp	.+116    	; 0x2030 <uart_send_until+0x9e>
    1fbc:	23 2b       	or	r18, r19
    1fbe:	a9 f1       	breq	.+106    	; 0x202a <uart_send_until+0x98>
    1fc0:	52 99       	sbic	0x0a, 2	; 10
    1fc2:	06 c0       	rjmp	.+12     	; 0x1fd0 <uart_send_until+0x3e>
    1fc4:	db 01       	movw	r26, r22
    1fc6:	a5 0f       	add	r26, r21
    1fc8:	b1 1d       	adc	r27, r1
    1fca:	8c 91       	ld	r24, X
    1fcc:	8c b9       	out	0x0c, r24	; 12
    1fce:	13 c0       	rjmp	.+38     	; 0x1ff6 <uart_send_until+0x64>
    1fd0:	a5 2f       	mov	r26, r21
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	aa 0f       	add	r26, r26
    1fd6:	bb 1f       	adc	r27, r27
    1fd8:	a6 0f       	add	r26, r22
    1fda:	b7 1f       	adc	r27, r23
    1fdc:	8d 91       	ld	r24, X+
    1fde:	9c 91       	ld	r25, X
    1fe0:	11 97       	sbiw	r26, 0x01	; 1
    1fe2:	90 ff       	sbrs	r25, 0
    1fe4:	03 c0       	rjmp	.+6      	; 0x1fec <uart_send_until+0x5a>
    1fe6:	8a b1       	in	r24, 0x0a	; 10
    1fe8:	81 60       	ori	r24, 0x01	; 1
    1fea:	02 c0       	rjmp	.+4      	; 0x1ff0 <uart_send_until+0x5e>
    1fec:	8a b1       	in	r24, 0x0a	; 10
    1fee:	8e 7f       	andi	r24, 0xFE	; 254
    1ff0:	8a b9       	out	0x0a, r24	; 10
    1ff2:	8c 91       	ld	r24, X
    1ff4:	8c b9       	out	0x0c, r24	; 12
    1ff6:	5f 5f       	subi	r21, 0xFF	; 255
    1ff8:	52 99       	sbic	0x0a, 2	; 10
    1ffa:	06 c0       	rjmp	.+12     	; 0x2008 <uart_send_until+0x76>
    1ffc:	db 01       	movw	r26, r22
    1ffe:	a5 0f       	add	r26, r21
    2000:	b1 1d       	adc	r27, r1
    2002:	8c 91       	ld	r24, X
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	08 c0       	rjmp	.+16     	; 0x2018 <uart_send_until+0x86>
    2008:	a5 2f       	mov	r26, r21
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	aa 0f       	add	r26, r26
    200e:	bb 1f       	adc	r27, r27
    2010:	a6 0f       	add	r26, r22
    2012:	b7 1f       	adc	r27, r23
    2014:	8d 91       	ld	r24, X+
    2016:	9c 91       	ld	r25, X
    2018:	8c 17       	cp	r24, r28
    201a:	9d 07       	cpc	r25, r29
    201c:	41 f0       	breq	.+16     	; 0x202e <uart_send_until+0x9c>
    201e:	8b b1       	in	r24, 0x0b	; 11
    2020:	48 2f       	mov	r20, r24
    2022:	40 72       	andi	r20, 0x20	; 32
    2024:	85 ff       	sbrs	r24, 5
    2026:	bc cf       	rjmp	.-136    	; 0x1fa0 <uart_send_until+0xe>
    2028:	cb cf       	rjmp	.-106    	; 0x1fc0 <uart_send_until+0x2e>
    202a:	84 2f       	mov	r24, r20
    202c:	01 c0       	rjmp	.+2      	; 0x2030 <uart_send_until+0x9e>
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	df 91       	pop	r29
    2032:	cf 91       	pop	r28
    2034:	08 95       	ret

00002036 <uart_send_str>:
    2036:	40 e0       	ldi	r20, 0x00	; 0
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <uart_send_until>
    203e:	88 23       	and	r24, r24
    2040:	d9 f0       	breq	.+54     	; 0x2078 <uart_send_str+0x42>
    2042:	9b b1       	in	r25, 0x0b	; 11
    2044:	89 2f       	mov	r24, r25
    2046:	80 72       	andi	r24, 0x20	; 32
    2048:	95 fd       	sbrc	r25, 5
    204a:	13 c0       	rjmp	.+38     	; 0x2072 <uart_send_str+0x3c>
    204c:	27 ee       	ldi	r18, 0xE7	; 231
    204e:	33 e0       	ldi	r19, 0x03	; 3
    2050:	48 ee       	ldi	r20, 0xE8	; 232
    2052:	53 e0       	ldi	r21, 0x03	; 3
    2054:	fa 01       	movw	r30, r20
    2056:	31 97       	sbiw	r30, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <uart_send_str+0x20>
    205a:	9b b1       	in	r25, 0x0b	; 11
    205c:	69 2f       	mov	r22, r25
    205e:	60 72       	andi	r22, 0x20	; 32
    2060:	95 fd       	sbrc	r25, 5
    2062:	05 c0       	rjmp	.+10     	; 0x206e <uart_send_str+0x38>
    2064:	21 50       	subi	r18, 0x01	; 1
    2066:	31 09       	sbc	r19, r1
    2068:	a9 f7       	brne	.-22     	; 0x2054 <uart_send_str+0x1e>
    206a:	86 2f       	mov	r24, r22
    206c:	08 95       	ret
    206e:	23 2b       	or	r18, r19
    2070:	19 f0       	breq	.+6      	; 0x2078 <uart_send_str+0x42>
    2072:	50 98       	cbi	0x0a, 0	; 10
    2074:	1c b8       	out	0x0c, r1	; 12
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	08 95       	ret

0000207a <uart_set_rx_int>:
    207a:	81 11       	cpse	r24, r1
    207c:	08 c0       	rjmp	.+16     	; 0x208e <uart_set_rx_int+0x14>
    207e:	66 23       	and	r22, r22
    2080:	19 f0       	breq	.+6      	; 0x2088 <uart_set_rx_int+0xe>
    2082:	8a b1       	in	r24, 0x0a	; 10
    2084:	80 68       	ori	r24, 0x80	; 128
    2086:	02 c0       	rjmp	.+4      	; 0x208c <uart_set_rx_int+0x12>
    2088:	8a b1       	in	r24, 0x0a	; 10
    208a:	8f 77       	andi	r24, 0x7F	; 127
    208c:	8a b9       	out	0x0a, r24	; 10
    208e:	08 95       	ret

00002090 <uart_set_rx_isr>:
{
	/*
	  assign the function that the user wrote to be the RX ISR to the function
	  that will be actually called when the interrupt occurs.
	*/
	gp_uart_rxc_isr = ap_uart_rx_function;
    2090:	70 93 c0 01 	sts	0x01C0, r23	; 0x8001c0 <gp_uart_rxc_isr+0x1>
    2094:	60 93 bf 01 	sts	0x01BF, r22	; 0x8001bf <gp_uart_rxc_isr>
    2098:	08 95       	ret

0000209a <is_str_reached>:
		}
		
	}

	return get_result;
}
    209a:	fa 01       	movw	r30, r20
    209c:	20 81       	ld	r18, Z
    209e:	fc 01       	movw	r30, r24
    20a0:	e2 0f       	add	r30, r18
    20a2:	f1 1d       	adc	r31, r1
    20a4:	30 81       	ld	r19, Z
    20a6:	36 13       	cpse	r19, r22
    20a8:	0c c0       	rjmp	.+24     	; 0x20c2 <is_str_reached+0x28>
    20aa:	2f 5f       	subi	r18, 0xFF	; 255
    20ac:	fa 01       	movw	r30, r20
    20ae:	20 83       	st	Z, r18
    20b0:	fc 01       	movw	r30, r24
    20b2:	e2 0f       	add	r30, r18
    20b4:	f1 1d       	adc	r31, r1
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 81       	ld	r25, Z
    20ba:	99 23       	and	r25, r25
    20bc:	71 f0       	breq	.+28     	; 0x20da <is_str_reached+0x40>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	08 95       	ret
    20c2:	fc 01       	movw	r30, r24
    20c4:	80 81       	ld	r24, Z
    20c6:	68 13       	cpse	r22, r24
    20c8:	05 c0       	rjmp	.+10     	; 0x20d4 <is_str_reached+0x3a>
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	fa 01       	movw	r30, r20
    20ce:	80 83       	st	Z, r24
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	08 95       	ret
    20d4:	fa 01       	movw	r30, r20
    20d6:	10 82       	st	Z, r1
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	08 95       	ret

000020dc <check_strings>:



uint8_t check_strings(unint16_t millis_time, int16_t str_count, ...)
{
    20dc:	2f 92       	push	r2
    20de:	3f 92       	push	r3
    20e0:	4f 92       	push	r4
    20e2:	5f 92       	push	r5
    20e4:	6f 92       	push	r6
    20e6:	7f 92       	push	r7
    20e8:	8f 92       	push	r8
    20ea:	9f 92       	push	r9
    20ec:	af 92       	push	r10
    20ee:	bf 92       	push	r11
    20f0:	cf 92       	push	r12
    20f2:	df 92       	push	r13
    20f4:	ef 92       	push	r14
    20f6:	ff 92       	push	r15
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	ed 88       	ldd	r14, Y+21	; 0x15
    2106:	fe 88       	ldd	r15, Y+22	; 0x16
    2108:	af 88       	ldd	r10, Y+23	; 0x17
    210a:	b8 8c       	ldd	r11, Y+24	; 0x18
	}
	
	millis_disable_tmr();
	//DISABLE_TIMER0;
	return event_flag;
}
    210c:	6d b6       	in	r6, 0x3d	; 61
    210e:	7e b6       	in	r7, 0x3e	; 62



uint8_t check_strings(unint16_t millis_time, int16_t str_count, ...)
{
	char * str_list[str_count];
    2110:	c5 01       	movw	r24, r10
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	2d b7       	in	r18, 0x3d	; 61
    2118:	3e b7       	in	r19, 0x3e	; 62
    211a:	28 1b       	sub	r18, r24
    211c:	39 0b       	sbc	r19, r25
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	3e bf       	out	0x3e, r19	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	2d bf       	out	0x3d, r18	; 61
    2128:	2f 5f       	subi	r18, 0xFF	; 255
    212a:	3f 4f       	sbci	r19, 0xFF	; 255
    212c:	52 2e       	mov	r5, r18
    212e:	43 2e       	mov	r4, r19
	uint8_t str_flags[str_count];
    2130:	4d b7       	in	r20, 0x3d	; 61
    2132:	5e b7       	in	r21, 0x3e	; 62
    2134:	4a 19       	sub	r20, r10
    2136:	5b 09       	sbc	r21, r11
    2138:	0f b6       	in	r0, 0x3f	; 63
    213a:	f8 94       	cli
    213c:	5e bf       	out	0x3e, r21	; 62
    213e:	0f be       	out	0x3f, r0	; 63
    2140:	4d bf       	out	0x3d, r20	; 61
    2142:	ed b7       	in	r30, 0x3d	; 61
    2144:	fe b7       	in	r31, 0x3e	; 62
    2146:	31 96       	adiw	r30, 0x01	; 1
    2148:	4f 01       	movw	r8, r30
	va_list ap;
	va_start(ap, str_count);
	
	
	for (int i = 0; i < str_count; i++ )
    214a:	1a 14       	cp	r1, r10
    214c:	1b 04       	cpc	r1, r11
    214e:	64 f4       	brge	.+24     	; 0x2168 <check_strings+0x8c>
    2150:	de 01       	movw	r26, r28
    2152:	59 96       	adiw	r26, 0x19	; 25
    2154:	f9 01       	movw	r30, r18
    2156:	28 0f       	add	r18, r24
    2158:	39 1f       	adc	r19, r25
	{
		str_list[i] = va_arg(ap, char *);
    215a:	8d 91       	ld	r24, X+
    215c:	9d 91       	ld	r25, X+
    215e:	81 93       	st	Z+, r24
    2160:	91 93       	st	Z+, r25
	uint8_t str_flags[str_count];
	va_list ap;
	va_start(ap, str_count);
	
	
	for (int i = 0; i < str_count; i++ )
    2162:	e2 17       	cp	r30, r18
    2164:	f3 07       	cpc	r31, r19
    2166:	c9 f7       	brne	.-14     	; 0x215a <check_strings+0x7e>
	{
		
		if (BIT_IS_SET(UCSRA, RXC)) // if receive flag is activated
		{
			tmp = UDR;
			for (int i = 0; i < str_count; i++)
    2168:	31 2c       	mov	r3, r1
    216a:	1f c0       	rjmp	.+62     	; 0x21aa <check_strings+0xce>
	unint8_t tmp = 0; //used for deciding the next position in the tmp_str for storing the received char from UART
	
	while (millis(millis_time) && (!event_flag)) // keep looping until either timeout or word found
	{
		
		if (BIT_IS_SET(UCSRA, RXC)) // if receive flag is activated
    216c:	5f 9b       	sbis	0x0b, 7	; 11
    216e:	1d c0       	rjmp	.+58     	; 0x21aa <check_strings+0xce>
		{
			tmp = UDR;
    2170:	2c b0       	in	r2, 0x0c	; 12
			for (int i = 0; i < str_count; i++)
    2172:	1a 14       	cp	r1, r10
    2174:	1b 04       	cpc	r1, r11
    2176:	cc f4       	brge	.+50     	; 0x21aa <check_strings+0xce>
    2178:	c5 2c       	mov	r12, r5
    217a:	d4 2c       	mov	r13, r4
    217c:	00 e0       	ldi	r16, 0x00	; 0
    217e:	10 e0       	ldi	r17, 0x00	; 0
			{
				if (is_str_reached(str_list[i], tmp, &str_flags[i])) // check if the received char is the last char in str
    2180:	a4 01       	movw	r20, r8
    2182:	40 0f       	add	r20, r16
    2184:	51 1f       	adc	r21, r17
    2186:	62 2d       	mov	r22, r2
    2188:	f6 01       	movw	r30, r12
    218a:	81 91       	ld	r24, Z+
    218c:	91 91       	ld	r25, Z+
    218e:	6f 01       	movw	r12, r30
    2190:	0e 94 4d 10 	call	0x209a	; 0x209a <is_str_reached>
    2194:	88 23       	and	r24, r24
    2196:	21 f0       	breq	.+8      	; 0x21a0 <check_strings+0xc4>
				{
					event_flag = i + 1;
    2198:	33 24       	eor	r3, r3
    219a:	33 94       	inc	r3
    219c:	30 0e       	add	r3, r16
					break;
    219e:	05 c0       	rjmp	.+10     	; 0x21aa <check_strings+0xce>
	{
		
		if (BIT_IS_SET(UCSRA, RXC)) // if receive flag is activated
		{
			tmp = UDR;
			for (int i = 0; i < str_count; i++)
    21a0:	0f 5f       	subi	r16, 0xFF	; 255
    21a2:	1f 4f       	sbci	r17, 0xFF	; 255
    21a4:	a0 16       	cp	r10, r16
    21a6:	b1 06       	cpc	r11, r17
    21a8:	59 f7       	brne	.-42     	; 0x2180 <check_strings+0xa4>
	}
	
	uint8_t event_flag = 0; //determines if the chosen word is reached
	unint8_t tmp = 0; //used for deciding the next position in the tmp_str for storing the received char from UART
	
	while (millis(millis_time) && (!event_flag)) // keep looping until either timeout or word found
    21aa:	c7 01       	movw	r24, r14
    21ac:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <millis>
    21b0:	88 23       	and	r24, r24
    21b2:	11 f0       	breq	.+4      	; 0x21b8 <check_strings+0xdc>
    21b4:	33 20       	and	r3, r3
    21b6:	d1 f2       	breq	.-76     	; 0x216c <check_strings+0x90>
			
		}
		
	}
	
	millis_disable_tmr();
    21b8:	0e 94 30 0a 	call	0x1460	; 0x1460 <millis_disable_tmr>
	//DISABLE_TIMER0;
	return event_flag;
}
    21bc:	83 2d       	mov	r24, r3
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	7e be       	out	0x3e, r7	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	6d be       	out	0x3d, r6	; 61
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	1f 91       	pop	r17
    21ce:	0f 91       	pop	r16
    21d0:	ff 90       	pop	r15
    21d2:	ef 90       	pop	r14
    21d4:	df 90       	pop	r13
    21d6:	cf 90       	pop	r12
    21d8:	bf 90       	pop	r11
    21da:	af 90       	pop	r10
    21dc:	9f 90       	pop	r9
    21de:	8f 90       	pop	r8
    21e0:	7f 90       	pop	r7
    21e2:	6f 90       	pop	r6
    21e4:	5f 90       	pop	r5
    21e6:	4f 90       	pop	r4
    21e8:	3f 90       	pop	r3
    21ea:	2f 90       	pop	r2
    21ec:	08 95       	ret

000021ee <__udivmodsi4>:
    21ee:	a1 e2       	ldi	r26, 0x21	; 33
    21f0:	1a 2e       	mov	r1, r26
    21f2:	aa 1b       	sub	r26, r26
    21f4:	bb 1b       	sub	r27, r27
    21f6:	fd 01       	movw	r30, r26
    21f8:	0d c0       	rjmp	.+26     	; 0x2214 <__udivmodsi4_ep>

000021fa <__udivmodsi4_loop>:
    21fa:	aa 1f       	adc	r26, r26
    21fc:	bb 1f       	adc	r27, r27
    21fe:	ee 1f       	adc	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	a2 17       	cp	r26, r18
    2204:	b3 07       	cpc	r27, r19
    2206:	e4 07       	cpc	r30, r20
    2208:	f5 07       	cpc	r31, r21
    220a:	20 f0       	brcs	.+8      	; 0x2214 <__udivmodsi4_ep>
    220c:	a2 1b       	sub	r26, r18
    220e:	b3 0b       	sbc	r27, r19
    2210:	e4 0b       	sbc	r30, r20
    2212:	f5 0b       	sbc	r31, r21

00002214 <__udivmodsi4_ep>:
    2214:	66 1f       	adc	r22, r22
    2216:	77 1f       	adc	r23, r23
    2218:	88 1f       	adc	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	1a 94       	dec	r1
    221e:	69 f7       	brne	.-38     	; 0x21fa <__udivmodsi4_loop>
    2220:	60 95       	com	r22
    2222:	70 95       	com	r23
    2224:	80 95       	com	r24
    2226:	90 95       	com	r25
    2228:	9b 01       	movw	r18, r22
    222a:	ac 01       	movw	r20, r24
    222c:	bd 01       	movw	r22, r26
    222e:	cf 01       	movw	r24, r30
    2230:	08 95       	ret

00002232 <__umulhisi3>:
    2232:	a2 9f       	mul	r26, r18
    2234:	b0 01       	movw	r22, r0
    2236:	b3 9f       	mul	r27, r19
    2238:	c0 01       	movw	r24, r0
    223a:	a3 9f       	mul	r26, r19
    223c:	70 0d       	add	r23, r0
    223e:	81 1d       	adc	r24, r1
    2240:	11 24       	eor	r1, r1
    2242:	91 1d       	adc	r25, r1
    2244:	b2 9f       	mul	r27, r18
    2246:	70 0d       	add	r23, r0
    2248:	81 1d       	adc	r24, r1
    224a:	11 24       	eor	r1, r1
    224c:	91 1d       	adc	r25, r1
    224e:	08 95       	ret

00002250 <malloc>:
    2250:	0f 93       	push	r16
    2252:	1f 93       	push	r17
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	82 30       	cpi	r24, 0x02	; 2
    225a:	91 05       	cpc	r25, r1
    225c:	10 f4       	brcc	.+4      	; 0x2262 <malloc+0x12>
    225e:	82 e0       	ldi	r24, 0x02	; 2
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <__flp>
    2266:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <__flp+0x1>
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	a0 e0       	ldi	r26, 0x00	; 0
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	30 97       	sbiw	r30, 0x00	; 0
    2274:	19 f1       	breq	.+70     	; 0x22bc <malloc+0x6c>
    2276:	40 81       	ld	r20, Z
    2278:	51 81       	ldd	r21, Z+1	; 0x01
    227a:	02 81       	ldd	r16, Z+2	; 0x02
    227c:	13 81       	ldd	r17, Z+3	; 0x03
    227e:	48 17       	cp	r20, r24
    2280:	59 07       	cpc	r21, r25
    2282:	c8 f0       	brcs	.+50     	; 0x22b6 <malloc+0x66>
    2284:	84 17       	cp	r24, r20
    2286:	95 07       	cpc	r25, r21
    2288:	69 f4       	brne	.+26     	; 0x22a4 <malloc+0x54>
    228a:	10 97       	sbiw	r26, 0x00	; 0
    228c:	31 f0       	breq	.+12     	; 0x229a <malloc+0x4a>
    228e:	12 96       	adiw	r26, 0x02	; 2
    2290:	0c 93       	st	X, r16
    2292:	12 97       	sbiw	r26, 0x02	; 2
    2294:	13 96       	adiw	r26, 0x03	; 3
    2296:	1c 93       	st	X, r17
    2298:	27 c0       	rjmp	.+78     	; 0x22e8 <malloc+0x98>
    229a:	00 93 d4 01 	sts	0x01D4, r16	; 0x8001d4 <__flp>
    229e:	10 93 d5 01 	sts	0x01D5, r17	; 0x8001d5 <__flp+0x1>
    22a2:	22 c0       	rjmp	.+68     	; 0x22e8 <malloc+0x98>
    22a4:	21 15       	cp	r18, r1
    22a6:	31 05       	cpc	r19, r1
    22a8:	19 f0       	breq	.+6      	; 0x22b0 <malloc+0x60>
    22aa:	42 17       	cp	r20, r18
    22ac:	53 07       	cpc	r21, r19
    22ae:	18 f4       	brcc	.+6      	; 0x22b6 <malloc+0x66>
    22b0:	9a 01       	movw	r18, r20
    22b2:	bd 01       	movw	r22, r26
    22b4:	ef 01       	movw	r28, r30
    22b6:	df 01       	movw	r26, r30
    22b8:	f8 01       	movw	r30, r16
    22ba:	db cf       	rjmp	.-74     	; 0x2272 <malloc+0x22>
    22bc:	21 15       	cp	r18, r1
    22be:	31 05       	cpc	r19, r1
    22c0:	f9 f0       	breq	.+62     	; 0x2300 <malloc+0xb0>
    22c2:	28 1b       	sub	r18, r24
    22c4:	39 0b       	sbc	r19, r25
    22c6:	24 30       	cpi	r18, 0x04	; 4
    22c8:	31 05       	cpc	r19, r1
    22ca:	80 f4       	brcc	.+32     	; 0x22ec <malloc+0x9c>
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	9b 81       	ldd	r25, Y+3	; 0x03
    22d0:	61 15       	cp	r22, r1
    22d2:	71 05       	cpc	r23, r1
    22d4:	21 f0       	breq	.+8      	; 0x22de <malloc+0x8e>
    22d6:	fb 01       	movw	r30, r22
    22d8:	93 83       	std	Z+3, r25	; 0x03
    22da:	82 83       	std	Z+2, r24	; 0x02
    22dc:	04 c0       	rjmp	.+8      	; 0x22e6 <malloc+0x96>
    22de:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <__flp+0x1>
    22e2:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__flp>
    22e6:	fe 01       	movw	r30, r28
    22e8:	32 96       	adiw	r30, 0x02	; 2
    22ea:	44 c0       	rjmp	.+136    	; 0x2374 <malloc+0x124>
    22ec:	fe 01       	movw	r30, r28
    22ee:	e2 0f       	add	r30, r18
    22f0:	f3 1f       	adc	r31, r19
    22f2:	81 93       	st	Z+, r24
    22f4:	91 93       	st	Z+, r25
    22f6:	22 50       	subi	r18, 0x02	; 2
    22f8:	31 09       	sbc	r19, r1
    22fa:	39 83       	std	Y+1, r19	; 0x01
    22fc:	28 83       	st	Y, r18
    22fe:	3a c0       	rjmp	.+116    	; 0x2374 <malloc+0x124>
    2300:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__brkval>
    2304:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <__brkval+0x1>
    2308:	23 2b       	or	r18, r19
    230a:	41 f4       	brne	.+16     	; 0x231c <malloc+0xcc>
    230c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    2310:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    2314:	30 93 d3 01 	sts	0x01D3, r19	; 0x8001d3 <__brkval+0x1>
    2318:	20 93 d2 01 	sts	0x01D2, r18	; 0x8001d2 <__brkval>
    231c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    2320:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    2324:	21 15       	cp	r18, r1
    2326:	31 05       	cpc	r19, r1
    2328:	41 f4       	brne	.+16     	; 0x233a <malloc+0xea>
    232a:	2d b7       	in	r18, 0x3d	; 61
    232c:	3e b7       	in	r19, 0x3e	; 62
    232e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    2332:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    2336:	24 1b       	sub	r18, r20
    2338:	35 0b       	sbc	r19, r21
    233a:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <__brkval>
    233e:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <__brkval+0x1>
    2342:	e2 17       	cp	r30, r18
    2344:	f3 07       	cpc	r31, r19
    2346:	a0 f4       	brcc	.+40     	; 0x2370 <malloc+0x120>
    2348:	2e 1b       	sub	r18, r30
    234a:	3f 0b       	sbc	r19, r31
    234c:	28 17       	cp	r18, r24
    234e:	39 07       	cpc	r19, r25
    2350:	78 f0       	brcs	.+30     	; 0x2370 <malloc+0x120>
    2352:	ac 01       	movw	r20, r24
    2354:	4e 5f       	subi	r20, 0xFE	; 254
    2356:	5f 4f       	sbci	r21, 0xFF	; 255
    2358:	24 17       	cp	r18, r20
    235a:	35 07       	cpc	r19, r21
    235c:	48 f0       	brcs	.+18     	; 0x2370 <malloc+0x120>
    235e:	4e 0f       	add	r20, r30
    2360:	5f 1f       	adc	r21, r31
    2362:	50 93 d3 01 	sts	0x01D3, r21	; 0x8001d3 <__brkval+0x1>
    2366:	40 93 d2 01 	sts	0x01D2, r20	; 0x8001d2 <__brkval>
    236a:	81 93       	st	Z+, r24
    236c:	91 93       	st	Z+, r25
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <malloc+0x124>
    2370:	e0 e0       	ldi	r30, 0x00	; 0
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	cf 01       	movw	r24, r30
    2376:	df 91       	pop	r29
    2378:	cf 91       	pop	r28
    237a:	1f 91       	pop	r17
    237c:	0f 91       	pop	r16
    237e:	08 95       	ret

00002380 <free>:
    2380:	cf 93       	push	r28
    2382:	df 93       	push	r29
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	09 f4       	brne	.+2      	; 0x238a <free+0xa>
    2388:	81 c0       	rjmp	.+258    	; 0x248c <free+0x10c>
    238a:	fc 01       	movw	r30, r24
    238c:	32 97       	sbiw	r30, 0x02	; 2
    238e:	13 82       	std	Z+3, r1	; 0x03
    2390:	12 82       	std	Z+2, r1	; 0x02
    2392:	a0 91 d4 01 	lds	r26, 0x01D4	; 0x8001d4 <__flp>
    2396:	b0 91 d5 01 	lds	r27, 0x01D5	; 0x8001d5 <__flp+0x1>
    239a:	10 97       	sbiw	r26, 0x00	; 0
    239c:	81 f4       	brne	.+32     	; 0x23be <free+0x3e>
    239e:	20 81       	ld	r18, Z
    23a0:	31 81       	ldd	r19, Z+1	; 0x01
    23a2:	82 0f       	add	r24, r18
    23a4:	93 1f       	adc	r25, r19
    23a6:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__brkval>
    23aa:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <__brkval+0x1>
    23ae:	28 17       	cp	r18, r24
    23b0:	39 07       	cpc	r19, r25
    23b2:	51 f5       	brne	.+84     	; 0x2408 <free+0x88>
    23b4:	f0 93 d3 01 	sts	0x01D3, r31	; 0x8001d3 <__brkval+0x1>
    23b8:	e0 93 d2 01 	sts	0x01D2, r30	; 0x8001d2 <__brkval>
    23bc:	67 c0       	rjmp	.+206    	; 0x248c <free+0x10c>
    23be:	ed 01       	movw	r28, r26
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	ce 17       	cp	r28, r30
    23c6:	df 07       	cpc	r29, r31
    23c8:	40 f4       	brcc	.+16     	; 0x23da <free+0x5a>
    23ca:	4a 81       	ldd	r20, Y+2	; 0x02
    23cc:	5b 81       	ldd	r21, Y+3	; 0x03
    23ce:	9e 01       	movw	r18, r28
    23d0:	41 15       	cp	r20, r1
    23d2:	51 05       	cpc	r21, r1
    23d4:	f1 f0       	breq	.+60     	; 0x2412 <free+0x92>
    23d6:	ea 01       	movw	r28, r20
    23d8:	f5 cf       	rjmp	.-22     	; 0x23c4 <free+0x44>
    23da:	d3 83       	std	Z+3, r29	; 0x03
    23dc:	c2 83       	std	Z+2, r28	; 0x02
    23de:	40 81       	ld	r20, Z
    23e0:	51 81       	ldd	r21, Z+1	; 0x01
    23e2:	84 0f       	add	r24, r20
    23e4:	95 1f       	adc	r25, r21
    23e6:	c8 17       	cp	r28, r24
    23e8:	d9 07       	cpc	r29, r25
    23ea:	59 f4       	brne	.+22     	; 0x2402 <free+0x82>
    23ec:	88 81       	ld	r24, Y
    23ee:	99 81       	ldd	r25, Y+1	; 0x01
    23f0:	84 0f       	add	r24, r20
    23f2:	95 1f       	adc	r25, r21
    23f4:	02 96       	adiw	r24, 0x02	; 2
    23f6:	91 83       	std	Z+1, r25	; 0x01
    23f8:	80 83       	st	Z, r24
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	9b 81       	ldd	r25, Y+3	; 0x03
    23fe:	93 83       	std	Z+3, r25	; 0x03
    2400:	82 83       	std	Z+2, r24	; 0x02
    2402:	21 15       	cp	r18, r1
    2404:	31 05       	cpc	r19, r1
    2406:	29 f4       	brne	.+10     	; 0x2412 <free+0x92>
    2408:	f0 93 d5 01 	sts	0x01D5, r31	; 0x8001d5 <__flp+0x1>
    240c:	e0 93 d4 01 	sts	0x01D4, r30	; 0x8001d4 <__flp>
    2410:	3d c0       	rjmp	.+122    	; 0x248c <free+0x10c>
    2412:	e9 01       	movw	r28, r18
    2414:	fb 83       	std	Y+3, r31	; 0x03
    2416:	ea 83       	std	Y+2, r30	; 0x02
    2418:	49 91       	ld	r20, Y+
    241a:	59 91       	ld	r21, Y+
    241c:	c4 0f       	add	r28, r20
    241e:	d5 1f       	adc	r29, r21
    2420:	ec 17       	cp	r30, r28
    2422:	fd 07       	cpc	r31, r29
    2424:	61 f4       	brne	.+24     	; 0x243e <free+0xbe>
    2426:	80 81       	ld	r24, Z
    2428:	91 81       	ldd	r25, Z+1	; 0x01
    242a:	84 0f       	add	r24, r20
    242c:	95 1f       	adc	r25, r21
    242e:	02 96       	adiw	r24, 0x02	; 2
    2430:	e9 01       	movw	r28, r18
    2432:	99 83       	std	Y+1, r25	; 0x01
    2434:	88 83       	st	Y, r24
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	9b 83       	std	Y+3, r25	; 0x03
    243c:	8a 83       	std	Y+2, r24	; 0x02
    243e:	e0 e0       	ldi	r30, 0x00	; 0
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	12 96       	adiw	r26, 0x02	; 2
    2444:	8d 91       	ld	r24, X+
    2446:	9c 91       	ld	r25, X
    2448:	13 97       	sbiw	r26, 0x03	; 3
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	19 f0       	breq	.+6      	; 0x2454 <free+0xd4>
    244e:	fd 01       	movw	r30, r26
    2450:	dc 01       	movw	r26, r24
    2452:	f7 cf       	rjmp	.-18     	; 0x2442 <free+0xc2>
    2454:	8d 91       	ld	r24, X+
    2456:	9c 91       	ld	r25, X
    2458:	11 97       	sbiw	r26, 0x01	; 1
    245a:	9d 01       	movw	r18, r26
    245c:	2e 5f       	subi	r18, 0xFE	; 254
    245e:	3f 4f       	sbci	r19, 0xFF	; 255
    2460:	82 0f       	add	r24, r18
    2462:	93 1f       	adc	r25, r19
    2464:	20 91 d2 01 	lds	r18, 0x01D2	; 0x8001d2 <__brkval>
    2468:	30 91 d3 01 	lds	r19, 0x01D3	; 0x8001d3 <__brkval+0x1>
    246c:	28 17       	cp	r18, r24
    246e:	39 07       	cpc	r19, r25
    2470:	69 f4       	brne	.+26     	; 0x248c <free+0x10c>
    2472:	30 97       	sbiw	r30, 0x00	; 0
    2474:	29 f4       	brne	.+10     	; 0x2480 <free+0x100>
    2476:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <__flp+0x1>
    247a:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <__flp>
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <free+0x104>
    2480:	13 82       	std	Z+3, r1	; 0x03
    2482:	12 82       	std	Z+2, r1	; 0x02
    2484:	b0 93 d3 01 	sts	0x01D3, r27	; 0x8001d3 <__brkval+0x1>
    2488:	a0 93 d2 01 	sts	0x01D2, r26	; 0x8001d2 <__brkval>
    248c:	df 91       	pop	r29
    248e:	cf 91       	pop	r28
    2490:	08 95       	ret

00002492 <memcpy>:
    2492:	fb 01       	movw	r30, r22
    2494:	dc 01       	movw	r26, r24
    2496:	02 c0       	rjmp	.+4      	; 0x249c <memcpy+0xa>
    2498:	01 90       	ld	r0, Z+
    249a:	0d 92       	st	X+, r0
    249c:	41 50       	subi	r20, 0x01	; 1
    249e:	50 40       	sbci	r21, 0x00	; 0
    24a0:	d8 f7       	brcc	.-10     	; 0x2498 <memcpy+0x6>
    24a2:	08 95       	ret

000024a4 <__itoa_ncheck>:
    24a4:	bb 27       	eor	r27, r27
    24a6:	4a 30       	cpi	r20, 0x0A	; 10
    24a8:	31 f4       	brne	.+12     	; 0x24b6 <__itoa_ncheck+0x12>
    24aa:	99 23       	and	r25, r25
    24ac:	22 f4       	brpl	.+8      	; 0x24b6 <__itoa_ncheck+0x12>
    24ae:	bd e2       	ldi	r27, 0x2D	; 45
    24b0:	90 95       	com	r25
    24b2:	81 95       	neg	r24
    24b4:	9f 4f       	sbci	r25, 0xFF	; 255
    24b6:	0c 94 5e 12 	jmp	0x24bc	; 0x24bc <__utoa_common>

000024ba <__utoa_ncheck>:
    24ba:	bb 27       	eor	r27, r27

000024bc <__utoa_common>:
    24bc:	fb 01       	movw	r30, r22
    24be:	55 27       	eor	r21, r21
    24c0:	aa 27       	eor	r26, r26
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	aa 1f       	adc	r26, r26
    24c8:	a4 17       	cp	r26, r20
    24ca:	10 f0       	brcs	.+4      	; 0x24d0 <__utoa_common+0x14>
    24cc:	a4 1b       	sub	r26, r20
    24ce:	83 95       	inc	r24
    24d0:	50 51       	subi	r21, 0x10	; 16
    24d2:	b9 f7       	brne	.-18     	; 0x24c2 <__utoa_common+0x6>
    24d4:	a0 5d       	subi	r26, 0xD0	; 208
    24d6:	aa 33       	cpi	r26, 0x3A	; 58
    24d8:	08 f0       	brcs	.+2      	; 0x24dc <__utoa_common+0x20>
    24da:	a9 5d       	subi	r26, 0xD9	; 217
    24dc:	a1 93       	st	Z+, r26
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	79 f7       	brne	.-34     	; 0x24c0 <__utoa_common+0x4>
    24e2:	b1 11       	cpse	r27, r1
    24e4:	b1 93       	st	Z+, r27
    24e6:	11 92       	st	Z+, r1
    24e8:	cb 01       	movw	r24, r22
    24ea:	0c 94 77 12 	jmp	0x24ee	; 0x24ee <strrev>

000024ee <strrev>:
    24ee:	dc 01       	movw	r26, r24
    24f0:	fc 01       	movw	r30, r24
    24f2:	67 2f       	mov	r22, r23
    24f4:	71 91       	ld	r23, Z+
    24f6:	77 23       	and	r23, r23
    24f8:	e1 f7       	brne	.-8      	; 0x24f2 <strrev+0x4>
    24fa:	32 97       	sbiw	r30, 0x02	; 2
    24fc:	04 c0       	rjmp	.+8      	; 0x2506 <strrev+0x18>
    24fe:	7c 91       	ld	r23, X
    2500:	6d 93       	st	X+, r22
    2502:	70 83       	st	Z, r23
    2504:	62 91       	ld	r22, -Z
    2506:	ae 17       	cp	r26, r30
    2508:	bf 07       	cpc	r27, r31
    250a:	c8 f3       	brcs	.-14     	; 0x24fe <strrev+0x10>
    250c:	08 95       	ret

0000250e <_exit>:
    250e:	f8 94       	cli

00002510 <__stop_program>:
    2510:	ff cf       	rjmp	.-2      	; 0x2510 <__stop_program>
