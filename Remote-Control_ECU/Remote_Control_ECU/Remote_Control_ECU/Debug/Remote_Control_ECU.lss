
Remote_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001942  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  00800060  00001942  000019d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800144  00800144  00001aba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001aba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001aec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c61  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012b7  00000000  00000000  00005a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c8a  00000000  00000000  00006d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000978  00000000  00000000  000089ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bff  00000000  00000000  00009324  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032d0  00000000  00000000  00009f23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0000d1f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 d2 09 	jmp	0x13a4	; 0x13a4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 34       	cpi	r26, 0x44	; 68
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 e4       	ldi	r26, 0x44	; 68
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 da 03 	call	0x7b4	; 0x7b4 <main>
      8a:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_state>:

int8_t button_state(uint8_t PU_PD, uint8_t dio_pin_no)
{

	uint8_t PinPort = dio_pin_no / NUM_PIN_PER_PORT;
	uint8_t PinNo_InPort = MODULO(dio_pin_no, NUM_PIN_PER_PORT);
      92:	26 2f       	mov	r18, r22
      94:	26 95       	lsr	r18
      96:	26 95       	lsr	r18
      98:	26 95       	lsr	r18
      9a:	96 2f       	mov	r25, r22
      9c:	97 70       	andi	r25, 0x07	; 7
	int8_t button_state = 0;
	volatile uint8_t * port_Address = PIN_REG_BASE + PORT_OFFSET(PinPort);
      9e:	30 e0       	ldi	r19, 0x00	; 0
      a0:	f9 01       	movw	r30, r18
      a2:	ee 0f       	add	r30, r30
      a4:	ff 1f       	adc	r31, r31
      a6:	2e 0f       	add	r18, r30
      a8:	3f 1f       	adc	r19, r31
      aa:	ee 27       	eor	r30, r30
      ac:	ff 27       	eor	r31, r31
      ae:	e2 1b       	sub	r30, r18
      b0:	f3 0b       	sbc	r31, r19
      b2:	f9 96       	adiw	r30, 0x39	; 57
	button_state = (PU_PD == PULL_DOWN)? is_port_pin_pd_pressed(port_Address, PinNo_InPort) : is_port_pin_pu_pressed(port_Address,
      b4:	81 30       	cpi	r24, 0x01	; 1
      b6:	19 f5       	brne	.+70     	; 0xfe <button_state+0x6c>
      b8:	61 e0       	ldi	r22, 0x01	; 1
      ba:	70 e0       	ldi	r23, 0x00	; 0
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <button_state+0x30>
      be:	66 0f       	add	r22, r22
      c0:	77 1f       	adc	r23, r23
      c2:	9a 95       	dec	r25
      c4:	e2 f7       	brpl	.-8      	; 0xbe <button_state+0x2c>
	uint16_t released_confidence_level = 0;
	
	while (pressed == 5)
	{
		
		if (BIT_IS_SET(*port_reg, pin_no))
      c6:	40 e0       	ldi	r20, 0x00	; 0
      c8:	50 e0       	ldi	r21, 0x00	; 0
      ca:	20 e0       	ldi	r18, 0x00	; 0
      cc:	30 e0       	ldi	r19, 0x00	; 0
      ce:	80 81       	ld	r24, Z
      d0:	90 e0       	ldi	r25, 0x00	; 0
      d2:	86 23       	and	r24, r22
      d4:	97 23       	and	r25, r23
      d6:	89 2b       	or	r24, r25
      d8:	49 f0       	breq	.+18     	; 0xec <button_state+0x5a>
		{
			released_confidence_level = 0;
			pressed_confidence_level++ ;
      da:	2f 5f       	subi	r18, 0xFF	; 255
      dc:	3f 4f       	sbci	r19, 0xFF	; 255
			
			if (pressed_confidence_level > 500)
      de:	25 3f       	cpi	r18, 0xF5	; 245
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	38 07       	cpc	r19, r24
      e4:	78 f5       	brcc	.+94     	; 0x144 <button_state+0xb2>
	while (pressed == 5)
	{
		
		if (BIT_IS_SET(*port_reg, pin_no))
		{
			released_confidence_level = 0;
      e6:	40 e0       	ldi	r20, 0x00	; 0
      e8:	50 e0       	ldi	r21, 0x00	; 0
      ea:	f1 cf       	rjmp	.-30     	; 0xce <button_state+0x3c>
			}
			
		}
		else
		{
			released_confidence_level++ ;
      ec:	4f 5f       	subi	r20, 0xFF	; 255
      ee:	5f 4f       	sbci	r21, 0xFF	; 255
			pressed_confidence_level = 0;
			
			if (released_confidence_level > 500)
      f0:	45 3f       	cpi	r20, 0xF5	; 245
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	58 07       	cpc	r21, r24
      f6:	40 f5       	brcc	.+80     	; 0x148 <button_state+0xb6>
			
		}
		else
		{
			released_confidence_level++ ;
			pressed_confidence_level = 0;
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	e8 cf       	rjmp	.-48     	; 0xce <button_state+0x3c>
      fe:	61 e0       	ldi	r22, 0x01	; 1
     100:	70 e0       	ldi	r23, 0x00	; 0
     102:	02 c0       	rjmp	.+4      	; 0x108 <button_state+0x76>
     104:	66 0f       	add	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	9a 95       	dec	r25
     10a:	e2 f7       	brpl	.-8      	; 0x104 <button_state+0x72>
	
	
	
	while (pressed == 5)
	{
		if (BIT_IS_CLEAR(*port_reg, pin_no))
     10c:	40 e0       	ldi	r20, 0x00	; 0
     10e:	50 e0       	ldi	r21, 0x00	; 0
     110:	20 e0       	ldi	r18, 0x00	; 0
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	86 23       	and	r24, r22
     11a:	97 23       	and	r25, r23
     11c:	89 2b       	or	r24, r25
     11e:	49 f4       	brne	.+18     	; 0x132 <button_state+0xa0>
		{
			released_confidence_level = 0;
			pressed_confidence_level++ ;
     120:	2f 5f       	subi	r18, 0xFF	; 255
     122:	3f 4f       	sbci	r19, 0xFF	; 255
			
			if (pressed_confidence_level > 500)
     124:	25 3f       	cpi	r18, 0xF5	; 245
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	38 07       	cpc	r19, r24
     12a:	80 f4       	brcc	.+32     	; 0x14c <button_state+0xba>
	
	while (pressed == 5)
	{
		if (BIT_IS_CLEAR(*port_reg, pin_no))
		{
			released_confidence_level = 0;
     12c:	40 e0       	ldi	r20, 0x00	; 0
     12e:	50 e0       	ldi	r21, 0x00	; 0
     130:	f1 cf       	rjmp	.-30     	; 0x114 <button_state+0x82>
				pressed_confidence_level = 0;
			}
		}
		else
		{
			released_confidence_level++ ;
     132:	4f 5f       	subi	r20, 0xFF	; 255
     134:	5f 4f       	sbci	r21, 0xFF	; 255
			pressed_confidence_level = 0;
			
			if (released_confidence_level > 500)
     136:	45 3f       	cpi	r20, 0xF5	; 245
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	58 07       	cpc	r21, r24
     13c:	48 f4       	brcc	.+18     	; 0x150 <button_state+0xbe>
			}
		}
		else
		{
			released_confidence_level++ ;
			pressed_confidence_level = 0;
     13e:	20 e0       	ldi	r18, 0x00	; 0
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	e8 cf       	rjmp	.-48     	; 0x114 <button_state+0x82>
			released_confidence_level = 0;
			pressed_confidence_level++ ;
			
			if (pressed_confidence_level > 500)
			{
				pressed = 1;
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	08 95       	ret
			released_confidence_level++ ;
			pressed_confidence_level = 0;
			
			if (released_confidence_level > 500)
			{
				pressed = 0;
     148:	80 e0       	ldi	r24, 0x00	; 0
     14a:	08 95       	ret
			released_confidence_level = 0;
			pressed_confidence_level++ ;
			
			if (pressed_confidence_level > 500)
			{				
				pressed = 1;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	08 95       	ret
			released_confidence_level++ ;
			pressed_confidence_level = 0;
			
			if (released_confidence_level > 500)
			{
				pressed = 0;
     150:	80 e0       	ldi	r24, 0x00	; 0
	int8_t button_state = 0;
	volatile uint8_t * port_Address = PIN_REG_BASE + PORT_OFFSET(PinPort);
	button_state = (PU_PD == PULL_DOWN)? is_port_pin_pd_pressed(port_Address, PinNo_InPort) : is_port_pin_pu_pressed(port_Address,
																													 PinNo_InPort);
	return button_state; 
}
     152:	08 95       	ret

00000154 <dio_set_pin_dir>:
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
	
	//return the state of the pin 	
	return (GET_BIT(*(PIN_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port));
}
     154:	e8 2f       	mov	r30, r24
     156:	e6 95       	lsr	r30
     158:	e6 95       	lsr	r30
     15a:	e6 95       	lsr	r30
     15c:	87 70       	andi	r24, 0x07	; 7
     15e:	62 30       	cpi	r22, 0x02	; 2
     160:	e1 f0       	breq	.+56     	; 0x19a <dio_set_pin_dir+0x46>
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	9f 01       	movw	r18, r30
     166:	22 0f       	add	r18, r18
     168:	33 1f       	adc	r19, r19
     16a:	e2 0f       	add	r30, r18
     16c:	f3 1f       	adc	r31, r19
     16e:	f1 95       	neg	r31
     170:	e1 95       	neg	r30
     172:	f1 09       	sbc	r31, r1
     174:	22 ad       	ldd	r18, Z+58	; 0x3a
     176:	41 e0       	ldi	r20, 0x01	; 1
     178:	50 e0       	ldi	r21, 0x00	; 0
     17a:	08 2e       	mov	r0, r24
     17c:	02 c0       	rjmp	.+4      	; 0x182 <dio_set_pin_dir+0x2e>
     17e:	44 0f       	add	r20, r20
     180:	55 1f       	adc	r21, r21
     182:	0a 94       	dec	r0
     184:	e2 f7       	brpl	.-8      	; 0x17e <dio_set_pin_dir+0x2a>
     186:	94 2f       	mov	r25, r20
     188:	90 95       	com	r25
     18a:	92 23       	and	r25, r18
     18c:	01 c0       	rjmp	.+2      	; 0x190 <dio_set_pin_dir+0x3c>
     18e:	66 0f       	add	r22, r22
     190:	8a 95       	dec	r24
     192:	ea f7       	brpl	.-6      	; 0x18e <dio_set_pin_dir+0x3a>
     194:	69 2b       	or	r22, r25
     196:	62 af       	std	Z+58, r22	; 0x3a
     198:	08 95       	ret
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	9f 01       	movw	r18, r30
     19e:	22 0f       	add	r18, r18
     1a0:	33 1f       	adc	r19, r19
     1a2:	e2 0f       	add	r30, r18
     1a4:	f3 1f       	adc	r31, r19
     1a6:	f1 95       	neg	r31
     1a8:	e1 95       	neg	r30
     1aa:	f1 09       	sbc	r31, r1
     1ac:	42 ad       	ldd	r20, Z+58	; 0x3a
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	b9 01       	movw	r22, r18
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <dio_set_pin_dir+0x66>
     1b6:	66 0f       	add	r22, r22
     1b8:	77 1f       	adc	r23, r23
     1ba:	8a 95       	dec	r24
     1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <dio_set_pin_dir+0x62>
     1be:	cb 01       	movw	r24, r22
     1c0:	96 2f       	mov	r25, r22
     1c2:	90 95       	com	r25
     1c4:	94 23       	and	r25, r20
     1c6:	92 af       	std	Z+58, r25	; 0x3a
     1c8:	93 ad       	ldd	r25, Z+59	; 0x3b
     1ca:	89 2b       	or	r24, r25
     1cc:	83 af       	std	Z+59, r24	; 0x3b
     1ce:	08 95       	ret

000001d0 <dio_set_pin_val>:


void dio_set_pin_val(uint8_t a_pin_no, uint8_t PinVal)
{
     1d0:	96 2f       	mov	r25, r22
	//determine the port that was addressed from the dio_pin number
	uint8_t pin_port = a_pin_no / NUM_PIN_PER_PORT;
     1d2:	38 2f       	mov	r19, r24
     1d4:	36 95       	lsr	r19
     1d6:	36 95       	lsr	r19
     1d8:	36 95       	lsr	r19
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
	
	//assign the value to the specific pin_no in the specific port 
	ASSIGN_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, PinVal);
     1da:	e3 2f       	mov	r30, r19
     1dc:	f0 e0       	ldi	r31, 0x00	; 0
     1de:	af 01       	movw	r20, r30
     1e0:	44 0f       	add	r20, r20
     1e2:	55 1f       	adc	r21, r21
     1e4:	e4 0f       	add	r30, r20
     1e6:	f5 1f       	adc	r31, r21
     1e8:	f1 95       	neg	r31
     1ea:	e1 95       	neg	r30
     1ec:	f1 09       	sbc	r31, r1
     1ee:	63 ad       	ldd	r22, Z+59	; 0x3b
     1f0:	33 0f       	add	r19, r19
     1f2:	33 0f       	add	r19, r19
     1f4:	33 0f       	add	r19, r19
     1f6:	83 1b       	sub	r24, r19
     1f8:	21 e0       	ldi	r18, 0x01	; 1
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	08 2e       	mov	r0, r24
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <dio_set_pin_val+0x34>
     200:	22 0f       	add	r18, r18
     202:	33 1f       	adc	r19, r19
     204:	0a 94       	dec	r0
     206:	e2 f7       	brpl	.-8      	; 0x200 <dio_set_pin_val+0x30>
     208:	20 95       	com	r18
     20a:	26 23       	and	r18, r22
     20c:	69 2f       	mov	r22, r25
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	02 c0       	rjmp	.+4      	; 0x216 <dio_set_pin_val+0x46>
     212:	66 0f       	add	r22, r22
     214:	77 1f       	adc	r23, r23
     216:	8a 95       	dec	r24
     218:	e2 f7       	brpl	.-8      	; 0x212 <dio_set_pin_val+0x42>
     21a:	62 2b       	or	r22, r18
     21c:	63 af       	std	Z+59, r22	; 0x3b
     21e:	08 95       	ret

00000220 <uart_rx_handler>:
		
		//free the string in the element that was previously allocated 
		free(entry.str);
	}
	
}
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
     226:	8c b1       	in	r24, 0x0c	; 12
     228:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <temp>
     22c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <receive_flag>
     230:	8e 3f       	cpi	r24, 0xFE	; 254
     232:	89 f4       	brne	.+34     	; 0x256 <uart_rx_handler+0x36>
     234:	83 e0       	ldi	r24, 0x03	; 3
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 23 06 	call	0xc46	; 0xc46 <millis>
     23c:	8f ef       	ldi	r24, 0xFF	; 255
     23e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <receive_flag>
     242:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <temp>
     246:	8b 37       	cpi	r24, 0x7B	; 123
     248:	09 f0       	breq	.+2      	; 0x24c <uart_rx_handler+0x2c>
     24a:	50 c0       	rjmp	.+160    	; 0x2ec <uart_rx_handler+0xcc>
     24c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <receive_flag>
     250:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <string_counter>
     254:	08 95       	ret
     256:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <receive_flag>
     25a:	8f 3f       	cpi	r24, 0xFF	; 255
     25c:	51 f4       	brne	.+20     	; 0x272 <uart_rx_handler+0x52>
     25e:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <temp>
     262:	8b 37       	cpi	r24, 0x7B	; 123
     264:	09 f0       	breq	.+2      	; 0x268 <uart_rx_handler+0x48>
     266:	42 c0       	rjmp	.+132    	; 0x2ec <uart_rx_handler+0xcc>
     268:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <receive_flag>
     26c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <string_counter>
     270:	08 95       	ret
     272:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <receive_flag>
     276:	81 11       	cpse	r24, r1
     278:	08 c0       	rjmp	.+16     	; 0x28a <uart_rx_handler+0x6a>
     27a:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <temp>
     27e:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <req_type>
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <receive_flag>
     288:	08 95       	ret
     28a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <receive_flag>
     28e:	81 30       	cpi	r24, 0x01	; 1
     290:	69 f5       	brne	.+90     	; 0x2ec <uart_rx_handler+0xcc>
     292:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <temp>
     296:	8d 37       	cpi	r24, 0x7D	; 125
     298:	89 f4       	brne	.+34     	; 0x2bc <uart_rx_handler+0x9c>
     29a:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <string_counter>
     29e:	0e 2e       	mov	r0, r30
     2a0:	00 0c       	add	r0, r0
     2a2:	ff 0b       	sbc	r31, r31
     2a4:	e9 5a       	subi	r30, 0xA9	; 169
     2a6:	fe 4f       	sbci	r31, 0xFE	; 254
     2a8:	10 82       	st	Z, r1
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <receive_flag>
     2b0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <string_counter>
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <str_reached>
     2ba:	08 95       	ret
     2bc:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <string_counter>
     2c0:	0e 2e       	mov	r0, r30
     2c2:	00 0c       	add	r0, r0
     2c4:	ff 0b       	sbc	r31, r31
     2c6:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <temp>
     2ca:	e9 5a       	subi	r30, 0xA9	; 169
     2cc:	fe 4f       	sbci	r31, 0xFE	; 254
     2ce:	80 83       	st	Z, r24
     2d0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <string_counter>
     2d4:	8f 5f       	subi	r24, 0xFF	; 255
     2d6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <string_counter>
     2da:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <string_counter>
     2de:	8b 30       	cpi	r24, 0x0B	; 11
     2e0:	2c f0       	brlt	.+10     	; 0x2ec <uart_rx_handler+0xcc>
     2e2:	8f ef       	ldi	r24, 0xFF	; 255
     2e4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <string_counter>
     2e8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <receive_flag>
     2ec:	08 95       	ret

000002ee <store_data>:
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <list>
     2fa:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <list+0x1>
     2fe:	84 81       	ldd	r24, Z+4	; 0x04
     300:	95 81       	ldd	r25, Z+5	; 0x05
     302:	04 97       	sbiw	r24, 0x04	; 4
     304:	88 f5       	brcc	.+98     	; 0x368 <store_data+0x7a>
     306:	00 91 68 00 	lds	r16, 0x0068	; 0x800068 <e_ptr>
     30a:	10 91 69 00 	lds	r17, 0x0069	; 0x800069 <e_ptr+0x1>
     30e:	c7 e5       	ldi	r28, 0x57	; 87
     310:	d1 e0       	ldi	r29, 0x01	; 1
     312:	fe 01       	movw	r30, r28
     314:	01 90       	ld	r0, Z+
     316:	00 20       	and	r0, r0
     318:	e9 f7       	brne	.-6      	; 0x314 <store_data+0x26>
     31a:	cf 01       	movw	r24, r30
     31c:	87 55       	subi	r24, 0x57	; 87
     31e:	91 40       	sbci	r25, 0x01	; 1
     320:	0e 94 40 0b 	call	0x1680	; 0x1680 <malloc>
     324:	f8 01       	movw	r30, r16
     326:	91 83       	std	Z+1, r25	; 0x01
     328:	80 83       	st	Z, r24
     32a:	09 90       	ld	r0, Y+
     32c:	00 20       	and	r0, r0
     32e:	e9 f7       	brne	.-6      	; 0x32a <store_data+0x3c>
     330:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <e_ptr>
     334:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <e_ptr+0x1>
     338:	ae 01       	movw	r20, r28
     33a:	47 55       	subi	r20, 0x57	; 87
     33c:	51 40       	sbci	r21, 0x01	; 1
     33e:	67 e5       	ldi	r22, 0x57	; 87
     340:	71 e0       	ldi	r23, 0x01	; 1
     342:	80 81       	ld	r24, Z
     344:	91 81       	ldd	r25, Z+1	; 0x01
     346:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <memcpy>
     34a:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <e_ptr>
     34e:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <e_ptr+0x1>
     352:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <req_type>
     356:	fb 01       	movw	r30, r22
     358:	82 83       	std	Z+2, r24	; 0x02
     35a:	43 e0       	ldi	r20, 0x03	; 3
     35c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <list>
     360:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <list+0x1>
     364:	0e 94 c7 06 	call	0xd8e	; 0xd8e <push>
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	08 95       	ret

00000372 <timer0_ovf_handler>:
     372:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <receive_flag>
     376:	8e 3f       	cpi	r24, 0xFE	; 254
     378:	31 f1       	breq	.+76     	; 0x3c6 <timer0_ovf_handler+0x54>
     37a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     37e:	81 30       	cpi	r24, 0x01	; 1
     380:	81 f4       	brne	.+32     	; 0x3a2 <timer0_ovf_handler+0x30>
     382:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
     386:	83 e0       	ldi	r24, 0x03	; 3
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	0e 94 89 06 	call	0xd12	; 0xd12 <millis_reset_tmr>
     38e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <counter>
     392:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <counter+0x1>
     396:	01 96       	adiw	r24, 0x01	; 1
     398:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <counter+0x1>
     39c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <counter>
     3a0:	08 95       	ret
     3a2:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     3a6:	81 11       	cpse	r24, r1
     3a8:	0e c0       	rjmp	.+28     	; 0x3c6 <timer0_ovf_handler+0x54>
     3aa:	0e 94 82 06 	call	0xd04	; 0xd04 <millis_disable_tmr>
     3ae:	8e ef       	ldi	r24, 0xFE	; 254
     3b0:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <receive_flag>
     3b4:	8f ef       	ldi	r24, 0xFF	; 255
     3b6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <string_counter>
     3ba:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <counter+0x1>
     3be:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <counter>
     3c2:	0e 94 77 01 	call	0x2ee	; 0x2ee <store_data>
     3c6:	08 95       	ret

000003c8 <no_data_alarm>:


void no_data_alarm()
{
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	c4 e0       	ldi	r28, 0x04	; 4
     3ce:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (int i = 0; i < 4; i++)
	{
		DIO_SET_VAL(16, DIO_HIGH);
     3d0:	61 e0       	ldi	r22, 0x01	; 1
     3d2:	80 e1       	ldi	r24, 0x10	; 16
     3d4:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <dio_set_pin_val>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d8:	2f ef       	ldi	r18, 0xFF	; 255
     3da:	80 e7       	ldi	r24, 0x70	; 112
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	21 50       	subi	r18, 0x01	; 1
     3e0:	80 40       	sbci	r24, 0x00	; 0
     3e2:	90 40       	sbci	r25, 0x00	; 0
     3e4:	e1 f7       	brne	.-8      	; 0x3de <no_data_alarm+0x16>
     3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <no_data_alarm+0x20>
     3e8:	00 00       	nop
		_delay_ms(100);
		DIO_SET_VAL(16, DIO_LOW);
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	80 e1       	ldi	r24, 0x10	; 16
     3ee:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <dio_set_pin_val>
     3f2:	2f ef       	ldi	r18, 0xFF	; 255
     3f4:	80 e7       	ldi	r24, 0x70	; 112
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	21 50       	subi	r18, 0x01	; 1
     3fa:	80 40       	sbci	r24, 0x00	; 0
     3fc:	90 40       	sbci	r25, 0x00	; 0
     3fe:	e1 f7       	brne	.-8      	; 0x3f8 <no_data_alarm+0x30>
     400:	00 c0       	rjmp	.+0      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     402:	00 00       	nop
     404:	21 97       	sbiw	r28, 0x01	; 1


void no_data_alarm()
{
	
	for (int i = 0; i < 4; i++)
     406:	21 f7       	brne	.-56     	; 0x3d0 <no_data_alarm+0x8>
		DIO_SET_VAL(16, DIO_LOW);
		_delay_ms(100);
		
	}
	
}
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <error_alarm>:

void error_alarm()
{
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	cc e0       	ldi	r28, 0x0C	; 12
     414:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (int i = 0; i < 12; i++)
	{
		DIO_SET_VAL(16, DIO_HIGH);
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	80 e1       	ldi	r24, 0x10	; 16
     41a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <dio_set_pin_val>
     41e:	8f e1       	ldi	r24, 0x1F	; 31
     420:	9e e4       	ldi	r25, 0x4E	; 78
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	f1 f7       	brne	.-4      	; 0x422 <error_alarm+0x14>
     426:	00 c0       	rjmp	.+0      	; 0x428 <error_alarm+0x1a>
     428:	00 00       	nop
		_delay_ms(10);
		DIO_SET_VAL(16, DIO_LOW);
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	80 e1       	ldi	r24, 0x10	; 16
     42e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <dio_set_pin_val>
     432:	8f e1       	ldi	r24, 0x1F	; 31
     434:	9e e4       	ldi	r25, 0x4E	; 78
     436:	01 97       	sbiw	r24, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <error_alarm+0x28>
     43a:	00 c0       	rjmp	.+0      	; 0x43c <error_alarm+0x2e>
     43c:	00 00       	nop
     43e:	21 97       	sbiw	r28, 0x01	; 1
}

void error_alarm()
{
	
	for (int i = 0; i < 12; i++)
     440:	51 f7       	brne	.-44     	; 0x416 <error_alarm+0x8>
		_delay_ms(10);
		DIO_SET_VAL(16, DIO_LOW);
		_delay_ms(10);
	}
	
}
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <lcd_menu>:


void lcd_menu()
{
	LCD_commandSend (CLEAR_SCREEN);
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_commandSend>
	LCD_strByLocation("smoke:", 1,0);
     44e:	40 e0       	ldi	r20, 0x00	; 0
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	83 e8       	ldi	r24, 0x83	; 131
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_strByLocation>
	LCD_strByLocation("temp:", 1,1);
     45a:	41 e0       	ldi	r20, 0x01	; 1
     45c:	61 e0       	ldi	r22, 0x01	; 1
     45e:	8a e8       	ldi	r24, 0x8A	; 138
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_strByLocation>
	LCD_strByLocation("H2O:", 11,1);
     466:	41 e0       	ldi	r20, 0x01	; 1
     468:	6b e0       	ldi	r22, 0x0B	; 11
     46a:	80 e9       	ldi	r24, 0x90	; 144
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_strByLocation>
	
	if (arrow_pos == S_OP)
     472:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <arrow_pos>
     476:	81 11       	cpse	r24, r1
     478:	07 c0       	rjmp	.+14     	; 0x488 <__stack+0x29>
	{
		LCD_gotoxy(0, 0);
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	70 e0       	ldi	r23, 0x00	; 0
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_gotoxy>
     486:	11 c0       	rjmp	.+34     	; 0x4aa <__stack+0x4b>
	}
	else if (arrow_pos == T_OP)
     488:	82 30       	cpi	r24, 0x02	; 2
     48a:	39 f4       	brne	.+14     	; 0x49a <__stack+0x3b>
	{
		LCD_gotoxy(0, 1);
     48c:	61 e0       	ldi	r22, 0x01	; 1
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_gotoxy>
     498:	08 c0       	rjmp	.+16     	; 0x4aa <__stack+0x4b>
	}
	else if (arrow_pos == H_OP)
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	31 f4       	brne	.+12     	; 0x4aa <__stack+0x4b>
	{
		LCD_gotoxy(10, 1);
     49e:	61 e0       	ldi	r22, 0x01	; 1
     4a0:	70 e0       	ldi	r23, 0x00	; 0
     4a2:	8a e0       	ldi	r24, 0x0A	; 10
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_gotoxy>
	}
	
	LCD_chr('>');
     4aa:	8e e3       	ldi	r24, 0x3E	; 62
     4ac:	0e 94 21 09 	call	0x1242	; 0x1242 <LCD_chr>
     4b0:	08 95       	ret

000004b2 <lcd_data>:
		
}

void lcd_data(uint8_t break_f)
{
     4b2:	cf 93       	push	r28
     4b4:	c8 2f       	mov	r28, r24
	LCD_commandSend (CLEAR_SCREEN);
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_commandSend>
	LCD_strByLocation("S: ", 0,0);
     4bc:	40 e0       	ldi	r20, 0x00	; 0
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	85 e9       	ldi	r24, 0x95	; 149
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_strByLocation>
	LCD_str(s_arr);
     4c8:	8a e6       	ldi	r24, 0x6A	; 106
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 0b 09 	call	0x1216	; 0x1216 <LCD_str>
	LCD_str("ppm");
     4d0:	89 e9       	ldi	r24, 0x99	; 153
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 0b 09 	call	0x1216	; 0x1216 <LCD_str>
	
	LCD_strByLocation("T: ", 1,1);
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	8d e9       	ldi	r24, 0x9D	; 157
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_strByLocation>
	LCD_str(t_arr);
     4e4:	84 e7       	ldi	r24, 0x74	; 116
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 0b 09 	call	0x1216	; 0x1216 <LCD_str>
	LCD_str("c");
     4ec:	81 ea       	ldi	r24, 0xA1	; 161
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 0b 09 	call	0x1216	; 0x1216 <LCD_str>
	
	LCD_strByLocation("H: ", 11,1);
     4f4:	41 e0       	ldi	r20, 0x01	; 1
     4f6:	6b e0       	ldi	r22, 0x0B	; 11
     4f8:	83 ea       	ldi	r24, 0xA3	; 163
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_strByLocation>
	LCD_str(h_arr);
     500:	80 e7       	ldi	r24, 0x70	; 112
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 0b 09 	call	0x1216	; 0x1216 <LCD_str>
	LCD_str("%");
     508:	87 ea       	ldi	r24, 0xA7	; 167
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 0b 09 	call	0x1216	; 0x1216 <LCD_str>
	
	if (break_f == 1)
     510:	c1 30       	cpi	r28, 0x01	; 1
     512:	39 f4       	brne	.+14     	; 0x522 <lcd_data+0x70>
	{
		LCD_strByLocation("BREAK", 9, 0);
     514:	40 e0       	ldi	r20, 0x00	; 0
     516:	69 e0       	ldi	r22, 0x09	; 9
     518:	8b ea       	ldi	r24, 0xAB	; 171
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_strByLocation>
     520:	06 c0       	rjmp	.+12     	; 0x52e <lcd_data+0x7c>
	}
	else
	{
		LCD_strByLocation("NOBREAK", 9, 0);
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	69 e0       	ldi	r22, 0x09	; 9
     526:	89 ea       	ldi	r24, 0xA9	; 169
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 ef 08 	call	0x11de	; 0x11de <LCD_strByLocation>
	}
	
	
}
     52e:	cf 91       	pop	r28
     530:	08 95       	ret

00000532 <esp_init>:

void esp_init()
{
	uint8_t at_flag = 0;
	
	usart_write_str_mark(USART0, "AT", 0);
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	61 eb       	ldi	r22, 0xB1	; 177
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 6d 09 	call	0x12da	; 0x12da <usart_write_str_mark>
	while (receive_flag != -2); // while there is some request coming from the esp .. do not send your request in order to avoid
     53e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <receive_flag>
     542:	8e 3f       	cpi	r24, 0xFE	; 254
     544:	e1 f7       	brne	.-8      	; 0x53e <esp_init+0xc>
	//collision of data between the request and the response
	usart_set_rx_int(USART0, false); // disable the interrupt .. to do not listen for any request and listen only for the response of command
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <usart_set_rx_int>
	
	usart_write_str_mark(USART0, "\r\n", 0);// send the request terminator in order of it to be processed
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	6c e0       	ldi	r22, 0x0C	; 12
     552:	71 e0       	ldi	r23, 0x01	; 1
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	0e 94 6d 09 	call	0x12da	; 0x12da <usart_write_str_mark>
	at_flag = check_strings(100, 2, "OK\r\n", "ERROR\r\n");
     55a:	84 eb       	ldi	r24, 0xB4	; 180
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	9f 93       	push	r25
     560:	8f 93       	push	r24
     562:	8c eb       	ldi	r24, 0xBC	; 188
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	9f 93       	push	r25
     568:	8f 93       	push	r24
     56a:	1f 92       	push	r1
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	8f 93       	push	r24
     570:	1f 92       	push	r1
     572:	84 e6       	ldi	r24, 0x64	; 100
     574:	8f 93       	push	r24
     576:	0e 94 86 0a 	call	0x150c	; 0x150c <check_strings>
	if (!at_flag)
     57a:	2d b7       	in	r18, 0x3d	; 61
     57c:	3e b7       	in	r19, 0x3e	; 62
     57e:	28 5f       	subi	r18, 0xF8	; 248
     580:	3f 4f       	sbci	r19, 0xFF	; 255
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	3e bf       	out	0x3e, r19	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	2d bf       	out	0x3d, r18	; 61
     58c:	81 11       	cpse	r24, r1
     58e:	03 c0       	rjmp	.+6      	; 0x596 <esp_init+0x64>
	{
		no_data_alarm();
     590:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <no_data_alarm>
     594:	04 c0       	rjmp	.+8      	; 0x59e <esp_init+0x6c>
	}
	else if (at_flag == AT_ERROR)
     596:	82 30       	cpi	r24, 0x02	; 2
     598:	11 f4       	brne	.+4      	; 0x59e <esp_init+0x6c>
	{
		error_alarm();
     59a:	0e 94 07 02 	call	0x40e	; 0x40e <error_alarm>
	}

	
	usart_write_str_mark(USART0, "AT+CWMODE=0\r\n", 0);
     59e:	40 e0       	ldi	r20, 0x00	; 0
     5a0:	61 ec       	ldi	r22, 0xC1	; 193
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	0e 94 6d 09 	call	0x12da	; 0x12da <usart_write_str_mark>
	at_flag = check_strings(100, 2, "OK\r\n", "ERROR\r\n");
     5aa:	84 eb       	ldi	r24, 0xB4	; 180
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	9f 93       	push	r25
     5b0:	8f 93       	push	r24
     5b2:	8c eb       	ldi	r24, 0xBC	; 188
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	9f 93       	push	r25
     5b8:	8f 93       	push	r24
     5ba:	1f 92       	push	r1
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	8f 93       	push	r24
     5c0:	1f 92       	push	r1
     5c2:	84 e6       	ldi	r24, 0x64	; 100
     5c4:	8f 93       	push	r24
     5c6:	0e 94 86 0a 	call	0x150c	; 0x150c <check_strings>
	if (!at_flag)
     5ca:	2d b7       	in	r18, 0x3d	; 61
     5cc:	3e b7       	in	r19, 0x3e	; 62
     5ce:	28 5f       	subi	r18, 0xF8	; 248
     5d0:	3f 4f       	sbci	r19, 0xFF	; 255
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	3e bf       	out	0x3e, r19	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	2d bf       	out	0x3d, r18	; 61
     5dc:	81 11       	cpse	r24, r1
     5de:	03 c0       	rjmp	.+6      	; 0x5e6 <esp_init+0xb4>
	{
		no_data_alarm();
     5e0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <no_data_alarm>
     5e4:	04 c0       	rjmp	.+8      	; 0x5ee <esp_init+0xbc>
	}
	else if (at_flag == AT_ERROR)
     5e6:	82 30       	cpi	r24, 0x02	; 2
     5e8:	11 f4       	brne	.+4      	; 0x5ee <esp_init+0xbc>
	{
		error_alarm();
     5ea:	0e 94 07 02 	call	0x40e	; 0x40e <error_alarm>
	}
	
	
	usart_write_str_mark(USART0, "AT+CIPMUX=1\r\n", 0);
     5ee:	40 e0       	ldi	r20, 0x00	; 0
     5f0:	6f ec       	ldi	r22, 0xCF	; 207
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	0e 94 6d 09 	call	0x12da	; 0x12da <usart_write_str_mark>
	at_flag = check_strings(100, 2, "OK\r\n", "ERROR\r\n");
     5fa:	84 eb       	ldi	r24, 0xB4	; 180
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	9f 93       	push	r25
     600:	8f 93       	push	r24
     602:	8c eb       	ldi	r24, 0xBC	; 188
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	9f 93       	push	r25
     608:	8f 93       	push	r24
     60a:	1f 92       	push	r1
     60c:	82 e0       	ldi	r24, 0x02	; 2
     60e:	8f 93       	push	r24
     610:	1f 92       	push	r1
     612:	84 e6       	ldi	r24, 0x64	; 100
     614:	8f 93       	push	r24
     616:	0e 94 86 0a 	call	0x150c	; 0x150c <check_strings>
	if (!at_flag)
     61a:	2d b7       	in	r18, 0x3d	; 61
     61c:	3e b7       	in	r19, 0x3e	; 62
     61e:	28 5f       	subi	r18, 0xF8	; 248
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	3e bf       	out	0x3e, r19	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	2d bf       	out	0x3d, r18	; 61
     62c:	81 11       	cpse	r24, r1
     62e:	03 c0       	rjmp	.+6      	; 0x636 <esp_init+0x104>
	{
		no_data_alarm();
     630:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <no_data_alarm>
     634:	04 c0       	rjmp	.+8      	; 0x63e <esp_init+0x10c>
	}
	else if (at_flag == AT_ERROR)
     636:	82 30       	cpi	r24, 0x02	; 2
     638:	11 f4       	brne	.+4      	; 0x63e <esp_init+0x10c>
	{
		error_alarm();
     63a:	0e 94 07 02 	call	0x40e	; 0x40e <error_alarm>
	}
	
	
	usart_write_str_mark(USART0, "AT+CIFSR\r\n", 0);
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	6d ed       	ldi	r22, 0xDD	; 221
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	0e 94 6d 09 	call	0x12da	; 0x12da <usart_write_str_mark>
	at_flag = check_strings(100, 2, "OK\r\n", "ERROR\r\n");
     64a:	84 eb       	ldi	r24, 0xB4	; 180
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	9f 93       	push	r25
     650:	8f 93       	push	r24
     652:	8c eb       	ldi	r24, 0xBC	; 188
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	9f 93       	push	r25
     658:	8f 93       	push	r24
     65a:	1f 92       	push	r1
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	8f 93       	push	r24
     660:	1f 92       	push	r1
     662:	84 e6       	ldi	r24, 0x64	; 100
     664:	8f 93       	push	r24
     666:	0e 94 86 0a 	call	0x150c	; 0x150c <check_strings>
	if (!at_flag)
     66a:	2d b7       	in	r18, 0x3d	; 61
     66c:	3e b7       	in	r19, 0x3e	; 62
     66e:	28 5f       	subi	r18, 0xF8	; 248
     670:	3f 4f       	sbci	r19, 0xFF	; 255
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	3e bf       	out	0x3e, r19	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	2d bf       	out	0x3d, r18	; 61
     67c:	81 11       	cpse	r24, r1
     67e:	03 c0       	rjmp	.+6      	; 0x686 <esp_init+0x154>
	{
		no_data_alarm();
     680:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <no_data_alarm>
     684:	04 c0       	rjmp	.+8      	; 0x68e <esp_init+0x15c>
	}
	else if (at_flag == AT_ERROR)
     686:	82 30       	cpi	r24, 0x02	; 2
     688:	11 f4       	brne	.+4      	; 0x68e <esp_init+0x15c>
	{
		error_alarm();
     68a:	0e 94 07 02 	call	0x40e	; 0x40e <error_alarm>
	}
	
	usart_write_str_mark(USART0, "AT+CIPSTART=\"TCP\",\"192.168.1.108\",80\r\n", 0);
     68e:	40 e0       	ldi	r20, 0x00	; 0
     690:	68 ee       	ldi	r22, 0xE8	; 232
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	80 e0       	ldi	r24, 0x00	; 0
     696:	0e 94 6d 09 	call	0x12da	; 0x12da <usart_write_str_mark>
	at_flag = check_strings(100, 2, "OK\r\n", "ERROR\r\n");
     69a:	84 eb       	ldi	r24, 0xB4	; 180
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	9f 93       	push	r25
     6a0:	8f 93       	push	r24
     6a2:	8c eb       	ldi	r24, 0xBC	; 188
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
     6aa:	1f 92       	push	r1
     6ac:	82 e0       	ldi	r24, 0x02	; 2
     6ae:	8f 93       	push	r24
     6b0:	1f 92       	push	r1
     6b2:	84 e6       	ldi	r24, 0x64	; 100
     6b4:	8f 93       	push	r24
     6b6:	0e 94 86 0a 	call	0x150c	; 0x150c <check_strings>
	if (!at_flag)
     6ba:	2d b7       	in	r18, 0x3d	; 61
     6bc:	3e b7       	in	r19, 0x3e	; 62
     6be:	28 5f       	subi	r18, 0xF8	; 248
     6c0:	3f 4f       	sbci	r19, 0xFF	; 255
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	3e bf       	out	0x3e, r19	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	2d bf       	out	0x3d, r18	; 61
     6cc:	81 11       	cpse	r24, r1
     6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <esp_init+0x1a4>
	{
		no_data_alarm();
     6d0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <no_data_alarm>
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <esp_init+0x1ac>
	}
	else if (at_flag == AT_ERROR)
     6d6:	82 30       	cpi	r24, 0x02	; 2
     6d8:	11 f4       	brne	.+4      	; 0x6de <esp_init+0x1ac>
	{
		error_alarm();
     6da:	0e 94 07 02 	call	0x40e	; 0x40e <error_alarm>
	}
	
	usart_set_rx_int(USART0, true);
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <usart_set_rx_int>
     6e6:	08 95       	ret

000006e8 <esp_send>:
	
}


void esp_send(uint8_t * str, uint8_t data_size_str)
{
     6e8:	ef 92       	push	r14
     6ea:	ff 92       	push	r15
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	00 d0       	rcall	.+0      	; 0x6f4 <esp_send+0xc>
     6f4:	00 d0       	rcall	.+0      	; 0x6f6 <esp_send+0xe>
     6f6:	cd b7       	in	r28, 0x3d	; 61
     6f8:	de b7       	in	r29, 0x3e	; 62
     6fa:	7c 01       	movw	r14, r24
     6fc:	16 2f       	mov	r17, r22
	int8_t arr[4]; 
	uint8_t at_flag = 0;
	
	usart_write_str_mark(USART0, "AT+CIPSEND=", 0);
     6fe:	40 e0       	ldi	r20, 0x00	; 0
     700:	6f e0       	ldi	r22, 0x0F	; 15
     702:	71 e0       	ldi	r23, 0x01	; 1
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	0e 94 6d 09 	call	0x12da	; 0x12da <usart_write_str_mark>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     70a:	4a e0       	ldi	r20, 0x0A	; 10
     70c:	be 01       	movw	r22, r28
     70e:	6f 5f       	subi	r22, 0xFF	; 255
     710:	7f 4f       	sbci	r23, 0xFF	; 255
     712:	81 2f       	mov	r24, r17
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <__itoa_ncheck>
	itoa(data_size_str, arr, 10);
	usart_write_str_mark(USART0, arr, 0);
     71a:	40 e0       	ldi	r20, 0x00	; 0
     71c:	be 01       	movw	r22, r28
     71e:	6f 5f       	subi	r22, 0xFF	; 255
     720:	7f 4f       	sbci	r23, 0xFF	; 255
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 6d 09 	call	0x12da	; 0x12da <usart_write_str_mark>
	while (receive_flag != -2); // while there is some request coming from the esp .. do not send your request in order to avoid
     728:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <receive_flag>
     72c:	8e 3f       	cpi	r24, 0xFE	; 254
     72e:	e1 f7       	brne	.-8      	; 0x728 <esp_send+0x40>
	//collision of data between the request and the response
	usart_set_rx_int(USART0, false); // disable the interrupt .. to do not listen for any request and listen only for the response of command
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <usart_set_rx_int>
	
	usart_write_str_mark(USART0, "\r\n", 0);// send the request terminator in order of it to be processed 
     738:	40 e0       	ldi	r20, 0x00	; 0
     73a:	6c e0       	ldi	r22, 0x0C	; 12
     73c:	71 e0       	ldi	r23, 0x01	; 1
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	0e 94 6d 09 	call	0x12da	; 0x12da <usart_write_str_mark>
	at_flag = check_strings(500, 2, "OK\r\n", "ERROR\r\n");
     744:	84 eb       	ldi	r24, 0xB4	; 180
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	9f 93       	push	r25
     74a:	8f 93       	push	r24
     74c:	8c eb       	ldi	r24, 0xBC	; 188
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	9f 93       	push	r25
     752:	8f 93       	push	r24
     754:	1f 92       	push	r1
     756:	82 e0       	ldi	r24, 0x02	; 2
     758:	8f 93       	push	r24
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	8f 93       	push	r24
     75e:	84 ef       	ldi	r24, 0xF4	; 244
     760:	8f 93       	push	r24
     762:	0e 94 86 0a 	call	0x150c	; 0x150c <check_strings>
	if (!at_flag)
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	81 11       	cpse	r24, r1
     772:	03 c0       	rjmp	.+6      	; 0x77a <esp_send+0x92>
	{
		no_data_alarm();
     774:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <no_data_alarm>
     778:	04 c0       	rjmp	.+8      	; 0x782 <esp_send+0x9a>
	}
	else if (at_flag == AT_ERROR)
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	11 f4       	brne	.+4      	; 0x782 <esp_send+0x9a>
	{
		error_alarm();
     77e:	0e 94 07 02 	call	0x40e	; 0x40e <error_alarm>
	}
	
	usart_set_rx_int(USART0, true); //after getting the response activate the interrupt again to listen for any coming requests
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <usart_set_rx_int>
	
	usart_write_str_size(USART0, str, data_size_str);
     78a:	41 2f       	mov	r20, r17
     78c:	b7 01       	movw	r22, r14
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 8a 09 	call	0x1314	; 0x1314 <usart_write_str_size>
	usart_write_str_mark(USART0, "\r\n", 0);
     794:	40 e0       	ldi	r20, 0x00	; 0
     796:	6c e0       	ldi	r22, 0x0C	; 12
     798:	71 e0       	ldi	r23, 0x01	; 1
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0e 94 6d 09 	call	0x12da	; 0x12da <usart_write_str_mark>
}
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	1f 91       	pop	r17
     7ae:	ff 90       	pop	r15
     7b0:	ef 90       	pop	r14
     7b2:	08 95       	ret

000007b4 <main>:


int main(void)
{
	
	DIO_SET_DIR(16, DIO_OUTPUT);
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	80 e1       	ldi	r24, 0x10	; 16
     7b8:	0e 94 aa 00 	call	0x154	; 0x154 <dio_set_pin_dir>

	//screen manipulation pines
	DIO_SET_DIR(0, DIO_PULLUP); // change option
     7bc:	62 e0       	ldi	r22, 0x02	; 2
     7be:	88 e0       	ldi	r24, 0x08	; 8
     7c0:	0e 94 aa 00 	call	0x154	; 0x154 <dio_set_pin_dir>
	DIO_SET_DIR(3, DIO_PULLUP); // choose option
     7c4:	62 e0       	ldi	r22, 0x02	; 2
     7c6:	8b e0       	ldi	r24, 0x0B	; 11
     7c8:	0e 94 aa 00 	call	0x154	; 0x154 <dio_set_pin_dir>
	DIO_SET_DIR(5, DIO_PULLUP); // change screen 
     7cc:	62 e0       	ldi	r22, 0x02	; 2
     7ce:	8d e0       	ldi	r24, 0x0D	; 13
     7d0:	0e 94 aa 00 	call	0x154	; 0x154 <dio_set_pin_dir>
		
	//directions pins
	DIO_SET_DIR(12, DIO_PULLUP); //
     7d4:	62 e0       	ldi	r22, 0x02	; 2
     7d6:	8c e1       	ldi	r24, 0x1C	; 28
     7d8:	0e 94 aa 00 	call	0x154	; 0x154 <dio_set_pin_dir>
	DIO_SET_DIR(14, DIO_PULLUP);
     7dc:	62 e0       	ldi	r22, 0x02	; 2
     7de:	8e e1       	ldi	r24, 0x1E	; 30
     7e0:	0e 94 aa 00 	call	0x154	; 0x154 <dio_set_pin_dir>
	DIO_SET_DIR(15, DIO_PULLUP);
     7e4:	62 e0       	ldi	r22, 0x02	; 2
     7e6:	8f e1       	ldi	r24, 0x1F	; 31
     7e8:	0e 94 aa 00 	call	0x154	; 0x154 <dio_set_pin_dir>
	DIO_SET_DIR(17, DIO_PULLUP);
     7ec:	62 e0       	ldi	r22, 0x02	; 2
     7ee:	81 e1       	ldi	r24, 0x11	; 17
     7f0:	0e 94 aa 00 	call	0x154	; 0x154 <dio_set_pin_dir>
	DIO_SET_DIR(19, DIO_PULLUP);
     7f4:	62 e0       	ldi	r22, 0x02	; 2
     7f6:	83 e1       	ldi	r24, 0x13	; 19
     7f8:	0e 94 aa 00 	call	0x154	; 0x154 <dio_set_pin_dir>
	uint8_t break_f        = 0;
	uint8_t direction      = 0;
	uint8_t option_changed = 0;
	uint8_t screen_changed = 0;
	
	sei();
     7fc:	78 94       	sei

	list = create_list();
     7fe:	0e 94 bb 06 	call	0xd76	; 0xd76 <create_list>
     802:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <list+0x1>
     806:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <list>
	
	
	usart_set_rx_isr(USART0, uart_rx_handler);
     80a:	60 e1       	ldi	r22, 0x10	; 16
     80c:	71 e0       	ldi	r23, 0x01	; 1
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	0e 94 fd 09 	call	0x13fa	; 0x13fa <usart_set_rx_isr>
	
	millis_add_ovf_isr(timer0_ovf_handler);
     814:	89 eb       	ldi	r24, 0xB9	; 185
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	0e 94 b6 06 	call	0xd6c	; 0xd6c <millis_add_ovf_isr>
    
	usart_init(USART0, 9600, DATA_SIZE_8, TX_RX, NO_PARITY, ONE_STOP_BIT, TX_RISE);
     81c:	a1 2c       	mov	r10, r1
     81e:	c1 2c       	mov	r12, r1
     820:	e1 2c       	mov	r14, r1
     822:	03 e0       	ldi	r16, 0x03	; 3
     824:	23 e0       	ldi	r18, 0x03	; 3
     826:	40 e8       	ldi	r20, 0x80	; 128
     828:	55 e2       	ldi	r21, 0x25	; 37
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 02 0a 	call	0x1404	; 0x1404 <usart_init>
     834:	2f ef       	ldi	r18, 0xFF	; 255
     836:	89 e6       	ldi	r24, 0x69	; 105
     838:	98 e1       	ldi	r25, 0x18	; 24
     83a:	21 50       	subi	r18, 0x01	; 1
     83c:	80 40       	sbci	r24, 0x00	; 0
     83e:	90 40       	sbci	r25, 0x00	; 0
     840:	e1 f7       	brne	.-8      	; 0x83a <main+0x86>
     842:	00 c0       	rjmp	.+0      	; 0x844 <main+0x90>
     844:	00 00       	nop
	
	//usart_write_str_mark(USART0, "ALI MAK\r\n", 0);
	_delay_ms(1000);
	
	esp_init();
     846:	0e 94 99 02 	call	0x532	; 0x532 <esp_init>
	LCD_init();	
     84a:	0e 94 00 08 	call	0x1000	; 0x1000 <LCD_init>
	LCD_gotoxy(0, 0);
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_gotoxy>
	LCD_str("welcome");
     85a:	8b e1       	ldi	r24, 0x1B	; 27
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	0e 94 0b 09 	call	0x1216	; 0x1216 <LCD_str>
	LCD_gotoxy(0, 1);
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_gotoxy>
	LCD_str("ALI");
     86e:	83 e2       	ldi	r24, 0x23	; 35
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	0e 94 0b 09 	call	0x1216	; 0x1216 <LCD_str>
     876:	ef ef       	ldi	r30, 0xFF	; 255
     878:	f9 e6       	ldi	r31, 0x69	; 105
     87a:	28 e1       	ldi	r18, 0x18	; 24
     87c:	e1 50       	subi	r30, 0x01	; 1
     87e:	f0 40       	sbci	r31, 0x00	; 0
     880:	20 40       	sbci	r18, 0x00	; 0
     882:	e1 f7       	brne	.-8      	; 0x87c <main+0xc8>
     884:	00 c0       	rjmp	.+0      	; 0x886 <main+0xd2>
     886:	00 00       	nop
	
	_delay_ms(1000);
	
	lcd_menu();
     888:	0e 94 24 02 	call	0x448	; 0x448 <lcd_menu>


	usart_set_rx_int(USART0, true);
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <usart_set_rx_int>
	uint8_t esp_data;
	uint8_t lcd_state      = MENU;
	uint8_t break_f        = 0;
	uint8_t direction      = 0;
	uint8_t option_changed = 0;
	uint8_t screen_changed = 0;
     894:	00 e0       	ldi	r16, 0x00	; 0
	
	uint8_t esp_data;
	uint8_t lcd_state      = MENU;
	uint8_t break_f        = 0;
	uint8_t direction      = 0;
	uint8_t option_changed = 0;
     896:	10 e0       	ldi	r17, 0x00	; 0
	DIO_SET_DIR(19, DIO_PULLUP);
	
	uint8_t esp_data;
	uint8_t lcd_state      = MENU;
	uint8_t break_f        = 0;
	uint8_t direction      = 0;
     898:	c0 e0       	ldi	r28, 0x00	; 0
	DIO_SET_DIR(17, DIO_PULLUP);
	DIO_SET_DIR(19, DIO_PULLUP);
	
	uint8_t esp_data;
	uint8_t lcd_state      = MENU;
	uint8_t break_f        = 0;
     89a:	b1 2c       	mov	r11, r1
	DIO_SET_DIR(15, DIO_PULLUP);
	DIO_SET_DIR(17, DIO_PULLUP);
	DIO_SET_DIR(19, DIO_PULLUP);
	
	uint8_t esp_data;
	uint8_t lcd_state      = MENU;
     89c:	d0 e0       	ldi	r29, 0x00	; 0
				usart_write_str_mark(USART0, h_arr, 0);	//display the humidity value	
				usart_write_str_mark(USART0, "\r\n", 0);
			}
			else if (e_ptr->request_type == 'B')
			{
				if (buffer[0] == 'B')
     89e:	0f 2e       	mov	r0, r31
     8a0:	f7 e5       	ldi	r31, 0x57	; 87
     8a2:	ef 2e       	mov	r14, r31
     8a4:	f1 e0       	ldi	r31, 0x01	; 1
     8a6:	ff 2e       	mov	r15, r31
     8a8:	f0 2d       	mov	r31, r0
				{
					PORTC |= (1 << 5); //activate a led
					break_f = 1; // set the break flag
     8aa:	dd 24       	eor	r13, r13
     8ac:	d3 94       	inc	r13
		{
					
			if (direction != F)
			{
				esp_send("{DF}", 4);
				direction  = F;
     8ae:	0f 2e       	mov	r0, r31
     8b0:	f3 e0       	ldi	r31, 0x03	; 3
     8b2:	cf 2e       	mov	r12, r31
     8b4:	f0 2d       	mov	r31, r0
	
	/* Replace with your application code */
    while (1) 
    {
		
		if (list->size > 0) // if there is a request in the Queue
     8b6:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <list>
     8ba:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <list+0x1>
     8be:	84 81       	ldd	r24, Z+4	; 0x04
     8c0:	95 81       	ldd	r25, Z+5	; 0x05
     8c2:	89 2b       	or	r24, r25
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <main+0x114>
     8c6:	87 c0       	rjmp	.+270    	; 0x9d6 <main+0x222>
		{
			
			pop(list, e_ptr, sizeof(element_t));
     8c8:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <e_ptr>
     8cc:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <e_ptr+0x1>
     8d0:	43 e0       	ldi	r20, 0x03	; 3
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	cf 01       	movw	r24, r30
     8d6:	0e 94 06 07 	call	0xe0c	; 0xe0c <pop>
			
			
			if (e_ptr->request_type == 'S') //the format is this .. -- R-data if needed 
     8da:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <e_ptr>
     8de:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <e_ptr+0x1>
     8e2:	82 81       	ldd	r24, Z+2	; 0x02
     8e4:	83 35       	cpi	r24, 0x53	; 83
     8e6:	f1 f4       	brne	.+60     	; 0x924 <main+0x170>
			{
				
				memcpy(s_arr, e_ptr->str, strlen(e_ptr->str) + 1);
     8e8:	60 81       	ld	r22, Z
     8ea:	71 81       	ldd	r23, Z+1	; 0x01
     8ec:	fb 01       	movw	r30, r22
     8ee:	01 90       	ld	r0, Z+
     8f0:	00 20       	and	r0, r0
     8f2:	e9 f7       	brne	.-6      	; 0x8ee <main+0x13a>
     8f4:	af 01       	movw	r20, r30
     8f6:	46 1b       	sub	r20, r22
     8f8:	57 0b       	sbc	r21, r23
     8fa:	8a e6       	ldi	r24, 0x6A	; 106
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <memcpy>
				usart_write(USART0, 'S');
     902:	63 e5       	ldi	r22, 0x53	; 83
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <usart_write>
				usart_write_str_mark(USART0, s_arr, 0); //display the smoke value
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	6a e6       	ldi	r22, 0x6A	; 106
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	0e 94 6d 09 	call	0x12da	; 0x12da <usart_write_str_mark>
				usart_write_str_mark(USART0, "\r\n", 0);
     916:	40 e0       	ldi	r20, 0x00	; 0
     918:	6c e0       	ldi	r22, 0x0C	; 12
     91a:	71 e0       	ldi	r23, 0x01	; 1
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	0e 94 6d 09 	call	0x12da	; 0x12da <usart_write_str_mark>
     922:	57 c0       	rjmp	.+174    	; 0x9d2 <main+0x21e>
			}
			else if (e_ptr->request_type == 'T')
     924:	84 35       	cpi	r24, 0x54	; 84
     926:	11 f5       	brne	.+68     	; 0x96c <main+0x1b8>
			{
				usart_write(USART0, 'T');
     928:	64 e5       	ldi	r22, 0x54	; 84
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <usart_write>
				memcpy(t_arr, e_ptr->str, strlen(e_ptr->str) + 1);
     930:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <e_ptr>
     934:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <e_ptr+0x1>
     938:	60 81       	ld	r22, Z
     93a:	71 81       	ldd	r23, Z+1	; 0x01
     93c:	fb 01       	movw	r30, r22
     93e:	01 90       	ld	r0, Z+
     940:	00 20       	and	r0, r0
     942:	e9 f7       	brne	.-6      	; 0x93e <main+0x18a>
     944:	af 01       	movw	r20, r30
     946:	46 1b       	sub	r20, r22
     948:	57 0b       	sbc	r21, r23
     94a:	84 e7       	ldi	r24, 0x74	; 116
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <memcpy>
				usart_write_str_mark(USART0, t_arr, 0); //display the temperature value
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	64 e7       	ldi	r22, 0x74	; 116
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	0e 94 6d 09 	call	0x12da	; 0x12da <usart_write_str_mark>
				usart_write_str_mark(USART0, "\r\n", 0);
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	6c e0       	ldi	r22, 0x0C	; 12
     962:	71 e0       	ldi	r23, 0x01	; 1
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	0e 94 6d 09 	call	0x12da	; 0x12da <usart_write_str_mark>
     96a:	33 c0       	rjmp	.+102    	; 0x9d2 <main+0x21e>
			}					   
			else if (e_ptr->request_type == 'H')
     96c:	88 34       	cpi	r24, 0x48	; 72
     96e:	11 f5       	brne	.+68     	; 0x9b4 <main+0x200>
			{
				usart_write(USART0, 'H');
     970:	68 e4       	ldi	r22, 0x48	; 72
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <usart_write>
				memcpy(h_arr, e_ptr->str, strlen(e_ptr->str) + 1);
     978:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <e_ptr>
     97c:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <e_ptr+0x1>
     980:	60 81       	ld	r22, Z
     982:	71 81       	ldd	r23, Z+1	; 0x01
     984:	fb 01       	movw	r30, r22
     986:	01 90       	ld	r0, Z+
     988:	00 20       	and	r0, r0
     98a:	e9 f7       	brne	.-6      	; 0x986 <main+0x1d2>
     98c:	af 01       	movw	r20, r30
     98e:	46 1b       	sub	r20, r22
     990:	57 0b       	sbc	r21, r23
     992:	80 e7       	ldi	r24, 0x70	; 112
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <memcpy>
				usart_write_str_mark(USART0, h_arr, 0);	//display the humidity value	
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	60 e7       	ldi	r22, 0x70	; 112
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	80 e0       	ldi	r24, 0x00	; 0
     9a2:	0e 94 6d 09 	call	0x12da	; 0x12da <usart_write_str_mark>
				usart_write_str_mark(USART0, "\r\n", 0);
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	6c e0       	ldi	r22, 0x0C	; 12
     9aa:	71 e0       	ldi	r23, 0x01	; 1
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	0e 94 6d 09 	call	0x12da	; 0x12da <usart_write_str_mark>
     9b2:	0f c0       	rjmp	.+30     	; 0x9d2 <main+0x21e>
			}
			else if (e_ptr->request_type == 'B')
     9b4:	82 34       	cpi	r24, 0x42	; 66
     9b6:	69 f4       	brne	.+26     	; 0x9d2 <main+0x21e>
			{
				if (buffer[0] == 'B')
     9b8:	f7 01       	movw	r30, r14
     9ba:	80 81       	ld	r24, Z
     9bc:	82 34       	cpi	r24, 0x42	; 66
     9be:	19 f4       	brne	.+6      	; 0x9c6 <main+0x212>
				{
					PORTC |= (1 << 5); //activate a led
     9c0:	ad 9a       	sbi	0x15, 5	; 21
					break_f = 1; // set the break flag
     9c2:	bd 2c       	mov	r11, r13
     9c4:	06 c0       	rjmp	.+12     	; 0x9d2 <main+0x21e>
				}
				else if (buffer[0] == 'N')
     9c6:	f7 01       	movw	r30, r14
     9c8:	80 81       	ld	r24, Z
     9ca:	8e 34       	cpi	r24, 0x4E	; 78
     9cc:	11 f4       	brne	.+4      	; 0x9d2 <main+0x21e>
				{
					PORTC &= ~(1 << 5);
     9ce:	ad 98       	cbi	0x15, 5	; 21
					break_f = 0;
     9d0:	b1 2c       	mov	r11, r1
				}
			}
			
			str_reached = 0; 
     9d2:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <str_reached>

		}
		
		
		if (button_state(PULL_UP, DIO_PIN0)) // moves between menu options BIT_IS_CLEAR(PIND, 2)
     9d6:	68 e0       	ldi	r22, 0x08	; 8
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	0e 94 49 00 	call	0x92	; 0x92 <button_state>
     9de:	88 23       	and	r24, r24
     9e0:	09 f4       	brne	.+2      	; 0x9e4 <main+0x230>
     9e2:	4d c0       	rjmp	.+154    	; 0xa7e <main+0x2ca>
		{
			if (!option_changed)
     9e4:	11 11       	cpse	r17, r1
     9e6:	4c c0       	rjmp	.+152    	; 0xa80 <main+0x2cc>
			{
				if (lcd_state == MENU)
     9e8:	d1 11       	cpse	r29, r1
     9ea:	e3 c0       	rjmp	.+454    	; 0xbb2 <main+0x3fe>
				{
					
					if (arrow_pos == S_OP)
     9ec:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <arrow_pos>
     9f0:	81 11       	cpse	r24, r1
     9f2:	16 c0       	rjmp	.+44     	; 0xa20 <main+0x26c>
					{
						LCD_gotoxy(0,0);
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_gotoxy>
						LCD_chr(' ');
     a00:	80 e2       	ldi	r24, 0x20	; 32
     a02:	0e 94 21 09 	call	0x1242	; 0x1242 <LCD_chr>
						LCD_gotoxy(0, 1);
     a06:	61 e0       	ldi	r22, 0x01	; 1
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_gotoxy>
						LCD_chr('>');
     a12:	8e e3       	ldi	r24, 0x3E	; 62
     a14:	0e 94 21 09 	call	0x1242	; 0x1242 <LCD_chr>
						arrow_pos = T_OP;
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <arrow_pos>
     a1e:	c1 c0       	rjmp	.+386    	; 0xba2 <main+0x3ee>
						
					}
					else if (arrow_pos == T_OP)
     a20:	82 30       	cpi	r24, 0x02	; 2
     a22:	a9 f4       	brne	.+42     	; 0xa4e <main+0x29a>
					{
						LCD_gotoxy(0, 1);
     a24:	61 e0       	ldi	r22, 0x01	; 1
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_gotoxy>
						LCD_chr(' ');
     a30:	80 e2       	ldi	r24, 0x20	; 32
     a32:	0e 94 21 09 	call	0x1242	; 0x1242 <LCD_chr>
						LCD_gotoxy(10, 1);
     a36:	61 e0       	ldi	r22, 0x01	; 1
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	8a e0       	ldi	r24, 0x0A	; 10
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_gotoxy>
						LCD_chr('>');
     a42:	8e e3       	ldi	r24, 0x3E	; 62
     a44:	0e 94 21 09 	call	0x1242	; 0x1242 <LCD_chr>
						arrow_pos = H_OP;
     a48:	d0 92 4a 01 	sts	0x014A, r13	; 0x80014a <arrow_pos>
     a4c:	aa c0       	rjmp	.+340    	; 0xba2 <main+0x3ee>
					}
					else if (arrow_pos == H_OP)
     a4e:	81 30       	cpi	r24, 0x01	; 1
     a50:	09 f0       	breq	.+2      	; 0xa54 <main+0x2a0>
     a52:	a7 c0       	rjmp	.+334    	; 0xba2 <main+0x3ee>
					{
						LCD_gotoxy(10, 1);
     a54:	61 e0       	ldi	r22, 0x01	; 1
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	8a e0       	ldi	r24, 0x0A	; 10
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_gotoxy>
						LCD_chr(' ');
     a60:	80 e2       	ldi	r24, 0x20	; 32
     a62:	0e 94 21 09 	call	0x1242	; 0x1242 <LCD_chr>
						LCD_gotoxy(0, 0);
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_gotoxy>
						LCD_chr('>');
     a72:	8e e3       	ldi	r24, 0x3E	; 62
     a74:	0e 94 21 09 	call	0x1242	; 0x1242 <LCD_chr>
						arrow_pos = S_OP;
     a78:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <arrow_pos>
     a7c:	92 c0       	rjmp	.+292    	; 0xba2 <main+0x3ee>
			}
			
		}
		else
		{
			option_changed = 0;
     a7e:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		
		if (button_state(PULL_UP, DIO_PIN3)) // choose the option  .. get the data and then update the string and then change the value BIT_IS_CLEAR(PIND, 3)
     a80:	6b e0       	ldi	r22, 0x0B	; 11
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	0e 94 49 00 	call	0x92	; 0x92 <button_state>
     a88:	88 23       	and	r24, r24
     a8a:	81 f1       	breq	.+96     	; 0xaec <main+0x338>
		{
			
			if (lcd_state == MENU)
     a8c:	d1 11       	cpse	r29, r1
     a8e:	2e c0       	rjmp	.+92     	; 0xaec <main+0x338>
     a90:	01 c0       	rjmp	.+2      	; 0xa94 <main+0x2e0>
		{
			option_changed = 0;
		}
		
		
		if (button_state(PULL_UP, DIO_PIN3)) // choose the option  .. get the data and then update the string and then change the value BIT_IS_CLEAR(PIND, 3)
     a92:	1d 2d       	mov	r17, r13
		{
			
			if (lcd_state == MENU)
			{
				
				if (arrow_pos == S_OP)
     a94:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <arrow_pos>
     a98:	81 11       	cpse	r24, r1
     a9a:	0b c0       	rjmp	.+22     	; 0xab2 <main+0x2fe>
				{
					esp_send(":S", 2);
     a9c:	62 e0       	ldi	r22, 0x02	; 2
     a9e:	87 e2       	ldi	r24, 0x27	; 39
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	0e 94 74 03 	call	0x6e8	; 0x6e8 <esp_send>
					s_arr[0]++;
     aa6:	ea e6       	ldi	r30, 0x6A	; 106
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	80 81       	ld	r24, Z
     aac:	8f 5f       	subi	r24, 0xFF	; 255
     aae:	80 83       	st	Z, r24
     ab0:	19 c0       	rjmp	.+50     	; 0xae4 <main+0x330>
				}
				else if (arrow_pos == T_OP)
     ab2:	82 30       	cpi	r24, 0x02	; 2
     ab4:	59 f4       	brne	.+22     	; 0xacc <main+0x318>
				{
					esp_send(":T", 2);
     ab6:	62 e0       	ldi	r22, 0x02	; 2
     ab8:	8a e2       	ldi	r24, 0x2A	; 42
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	0e 94 74 03 	call	0x6e8	; 0x6e8 <esp_send>
					t_arr[0]++;
     ac0:	e4 e7       	ldi	r30, 0x74	; 116
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	8f 5f       	subi	r24, 0xFF	; 255
     ac8:	80 83       	st	Z, r24
     aca:	0c c0       	rjmp	.+24     	; 0xae4 <main+0x330>
				}
				else if (arrow_pos == H_OP)
     acc:	81 30       	cpi	r24, 0x01	; 1
     ace:	51 f4       	brne	.+20     	; 0xae4 <main+0x330>
				{
					esp_send(":H", 2);
     ad0:	62 e0       	ldi	r22, 0x02	; 2
     ad2:	8d e2       	ldi	r24, 0x2D	; 45
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	0e 94 74 03 	call	0x6e8	; 0x6e8 <esp_send>
					h_arr[0]++;
     ada:	e0 e7       	ldi	r30, 0x70	; 112
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	8f 5f       	subi	r24, 0xFF	; 255
     ae2:	80 83       	st	Z, r24
				}
				
				lcd_state = DATA;
				lcd_data(break_f);	
     ae4:	8b 2d       	mov	r24, r11
     ae6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_data>
				{
					esp_send(":H", 2);
					h_arr[0]++;
				}
				
				lcd_state = DATA;
     aea:	dd 2d       	mov	r29, r13
			}

			
		}
		
		if (button_state(PULL_UP, DIO_PIN5)) // change screen BIT_IS_CLEAR(PIND, 4)
     aec:	6d e0       	ldi	r22, 0x0D	; 13
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	0e 94 49 00 	call	0x92	; 0x92 <button_state>
     af4:	88 23       	and	r24, r24
     af6:	89 f0       	breq	.+34     	; 0xb1a <main+0x366>
		{
			if (!screen_changed)
     af8:	01 11       	cpse	r16, r1
     afa:	12 c0       	rjmp	.+36     	; 0xb20 <main+0x36c>
			{
				if (lcd_state == MENU)
     afc:	d1 11       	cpse	r29, r1
     afe:	06 c0       	rjmp	.+12     	; 0xb0c <main+0x358>
				{
					lcd_state = DATA;
					lcd_data(break_f);
     b00:	8b 2d       	mov	r24, r11
     b02:	0e 94 59 02 	call	0x4b2	; 0x4b2 <lcd_data>
				{
					lcd_state = MENU;
					lcd_menu();
				}
				
				screen_changed = 1;
     b06:	0d 2d       	mov	r16, r13
		{
			if (!screen_changed)
			{
				if (lcd_state == MENU)
				{
					lcd_state = DATA;
     b08:	dd 2d       	mov	r29, r13
     b0a:	0a c0       	rjmp	.+20     	; 0xb20 <main+0x36c>
					lcd_data(break_f);
				}
				else if (lcd_state == DATA)
     b0c:	d1 30       	cpi	r29, 0x01	; 1
     b0e:	39 f4       	brne	.+14     	; 0xb1e <main+0x36a>
				{
					lcd_state = MENU;
					lcd_menu();
     b10:	0e 94 24 02 	call	0x448	; 0x448 <lcd_menu>
				}
				
				screen_changed = 1;
     b14:	0d 2d       	mov	r16, r13
					lcd_state = DATA;
					lcd_data(break_f);
				}
				else if (lcd_state == DATA)
				{
					lcd_state = MENU;
     b16:	d0 e0       	ldi	r29, 0x00	; 0
     b18:	03 c0       	rjmp	.+6      	; 0xb20 <main+0x36c>
			}
			
		}
		else
		{
			screen_changed = 0;
     b1a:	00 e0       	ldi	r16, 0x00	; 0
     b1c:	01 c0       	rjmp	.+2      	; 0xb20 <main+0x36c>
				{
					lcd_state = MENU;
					lcd_menu();
				}
				
				screen_changed = 1;
     b1e:	0d 2d       	mov	r16, r13
// 				esp_send("{DR}", 4);
// 				direction  = R;
// 			}
// 					
// 		}
		if (button_state(PULL_UP, DIO_PIN14)) //FORWARD button .. B2
     b20:	6e e1       	ldi	r22, 0x1E	; 30
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	0e 94 49 00 	call	0x92	; 0x92 <button_state>
     b28:	88 23       	and	r24, r24
     b2a:	51 f0       	breq	.+20     	; 0xb40 <main+0x38c>
		{
					
			if (direction != F)
     b2c:	c3 30       	cpi	r28, 0x03	; 3
     b2e:	09 f4       	brne	.+2      	; 0xb32 <main+0x37e>
     b30:	c2 ce       	rjmp	.-636    	; 0x8b6 <main+0x102>
			{
				esp_send("{DF}", 4);
     b32:	64 e0       	ldi	r22, 0x04	; 4
     b34:	80 e3       	ldi	r24, 0x30	; 48
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	0e 94 74 03 	call	0x6e8	; 0x6e8 <esp_send>
				direction  = F;
     b3c:	cc 2d       	mov	r28, r12
     b3e:	bb ce       	rjmp	.-650    	; 0x8b6 <main+0x102>
			}
					
		}
		else if (button_state(PULL_UP, DIO_PIN15)) //back ward button  B3
     b40:	6f e1       	ldi	r22, 0x1F	; 31
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	0e 94 49 00 	call	0x92	; 0x92 <button_state>
     b48:	88 23       	and	r24, r24
     b4a:	51 f0       	breq	.+20     	; 0xb60 <main+0x3ac>
		{
					
			if (direction != B)
     b4c:	c4 30       	cpi	r28, 0x04	; 4
     b4e:	09 f4       	brne	.+2      	; 0xb52 <main+0x39e>
     b50:	b2 ce       	rjmp	.-668    	; 0x8b6 <main+0x102>
			{
				esp_send("{DB}", 4);
     b52:	64 e0       	ldi	r22, 0x04	; 4
     b54:	85 e3       	ldi	r24, 0x35	; 53
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	0e 94 74 03 	call	0x6e8	; 0x6e8 <esp_send>
				direction  = B;
     b5c:	c4 e0       	ldi	r28, 0x04	; 4
     b5e:	ab ce       	rjmp	.-682    	; 0x8b6 <main+0x102>
			}
					
		}
		else if (button_state(PULL_UP, DIO_PIN17)) ////left button
     b60:	61 e1       	ldi	r22, 0x11	; 17
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	0e 94 49 00 	call	0x92	; 0x92 <button_state>
     b68:	88 23       	and	r24, r24
     b6a:	51 f0       	breq	.+20     	; 0xb80 <main+0x3cc>
		{
					
			if (direction != L)
     b6c:	c1 30       	cpi	r28, 0x01	; 1
     b6e:	09 f4       	brne	.+2      	; 0xb72 <main+0x3be>
     b70:	a2 ce       	rjmp	.-700    	; 0x8b6 <main+0x102>
			{
				esp_send("{DL}", 4);
     b72:	64 e0       	ldi	r22, 0x04	; 4
     b74:	8a e3       	ldi	r24, 0x3A	; 58
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	0e 94 74 03 	call	0x6e8	; 0x6e8 <esp_send>
				direction  = L;
     b7c:	cd 2d       	mov	r28, r13
     b7e:	9b ce       	rjmp	.-714    	; 0x8b6 <main+0x102>
			}
					
		}
		else if (button_state(PULL_UP, DIO_PIN19))// stop button
     b80:	63 e1       	ldi	r22, 0x13	; 19
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	0e 94 49 00 	call	0x92	; 0x92 <button_state>
     b88:	88 23       	and	r24, r24
     b8a:	09 f4       	brne	.+2      	; 0xb8e <main+0x3da>
     b8c:	94 ce       	rjmp	.-728    	; 0x8b6 <main+0x102>
		{
					
			if (direction != S)
     b8e:	cc 23       	and	r28, r28
     b90:	09 f4       	brne	.+2      	; 0xb94 <main+0x3e0>
     b92:	91 ce       	rjmp	.-734    	; 0x8b6 <main+0x102>
			{
				esp_send("{DS}", 4);
     b94:	64 e0       	ldi	r22, 0x04	; 4
     b96:	8f e3       	ldi	r24, 0x3F	; 63
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <esp_send>
				direction  = S;
     b9e:	c0 e0       	ldi	r28, 0x00	; 0
     ba0:	8a ce       	rjmp	.-748    	; 0x8b6 <main+0x102>
		{
			option_changed = 0;
		}
		
		
		if (button_state(PULL_UP, DIO_PIN3)) // choose the option  .. get the data and then update the string and then change the value BIT_IS_CLEAR(PIND, 3)
     ba2:	6b e0       	ldi	r22, 0x0B	; 11
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	0e 94 49 00 	call	0x92	; 0x92 <button_state>
     baa:	81 11       	cpse	r24, r1
     bac:	72 cf       	rjmp	.-284    	; 0xa92 <main+0x2de>
     bae:	1d 2d       	mov	r17, r13
     bb0:	9d cf       	rjmp	.-198    	; 0xaec <main+0x338>
     bb2:	6b e0       	ldi	r22, 0x0B	; 11
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	0e 94 49 00 	call	0x92	; 0x92 <button_state>
						arrow_pos = S_OP;
					}
					
				}
				
				option_changed = 1;
     bba:	1d 2d       	mov	r17, r13
     bbc:	97 cf       	rjmp	.-210    	; 0xaec <main+0x338>

00000bbe <__vector_9>:
	g_ovf_count = 0;
}

void millis_reset_ticks()
{
	TCNT0 = 0;
     bbe:	1f 92       	push	r1
     bc0:	0f 92       	push	r0
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	0f 92       	push	r0
     bc6:	11 24       	eor	r1, r1
     bc8:	2f 93       	push	r18
     bca:	3f 93       	push	r19
     bcc:	4f 93       	push	r20
     bce:	5f 93       	push	r21
     bd0:	6f 93       	push	r22
     bd2:	7f 93       	push	r23
     bd4:	8f 93       	push	r24
     bd6:	9f 93       	push	r25
     bd8:	af 93       	push	r26
     bda:	bf 93       	push	r27
     bdc:	ef 93       	push	r30
     bde:	ff 93       	push	r31
     be0:	f8 94       	cli
     be2:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <g_ovf_count>
     be6:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <g_ovf_count+0x1>
     bea:	89 2b       	or	r24, r25
     bec:	99 f0       	breq	.+38     	; 0xc14 <__vector_9+0x56>
     bee:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <g_ovf_count>
     bf2:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <g_ovf_count+0x1>
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	21 f4       	brne	.+8      	; 0xc02 <__vector_9+0x44>
     bfa:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <g_last_ticks>
     bfe:	81 95       	neg	r24
     c00:	82 bf       	out	0x32, r24	; 50
     c02:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <g_ovf_count>
     c06:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <g_ovf_count+0x1>
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <g_ovf_count+0x1>
     c10:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <g_ovf_count>
     c14:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <gp_tmr0_ovf_isr>
     c18:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <gp_tmr0_ovf_isr+0x1>
     c1c:	30 97       	sbiw	r30, 0x00	; 0
     c1e:	09 f0       	breq	.+2      	; 0xc22 <__vector_9+0x64>
     c20:	09 95       	icall
     c22:	78 94       	sei
     c24:	ff 91       	pop	r31
     c26:	ef 91       	pop	r30
     c28:	bf 91       	pop	r27
     c2a:	af 91       	pop	r26
     c2c:	9f 91       	pop	r25
     c2e:	8f 91       	pop	r24
     c30:	7f 91       	pop	r23
     c32:	6f 91       	pop	r22
     c34:	5f 91       	pop	r21
     c36:	4f 91       	pop	r20
     c38:	3f 91       	pop	r19
     c3a:	2f 91       	pop	r18
     c3c:	0f 90       	pop	r0
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	0f 90       	pop	r0
     c42:	1f 90       	pop	r1
     c44:	18 95       	reti

00000c46 <millis>:
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <g_ovf_count>
     c4e:	50 91 4c 01 	lds	r21, 0x014C	; 0x80014c <g_ovf_count+0x1>
     c52:	45 2b       	or	r20, r21
     c54:	09 f0       	breq	.+2      	; 0xc58 <millis+0x12>
     c56:	43 c0       	rjmp	.+134    	; 0xcde <millis+0x98>
     c58:	23 b7       	in	r18, 0x33	; 51
     c5a:	21 11       	cpse	r18, r1
     c5c:	40 c0       	rjmp	.+128    	; 0xcde <millis+0x98>
     c5e:	9c 01       	movw	r18, r24
     c60:	a8 ee       	ldi	r26, 0xE8	; 232
     c62:	b3 e0       	ldi	r27, 0x03	; 3
     c64:	0e 94 31 0b 	call	0x1662	; 0x1662 <__umulhisi3>
     c68:	8b 01       	movw	r16, r22
     c6a:	9c 01       	movw	r18, r24
     c6c:	0f 2e       	mov	r0, r31
     c6e:	ff e0       	ldi	r31, 0x0F	; 15
     c70:	36 95       	lsr	r19
     c72:	27 95       	ror	r18
     c74:	17 95       	ror	r17
     c76:	07 95       	ror	r16
     c78:	fa 95       	dec	r31
     c7a:	d1 f7       	brne	.-12     	; 0xc70 <millis+0x2a>
     c7c:	f0 2d       	mov	r31, r0
     c7e:	0f 5f       	subi	r16, 0xFF	; 255
     c80:	1f 4f       	sbci	r17, 0xFF	; 255
     c82:	10 93 4c 01 	sts	0x014C, r17	; 0x80014c <g_ovf_count+0x1>
     c86:	00 93 4b 01 	sts	0x014B, r16	; 0x80014b <g_ovf_count>
     c8a:	25 e0       	ldi	r18, 0x05	; 5
     c8c:	23 bf       	out	0x33, r18	; 51
     c8e:	29 b7       	in	r18, 0x39	; 57
     c90:	21 60       	ori	r18, 0x01	; 1
     c92:	29 bf       	out	0x39, r18	; 57
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	88 7f       	andi	r24, 0xF8	; 248
     c9a:	9f 77       	andi	r25, 0x7F	; 127
     c9c:	aa 27       	eor	r26, r26
     c9e:	bb 27       	eor	r27, r27
     ca0:	68 94       	set
     ca2:	16 f8       	bld	r1, 6
     ca4:	b6 95       	lsr	r27
     ca6:	a7 95       	ror	r26
     ca8:	97 95       	ror	r25
     caa:	87 95       	ror	r24
     cac:	16 94       	lsr	r1
     cae:	d1 f7       	brne	.-12     	; 0xca4 <millis+0x5e>
     cb0:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <g_last_ticks>
     cb4:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <g_ovf_count>
     cb8:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <g_ovf_count+0x1>
     cbc:	21 30       	cpi	r18, 0x01	; 1
     cbe:	31 05       	cpc	r19, r1
     cc0:	29 f4       	brne	.+10     	; 0xccc <millis+0x86>
     cc2:	68 2f       	mov	r22, r24
     cc4:	61 95       	neg	r22
     cc6:	62 bf       	out	0x32, r22	; 50
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	19 c0       	rjmp	.+50     	; 0xcfe <millis+0xb8>
     ccc:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <g_ovf_count>
     cd0:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <g_ovf_count+0x1>
     cd4:	02 97       	sbiw	r24, 0x02	; 2
     cd6:	80 f0       	brcs	.+32     	; 0xcf8 <millis+0xb2>
     cd8:	12 be       	out	0x32, r1	; 50
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	10 c0       	rjmp	.+32     	; 0xcfe <millis+0xb8>
     cde:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <g_ovf_count>
     ce2:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <g_ovf_count+0x1>
     ce6:	89 2b       	or	r24, r25
     ce8:	49 f4       	brne	.+18     	; 0xcfc <millis+0xb6>
     cea:	13 be       	out	0x33, r1	; 51
     cec:	12 be       	out	0x32, r1	; 50
     cee:	89 b7       	in	r24, 0x39	; 57
     cf0:	8e 7f       	andi	r24, 0xFE	; 254
     cf2:	89 bf       	out	0x39, r24	; 57
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	03 c0       	rjmp	.+6      	; 0xcfe <millis+0xb8>
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <millis+0xb8>
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	08 95       	ret

00000d04 <millis_disable_tmr>:
     d04:	13 be       	out	0x33, r1	; 51
     d06:	12 be       	out	0x32, r1	; 50
     d08:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <g_ovf_count+0x1>
     d0c:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <g_ovf_count>
     d10:	08 95       	ret

00000d12 <millis_reset_tmr>:
}

void millis_reset_tmr(uint16_t t)
{
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
	g_ovf_count = NUMBER_OF_OVFLOWS + 1;
     d16:	9c 01       	movw	r18, r24
     d18:	a8 ee       	ldi	r26, 0xE8	; 232
     d1a:	b3 e0       	ldi	r27, 0x03	; 3
     d1c:	0e 94 31 0b 	call	0x1662	; 0x1662 <__umulhisi3>
     d20:	8b 01       	movw	r16, r22
     d22:	9c 01       	movw	r18, r24
     d24:	0f 2e       	mov	r0, r31
     d26:	ff e0       	ldi	r31, 0x0F	; 15
     d28:	36 95       	lsr	r19
     d2a:	27 95       	ror	r18
     d2c:	17 95       	ror	r17
     d2e:	07 95       	ror	r16
     d30:	fa 95       	dec	r31
     d32:	d1 f7       	brne	.-12     	; 0xd28 <millis_reset_tmr+0x16>
     d34:	f0 2d       	mov	r31, r0
     d36:	0f 5f       	subi	r16, 0xFF	; 255
     d38:	1f 4f       	sbci	r17, 0xFF	; 255
     d3a:	10 93 4c 01 	sts	0x014C, r17	; 0x80014c <g_ovf_count+0x1>
     d3e:	00 93 4b 01 	sts	0x014B, r16	; 0x80014b <g_ovf_count>
#if (MILLIS_INTERRUPT == 1)
	TIMSK = 1; //enable timer0 interrupt
     d42:	21 e0       	ldi	r18, 0x01	; 1
     d44:	29 bf       	out	0x39, r18	; 57
	//if the number of ovf is 1 meaning there is just the remaining ticks
	//make TCNT0=265-REMAINING_TICKS;
	//else TCNT=0
	g_last_ticks = REMAINING_TICKS;
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	88 7f       	andi	r24, 0xF8	; 248
     d4c:	9f 77       	andi	r25, 0x7F	; 127
     d4e:	aa 27       	eor	r26, r26
     d50:	bb 27       	eor	r27, r27
     d52:	68 94       	set
     d54:	16 f8       	bld	r1, 6
     d56:	b6 95       	lsr	r27
     d58:	a7 95       	ror	r26
     d5a:	97 95       	ror	r25
     d5c:	87 95       	ror	r24
     d5e:	16 94       	lsr	r1
     d60:	d1 f7       	brne	.-12     	; 0xd56 <millis_reset_tmr+0x44>
     d62:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <g_last_ticks>
#endif
}
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	08 95       	ret

00000d6c <millis_add_ovf_isr>:

void millis_add_ovf_isr(void ( * additional_tmr_ovf_isr)(void))
{
	gp_tmr0_ovf_isr = additional_tmr_ovf_isr;
     d6c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <gp_tmr0_ovf_isr+0x1>
     d70:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <gp_tmr0_ovf_isr>
     d74:	08 95       	ret

00000d76 <create_list>:
}

uint8_t get_size(start_t * st)
{
    return st->size;
}
     d76:	86 e0       	ldi	r24, 0x06	; 6
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 40 0b 	call	0x1680	; 0x1680 <malloc>
     d7e:	fc 01       	movw	r30, r24
     d80:	11 82       	std	Z+1, r1	; 0x01
     d82:	10 82       	st	Z, r1
     d84:	13 82       	std	Z+3, r1	; 0x03
     d86:	12 82       	std	Z+2, r1	; 0x02
     d88:	15 82       	std	Z+5, r1	; 0x05
     d8a:	14 82       	std	Z+4, r1	; 0x04
     d8c:	08 95       	ret

00000d8e <push>:

void push(volatile start_t * st, void * element, uint8_t element_size)
{
     d8e:	cf 92       	push	r12
     d90:	df 92       	push	r13
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	ec 01       	movw	r28, r24
     da0:	6b 01       	movw	r12, r22
     da2:	04 2f       	mov	r16, r20
	return st;
}

static void * create_node(void * entry, uint8_t size)
{
	node_t * tmp_node = malloc(sizeof(node_t));//allocate a node to be added to the list
     da4:	84 e0       	ldi	r24, 0x04	; 4
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 40 0b 	call	0x1680	; 0x1680 <malloc>
     dac:	7c 01       	movw	r14, r24
	//allocate an element that will contain the element data
	tmp_node->p_element = malloc(size);
     dae:	10 e0       	ldi	r17, 0x00	; 0
     db0:	c8 01       	movw	r24, r16
     db2:	0e 94 40 0b 	call	0x1680	; 0x1680 <malloc>
     db6:	f7 01       	movw	r30, r14
     db8:	91 83       	std	Z+1, r25	; 0x01
     dba:	80 83       	st	Z, r24
	//copy the data in *entry to the element side
	memcpy(tmp_node->p_element, entry, size);//(destination, source, element_size)
     dbc:	a8 01       	movw	r20, r16
     dbe:	b6 01       	movw	r22, r12
     dc0:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <memcpy>

	tmp_node->next = NULL;
     dc4:	f7 01       	movw	r30, r14
     dc6:	13 82       	std	Z+3, r1	; 0x03
     dc8:	12 82       	std	Z+2, r1	; 0x02

void push(volatile start_t * st, void * element, uint8_t element_size)
{
    node_t * p_new_node = create_node(element, element_size);

    if (st->size == 0) // if its empty .. put one node and make the front and the rear point at it
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	9d 81       	ldd	r25, Y+5	; 0x05
     dce:	89 2b       	or	r24, r25
     dd0:	29 f4       	brne	.+10     	; 0xddc <push+0x4e>
    {
        st->front = p_new_node;
     dd2:	f9 82       	std	Y+1, r15	; 0x01
     dd4:	e8 82       	st	Y, r14
        st->rear = p_new_node;
     dd6:	fb 82       	std	Y+3, r15	; 0x03
     dd8:	ea 82       	std	Y+2, r14	; 0x02
     dda:	0a c0       	rjmp	.+20     	; 0xdf0 <push+0x62>
    }
    else //if it's not empty ... make the add it at the rear side and make the rear point at it
    {
        st->rear->next = p_new_node;
     ddc:	ea 81       	ldd	r30, Y+2	; 0x02
     dde:	fb 81       	ldd	r31, Y+3	; 0x03
     de0:	f3 82       	std	Z+3, r15	; 0x03
     de2:	e2 82       	std	Z+2, r14	; 0x02
        st->rear = st->rear->next;
     de4:	ea 81       	ldd	r30, Y+2	; 0x02
     de6:	fb 81       	ldd	r31, Y+3	; 0x03
     de8:	82 81       	ldd	r24, Z+2	; 0x02
     dea:	93 81       	ldd	r25, Z+3	; 0x03
     dec:	9b 83       	std	Y+3, r25	; 0x03
     dee:	8a 83       	std	Y+2, r24	; 0x02
    }

    st->size += 1;
     df0:	8c 81       	ldd	r24, Y+4	; 0x04
     df2:	9d 81       	ldd	r25, Y+5	; 0x05
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	9d 83       	std	Y+5, r25	; 0x05
     df8:	8c 83       	std	Y+4, r24	; 0x04
}
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	df 90       	pop	r13
     e08:	cf 90       	pop	r12
     e0a:	08 95       	ret

00000e0c <pop>:

uint8_t pop(start_t * const st, void * popped_e, uint16_t element_size)
{
     e0c:	0f 93       	push	r16
     e0e:	1f 93       	push	r17
     e10:	cf 93       	push	r28
     e12:	df 93       	push	r29

    if (st->size == 0)
     e14:	fc 01       	movw	r30, r24
     e16:	24 81       	ldd	r18, Z+4	; 0x04
     e18:	35 81       	ldd	r19, Z+5	; 0x05
     e1a:	23 2b       	or	r18, r19
     e1c:	f9 f0       	breq	.+62     	; 0xe5c <pop+0x50>
     e1e:	9b 01       	movw	r18, r22
     e20:	ec 01       	movw	r28, r24
    else
    {
        
		
		//copy the front node's element to the popped_e .. because we are going to free the front node after pop operation finishes
		memcpy(popped_e, st->front->p_element, element_size);
     e22:	01 90       	ld	r0, Z+
     e24:	f0 81       	ld	r31, Z
     e26:	e0 2d       	mov	r30, r0
     e28:	60 81       	ld	r22, Z
     e2a:	71 81       	ldd	r23, Z+1	; 0x01
     e2c:	c9 01       	movw	r24, r18
     e2e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <memcpy>
		
		//define a pointer that points to the front node
		node_t * tmp_node = st->front;
     e32:	08 81       	ld	r16, Y
     e34:	19 81       	ldd	r17, Y+1	; 0x01
        //make the front pointer points to the next node
        st->front = st->front->next;
     e36:	f8 01       	movw	r30, r16
     e38:	82 81       	ldd	r24, Z+2	; 0x02
     e3a:	93 81       	ldd	r25, Z+3	; 0x03
     e3c:	99 83       	std	Y+1, r25	; 0x01
     e3e:	88 83       	st	Y, r24
		
		//free the node that was popped
		free(tmp_node->p_element);
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <free>
		free(tmp_node);
     e48:	c8 01       	movw	r24, r16
     e4a:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <free>
		
        (st->size) -= 1;
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	9d 81       	ldd	r25, Y+5	; 0x05
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	9d 83       	std	Y+5, r25	; 0x05
     e56:	8c 83       	std	Y+4, r24	; 0x04

        return 1;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	01 c0       	rjmp	.+2      	; 0xe5e <pop+0x52>
uint8_t pop(start_t * const st, void * popped_e, uint16_t element_size)
{

    if (st->size == 0)
    {
        return ERROR;
     e5c:	8f ef       	ldi	r24, 0xFF	; 255
        (st->size) -= 1;

        return 1;
    }

}
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	08 95       	ret

00000e68 <LCD_commandSend>:

void  LCD_chrByLocation (uint8_t character,uint8_t x,uint8_t y )
{
	LCD_gotoxy( x , y);
	LCD_dataSend(character);
}
     e68:	5f 92       	push	r5
     e6a:	6f 92       	push	r6
     e6c:	7f 92       	push	r7
     e6e:	8f 92       	push	r8
     e70:	9f 92       	push	r9
     e72:	af 92       	push	r10
     e74:	bf 92       	push	r11
     e76:	cf 92       	push	r12
     e78:	df 92       	push	r13
     e7a:	ef 92       	push	r14
     e7c:	ff 92       	push	r15
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	58 2e       	mov	r5, r24
     e88:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <lcd_reg>
     e8c:	8f 7b       	andi	r24, 0xBF	; 191
     e8e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <lcd_reg>
     e92:	68 e0       	ldi	r22, 0x08	; 8
     e94:	0e 94 3d 09 	call	0x127a	; 0x127a <spc_send>
     e98:	82 e0       	ldi	r24, 0x02	; 2
     e9a:	8a 95       	dec	r24
     e9c:	f1 f7       	brne	.-4      	; 0xe9a <LCD_commandSend+0x32>
     e9e:	00 c0       	rjmp	.+0      	; 0xea0 <LCD_commandSend+0x38>
     ea0:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <lcd_reg>
     ea4:	80 62       	ori	r24, 0x20	; 32
     ea6:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <lcd_reg>
     eaa:	68 e0       	ldi	r22, 0x08	; 8
     eac:	0e 94 3d 09 	call	0x127a	; 0x127a <spc_send>
     eb0:	92 e0       	ldi	r25, 0x02	; 2
     eb2:	9a 95       	dec	r25
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <LCD_commandSend+0x4a>
     eb6:	00 c0       	rjmp	.+0      	; 0xeb8 <LCD_commandSend+0x50>
     eb8:	85 2d       	mov	r24, r5
     eba:	88 1f       	adc	r24, r24
     ebc:	88 27       	eor	r24, r24
     ebe:	88 1f       	adc	r24, r24
     ec0:	98 2f       	mov	r25, r24
     ec2:	92 95       	swap	r25
     ec4:	90 7f       	andi	r25, 0xF0	; 240
     ec6:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <lcd_reg>
     eca:	81 7e       	andi	r24, 0xE1	; 225
     ecc:	89 2b       	or	r24, r25
     ece:	56 fa       	bst	r5, 6
     ed0:	aa 24       	eor	r10, r10
     ed2:	a0 f8       	bld	r10, 0
     ed4:	b1 2c       	mov	r11, r1
     ed6:	aa 0c       	add	r10, r10
     ed8:	bb 1c       	adc	r11, r11
     eda:	aa 0c       	add	r10, r10
     edc:	bb 1c       	adc	r11, r11
     ede:	aa 0c       	add	r10, r10
     ee0:	bb 1c       	adc	r11, r11
     ee2:	a8 2a       	or	r10, r24
     ee4:	55 fa       	bst	r5, 5
     ee6:	cc 24       	eor	r12, r12
     ee8:	c0 f8       	bld	r12, 0
     eea:	d1 2c       	mov	r13, r1
     eec:	cc 0c       	add	r12, r12
     eee:	dd 1c       	adc	r13, r13
     ef0:	cc 0c       	add	r12, r12
     ef2:	dd 1c       	adc	r13, r13
     ef4:	ca 28       	or	r12, r10
     ef6:	54 fa       	bst	r5, 4
     ef8:	88 27       	eor	r24, r24
     efa:	80 f9       	bld	r24, 0
     efc:	c8 2f       	mov	r28, r24
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	d9 2f       	mov	r29, r25
     f02:	cc 0f       	add	r28, r28
     f04:	dd 1f       	adc	r29, r29
     f06:	8c 2f       	mov	r24, r28
     f08:	8c 29       	or	r24, r12
     f0a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <lcd_reg>
     f0e:	68 e0       	ldi	r22, 0x08	; 8
     f10:	0e 94 3d 09 	call	0x127a	; 0x127a <spc_send>
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	8a 95       	dec	r24
     f18:	f1 f7       	brne	.-4      	; 0xf16 <LCD_commandSend+0xae>
     f1a:	00 c0       	rjmp	.+0      	; 0xf1c <LCD_commandSend+0xb4>
     f1c:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <lcd_reg>
     f20:	8f 7d       	andi	r24, 0xDF	; 223
     f22:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <lcd_reg>
     f26:	68 e0       	ldi	r22, 0x08	; 8
     f28:	0e 94 3d 09 	call	0x127a	; 0x127a <spc_send>
     f2c:	92 e0       	ldi	r25, 0x02	; 2
     f2e:	9a 95       	dec	r25
     f30:	f1 f7       	brne	.-4      	; 0xf2e <LCD_commandSend+0xc6>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <LCD_commandSend+0xcc>
     f34:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <lcd_reg>
     f38:	80 62       	ori	r24, 0x20	; 32
     f3a:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <lcd_reg>
     f3e:	68 e0       	ldi	r22, 0x08	; 8
     f40:	0e 94 3d 09 	call	0x127a	; 0x127a <spc_send>
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	8a 95       	dec	r24
     f48:	f1 f7       	brne	.-4      	; 0xf46 <LCD_commandSend+0xde>
     f4a:	00 c0       	rjmp	.+0      	; 0xf4c <LCD_commandSend+0xe4>
     f4c:	50 fa       	bst	r5, 0
     f4e:	ee 24       	eor	r14, r14
     f50:	e0 f8       	bld	r14, 0
     f52:	f1 2c       	mov	r15, r1
     f54:	ee 0c       	add	r14, r14
     f56:	ff 1c       	adc	r15, r15
     f58:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <lcd_reg>
     f5c:	81 7e       	andi	r24, 0xE1	; 225
     f5e:	e8 2a       	or	r14, r24
     f60:	53 fa       	bst	r5, 3
     f62:	00 27       	eor	r16, r16
     f64:	00 f9       	bld	r16, 0
     f66:	10 e0       	ldi	r17, 0x00	; 0
     f68:	02 95       	swap	r16
     f6a:	12 95       	swap	r17
     f6c:	10 7f       	andi	r17, 0xF0	; 240
     f6e:	10 27       	eor	r17, r16
     f70:	00 7f       	andi	r16, 0xF0	; 240
     f72:	10 27       	eor	r17, r16
     f74:	0e 29       	or	r16, r14
     f76:	52 fa       	bst	r5, 2
     f78:	88 24       	eor	r8, r8
     f7a:	80 f8       	bld	r8, 0
     f7c:	91 2c       	mov	r9, r1
     f7e:	88 0c       	add	r8, r8
     f80:	99 1c       	adc	r9, r9
     f82:	88 0c       	add	r8, r8
     f84:	99 1c       	adc	r9, r9
     f86:	88 0c       	add	r8, r8
     f88:	99 1c       	adc	r9, r9
     f8a:	80 2a       	or	r8, r16
     f8c:	51 fa       	bst	r5, 1
     f8e:	66 24       	eor	r6, r6
     f90:	60 f8       	bld	r6, 0
     f92:	71 2c       	mov	r7, r1
     f94:	66 0c       	add	r6, r6
     f96:	77 1c       	adc	r7, r7
     f98:	66 0c       	add	r6, r6
     f9a:	77 1c       	adc	r7, r7
     f9c:	88 2d       	mov	r24, r8
     f9e:	86 29       	or	r24, r6
     fa0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <lcd_reg>
     fa4:	68 e0       	ldi	r22, 0x08	; 8
     fa6:	0e 94 3d 09 	call	0x127a	; 0x127a <spc_send>
     faa:	92 e0       	ldi	r25, 0x02	; 2
     fac:	9a 95       	dec	r25
     fae:	f1 f7       	brne	.-4      	; 0xfac <LCD_commandSend+0x144>
     fb0:	00 c0       	rjmp	.+0      	; 0xfb2 <LCD_commandSend+0x14a>
     fb2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <lcd_reg>
     fb6:	8f 7d       	andi	r24, 0xDF	; 223
     fb8:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <lcd_reg>
     fbc:	68 e0       	ldi	r22, 0x08	; 8
     fbe:	0e 94 3d 09 	call	0x127a	; 0x127a <spc_send>
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	85 0d       	add	r24, r5
     fc6:	82 30       	cpi	r24, 0x02	; 2
     fc8:	38 f4       	brcc	.+14     	; 0xfd8 <LCD_commandSend+0x170>
     fca:	8f e9       	ldi	r24, 0x9F	; 159
     fcc:	9f e0       	ldi	r25, 0x0F	; 15
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <LCD_commandSend+0x166>
     fd2:	00 c0       	rjmp	.+0      	; 0xfd4 <LCD_commandSend+0x16c>
     fd4:	00 00       	nop
     fd6:	04 c0       	rjmp	.+8      	; 0xfe0 <LCD_commandSend+0x178>
     fd8:	95 e8       	ldi	r25, 0x85	; 133
     fda:	9a 95       	dec	r25
     fdc:	f1 f7       	brne	.-4      	; 0xfda <LCD_commandSend+0x172>
     fde:	00 00       	nop
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	cf 90       	pop	r12
     ff0:	bf 90       	pop	r11
     ff2:	af 90       	pop	r10
     ff4:	9f 90       	pop	r9
     ff6:	8f 90       	pop	r8
     ff8:	7f 90       	pop	r7
     ffa:	6f 90       	pop	r6
     ffc:	5f 90       	pop	r5
     ffe:	08 95       	ret

00001000 <LCD_init>:
    1000:	0e 94 24 09 	call	0x1248	; 0x1248 <spc_init>
    1004:	8f e9       	ldi	r24, 0x9F	; 159
    1006:	9c e8       	ldi	r25, 0x8C	; 140
    1008:	01 97       	sbiw	r24, 0x01	; 1
    100a:	f1 f7       	brne	.-4      	; 0x1008 <LCD_init+0x8>
    100c:	00 c0       	rjmp	.+0      	; 0x100e <LCD_init+0xe>
    100e:	00 00       	nop
    1010:	82 e0       	ldi	r24, 0x02	; 2
    1012:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_commandSend>
    1016:	88 e2       	ldi	r24, 0x28	; 40
    1018:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_commandSend>
    101c:	8e e0       	ldi	r24, 0x0E	; 14
    101e:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_commandSend>
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_commandSend>
    1028:	86 e0       	ldi	r24, 0x06	; 6
    102a:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_commandSend>
    102e:	08 95       	ret

00001030 <LCD_dataSend>:
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	58 2e       	mov	r5, r24
    1050:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <lcd_reg>
    1054:	80 64       	ori	r24, 0x40	; 64
    1056:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <lcd_reg>
    105a:	68 e0       	ldi	r22, 0x08	; 8
    105c:	0e 94 3d 09 	call	0x127a	; 0x127a <spc_send>
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	8a 95       	dec	r24
    1064:	f1 f7       	brne	.-4      	; 0x1062 <LCD_dataSend+0x32>
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <LCD_dataSend+0x38>
    1068:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <lcd_reg>
    106c:	80 62       	ori	r24, 0x20	; 32
    106e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <lcd_reg>
    1072:	68 e0       	ldi	r22, 0x08	; 8
    1074:	0e 94 3d 09 	call	0x127a	; 0x127a <spc_send>
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	8a 95       	dec	r24
    107c:	f1 f7       	brne	.-4      	; 0x107a <LCD_dataSend+0x4a>
    107e:	00 c0       	rjmp	.+0      	; 0x1080 <LCD_dataSend+0x50>
    1080:	85 2d       	mov	r24, r5
    1082:	88 1f       	adc	r24, r24
    1084:	88 27       	eor	r24, r24
    1086:	88 1f       	adc	r24, r24
    1088:	98 2f       	mov	r25, r24
    108a:	92 95       	swap	r25
    108c:	90 7f       	andi	r25, 0xF0	; 240
    108e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <lcd_reg>
    1092:	81 7e       	andi	r24, 0xE1	; 225
    1094:	89 2b       	or	r24, r25
    1096:	56 fa       	bst	r5, 6
    1098:	aa 24       	eor	r10, r10
    109a:	a0 f8       	bld	r10, 0
    109c:	b1 2c       	mov	r11, r1
    109e:	aa 0c       	add	r10, r10
    10a0:	bb 1c       	adc	r11, r11
    10a2:	aa 0c       	add	r10, r10
    10a4:	bb 1c       	adc	r11, r11
    10a6:	aa 0c       	add	r10, r10
    10a8:	bb 1c       	adc	r11, r11
    10aa:	a8 2a       	or	r10, r24
    10ac:	55 fa       	bst	r5, 5
    10ae:	cc 24       	eor	r12, r12
    10b0:	c0 f8       	bld	r12, 0
    10b2:	d1 2c       	mov	r13, r1
    10b4:	cc 0c       	add	r12, r12
    10b6:	dd 1c       	adc	r13, r13
    10b8:	cc 0c       	add	r12, r12
    10ba:	dd 1c       	adc	r13, r13
    10bc:	ca 28       	or	r12, r10
    10be:	54 fa       	bst	r5, 4
    10c0:	88 27       	eor	r24, r24
    10c2:	80 f9       	bld	r24, 0
    10c4:	c8 2f       	mov	r28, r24
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	d8 2f       	mov	r29, r24
    10ca:	cc 0f       	add	r28, r28
    10cc:	dd 1f       	adc	r29, r29
    10ce:	8c 2f       	mov	r24, r28
    10d0:	8c 29       	or	r24, r12
    10d2:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <lcd_reg>
    10d6:	68 e0       	ldi	r22, 0x08	; 8
    10d8:	0e 94 3d 09 	call	0x127a	; 0x127a <spc_send>
    10dc:	82 e0       	ldi	r24, 0x02	; 2
    10de:	8a 95       	dec	r24
    10e0:	f1 f7       	brne	.-4      	; 0x10de <LCD_dataSend+0xae>
    10e2:	00 c0       	rjmp	.+0      	; 0x10e4 <LCD_dataSend+0xb4>
    10e4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <lcd_reg>
    10e8:	8f 7d       	andi	r24, 0xDF	; 223
    10ea:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <lcd_reg>
    10ee:	68 e0       	ldi	r22, 0x08	; 8
    10f0:	0e 94 3d 09 	call	0x127a	; 0x127a <spc_send>
    10f4:	82 e0       	ldi	r24, 0x02	; 2
    10f6:	8a 95       	dec	r24
    10f8:	f1 f7       	brne	.-4      	; 0x10f6 <LCD_dataSend+0xc6>
    10fa:	00 c0       	rjmp	.+0      	; 0x10fc <LCD_dataSend+0xcc>
    10fc:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <lcd_reg>
    1100:	80 62       	ori	r24, 0x20	; 32
    1102:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <lcd_reg>
    1106:	68 e0       	ldi	r22, 0x08	; 8
    1108:	0e 94 3d 09 	call	0x127a	; 0x127a <spc_send>
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	8a 95       	dec	r24
    1110:	f1 f7       	brne	.-4      	; 0x110e <LCD_dataSend+0xde>
    1112:	00 c0       	rjmp	.+0      	; 0x1114 <LCD_dataSend+0xe4>
    1114:	50 fa       	bst	r5, 0
    1116:	ee 24       	eor	r14, r14
    1118:	e0 f8       	bld	r14, 0
    111a:	f1 2c       	mov	r15, r1
    111c:	ee 0c       	add	r14, r14
    111e:	ff 1c       	adc	r15, r15
    1120:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <lcd_reg>
    1124:	81 7e       	andi	r24, 0xE1	; 225
    1126:	e8 2a       	or	r14, r24
    1128:	53 fa       	bst	r5, 3
    112a:	00 27       	eor	r16, r16
    112c:	00 f9       	bld	r16, 0
    112e:	10 e0       	ldi	r17, 0x00	; 0
    1130:	02 95       	swap	r16
    1132:	12 95       	swap	r17
    1134:	10 7f       	andi	r17, 0xF0	; 240
    1136:	10 27       	eor	r17, r16
    1138:	00 7f       	andi	r16, 0xF0	; 240
    113a:	10 27       	eor	r17, r16
    113c:	0e 29       	or	r16, r14
    113e:	52 fa       	bst	r5, 2
    1140:	88 24       	eor	r8, r8
    1142:	80 f8       	bld	r8, 0
    1144:	91 2c       	mov	r9, r1
    1146:	88 0c       	add	r8, r8
    1148:	99 1c       	adc	r9, r9
    114a:	88 0c       	add	r8, r8
    114c:	99 1c       	adc	r9, r9
    114e:	88 0c       	add	r8, r8
    1150:	99 1c       	adc	r9, r9
    1152:	80 2a       	or	r8, r16
    1154:	51 fa       	bst	r5, 1
    1156:	66 24       	eor	r6, r6
    1158:	60 f8       	bld	r6, 0
    115a:	71 2c       	mov	r7, r1
    115c:	66 0c       	add	r6, r6
    115e:	77 1c       	adc	r7, r7
    1160:	66 0c       	add	r6, r6
    1162:	77 1c       	adc	r7, r7
    1164:	88 2d       	mov	r24, r8
    1166:	86 29       	or	r24, r6
    1168:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <lcd_reg>
    116c:	68 e0       	ldi	r22, 0x08	; 8
    116e:	0e 94 3d 09 	call	0x127a	; 0x127a <spc_send>
    1172:	82 e0       	ldi	r24, 0x02	; 2
    1174:	8a 95       	dec	r24
    1176:	f1 f7       	brne	.-4      	; 0x1174 <LCD_dataSend+0x144>
    1178:	00 c0       	rjmp	.+0      	; 0x117a <LCD_dataSend+0x14a>
    117a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <lcd_reg>
    117e:	8f 7d       	andi	r24, 0xDF	; 223
    1180:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <lcd_reg>
    1184:	68 e0       	ldi	r22, 0x08	; 8
    1186:	0e 94 3d 09 	call	0x127a	; 0x127a <spc_send>
    118a:	8a e6       	ldi	r24, 0x6A	; 106
    118c:	8a 95       	dec	r24
    118e:	f1 f7       	brne	.-4      	; 0x118c <LCD_dataSend+0x15c>
    1190:	00 c0       	rjmp	.+0      	; 0x1192 <LCD_dataSend+0x162>
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	ff 90       	pop	r15
    119c:	ef 90       	pop	r14
    119e:	df 90       	pop	r13
    11a0:	cf 90       	pop	r12
    11a2:	bf 90       	pop	r11
    11a4:	af 90       	pop	r10
    11a6:	9f 90       	pop	r9
    11a8:	8f 90       	pop	r8
    11aa:	7f 90       	pop	r7
    11ac:	6f 90       	pop	r6
    11ae:	5f 90       	pop	r5
    11b0:	08 95       	ret

000011b2 <LCD_gotoxy>:
    11b2:	61 30       	cpi	r22, 0x01	; 1
    11b4:	71 05       	cpc	r23, r1
    11b6:	41 f0       	breq	.+16     	; 0x11c8 <LCD_gotoxy+0x16>
    11b8:	70 f0       	brcs	.+28     	; 0x11d6 <LCD_gotoxy+0x24>
    11ba:	62 30       	cpi	r22, 0x02	; 2
    11bc:	71 05       	cpc	r23, r1
    11be:	31 f0       	breq	.+12     	; 0x11cc <LCD_gotoxy+0x1a>
    11c0:	63 30       	cpi	r22, 0x03	; 3
    11c2:	71 05       	cpc	r23, r1
    11c4:	29 f0       	breq	.+10     	; 0x11d0 <LCD_gotoxy+0x1e>
    11c6:	06 c0       	rjmp	.+12     	; 0x11d4 <LCD_gotoxy+0x22>
    11c8:	80 64       	ori	r24, 0x40	; 64
    11ca:	05 c0       	rjmp	.+10     	; 0x11d6 <LCD_gotoxy+0x24>
    11cc:	80 61       	ori	r24, 0x10	; 16
    11ce:	03 c0       	rjmp	.+6      	; 0x11d6 <LCD_gotoxy+0x24>
    11d0:	80 65       	ori	r24, 0x50	; 80
    11d2:	01 c0       	rjmp	.+2      	; 0x11d6 <LCD_gotoxy+0x24>
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	80 68       	ori	r24, 0x80	; 128
    11d8:	0e 94 34 07 	call	0xe68	; 0xe68 <LCD_commandSend>
    11dc:	08 95       	ret

000011de <LCD_strByLocation>:
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	8c 01       	movw	r16, r24
    11e6:	86 2f       	mov	r24, r22
    11e8:	64 2f       	mov	r22, r20
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <LCD_gotoxy>
    11f2:	f8 01       	movw	r30, r16
    11f4:	80 81       	ld	r24, Z
    11f6:	88 23       	and	r24, r24
    11f8:	51 f0       	breq	.+20     	; 0x120e <LCD_strByLocation+0x30>
    11fa:	c0 e0       	ldi	r28, 0x00	; 0
    11fc:	0e 94 18 08 	call	0x1030	; 0x1030 <LCD_dataSend>
    1200:	cf 5f       	subi	r28, 0xFF	; 255
    1202:	f8 01       	movw	r30, r16
    1204:	ec 0f       	add	r30, r28
    1206:	f1 1d       	adc	r31, r1
    1208:	80 81       	ld	r24, Z
    120a:	81 11       	cpse	r24, r1
    120c:	f7 cf       	rjmp	.-18     	; 0x11fc <LCD_strByLocation+0x1e>
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	08 95       	ret

00001216 <LCD_str>:
    1216:	0f 93       	push	r16
    1218:	1f 93       	push	r17
    121a:	cf 93       	push	r28
    121c:	fc 01       	movw	r30, r24
    121e:	80 81       	ld	r24, Z
    1220:	88 23       	and	r24, r24
    1222:	59 f0       	breq	.+22     	; 0x123a <LCD_str+0x24>
    1224:	8f 01       	movw	r16, r30
    1226:	c0 e0       	ldi	r28, 0x00	; 0
    1228:	0e 94 18 08 	call	0x1030	; 0x1030 <LCD_dataSend>
    122c:	cf 5f       	subi	r28, 0xFF	; 255
    122e:	f8 01       	movw	r30, r16
    1230:	ec 0f       	add	r30, r28
    1232:	f1 1d       	adc	r31, r1
    1234:	80 81       	ld	r24, Z
    1236:	81 11       	cpse	r24, r1
    1238:	f7 cf       	rjmp	.-18     	; 0x1228 <LCD_str+0x12>
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	08 95       	ret

00001242 <LCD_chr>:

void LCD_chr (uint8_t character)
{
	LCD_dataSend(character);
    1242:	0e 94 18 08 	call	0x1030	; 0x1030 <LCD_dataSend>
    1246:	08 95       	ret

00001248 <spc_init>:


void spc_init()
{
	// assign the pins connected sipo_SPCift_register(74HC595) as output // assign the three pins as output
	DIO_SET_DIR(SH_CP_PIN, DIO_OUTPUT);
    1248:	61 e0       	ldi	r22, 0x01	; 1
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	0e 94 aa 00 	call	0x154	; 0x154 <dio_set_pin_dir>
	DIO_SET_DIR(DS_PIN, DIO_OUTPUT);
    1250:	61 e0       	ldi	r22, 0x01	; 1
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	0e 94 aa 00 	call	0x154	; 0x154 <dio_set_pin_dir>
	DIO_SET_DIR(ST_CP_PIN, DIO_OUTPUT);
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	0e 94 aa 00 	call	0x154	; 0x154 <dio_set_pin_dir>
	
	//SERIAL_DDR |= ((1 << DS) | (1 << SH_CP) | (1 << ST_CP));
	 
	DIO_SET_VAL(SH_CP_PIN, DIO_LOW);
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <dio_set_pin_val>
	DIO_SET_VAL(DS_PIN, DIO_LOW);
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <dio_set_pin_val>
	DIO_SET_VAL(ST_CP_PIN, DIO_LOW);                                       
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <dio_set_pin_val>
    1278:	08 95       	ret

0000127a <spc_send>:
//then put the corresponding bit to the DS(data pin) then 
//set the shift pulse
//after doing this 8 times .. set the store pulse then clear it 

void spc_send(uint8_t data, int8_t out_pins_count) // out pins (how many pins are you using from the 8 pins output)
{
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28

	for(int8_t bit_count = out_pins_count - 1; bit_count >= 0 ; bit_count-- )
    1280:	cf ef       	ldi	r28, 0xFF	; 255
    1282:	c6 0f       	add	r28, r22
    1284:	f2 f0       	brmi	.+60     	; 0x12c2 <spc_send+0x48>
	{
		
		DIO_SET_VAL(SH_CP_PIN, DIO_LOW);
		
		if (BIT_IS_SET(data, bit_count))
    1286:	08 2f       	mov	r16, r24
    1288:	10 e0       	ldi	r17, 0x00	; 0
{

	for(int8_t bit_count = out_pins_count - 1; bit_count >= 0 ; bit_count-- )
	{
		
		DIO_SET_VAL(SH_CP_PIN, DIO_LOW);
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	82 e0       	ldi	r24, 0x02	; 2
    128e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <dio_set_pin_val>
		
		if (BIT_IS_SET(data, bit_count))
    1292:	98 01       	movw	r18, r16
    1294:	0c 2e       	mov	r0, r28
    1296:	02 c0       	rjmp	.+4      	; 0x129c <spc_send+0x22>
    1298:	35 95       	asr	r19
    129a:	27 95       	ror	r18
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <spc_send+0x1e>
    12a0:	20 ff       	sbrs	r18, 0
    12a2:	05 c0       	rjmp	.+10     	; 0x12ae <spc_send+0x34>
		{
			DIO_SET_VAL(DS_PIN, DIO_HIGH);
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <dio_set_pin_val>
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <spc_send+0x3c>
		}
		else
		{
			DIO_SET_VAL(DS_PIN, DIO_LOW);
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <dio_set_pin_val>
		}
		
		DIO_SET_VAL(SH_CP_PIN, DIO_HIGH);
    12b6:	61 e0       	ldi	r22, 0x01	; 1
    12b8:	82 e0       	ldi	r24, 0x02	; 2
    12ba:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <dio_set_pin_val>
    12be:	c1 50       	subi	r28, 0x01	; 1
//after doing this 8 times .. set the store pulse then clear it 

void spc_send(uint8_t data, int8_t out_pins_count) // out pins (how many pins are you using from the 8 pins output)
{

	for(int8_t bit_count = out_pins_count - 1; bit_count >= 0 ; bit_count-- )
    12c0:	22 f7       	brpl	.-56     	; 0x128a <spc_send+0x10>
		}
		
		DIO_SET_VAL(SH_CP_PIN, DIO_HIGH);
	}
	
	DIO_SET_VAL(ST_CP_PIN, DIO_LOW);//store the new byte that was received from the MCU
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <dio_set_pin_val>
	DIO_SET_VAL(ST_CP_PIN, DIO_HIGH); // clear it again to not make
    12ca:	61 e0       	ldi	r22, 0x01	; 1
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <dio_set_pin_val>

}
    12d2:	cf 91       	pop	r28
    12d4:	1f 91       	pop	r17
    12d6:	0f 91       	pop	r16
    12d8:	08 95       	ret

000012da <usart_write_str_mark>:
extern inline bool usart_is_data_ready(unint8_t usart_no);
#endif


void usart_write_str_mark(unint8_t usart_no, unint8_t * str, unint8_t mark)
{
    12da:	ff 92       	push	r15
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	fb 01       	movw	r30, r22
	unint8_t i = 0;
	
	while(str[i] != mark)
    12e6:	60 81       	ld	r22, Z
    12e8:	46 17       	cp	r20, r22
    12ea:	71 f0       	breq	.+28     	; 0x1308 <usart_write_str_mark+0x2e>
    12ec:	d4 2f       	mov	r29, r20
    12ee:	8f 01       	movw	r16, r30
    12f0:	f8 2e       	mov	r15, r24
    12f2:	c0 e0       	ldi	r28, 0x00	; 0
	{
		usart_write(usart_no, str[i]);
    12f4:	8f 2d       	mov	r24, r15
    12f6:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <usart_write>
		i++;
    12fa:	cf 5f       	subi	r28, 0xFF	; 255

void usart_write_str_mark(unint8_t usart_no, unint8_t * str, unint8_t mark)
{
	unint8_t i = 0;
	
	while(str[i] != mark)
    12fc:	f8 01       	movw	r30, r16
    12fe:	ec 0f       	add	r30, r28
    1300:	f1 1d       	adc	r31, r1
    1302:	60 81       	ld	r22, Z
    1304:	6d 13       	cpse	r22, r29
    1306:	f6 cf       	rjmp	.-20     	; 0x12f4 <usart_write_str_mark+0x1a>
	{
		usart_write(usart_no, str[i]);
		i++;
	}
}
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	ff 90       	pop	r15
    1312:	08 95       	ret

00001314 <usart_write_str_size>:


void usart_write_str_size(unint8_t usart_no, unint8_t * str, unint8_t size)
{
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
	unint8_t i = 0;
	
	while(i < size)
    131e:	44 23       	and	r20, r20
    1320:	81 f0       	breq	.+32     	; 0x1342 <usart_write_str_size+0x2e>
    1322:	f8 2e       	mov	r15, r24
    1324:	eb 01       	movw	r28, r22
    1326:	41 50       	subi	r20, 0x01	; 1
    1328:	04 2f       	mov	r16, r20
    132a:	10 e0       	ldi	r17, 0x00	; 0
    132c:	0f 5f       	subi	r16, 0xFF	; 255
    132e:	1f 4f       	sbci	r17, 0xFF	; 255
    1330:	06 0f       	add	r16, r22
    1332:	17 1f       	adc	r17, r23
	{
		usart_write(usart_no, str[i]);
    1334:	69 91       	ld	r22, Y+
    1336:	8f 2d       	mov	r24, r15
    1338:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <usart_write>

void usart_write_str_size(unint8_t usart_no, unint8_t * str, unint8_t size)
{
	unint8_t i = 0;
	
	while(i < size)
    133c:	c0 17       	cp	r28, r16
    133e:	d1 07       	cpc	r29, r17
    1340:	c9 f7       	brne	.-14     	; 0x1334 <usart_write_str_size+0x20>
	{
		usart_write(usart_no, str[i]);
		i++;
	}
}
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	08 95       	ret

0000134e <__vector_13>:
	}
		
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
}
    134e:	1f 92       	push	r1
    1350:	0f 92       	push	r0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	0f 92       	push	r0
    1356:	11 24       	eor	r1, r1
    1358:	2f 93       	push	r18
    135a:	3f 93       	push	r19
    135c:	4f 93       	push	r20
    135e:	5f 93       	push	r21
    1360:	6f 93       	push	r22
    1362:	7f 93       	push	r23
    1364:	8f 93       	push	r24
    1366:	9f 93       	push	r25
    1368:	af 93       	push	r26
    136a:	bf 93       	push	r27
    136c:	ef 93       	push	r30
    136e:	ff 93       	push	r31
    1370:	f8 94       	cli
    1372:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <USART_TXC_ISR>
    1376:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <USART_TXC_ISR+0x1>
    137a:	30 97       	sbiw	r30, 0x00	; 0
    137c:	09 f0       	breq	.+2      	; 0x1380 <__vector_13+0x32>
    137e:	09 95       	icall
    1380:	78 94       	sei
    1382:	ff 91       	pop	r31
    1384:	ef 91       	pop	r30
    1386:	bf 91       	pop	r27
    1388:	af 91       	pop	r26
    138a:	9f 91       	pop	r25
    138c:	8f 91       	pop	r24
    138e:	7f 91       	pop	r23
    1390:	6f 91       	pop	r22
    1392:	5f 91       	pop	r21
    1394:	4f 91       	pop	r20
    1396:	3f 91       	pop	r19
    1398:	2f 91       	pop	r18
    139a:	0f 90       	pop	r0
    139c:	0f be       	out	0x3f, r0	; 63
    139e:	0f 90       	pop	r0
    13a0:	1f 90       	pop	r1
    13a2:	18 95       	reti

000013a4 <__vector_11>:
    13a4:	1f 92       	push	r1
    13a6:	0f 92       	push	r0
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	0f 92       	push	r0
    13ac:	11 24       	eor	r1, r1
    13ae:	2f 93       	push	r18
    13b0:	3f 93       	push	r19
    13b2:	4f 93       	push	r20
    13b4:	5f 93       	push	r21
    13b6:	6f 93       	push	r22
    13b8:	7f 93       	push	r23
    13ba:	8f 93       	push	r24
    13bc:	9f 93       	push	r25
    13be:	af 93       	push	r26
    13c0:	bf 93       	push	r27
    13c2:	ef 93       	push	r30
    13c4:	ff 93       	push	r31
    13c6:	f8 94       	cli
    13c8:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <USART_RXC_ISR>
    13cc:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <USART_RXC_ISR+0x1>
    13d0:	30 97       	sbiw	r30, 0x00	; 0
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <__vector_11+0x32>
    13d4:	09 95       	icall
    13d6:	78 94       	sei
    13d8:	ff 91       	pop	r31
    13da:	ef 91       	pop	r30
    13dc:	bf 91       	pop	r27
    13de:	af 91       	pop	r26
    13e0:	9f 91       	pop	r25
    13e2:	8f 91       	pop	r24
    13e4:	7f 91       	pop	r23
    13e6:	6f 91       	pop	r22
    13e8:	5f 91       	pop	r21
    13ea:	4f 91       	pop	r20
    13ec:	3f 91       	pop	r19
    13ee:	2f 91       	pop	r18
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	0f 90       	pop	r0
    13f6:	1f 90       	pop	r1
    13f8:	18 95       	reti

000013fa <usart_set_rx_isr>:
    13fa:	70 93 52 01 	sts	0x0152, r23	; 0x800152 <USART_RXC_ISR+0x1>
    13fe:	60 93 51 01 	sts	0x0151, r22	; 0x800151 <USART_RXC_ISR>
    1402:	08 95       	ret

00001404 <usart_init>:
    1404:	af 92       	push	r10
    1406:	cf 92       	push	r12
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	cf 93       	push	r28
    1410:	c2 2f       	mov	r28, r18
    1412:	81 11       	cpse	r24, r1
    1414:	42 c0       	rjmp	.+132    	; 0x149a <usart_init+0x96>
    1416:	db 01       	movw	r26, r22
    1418:	ca 01       	movw	r24, r20
    141a:	88 0f       	add	r24, r24
    141c:	99 1f       	adc	r25, r25
    141e:	aa 1f       	adc	r26, r26
    1420:	bb 1f       	adc	r27, r27
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	aa 1f       	adc	r26, r26
    1428:	bb 1f       	adc	r27, r27
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	aa 1f       	adc	r26, r26
    1430:	bb 1f       	adc	r27, r27
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	aa 1f       	adc	r26, r26
    1438:	bb 1f       	adc	r27, r27
    143a:	9c 01       	movw	r18, r24
    143c:	ad 01       	movw	r20, r26
    143e:	20 7f       	andi	r18, 0xF0	; 240
    1440:	5f 77       	andi	r21, 0x7F	; 127
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	78 e4       	ldi	r23, 0x48	; 72
    1446:	88 ee       	ldi	r24, 0xE8	; 232
    1448:	91 e0       	ldi	r25, 0x01	; 1
    144a:	0e 94 0f 0b 	call	0x161e	; 0x161e <__udivmodsi4>
    144e:	22 50       	subi	r18, 0x02	; 2
    1450:	31 09       	sbc	r19, r1
    1452:	20 ff       	sbrs	r18, 0
    1454:	05 c0       	rjmp	.+10     	; 0x1460 <usart_init+0x5c>
    1456:	36 95       	lsr	r19
    1458:	27 95       	ror	r18
    145a:	2f 5f       	subi	r18, 0xFF	; 255
    145c:	3f 4f       	sbci	r19, 0xFF	; 255
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <usart_init+0x60>
    1460:	36 95       	lsr	r19
    1462:	27 95       	ror	r18
    1464:	82 e0       	ldi	r24, 0x02	; 2
    1466:	8b b9       	out	0x0b, r24	; 11
    1468:	00 0f       	add	r16, r16
    146a:	00 0f       	add	r16, r16
    146c:	00 0f       	add	r16, r16
    146e:	8c 2f       	mov	r24, r28
    1470:	84 70       	andi	r24, 0x04	; 4
    1472:	08 2b       	or	r16, r24
    1474:	0a b9       	out	0x0a, r16	; 10
    1476:	cc 0c       	add	r12, r12
    1478:	cc 0c       	add	r12, r12
    147a:	cc 0c       	add	r12, r12
    147c:	8a 2d       	mov	r24, r10
    147e:	80 68       	ori	r24, 0x80	; 128
    1480:	ac 2c       	mov	r10, r12
    1482:	a8 2a       	or	r10, r24
    1484:	80 e1       	ldi	r24, 0x10	; 16
    1486:	e8 9e       	mul	r14, r24
    1488:	70 01       	movw	r14, r0
    148a:	11 24       	eor	r1, r1
    148c:	ea 28       	or	r14, r10
    148e:	c3 70       	andi	r28, 0x03	; 3
    1490:	cc 0f       	add	r28, r28
    1492:	ec 2a       	or	r14, r28
    1494:	e0 bc       	out	0x20, r14	; 32
    1496:	30 bd       	out	0x20, r19	; 32
    1498:	29 b9       	out	0x09, r18	; 9
    149a:	cf 91       	pop	r28
    149c:	0f 91       	pop	r16
    149e:	ff 90       	pop	r15
    14a0:	ef 90       	pop	r14
    14a2:	cf 90       	pop	r12
    14a4:	af 90       	pop	r10
    14a6:	08 95       	ret

000014a8 <usart_write>:
    14a8:	55 99       	sbic	0x0a, 5	; 10
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <usart_write+0x8>
    14ac:	5d 9b       	sbis	0x0b, 5	; 11
    14ae:	fe cf       	rjmp	.-4      	; 0x14ac <usart_write+0x4>
    14b0:	6c b9       	out	0x0c, r22	; 12
    14b2:	08 95       	ret

000014b4 <usart_set_rx_int>:


void usart_set_rx_int (unint8_t usart_no, bool b_state)
{
	
	if (USART0 == usart_no)
    14b4:	81 11       	cpse	r24, r1
    14b6:	08 c0       	rjmp	.+16     	; 0x14c8 <usart_set_rx_int+0x14>
	{
		UCSRB = (b_state ? UCSRB | (1 << RXCIE) : UCSRB & ~(1 << RXCIE));
    14b8:	66 23       	and	r22, r22
    14ba:	19 f0       	breq	.+6      	; 0x14c2 <usart_set_rx_int+0xe>
    14bc:	8a b1       	in	r24, 0x0a	; 10
    14be:	80 68       	ori	r24, 0x80	; 128
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <usart_set_rx_int+0x12>
    14c2:	8a b1       	in	r24, 0x0a	; 10
    14c4:	8f 77       	andi	r24, 0x7F	; 127
    14c6:	8a b9       	out	0x0a, r24	; 10
    14c8:	08 95       	ret

000014ca <is_str_reached>:
		}
		
	}

	return get_result;
}
    14ca:	fa 01       	movw	r30, r20
    14cc:	20 81       	ld	r18, Z
    14ce:	fc 01       	movw	r30, r24
    14d0:	e2 0f       	add	r30, r18
    14d2:	f1 1d       	adc	r31, r1
    14d4:	30 81       	ld	r19, Z
    14d6:	36 13       	cpse	r19, r22
    14d8:	0c c0       	rjmp	.+24     	; 0x14f2 <is_str_reached+0x28>
    14da:	2f 5f       	subi	r18, 0xFF	; 255
    14dc:	fa 01       	movw	r30, r20
    14de:	20 83       	st	Z, r18
    14e0:	fc 01       	movw	r30, r24
    14e2:	e2 0f       	add	r30, r18
    14e4:	f1 1d       	adc	r31, r1
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 81       	ld	r25, Z
    14ea:	99 23       	and	r25, r25
    14ec:	71 f0       	breq	.+28     	; 0x150a <is_str_reached+0x40>
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	08 95       	ret
    14f2:	fc 01       	movw	r30, r24
    14f4:	80 81       	ld	r24, Z
    14f6:	68 13       	cpse	r22, r24
    14f8:	05 c0       	rjmp	.+10     	; 0x1504 <is_str_reached+0x3a>
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	fa 01       	movw	r30, r20
    14fe:	80 83       	st	Z, r24
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	08 95       	ret
    1504:	fa 01       	movw	r30, r20
    1506:	10 82       	st	Z, r1
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	08 95       	ret

0000150c <check_strings>:



uint8_t check_strings(unint16_t millis_time, int16_t str_count, ...)
{
    150c:	2f 92       	push	r2
    150e:	3f 92       	push	r3
    1510:	4f 92       	push	r4
    1512:	5f 92       	push	r5
    1514:	6f 92       	push	r6
    1516:	7f 92       	push	r7
    1518:	8f 92       	push	r8
    151a:	9f 92       	push	r9
    151c:	af 92       	push	r10
    151e:	bf 92       	push	r11
    1520:	cf 92       	push	r12
    1522:	df 92       	push	r13
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	df 93       	push	r29
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	ed 88       	ldd	r14, Y+21	; 0x15
    1536:	fe 88       	ldd	r15, Y+22	; 0x16
    1538:	af 88       	ldd	r10, Y+23	; 0x17
    153a:	b8 8c       	ldd	r11, Y+24	; 0x18
	}
	
	millis_disable_tmr();
	//DISABLE_TIMER0;
	return event_flag;
}
    153c:	6d b6       	in	r6, 0x3d	; 61
    153e:	7e b6       	in	r7, 0x3e	; 62



uint8_t check_strings(unint16_t millis_time, int16_t str_count, ...)
{
	char * str_list[str_count];
    1540:	c5 01       	movw	r24, r10
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	2d b7       	in	r18, 0x3d	; 61
    1548:	3e b7       	in	r19, 0x3e	; 62
    154a:	28 1b       	sub	r18, r24
    154c:	39 0b       	sbc	r19, r25
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	3e bf       	out	0x3e, r19	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	2d bf       	out	0x3d, r18	; 61
    1558:	2f 5f       	subi	r18, 0xFF	; 255
    155a:	3f 4f       	sbci	r19, 0xFF	; 255
    155c:	52 2e       	mov	r5, r18
    155e:	43 2e       	mov	r4, r19
	uint8_t str_flags[str_count];
    1560:	4d b7       	in	r20, 0x3d	; 61
    1562:	5e b7       	in	r21, 0x3e	; 62
    1564:	4a 19       	sub	r20, r10
    1566:	5b 09       	sbc	r21, r11
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	5e bf       	out	0x3e, r21	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	4d bf       	out	0x3d, r20	; 61
    1572:	ed b7       	in	r30, 0x3d	; 61
    1574:	fe b7       	in	r31, 0x3e	; 62
    1576:	31 96       	adiw	r30, 0x01	; 1
    1578:	4f 01       	movw	r8, r30
	va_list ap;
	va_start(ap, str_count);
	
	
	for (int i = 0; i < str_count; i++ )
    157a:	1a 14       	cp	r1, r10
    157c:	1b 04       	cpc	r1, r11
    157e:	64 f4       	brge	.+24     	; 0x1598 <check_strings+0x8c>
    1580:	de 01       	movw	r26, r28
    1582:	59 96       	adiw	r26, 0x19	; 25
    1584:	f9 01       	movw	r30, r18
    1586:	28 0f       	add	r18, r24
    1588:	39 1f       	adc	r19, r25
	{
		str_list[i] = va_arg(ap, char *);
    158a:	8d 91       	ld	r24, X+
    158c:	9d 91       	ld	r25, X+
    158e:	81 93       	st	Z+, r24
    1590:	91 93       	st	Z+, r25
	uint8_t str_flags[str_count];
	va_list ap;
	va_start(ap, str_count);
	
	
	for (int i = 0; i < str_count; i++ )
    1592:	e2 17       	cp	r30, r18
    1594:	f3 07       	cpc	r31, r19
    1596:	c9 f7       	brne	.-14     	; 0x158a <check_strings+0x7e>
	{
		
		if (BIT_IS_SET(UCSRA, RXC)) // if receive flag is activated
		{
			tmp = UDR;
			for (int i = 0; i < str_count; i++)
    1598:	31 2c       	mov	r3, r1
    159a:	1f c0       	rjmp	.+62     	; 0x15da <check_strings+0xce>
	unint8_t tmp = 0; //used for deciding the next position in the tmp_str for storing the received char from UART
	
	while (millis(millis_time) && (!event_flag)) // keep looping until either timeout or word found
	{
		
		if (BIT_IS_SET(UCSRA, RXC)) // if receive flag is activated
    159c:	5f 9b       	sbis	0x0b, 7	; 11
    159e:	1d c0       	rjmp	.+58     	; 0x15da <check_strings+0xce>
		{
			tmp = UDR;
    15a0:	2c b0       	in	r2, 0x0c	; 12
			for (int i = 0; i < str_count; i++)
    15a2:	1a 14       	cp	r1, r10
    15a4:	1b 04       	cpc	r1, r11
    15a6:	cc f4       	brge	.+50     	; 0x15da <check_strings+0xce>
    15a8:	c5 2c       	mov	r12, r5
    15aa:	d4 2c       	mov	r13, r4
    15ac:	00 e0       	ldi	r16, 0x00	; 0
    15ae:	10 e0       	ldi	r17, 0x00	; 0
			{
				if (is_str_reached(str_list[i], tmp, &str_flags[i])) // check if the received char is the last char in str
    15b0:	a4 01       	movw	r20, r8
    15b2:	40 0f       	add	r20, r16
    15b4:	51 1f       	adc	r21, r17
    15b6:	62 2d       	mov	r22, r2
    15b8:	f6 01       	movw	r30, r12
    15ba:	81 91       	ld	r24, Z+
    15bc:	91 91       	ld	r25, Z+
    15be:	6f 01       	movw	r12, r30
    15c0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <is_str_reached>
    15c4:	88 23       	and	r24, r24
    15c6:	21 f0       	breq	.+8      	; 0x15d0 <check_strings+0xc4>
				{
					event_flag = i + 1;
    15c8:	33 24       	eor	r3, r3
    15ca:	33 94       	inc	r3
    15cc:	30 0e       	add	r3, r16
					break;
    15ce:	05 c0       	rjmp	.+10     	; 0x15da <check_strings+0xce>
	{
		
		if (BIT_IS_SET(UCSRA, RXC)) // if receive flag is activated
		{
			tmp = UDR;
			for (int i = 0; i < str_count; i++)
    15d0:	0f 5f       	subi	r16, 0xFF	; 255
    15d2:	1f 4f       	sbci	r17, 0xFF	; 255
    15d4:	a0 16       	cp	r10, r16
    15d6:	b1 06       	cpc	r11, r17
    15d8:	59 f7       	brne	.-42     	; 0x15b0 <check_strings+0xa4>
	}
	
	uint8_t event_flag = 0; //determines if the chosen word is reached
	unint8_t tmp = 0; //used for deciding the next position in the tmp_str for storing the received char from UART
	
	while (millis(millis_time) && (!event_flag)) // keep looping until either timeout or word found
    15da:	c7 01       	movw	r24, r14
    15dc:	0e 94 23 06 	call	0xc46	; 0xc46 <millis>
    15e0:	88 23       	and	r24, r24
    15e2:	11 f0       	breq	.+4      	; 0x15e8 <check_strings+0xdc>
    15e4:	33 20       	and	r3, r3
    15e6:	d1 f2       	breq	.-76     	; 0x159c <check_strings+0x90>
			
		}
		
	}
	
	millis_disable_tmr();
    15e8:	0e 94 82 06 	call	0xd04	; 0xd04 <millis_disable_tmr>
	//DISABLE_TIMER0;
	return event_flag;
}
    15ec:	83 2d       	mov	r24, r3
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	7e be       	out	0x3e, r7	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	6d be       	out	0x3d, r6	; 61
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	ef 90       	pop	r14
    1604:	df 90       	pop	r13
    1606:	cf 90       	pop	r12
    1608:	bf 90       	pop	r11
    160a:	af 90       	pop	r10
    160c:	9f 90       	pop	r9
    160e:	8f 90       	pop	r8
    1610:	7f 90       	pop	r7
    1612:	6f 90       	pop	r6
    1614:	5f 90       	pop	r5
    1616:	4f 90       	pop	r4
    1618:	3f 90       	pop	r3
    161a:	2f 90       	pop	r2
    161c:	08 95       	ret

0000161e <__udivmodsi4>:
    161e:	a1 e2       	ldi	r26, 0x21	; 33
    1620:	1a 2e       	mov	r1, r26
    1622:	aa 1b       	sub	r26, r26
    1624:	bb 1b       	sub	r27, r27
    1626:	fd 01       	movw	r30, r26
    1628:	0d c0       	rjmp	.+26     	; 0x1644 <__udivmodsi4_ep>

0000162a <__udivmodsi4_loop>:
    162a:	aa 1f       	adc	r26, r26
    162c:	bb 1f       	adc	r27, r27
    162e:	ee 1f       	adc	r30, r30
    1630:	ff 1f       	adc	r31, r31
    1632:	a2 17       	cp	r26, r18
    1634:	b3 07       	cpc	r27, r19
    1636:	e4 07       	cpc	r30, r20
    1638:	f5 07       	cpc	r31, r21
    163a:	20 f0       	brcs	.+8      	; 0x1644 <__udivmodsi4_ep>
    163c:	a2 1b       	sub	r26, r18
    163e:	b3 0b       	sbc	r27, r19
    1640:	e4 0b       	sbc	r30, r20
    1642:	f5 0b       	sbc	r31, r21

00001644 <__udivmodsi4_ep>:
    1644:	66 1f       	adc	r22, r22
    1646:	77 1f       	adc	r23, r23
    1648:	88 1f       	adc	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	1a 94       	dec	r1
    164e:	69 f7       	brne	.-38     	; 0x162a <__udivmodsi4_loop>
    1650:	60 95       	com	r22
    1652:	70 95       	com	r23
    1654:	80 95       	com	r24
    1656:	90 95       	com	r25
    1658:	9b 01       	movw	r18, r22
    165a:	ac 01       	movw	r20, r24
    165c:	bd 01       	movw	r22, r26
    165e:	cf 01       	movw	r24, r30
    1660:	08 95       	ret

00001662 <__umulhisi3>:
    1662:	a2 9f       	mul	r26, r18
    1664:	b0 01       	movw	r22, r0
    1666:	b3 9f       	mul	r27, r19
    1668:	c0 01       	movw	r24, r0
    166a:	a3 9f       	mul	r26, r19
    166c:	70 0d       	add	r23, r0
    166e:	81 1d       	adc	r24, r1
    1670:	11 24       	eor	r1, r1
    1672:	91 1d       	adc	r25, r1
    1674:	b2 9f       	mul	r27, r18
    1676:	70 0d       	add	r23, r0
    1678:	81 1d       	adc	r24, r1
    167a:	11 24       	eor	r1, r1
    167c:	91 1d       	adc	r25, r1
    167e:	08 95       	ret

00001680 <malloc>:
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	82 30       	cpi	r24, 0x02	; 2
    168a:	91 05       	cpc	r25, r1
    168c:	10 f4       	brcc	.+4      	; 0x1692 <malloc+0x12>
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <__flp>
    1696:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <__flp+0x1>
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	a0 e0       	ldi	r26, 0x00	; 0
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	30 97       	sbiw	r30, 0x00	; 0
    16a4:	19 f1       	breq	.+70     	; 0x16ec <malloc+0x6c>
    16a6:	40 81       	ld	r20, Z
    16a8:	51 81       	ldd	r21, Z+1	; 0x01
    16aa:	02 81       	ldd	r16, Z+2	; 0x02
    16ac:	13 81       	ldd	r17, Z+3	; 0x03
    16ae:	48 17       	cp	r20, r24
    16b0:	59 07       	cpc	r21, r25
    16b2:	c8 f0       	brcs	.+50     	; 0x16e6 <malloc+0x66>
    16b4:	84 17       	cp	r24, r20
    16b6:	95 07       	cpc	r25, r21
    16b8:	69 f4       	brne	.+26     	; 0x16d4 <malloc+0x54>
    16ba:	10 97       	sbiw	r26, 0x00	; 0
    16bc:	31 f0       	breq	.+12     	; 0x16ca <malloc+0x4a>
    16be:	12 96       	adiw	r26, 0x02	; 2
    16c0:	0c 93       	st	X, r16
    16c2:	12 97       	sbiw	r26, 0x02	; 2
    16c4:	13 96       	adiw	r26, 0x03	; 3
    16c6:	1c 93       	st	X, r17
    16c8:	27 c0       	rjmp	.+78     	; 0x1718 <malloc+0x98>
    16ca:	00 93 66 01 	sts	0x0166, r16	; 0x800166 <__flp>
    16ce:	10 93 67 01 	sts	0x0167, r17	; 0x800167 <__flp+0x1>
    16d2:	22 c0       	rjmp	.+68     	; 0x1718 <malloc+0x98>
    16d4:	21 15       	cp	r18, r1
    16d6:	31 05       	cpc	r19, r1
    16d8:	19 f0       	breq	.+6      	; 0x16e0 <malloc+0x60>
    16da:	42 17       	cp	r20, r18
    16dc:	53 07       	cpc	r21, r19
    16de:	18 f4       	brcc	.+6      	; 0x16e6 <malloc+0x66>
    16e0:	9a 01       	movw	r18, r20
    16e2:	bd 01       	movw	r22, r26
    16e4:	ef 01       	movw	r28, r30
    16e6:	df 01       	movw	r26, r30
    16e8:	f8 01       	movw	r30, r16
    16ea:	db cf       	rjmp	.-74     	; 0x16a2 <malloc+0x22>
    16ec:	21 15       	cp	r18, r1
    16ee:	31 05       	cpc	r19, r1
    16f0:	f9 f0       	breq	.+62     	; 0x1730 <malloc+0xb0>
    16f2:	28 1b       	sub	r18, r24
    16f4:	39 0b       	sbc	r19, r25
    16f6:	24 30       	cpi	r18, 0x04	; 4
    16f8:	31 05       	cpc	r19, r1
    16fa:	80 f4       	brcc	.+32     	; 0x171c <malloc+0x9c>
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1700:	61 15       	cp	r22, r1
    1702:	71 05       	cpc	r23, r1
    1704:	21 f0       	breq	.+8      	; 0x170e <malloc+0x8e>
    1706:	fb 01       	movw	r30, r22
    1708:	93 83       	std	Z+3, r25	; 0x03
    170a:	82 83       	std	Z+2, r24	; 0x02
    170c:	04 c0       	rjmp	.+8      	; 0x1716 <malloc+0x96>
    170e:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <__flp+0x1>
    1712:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <__flp>
    1716:	fe 01       	movw	r30, r28
    1718:	32 96       	adiw	r30, 0x02	; 2
    171a:	44 c0       	rjmp	.+136    	; 0x17a4 <malloc+0x124>
    171c:	fe 01       	movw	r30, r28
    171e:	e2 0f       	add	r30, r18
    1720:	f3 1f       	adc	r31, r19
    1722:	81 93       	st	Z+, r24
    1724:	91 93       	st	Z+, r25
    1726:	22 50       	subi	r18, 0x02	; 2
    1728:	31 09       	sbc	r19, r1
    172a:	39 83       	std	Y+1, r19	; 0x01
    172c:	28 83       	st	Y, r18
    172e:	3a c0       	rjmp	.+116    	; 0x17a4 <malloc+0x124>
    1730:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <__brkval>
    1734:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <__brkval+0x1>
    1738:	23 2b       	or	r18, r19
    173a:	41 f4       	brne	.+16     	; 0x174c <malloc+0xcc>
    173c:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1740:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1744:	30 93 65 01 	sts	0x0165, r19	; 0x800165 <__brkval+0x1>
    1748:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <__brkval>
    174c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1750:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1754:	21 15       	cp	r18, r1
    1756:	31 05       	cpc	r19, r1
    1758:	41 f4       	brne	.+16     	; 0x176a <malloc+0xea>
    175a:	2d b7       	in	r18, 0x3d	; 61
    175c:	3e b7       	in	r19, 0x3e	; 62
    175e:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1762:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1766:	24 1b       	sub	r18, r20
    1768:	35 0b       	sbc	r19, r21
    176a:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <__brkval>
    176e:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <__brkval+0x1>
    1772:	e2 17       	cp	r30, r18
    1774:	f3 07       	cpc	r31, r19
    1776:	a0 f4       	brcc	.+40     	; 0x17a0 <malloc+0x120>
    1778:	2e 1b       	sub	r18, r30
    177a:	3f 0b       	sbc	r19, r31
    177c:	28 17       	cp	r18, r24
    177e:	39 07       	cpc	r19, r25
    1780:	78 f0       	brcs	.+30     	; 0x17a0 <malloc+0x120>
    1782:	ac 01       	movw	r20, r24
    1784:	4e 5f       	subi	r20, 0xFE	; 254
    1786:	5f 4f       	sbci	r21, 0xFF	; 255
    1788:	24 17       	cp	r18, r20
    178a:	35 07       	cpc	r19, r21
    178c:	48 f0       	brcs	.+18     	; 0x17a0 <malloc+0x120>
    178e:	4e 0f       	add	r20, r30
    1790:	5f 1f       	adc	r21, r31
    1792:	50 93 65 01 	sts	0x0165, r21	; 0x800165 <__brkval+0x1>
    1796:	40 93 64 01 	sts	0x0164, r20	; 0x800164 <__brkval>
    179a:	81 93       	st	Z+, r24
    179c:	91 93       	st	Z+, r25
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <malloc+0x124>
    17a0:	e0 e0       	ldi	r30, 0x00	; 0
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	cf 01       	movw	r24, r30
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	1f 91       	pop	r17
    17ac:	0f 91       	pop	r16
    17ae:	08 95       	ret

000017b0 <free>:
    17b0:	cf 93       	push	r28
    17b2:	df 93       	push	r29
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	09 f4       	brne	.+2      	; 0x17ba <free+0xa>
    17b8:	81 c0       	rjmp	.+258    	; 0x18bc <free+0x10c>
    17ba:	fc 01       	movw	r30, r24
    17bc:	32 97       	sbiw	r30, 0x02	; 2
    17be:	13 82       	std	Z+3, r1	; 0x03
    17c0:	12 82       	std	Z+2, r1	; 0x02
    17c2:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <__flp>
    17c6:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <__flp+0x1>
    17ca:	10 97       	sbiw	r26, 0x00	; 0
    17cc:	81 f4       	brne	.+32     	; 0x17ee <free+0x3e>
    17ce:	20 81       	ld	r18, Z
    17d0:	31 81       	ldd	r19, Z+1	; 0x01
    17d2:	82 0f       	add	r24, r18
    17d4:	93 1f       	adc	r25, r19
    17d6:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <__brkval>
    17da:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <__brkval+0x1>
    17de:	28 17       	cp	r18, r24
    17e0:	39 07       	cpc	r19, r25
    17e2:	51 f5       	brne	.+84     	; 0x1838 <free+0x88>
    17e4:	f0 93 65 01 	sts	0x0165, r31	; 0x800165 <__brkval+0x1>
    17e8:	e0 93 64 01 	sts	0x0164, r30	; 0x800164 <__brkval>
    17ec:	67 c0       	rjmp	.+206    	; 0x18bc <free+0x10c>
    17ee:	ed 01       	movw	r28, r26
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	ce 17       	cp	r28, r30
    17f6:	df 07       	cpc	r29, r31
    17f8:	40 f4       	brcc	.+16     	; 0x180a <free+0x5a>
    17fa:	4a 81       	ldd	r20, Y+2	; 0x02
    17fc:	5b 81       	ldd	r21, Y+3	; 0x03
    17fe:	9e 01       	movw	r18, r28
    1800:	41 15       	cp	r20, r1
    1802:	51 05       	cpc	r21, r1
    1804:	f1 f0       	breq	.+60     	; 0x1842 <free+0x92>
    1806:	ea 01       	movw	r28, r20
    1808:	f5 cf       	rjmp	.-22     	; 0x17f4 <free+0x44>
    180a:	d3 83       	std	Z+3, r29	; 0x03
    180c:	c2 83       	std	Z+2, r28	; 0x02
    180e:	40 81       	ld	r20, Z
    1810:	51 81       	ldd	r21, Z+1	; 0x01
    1812:	84 0f       	add	r24, r20
    1814:	95 1f       	adc	r25, r21
    1816:	c8 17       	cp	r28, r24
    1818:	d9 07       	cpc	r29, r25
    181a:	59 f4       	brne	.+22     	; 0x1832 <free+0x82>
    181c:	88 81       	ld	r24, Y
    181e:	99 81       	ldd	r25, Y+1	; 0x01
    1820:	84 0f       	add	r24, r20
    1822:	95 1f       	adc	r25, r21
    1824:	02 96       	adiw	r24, 0x02	; 2
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	9b 81       	ldd	r25, Y+3	; 0x03
    182e:	93 83       	std	Z+3, r25	; 0x03
    1830:	82 83       	std	Z+2, r24	; 0x02
    1832:	21 15       	cp	r18, r1
    1834:	31 05       	cpc	r19, r1
    1836:	29 f4       	brne	.+10     	; 0x1842 <free+0x92>
    1838:	f0 93 67 01 	sts	0x0167, r31	; 0x800167 <__flp+0x1>
    183c:	e0 93 66 01 	sts	0x0166, r30	; 0x800166 <__flp>
    1840:	3d c0       	rjmp	.+122    	; 0x18bc <free+0x10c>
    1842:	e9 01       	movw	r28, r18
    1844:	fb 83       	std	Y+3, r31	; 0x03
    1846:	ea 83       	std	Y+2, r30	; 0x02
    1848:	49 91       	ld	r20, Y+
    184a:	59 91       	ld	r21, Y+
    184c:	c4 0f       	add	r28, r20
    184e:	d5 1f       	adc	r29, r21
    1850:	ec 17       	cp	r30, r28
    1852:	fd 07       	cpc	r31, r29
    1854:	61 f4       	brne	.+24     	; 0x186e <free+0xbe>
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	84 0f       	add	r24, r20
    185c:	95 1f       	adc	r25, r21
    185e:	02 96       	adiw	r24, 0x02	; 2
    1860:	e9 01       	movw	r28, r18
    1862:	99 83       	std	Y+1, r25	; 0x01
    1864:	88 83       	st	Y, r24
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	9b 83       	std	Y+3, r25	; 0x03
    186c:	8a 83       	std	Y+2, r24	; 0x02
    186e:	e0 e0       	ldi	r30, 0x00	; 0
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	12 96       	adiw	r26, 0x02	; 2
    1874:	8d 91       	ld	r24, X+
    1876:	9c 91       	ld	r25, X
    1878:	13 97       	sbiw	r26, 0x03	; 3
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	19 f0       	breq	.+6      	; 0x1884 <free+0xd4>
    187e:	fd 01       	movw	r30, r26
    1880:	dc 01       	movw	r26, r24
    1882:	f7 cf       	rjmp	.-18     	; 0x1872 <free+0xc2>
    1884:	8d 91       	ld	r24, X+
    1886:	9c 91       	ld	r25, X
    1888:	11 97       	sbiw	r26, 0x01	; 1
    188a:	9d 01       	movw	r18, r26
    188c:	2e 5f       	subi	r18, 0xFE	; 254
    188e:	3f 4f       	sbci	r19, 0xFF	; 255
    1890:	82 0f       	add	r24, r18
    1892:	93 1f       	adc	r25, r19
    1894:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <__brkval>
    1898:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <__brkval+0x1>
    189c:	28 17       	cp	r18, r24
    189e:	39 07       	cpc	r19, r25
    18a0:	69 f4       	brne	.+26     	; 0x18bc <free+0x10c>
    18a2:	30 97       	sbiw	r30, 0x00	; 0
    18a4:	29 f4       	brne	.+10     	; 0x18b0 <free+0x100>
    18a6:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <__flp+0x1>
    18aa:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <__flp>
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <free+0x104>
    18b0:	13 82       	std	Z+3, r1	; 0x03
    18b2:	12 82       	std	Z+2, r1	; 0x02
    18b4:	b0 93 65 01 	sts	0x0165, r27	; 0x800165 <__brkval+0x1>
    18b8:	a0 93 64 01 	sts	0x0164, r26	; 0x800164 <__brkval>
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	08 95       	ret

000018c2 <memcpy>:
    18c2:	fb 01       	movw	r30, r22
    18c4:	dc 01       	movw	r26, r24
    18c6:	02 c0       	rjmp	.+4      	; 0x18cc <memcpy+0xa>
    18c8:	01 90       	ld	r0, Z+
    18ca:	0d 92       	st	X+, r0
    18cc:	41 50       	subi	r20, 0x01	; 1
    18ce:	50 40       	sbci	r21, 0x00	; 0
    18d0:	d8 f7       	brcc	.-10     	; 0x18c8 <memcpy+0x6>
    18d2:	08 95       	ret

000018d4 <__itoa_ncheck>:
    18d4:	bb 27       	eor	r27, r27
    18d6:	4a 30       	cpi	r20, 0x0A	; 10
    18d8:	31 f4       	brne	.+12     	; 0x18e6 <__itoa_ncheck+0x12>
    18da:	99 23       	and	r25, r25
    18dc:	22 f4       	brpl	.+8      	; 0x18e6 <__itoa_ncheck+0x12>
    18de:	bd e2       	ldi	r27, 0x2D	; 45
    18e0:	90 95       	com	r25
    18e2:	81 95       	neg	r24
    18e4:	9f 4f       	sbci	r25, 0xFF	; 255
    18e6:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <__utoa_common>

000018ea <__utoa_ncheck>:
    18ea:	bb 27       	eor	r27, r27

000018ec <__utoa_common>:
    18ec:	fb 01       	movw	r30, r22
    18ee:	55 27       	eor	r21, r21
    18f0:	aa 27       	eor	r26, r26
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	aa 1f       	adc	r26, r26
    18f8:	a4 17       	cp	r26, r20
    18fa:	10 f0       	brcs	.+4      	; 0x1900 <__utoa_common+0x14>
    18fc:	a4 1b       	sub	r26, r20
    18fe:	83 95       	inc	r24
    1900:	50 51       	subi	r21, 0x10	; 16
    1902:	b9 f7       	brne	.-18     	; 0x18f2 <__utoa_common+0x6>
    1904:	a0 5d       	subi	r26, 0xD0	; 208
    1906:	aa 33       	cpi	r26, 0x3A	; 58
    1908:	08 f0       	brcs	.+2      	; 0x190c <__utoa_common+0x20>
    190a:	a9 5d       	subi	r26, 0xD9	; 217
    190c:	a1 93       	st	Z+, r26
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	79 f7       	brne	.-34     	; 0x18f0 <__utoa_common+0x4>
    1912:	b1 11       	cpse	r27, r1
    1914:	b1 93       	st	Z+, r27
    1916:	11 92       	st	Z+, r1
    1918:	cb 01       	movw	r24, r22
    191a:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <strrev>

0000191e <strrev>:
    191e:	dc 01       	movw	r26, r24
    1920:	fc 01       	movw	r30, r24
    1922:	67 2f       	mov	r22, r23
    1924:	71 91       	ld	r23, Z+
    1926:	77 23       	and	r23, r23
    1928:	e1 f7       	brne	.-8      	; 0x1922 <strrev+0x4>
    192a:	32 97       	sbiw	r30, 0x02	; 2
    192c:	04 c0       	rjmp	.+8      	; 0x1936 <strrev+0x18>
    192e:	7c 91       	ld	r23, X
    1930:	6d 93       	st	X+, r22
    1932:	70 83       	st	Z, r23
    1934:	62 91       	ld	r22, -Z
    1936:	ae 17       	cp	r26, r30
    1938:	bf 07       	cpc	r27, r31
    193a:	c8 f3       	brcs	.-14     	; 0x192e <strrev+0x10>
    193c:	08 95       	ret

0000193e <_exit>:
    193e:	f8 94       	cli

00001940 <__stop_program>:
    1940:	ff cf       	rjmp	.-2      	; 0x1940 <__stop_program>
