
ESP_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  0000036e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017aa  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ed  00000000  00000000  00001cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c35  00000000  00000000  000022ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000468  00000000  00000000  00002ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000649  00000000  00000000  00003348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014fa  00000000  00000000  00003991  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00004e8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_13>
  38:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_14>
  3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
char * esp_password = "";


int main(void)
{
	DDRB = 0x03;
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	87 bb       	out	0x17, r24	; 23
	PORTB |= 1;
  96:	c0 9a       	sbi	0x18, 0	; 24
	uart_init(UART0, 9600, DATA_BITS_8, TX_RX, PARITY_NO, STOP_BITS_1, TX_R_RX_F);
  98:	a1 2c       	mov	r10, r1
  9a:	c1 2c       	mov	r12, r1
  9c:	e1 2c       	mov	r14, r1
  9e:	03 e0       	ldi	r16, 0x03	; 3
  a0:	23 e0       	ldi	r18, 0x03	; 3
  a2:	40 e8       	ldi	r20, 0x80	; 128
  a4:	55 e2       	ldi	r21, 0x25	; 37
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 07 01 	call	0x20e	; 0x20e <uart_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	81 e1       	ldi	r24, 0x11	; 17
  b4:	9a e7       	ldi	r25, 0x7A	; 122
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x24>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x2e>
  c0:	00 00       	nop
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <main+0x30>

000000c4 <__vector_11>:
//the number of overflows needed to generate the needed ticks for making the
// delay time
static volatile unint16_t g_ovf_count;

void CONFIG_TMR0_OVF_ISR()
{
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	2f 93       	push	r18
  d0:	3f 93       	push	r19
  d2:	4f 93       	push	r20
  d4:	5f 93       	push	r21
  d6:	6f 93       	push	r22
  d8:	7f 93       	push	r23
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	af 93       	push	r26
  e0:	bf 93       	push	r27
  e2:	ef 93       	push	r30
  e4:	ff 93       	push	r31
	cli();
  e6:	f8 94       	cli
	 a flag is that by decrementing the g_ovf_count in ISR then I don't have to 
	 guarantee that millis will be checked every 1024 cycles(because the program 
	 might be is too big so that I can't check this function every 1024 cycles
	 */
	//if there are remaining overflows yet
	if (g_ovf_count)
  e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ec:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f0:	89 2b       	or	r24, r25
  f2:	99 f0       	breq	.+38     	; 0x11a <__vector_11+0x56>
	{
		/* if (g_ovf_count == 1) then the n_of actual overflows has ended and
		   there are some remaining ticks which will be out in TCNT0 to get all
		   the ticks needed precisely*/
		if (g_ovf_count == 1)
  f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	21 f4       	brne	.+8      	; 0x108 <__vector_11+0x44>
		{
			TCNT0 = 256 - g_last_ticks;
 100:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <g_last_ticks>
 104:	81 95       	neg	r24
 106:	82 bf       	out	0x32, r24	; 50
		}
		
		g_ovf_count-- ;
 108:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 116:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	
	if (gp_tmr0_ovf_isr != NULL)
 11a:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <gp_tmr0_ovf_isr>
 11e:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <gp_tmr0_ovf_isr+0x1>
 122:	30 97       	sbiw	r30, 0x00	; 0
 124:	09 f0       	breq	.+2      	; 0x128 <__vector_11+0x64>
	{
		gp_tmr0_ovf_isr();
 126:	09 95       	icall
	}
	
	sei();
 128:	78 94       	sei
}
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_15>:
static void ( * gp_uart_txc_isr)(void)  = NULL;
static void ( * gp_uart_rxc_isr)(void)  = NULL;
static void ( * gp_uart_udre_isr)(void) = NULL;

void CONFIG_TXC_ISR() // finished
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	//-----------------------------------------------------------------------
	// we need to Global interrupt to prevent nested interrupt .
	cli();
 16e:	f8 94       	cli
	//-----------------------------------------------------------------------
	
	if (gp_uart_txc_isr != NULL)
 170:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <gp_uart_txc_isr>
 174:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <gp_uart_txc_isr+0x1>
 178:	30 97       	sbiw	r30, 0x00	; 0
 17a:	09 f0       	breq	.+2      	; 0x17e <__vector_15+0x32>
	{
		gp_uart_txc_isr();
 17c:	09 95       	icall
	}

	sei();
 17e:	78 94       	sei
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <__vector_13>:
//=============================================================================
void CONFIG_RXC_ISR()
{
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	ef 93       	push	r30
 1c2:	ff 93       	push	r31
	
	//-------------------------------------------------------------------
	// we need to Global interrupt to prevent nested interrupt .
	cli();
 1c4:	f8 94       	cli
	//-------------------------------------------------------------------
	
	if (gp_uart_rxc_isr != NULL)
 1c6:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <gp_uart_rxc_isr>
 1ca:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <gp_uart_rxc_isr+0x1>
 1ce:	30 97       	sbiw	r30, 0x00	; 0
 1d0:	09 f0       	breq	.+2      	; 0x1d4 <__vector_13+0x32>
	{
		gp_uart_rxc_isr();
 1d2:	09 95       	icall
	}
	
	sei();
 1d4:	78 94       	sei

}
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__vector_14>:
*/
void CONFIG_UDRE_ISR() // finished
{
	//---------------------------------------------------------
	// we need to Global interrupt to prevent nested interrupt .
	cli();
 1f8:	f8 94       	cli
	//---------------------------------------------------------
	//thus we clear it before each transmission that when the transmission
	//completes UDRE = 1, we clear it before each reception
	SET_BIT(UCSRA, UDRE); 
 1fa:	5d 9a       	sbi	0x0b, 5	; 11
	//------------------------------------------------------------
	// API ISR:
	//------------------------------------------------------------
	
	if (gp_uart_udre_isr != NULL)
 1fc:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <gp_uart_udre_isr>
 200:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <gp_uart_udre_isr+0x1>
 204:	30 97       	sbiw	r30, 0x00	; 0
 206:	09 f0       	breq	.+2      	; 0x20a <__vector_14+0x12>
	{
		gp_uart_udre_isr();
 208:	09 95       	icall
	}
	

	sei();
 20a:	78 94       	sei
 20c:	08 95       	ret

0000020e <uart_init>:

/***************************************************/
void uart_init (uint8_t a_uart_no, uint32_t a_baud_rate, uint8_t a_data_size,
                      uint8_t a_tx_or_rx, uint8_t a_parity, uint8_t a_stop_bits, 
					         uint8_t a_sample_phase)
{
 20e:	af 92       	push	r10
 210:	cf 92       	push	r12
 212:	ef 92       	push	r14
 214:	ff 92       	push	r15
 216:	0f 93       	push	r16
 218:	cf 93       	push	r28
 21a:	c2 2f       	mov	r28, r18
    if (UART0 == a_uart_no)
 21c:	81 11       	cpse	r24, r1
 21e:	42 c0       	rjmp	.+132    	; 0x2a4 <uart_init+0x96>
	{
		/*calculate UBBR value the formula is 
		(CPU_FREQUENCY / (16_OR_8 * BAUD RATE))-1 
		*/
		unint16_t UBBR_value = FIXP_DIV(FIXP_FREQ, FIXP_MUL(FIXP_8_16, FIXP_BAUD, 
 220:	db 01       	movw	r26, r22
 222:	ca 01       	movw	r24, r20
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	aa 1f       	adc	r26, r26
 22a:	bb 1f       	adc	r27, r27
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	aa 1f       	adc	r26, r26
 232:	bb 1f       	adc	r27, r27
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	aa 1f       	adc	r26, r26
 23a:	bb 1f       	adc	r27, r27
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	aa 1f       	adc	r26, r26
 242:	bb 1f       	adc	r27, r27
 244:	9c 01       	movw	r18, r24
 246:	ad 01       	movw	r20, r26
 248:	20 7f       	andi	r18, 0xF0	; 240
 24a:	5f 77       	andi	r21, 0x7F	; 127
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	78 e4       	ldi	r23, 0x48	; 72
 250:	88 ee       	ldi	r24, 0xE8	; 232
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__udivmodsi4>
 258:	22 50       	subi	r18, 0x02	; 2
 25a:	31 09       	sbc	r19, r1
							   - (1 << UART_PRECISION_BITS);
											
		/*if the precision bit is 0.1 in binary meaning 0.5 in decimal we 
		  should round up
		*/									
		if ((UBBR_value & 1)) 
 25c:	20 ff       	sbrs	r18, 0
 25e:	05 c0       	rjmp	.+10     	; 0x26a <uart_init+0x5c>
		{
			//remove the precision bit and round up
			UBBR_value = (UBBR_value >> 1) + 1;
 260:	36 95       	lsr	r19
 262:	27 95       	ror	r18
 264:	2f 5f       	subi	r18, 0xFF	; 255
 266:	3f 4f       	sbci	r19, 0xFF	; 255
 268:	02 c0       	rjmp	.+4      	; 0x26e <uart_init+0x60>
		}  //else if the precision bit is not 0.1 in binary meaning less than 0.5 
		else //in decimal we should round down
		    
		{
			/*round down by just removing the precision bit*/
			UBBR_value >>= UART_PRECISION_BITS; 
 26a:	36 95       	lsr	r19
 26c:	27 95       	ror	r18
		}                                        
	
		//PORTB = UBBR_value; just for testing
		//setting the U2X bit to 1 for double speed asynchronous
		UCSRA = (DOUBLE_SPEED << U2X);	
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	8b b9       	out	0x0b, r24	; 11
			* RXEN  = 1/0 Receiver En/Disable
			* TXEN  = 1/0 Transmitter En/DisEnable
			* UCSZ2 = 0   For 8-bit data mode
			* RXB8 & TXB8 not used for 8-bit data mode
			*******************************************************************/ 
		UCSRB = (a_tx_or_rx << RXEN_TXEN) | (a_data_size & (1 << 2));
 272:	00 0f       	add	r16, r16
 274:	00 0f       	add	r16, r16
 276:	00 0f       	add	r16, r16
 278:	8c 2f       	mov	r24, r28
 27a:	84 70       	andi	r24, 0x04	; 4
 27c:	08 2b       	or	r16, r24
 27e:	0a b9       	out	0x0a, r16	; 10
			* UPM1:0  = 0 Disable parity bit
			* USBS    = 0 One stop bit
			* UCSZ1:0 = 11 For 8-bit data mode
			* UCPOL   = 0 Used with the Synchronous operation only
			***********************************************************************/ 
		UCSRC = (1 << URSEL) | (a_parity << UPM_0_1) | (a_stop_bits << USBS) | 
 280:	cc 0c       	add	r12, r12
 282:	cc 0c       	add	r12, r12
 284:	cc 0c       	add	r12, r12
 286:	8a 2d       	mov	r24, r10
 288:	80 68       	ori	r24, 0x80	; 128
 28a:	ac 2c       	mov	r10, r12
 28c:	a8 2a       	or	r10, r24
 28e:	80 e1       	ldi	r24, 0x10	; 16
 290:	e8 9e       	mul	r14, r24
 292:	70 01       	movw	r14, r0
 294:	11 24       	eor	r1, r1
 296:	ea 28       	or	r14, r10
 298:	c3 70       	andi	r28, 0x03	; 3
 29a:	cc 0f       	add	r28, r28
 29c:	ec 2a       	or	r14, r28
 29e:	e0 bc       	out	0x20, r14	; 32
		             ((a_data_size & 0x03) << UCSZ_0_1) | (a_sample_phase << UCPOL);
 	
		//Put the upper part of the UBBR value here (bits 8 to 11)
		UBRRH = (unint8_t)(UBBR_value >> 8);
 2a0:	30 bd       	out	0x20, r19	; 32
		//Put the remaining part of the UBBR value here
		UBRRL = (unint8_t)UBBR_value;
 2a2:	29 b9       	out	0x09, r18	; 9
	}

}
 2a4:	cf 91       	pop	r28
 2a6:	0f 91       	pop	r16
 2a8:	ff 90       	pop	r15
 2aa:	ef 90       	pop	r14
 2ac:	cf 90       	pop	r12
 2ae:	af 90       	pop	r10
 2b0:	08 95       	ret

000002b2 <__udivmodsi4>:
 2b2:	a1 e2       	ldi	r26, 0x21	; 33
 2b4:	1a 2e       	mov	r1, r26
 2b6:	aa 1b       	sub	r26, r26
 2b8:	bb 1b       	sub	r27, r27
 2ba:	fd 01       	movw	r30, r26
 2bc:	0d c0       	rjmp	.+26     	; 0x2d8 <__udivmodsi4_ep>

000002be <__udivmodsi4_loop>:
 2be:	aa 1f       	adc	r26, r26
 2c0:	bb 1f       	adc	r27, r27
 2c2:	ee 1f       	adc	r30, r30
 2c4:	ff 1f       	adc	r31, r31
 2c6:	a2 17       	cp	r26, r18
 2c8:	b3 07       	cpc	r27, r19
 2ca:	e4 07       	cpc	r30, r20
 2cc:	f5 07       	cpc	r31, r21
 2ce:	20 f0       	brcs	.+8      	; 0x2d8 <__udivmodsi4_ep>
 2d0:	a2 1b       	sub	r26, r18
 2d2:	b3 0b       	sbc	r27, r19
 2d4:	e4 0b       	sbc	r30, r20
 2d6:	f5 0b       	sbc	r31, r21

000002d8 <__udivmodsi4_ep>:
 2d8:	66 1f       	adc	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	88 1f       	adc	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	1a 94       	dec	r1
 2e2:	69 f7       	brne	.-38     	; 0x2be <__udivmodsi4_loop>
 2e4:	60 95       	com	r22
 2e6:	70 95       	com	r23
 2e8:	80 95       	com	r24
 2ea:	90 95       	com	r25
 2ec:	9b 01       	movw	r18, r22
 2ee:	ac 01       	movw	r20, r24
 2f0:	bd 01       	movw	r22, r26
 2f2:	cf 01       	movw	r24, r30
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
