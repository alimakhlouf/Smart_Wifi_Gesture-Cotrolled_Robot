
CAN_Program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000004ba  0000052e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000053a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000198  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001736  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063a  00000000  00000000  00001e76  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bff  00000000  00000000  000024b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000534  00000000  00000000  000030b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056c  00000000  00000000  000035e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001795  00000000  00000000  00003b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  000052e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea eb       	ldi	r30, 0xBA	; 186
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "mcp2515.h"



int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	62 97       	sbiw	r28, 0x12	; 18
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xff;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a bb       	out	0x1a, r24	; 26
	PORTA = 1; 
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	8b bb       	out	0x1b, r24	; 27
	SPI_init();
  ae:	0e 94 e6 01 	call	0x3cc	; 0x3cc <SPI_init>
	UART_init();
  b2:	0e 94 34 02 	call	0x468	; 0x468 <UART_init>
	unint8_t data_buff[9] = "tartasha";
  b6:	89 e0       	ldi	r24, 0x09	; 9
  b8:	e3 e6       	ldi	r30, 0x63	; 99
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	de 01       	movw	r26, r28
  be:	11 96       	adiw	r26, 0x01	; 1
  c0:	01 90       	ld	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	8a 95       	dec	r24
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x2e>
	uint8_t s[3] = {5};
	uint8_t d;
	


	mcp_init();  
  c8:	0e 94 ab 01 	call	0x356	; 0x356 <mcp_init>
	
	//assign this id to the message on tx0 buffer 
	mcp_tx_id(MCP_TX(0), 0, 0x058f);//000 1111 0111 001 10 00110101 10001111	
  cc:	2f e8       	ldi	r18, 0x8F	; 143
  ce:	35 e0       	ldi	r19, 0x05	; 5
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	50 e0       	ldi	r21, 0x00	; 0
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <mcp_tx_id>
	
	//assign this data to the tx0
	mcp_tx_data(MCP_TX(0), data_buff, 8);
  dc:	48 e0       	ldi	r20, 0x08	; 8
  de:	be 01       	movw	r22, r28
  e0:	6f 5f       	subi	r22, 0xFF	; 255
  e2:	7f 4f       	sbci	r23, 0xFF	; 255
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <mcp_tx_data>
	
	//send the data in TX0 buffer 
	mcp_tx_trigger(MCP_TX(0));
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 87 01 	call	0x30e	; 0x30e <mcp_tx_trigger>
	
//the tx0 is going to send to the rx0 
    /* Replace with your application code */
    while (1)
    {
		PORTA ^= 1;	
  f0:	11 e0       	ldi	r17, 0x01	; 1
		PORTA ^= 2;	
  f2:	02 e0       	ldi	r16, 0x02	; 2
	
//the tx0 is going to send to the rx0 
    /* Replace with your application code */
    while (1)
    {
		PORTA ^= 1;	
  f4:	8b b3       	in	r24, 0x1b	; 27
  f6:	81 27       	eor	r24, r17
  f8:	8b bb       	out	0x1b, r24	; 27
		PORTA ^= 2;	
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	80 27       	eor	r24, r16
  fe:	8b bb       	out	0x1b, r24	; 27

		mcp_rx_data(MCP_RX(0), receive_buff);
 100:	be 01       	movw	r22, r28
 102:	66 5f       	subi	r22, 0xF6	; 246
 104:	7f 4f       	sbci	r23, 0xFF	; 255
 106:	81 2f       	mov	r24, r17
 108:	0e 94 4d 01 	call	0x29a	; 0x29a <mcp_rx_data>
		UART_sendStrByMark(receive_buff, 0);
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	ce 01       	movw	r24, r28
 110:	0a 96       	adiw	r24, 0x0a	; 10
 112:	0e 94 42 02 	call	0x484	; 0x484 <UART_sendStrByMark>
		
		UART_sendStrByMark("\r\n", 0);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	80 e6       	ldi	r24, 0x60	; 96
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 42 02 	call	0x484	; 0x484 <UART_sendStrByMark>
		UART_sendStrByMark("\r\n", 0);
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	80 e6       	ldi	r24, 0x60	; 96
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 42 02 	call	0x484	; 0x484 <UART_sendStrByMark>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	83 ed       	ldi	r24, 0xD3	; 211
 12e:	90 e3       	ldi	r25, 0x30	; 48
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x9e>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xa8>
 13a:	00 00       	nop
 13c:	db cf       	rjmp	.-74     	; 0xf4 <main+0x62>

0000013e <mcp_reset>:
	mcp_bit_modify(CANCTRL, 0b11100000, (opmode << 5));	
}

void mcp_en_ckout(unint8_t prescaler)
{
	mcp_bit_modify(CANCTRL, 0b00000111, (1 << 2) | prescaler);
 13e:	c4 98       	cbi	0x18, 4	; 24
 140:	80 ec       	ldi	r24, 0xC0	; 192
 142:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 146:	c4 9a       	sbi	0x18, 4	; 24
 148:	08 95       	ret

0000014a <mcp_set_mask_filter>:
 14a:	cf 92       	push	r12
 14c:	df 92       	push	r13
 14e:	ef 92       	push	r14
 150:	ff 92       	push	r15
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	d8 2f       	mov	r29, r24
 158:	c6 2f       	mov	r28, r22
 15a:	69 01       	movw	r12, r18
 15c:	7a 01       	movw	r14, r20
 15e:	c4 98       	cbi	0x18, 4	; 24
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 166:	8d 2f       	mov	r24, r29
 168:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 16c:	c1 30       	cpi	r28, 0x01	; 1
 16e:	31 f5       	brne	.+76     	; 0x1bc <mcp_set_mask_filter+0x72>
 170:	d7 01       	movw	r26, r14
 172:	c6 01       	movw	r24, r12
 174:	07 2e       	mov	r0, r23
 176:	75 e1       	ldi	r23, 0x15	; 21
 178:	b6 95       	lsr	r27
 17a:	a7 95       	ror	r26
 17c:	97 95       	ror	r25
 17e:	87 95       	ror	r24
 180:	7a 95       	dec	r23
 182:	d1 f7       	brne	.-12     	; 0x178 <mcp_set_mask_filter+0x2e>
 184:	70 2d       	mov	r23, r0
 186:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 18a:	d7 01       	movw	r26, r14
 18c:	c6 01       	movw	r24, r12
 18e:	07 2e       	mov	r0, r23
 190:	7d e0       	ldi	r23, 0x0D	; 13
 192:	b6 95       	lsr	r27
 194:	a7 95       	ror	r26
 196:	97 95       	ror	r25
 198:	87 95       	ror	r24
 19a:	7a 95       	dec	r23
 19c:	d1 f7       	brne	.-12     	; 0x192 <mcp_set_mask_filter+0x48>
 19e:	70 2d       	mov	r23, r0
 1a0:	80 7e       	andi	r24, 0xE0	; 224
 1a2:	9e 2d       	mov	r25, r14
 1a4:	93 70       	andi	r25, 0x03	; 3
 1a6:	89 2b       	or	r24, r25
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 1ae:	8d 2d       	mov	r24, r13
 1b0:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 1b4:	8c 2d       	mov	r24, r12
 1b6:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 1ba:	0f c0       	rjmp	.+30     	; 0x1da <mcp_set_mask_filter+0x90>
 1bc:	c6 01       	movw	r24, r12
 1be:	96 95       	lsr	r25
 1c0:	87 95       	ror	r24
 1c2:	96 95       	lsr	r25
 1c4:	87 95       	ror	r24
 1c6:	96 95       	lsr	r25
 1c8:	87 95       	ror	r24
 1ca:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 1ce:	8c 2d       	mov	r24, r12
 1d0:	82 95       	swap	r24
 1d2:	88 0f       	add	r24, r24
 1d4:	80 7e       	andi	r24, 0xE0	; 224
 1d6:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 1da:	c4 9a       	sbi	0x18, 4	; 24
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	ff 90       	pop	r15
 1e2:	ef 90       	pop	r14
 1e4:	df 90       	pop	r13
 1e6:	cf 90       	pop	r12
 1e8:	08 95       	ret

000001ea <mcp_tx_id>:
 1ea:	cf 92       	push	r12
 1ec:	df 92       	push	r13
 1ee:	ef 92       	push	r14
 1f0:	ff 92       	push	r15
 1f2:	cf 93       	push	r28
 1f4:	c8 2f       	mov	r28, r24
 1f6:	69 01       	movw	r12, r18
 1f8:	7a 01       	movw	r14, r20
 1fa:	c4 98       	cbi	0x18, 4	; 24
 1fc:	61 30       	cpi	r22, 0x01	; 1
 1fe:	81 f5       	brne	.+96     	; 0x260 <mcp_tx_id+0x76>
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 206:	8c 2f       	mov	r24, r28
 208:	86 95       	lsr	r24
 20a:	82 95       	swap	r24
 20c:	80 7f       	andi	r24, 0xF0	; 240
 20e:	8f 5c       	subi	r24, 0xCF	; 207
 210:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 214:	d7 01       	movw	r26, r14
 216:	c6 01       	movw	r24, r12
 218:	07 2e       	mov	r0, r23
 21a:	75 e1       	ldi	r23, 0x15	; 21
 21c:	b6 95       	lsr	r27
 21e:	a7 95       	ror	r26
 220:	97 95       	ror	r25
 222:	87 95       	ror	r24
 224:	7a 95       	dec	r23
 226:	d1 f7       	brne	.-12     	; 0x21c <mcp_tx_id+0x32>
 228:	70 2d       	mov	r23, r0
 22a:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 22e:	d7 01       	movw	r26, r14
 230:	c6 01       	movw	r24, r12
 232:	07 2e       	mov	r0, r23
 234:	7d e0       	ldi	r23, 0x0D	; 13
 236:	b6 95       	lsr	r27
 238:	a7 95       	ror	r26
 23a:	97 95       	ror	r25
 23c:	87 95       	ror	r24
 23e:	7a 95       	dec	r23
 240:	d1 f7       	brne	.-12     	; 0x236 <mcp_tx_id+0x4c>
 242:	70 2d       	mov	r23, r0
 244:	80 7e       	andi	r24, 0xE0	; 224
 246:	9e 2d       	mov	r25, r14
 248:	93 70       	andi	r25, 0x03	; 3
 24a:	89 2b       	or	r24, r25
 24c:	88 60       	ori	r24, 0x08	; 8
 24e:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 252:	8d 2d       	mov	r24, r13
 254:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 258:	8c 2d       	mov	r24, r12
 25a:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 25e:	16 c0       	rjmp	.+44     	; 0x28c <mcp_tx_id+0xa2>
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	09 f4       	brne	.+2      	; 0x266 <mcp_tx_id+0x7c>
 264:	c0 e0       	ldi	r28, 0x00	; 0
 266:	8c 2f       	mov	r24, r28
 268:	80 64       	ori	r24, 0x40	; 64
 26a:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 26e:	c6 01       	movw	r24, r12
 270:	96 95       	lsr	r25
 272:	87 95       	ror	r24
 274:	96 95       	lsr	r25
 276:	87 95       	ror	r24
 278:	96 95       	lsr	r25
 27a:	87 95       	ror	r24
 27c:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 280:	8c 2d       	mov	r24, r12
 282:	82 95       	swap	r24
 284:	88 0f       	add	r24, r24
 286:	80 7e       	andi	r24, 0xE0	; 224
 288:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 28c:	c4 9a       	sbi	0x18, 4	; 24
 28e:	cf 91       	pop	r28
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	df 90       	pop	r13
 296:	cf 90       	pop	r12
 298:	08 95       	ret

0000029a <mcp_rx_data>:
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	c8 2f       	mov	r28, r24
 2a2:	8b 01       	movw	r16, r22
 2a4:	c4 98       	cbi	0x18, 4	; 24
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 2ac:	8c 2f       	mov	r24, r28
 2ae:	86 95       	lsr	r24
 2b0:	82 95       	swap	r24
 2b2:	80 7f       	andi	r24, 0xF0	; 240
 2b4:	8b 59       	subi	r24, 0x9B	; 155
 2b6:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 2ba:	0e 94 0a 02 	call	0x414	; 0x414 <SPI_receiveChr>
 2be:	68 2f       	mov	r22, r24
 2c0:	c8 01       	movw	r24, r16
 2c2:	0e 94 0f 02 	call	0x41e	; 0x41e <SPI_receiveStrBySize>
 2c6:	c4 9a       	sbi	0x18, 4	; 24
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	08 95       	ret

000002d0 <mcp_tx_data>:
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	c8 2f       	mov	r28, r24
 2da:	8b 01       	movw	r16, r22
 2dc:	d4 2f       	mov	r29, r20
 2de:	c4 98       	cbi	0x18, 4	; 24
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 2e6:	8c 2f       	mov	r24, r28
 2e8:	86 95       	lsr	r24
 2ea:	82 95       	swap	r24
 2ec:	80 7f       	andi	r24, 0xF0	; 240
 2ee:	8b 5c       	subi	r24, 0xCB	; 203
 2f0:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 2f4:	8d 2f       	mov	r24, r29
 2f6:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 2fa:	6d 2f       	mov	r22, r29
 2fc:	c8 01       	movw	r24, r16
 2fe:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_sendStrBySize>
 302:	c4 9a       	sbi	0x18, 4	; 24
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	1f 91       	pop	r17
 30a:	0f 91       	pop	r16
 30c:	08 95       	ret

0000030e <mcp_tx_trigger>:
 30e:	c4 98       	cbi	0x18, 4	; 24
 310:	80 68       	ori	r24, 0x80	; 128
 312:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 316:	c4 9a       	sbi	0x18, 4	; 24
 318:	8f e0       	ldi	r24, 0x0F	; 15
 31a:	97 e2       	ldi	r25, 0x27	; 39
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <mcp_tx_trigger+0xe>
 320:	00 c0       	rjmp	.+0      	; 0x322 <mcp_tx_trigger+0x14>
 322:	00 00       	nop
 324:	08 95       	ret

00000326 <mcp_bit_modify>:
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	18 2f       	mov	r17, r24
 32e:	d6 2f       	mov	r29, r22
 330:	c4 2f       	mov	r28, r20
 332:	c4 98       	cbi	0x18, 4	; 24
 334:	85 e0       	ldi	r24, 0x05	; 5
 336:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 33a:	81 2f       	mov	r24, r17
 33c:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 340:	8d 2f       	mov	r24, r29
 342:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 346:	8c 2f       	mov	r24, r28
 348:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 34c:	c4 9a       	sbi	0x18, 4	; 24
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	1f 91       	pop	r17
 354:	08 95       	ret

00000356 <mcp_init>:
}

void mcp_init()
{
	mcp_reset();
 356:	0e 94 9f 00 	call	0x13e	; 0x13e <mcp_reset>
	
	//RX0BF - RX1BF STATES  
	mcp_bit_modify(BFPCTRL, 0b00001111, RX0BF_STATE | RX1BF_STATE);
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	6f e0       	ldi	r22, 0x0F	; 15
 35e:	8c e0       	ldi	r24, 0x0C	; 12
 360:	0e 94 93 01 	call	0x326	; 0x326 <mcp_bit_modify>
	
	//REQUENST TRANSMISSION MESSAGE via PINS
	mcp_bit_modify(TXRTSCTRL, 0b00000111, RTS_PINS);
 364:	40 e0       	ldi	r20, 0x00	; 0
 366:	67 e0       	ldi	r22, 0x07	; 7
 368:	8d e0       	ldi	r24, 0x0D	; 13
 36a:	0e 94 93 01 	call	0x326	; 0x326 <mcp_bit_modify>
	
	//remove all masks
	mcp_bit_modify(RXB0CTRL, 0b01100000, 0b00000000);	
 36e:	40 e0       	ldi	r20, 0x00	; 0
 370:	60 e6       	ldi	r22, 0x60	; 96
 372:	80 e6       	ldi	r24, 0x60	; 96
 374:	0e 94 93 01 	call	0x326	; 0x326 <mcp_bit_modify>
	
	mcp_bit_modify(CANTINTE, 0b11111111, MCP_INT_BITS);
 378:	43 e0       	ldi	r20, 0x03	; 3
 37a:	6f ef       	ldi	r22, 0xFF	; 255
 37c:	8b e2       	ldi	r24, 0x2B	; 43
 37e:	0e 94 93 01 	call	0x326	; 0x326 <mcp_bit_modify>

	mcp_bit_modify(CNF1, 0b11111111, ((SJW - 1) << 6) | BRP);
 382:	41 e4       	ldi	r20, 0x41	; 65
 384:	6f ef       	ldi	r22, 0xFF	; 255
 386:	8a e2       	ldi	r24, 0x2A	; 42
 388:	0e 94 93 01 	call	0x326	; 0x326 <mcp_bit_modify>
	
	mcp_bit_modify(CNF2, 0b11111111, (1 << 7) | (SAMP_TIMES << 6) | ((PS1_SEG - 1) << 3) | (PROP_SEG - 1));
 38c:	41 eb       	ldi	r20, 0xB1	; 177
 38e:	6f ef       	ldi	r22, 0xFF	; 255
 390:	89 e2       	ldi	r24, 0x29	; 41
 392:	0e 94 93 01 	call	0x326	; 0x326 <mcp_bit_modify>

	mcp_bit_modify(CNF3, 0b01000111, (PS2_SEG - 1));
 396:	45 e0       	ldi	r20, 0x05	; 5
 398:	67 e4       	ldi	r22, 0x47	; 71
 39a:	88 e2       	ldi	r24, 0x28	; 40
 39c:	0e 94 93 01 	call	0x326	; 0x326 <mcp_bit_modify>
	
	mcp_set_mask_filter(MCP_MASK(0), MASK0_TYPE, MASK0_ID);
 3a0:	2f ef       	ldi	r18, 0xFF	; 255
 3a2:	3f e0       	ldi	r19, 0x0F	; 15
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	80 e2       	ldi	r24, 0x20	; 32
 3ac:	0e 94 a5 00 	call	0x14a	; 0x14a <mcp_set_mask_filter>
	
	mcp_set_mask_filter(MCP_FILTER(0), FILTER0_TYPE, FILTER0_ID);
 3b0:	2f e8       	ldi	r18, 0x8F	; 143
 3b2:	35 e0       	ldi	r19, 0x05	; 5
 3b4:	40 e0       	ldi	r20, 0x00	; 0
 3b6:	50 e0       	ldi	r21, 0x00	; 0
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	0e 94 a5 00 	call	0x14a	; 0x14a <mcp_set_mask_filter>
	#endif
	
	
	//determine the operation mode.. one shot mode
	//CANCTRL = 0b01001000;  //loopback mode ... one shot mode
	mcp_bit_modify(CANCTRL, 0b11111111, (MCP_OP_MODE << 5) | (ONE_SHOT << 3) | (MCP_CLOCKOUT << 2) | (MCP_CKOUT_PRE));
 3c0:	48 e4       	ldi	r20, 0x48	; 72
 3c2:	6f ef       	ldi	r22, 0xFF	; 255
 3c4:	8f e2       	ldi	r24, 0x2F	; 47
 3c6:	0e 94 93 01 	call	0x326	; 0x326 <mcp_bit_modify>
 3ca:	08 95       	ret

000003cc <SPI_init>:
	}
	while (Str[i++] != mark);
	
	i--;  /*return back one step to the last cell where we put null*/
	Str[i] = '\0';
}
 3cc:	80 eb       	ldi	r24, 0xB0	; 176
 3ce:	87 bb       	out	0x17, r24	; 23
 3d0:	be 98       	cbi	0x17, 6	; 23
 3d2:	80 e5       	ldi	r24, 0x50	; 80
 3d4:	8d b9       	out	0x0d, r24	; 13
 3d6:	1e b8       	out	0x0e, r1	; 14
 3d8:	08 95       	ret

000003da <SPI_sendChr>:
 3da:	8f b9       	out	0x0f, r24	; 15
 3dc:	77 9b       	sbis	0x0e, 7	; 14
 3de:	fe cf       	rjmp	.-4      	; 0x3dc <SPI_sendChr+0x2>
 3e0:	08 95       	ret

000003e2 <SPI_sendStrBySize>:
 3e2:	0f 93       	push	r16
 3e4:	1f 93       	push	r17
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	66 23       	and	r22, r22
 3ec:	71 f0       	breq	.+28     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 3ee:	ec 01       	movw	r28, r24
 3f0:	61 50       	subi	r22, 0x01	; 1
 3f2:	06 2f       	mov	r16, r22
 3f4:	10 e0       	ldi	r17, 0x00	; 0
 3f6:	0f 5f       	subi	r16, 0xFF	; 255
 3f8:	1f 4f       	sbci	r17, 0xFF	; 255
 3fa:	08 0f       	add	r16, r24
 3fc:	19 1f       	adc	r17, r25
 3fe:	89 91       	ld	r24, Y+
 400:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 404:	c0 17       	cp	r28, r16
 406:	d1 07       	cpc	r29, r17
 408:	d1 f7       	brne	.-12     	; 0x3fe <SPI_sendStrBySize+0x1c>
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	08 95       	ret

00000414 <SPI_receiveChr>:
 414:	81 e3       	ldi	r24, 0x31	; 49
 416:	0e 94 ed 01 	call	0x3da	; 0x3da <SPI_sendChr>
 41a:	8f b1       	in	r24, 0x0f	; 15
 41c:	08 95       	ret

0000041e <SPI_receiveStrBySize>:


void SPI_receiveStrBySize(unint8_t *Str, unint8_t size)
{
 41e:	df 92       	push	r13
 420:	ef 92       	push	r14
 422:	ff 92       	push	r15
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	7c 01       	movw	r14, r24
 42e:	d6 2e       	mov	r13, r22
	unsigned char i = 0;
	
	while (i < size)
 430:	66 23       	and	r22, r22
 432:	71 f0       	breq	.+28     	; 0x450 <SPI_receiveStrBySize+0x32>
 434:	ec 01       	movw	r28, r24
 436:	0f ef       	ldi	r16, 0xFF	; 255
 438:	06 0f       	add	r16, r22
 43a:	10 e0       	ldi	r17, 0x00	; 0
 43c:	0f 5f       	subi	r16, 0xFF	; 255
 43e:	1f 4f       	sbci	r17, 0xFF	; 255
 440:	08 0f       	add	r16, r24
 442:	19 1f       	adc	r17, r25
	{
		Str[i] = SPI_receiveChr();
 444:	0e 94 0a 02 	call	0x414	; 0x414 <SPI_receiveChr>
 448:	89 93       	st	Y+, r24

void SPI_receiveStrBySize(unint8_t *Str, unint8_t size)
{
	unsigned char i = 0;
	
	while (i < size)
 44a:	c0 17       	cp	r28, r16
 44c:	d1 07       	cpc	r29, r17
 44e:	d1 f7       	brne	.-12     	; 0x444 <SPI_receiveStrBySize+0x26>
	{
		Str[i] = SPI_receiveChr();
		i++;
	}
	
	Str[i] = '\0';
 450:	f7 01       	movw	r30, r14
 452:	ed 0d       	add	r30, r13
 454:	f1 1d       	adc	r31, r1
 456:	10 82       	st	Z, r1
}
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	df 90       	pop	r13
 466:	08 95       	ret

00000468 <UART_init>:
		}
	#endif
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
}
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	8b b9       	out	0x0b, r24	; 11
 46c:	88 e0       	ldi	r24, 0x08	; 8
 46e:	8a b9       	out	0x0a, r24	; 10
 470:	86 e8       	ldi	r24, 0x86	; 134
 472:	80 bd       	out	0x20, r24	; 32
 474:	10 bc       	out	0x20, r1	; 32
 476:	87 e6       	ldi	r24, 0x67	; 103
 478:	89 b9       	out	0x09, r24	; 9
 47a:	08 95       	ret

0000047c <UART_sendChr>:
 47c:	5d 9b       	sbis	0x0b, 5	; 11
 47e:	fe cf       	rjmp	.-4      	; 0x47c <UART_sendChr>
 480:	8c b9       	out	0x0c, r24	; 12
 482:	08 95       	ret

00000484 <UART_sendStrByMark>:

/*notice that this function send the string except the null char */
void UART_sendStrByMark(const unint8_t * str , unint8_t mark)
{
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
 48c:	fc 01       	movw	r30, r24
	unint8_t i = 0;
	while(str[i] != mark)
 48e:	80 81       	ld	r24, Z
 490:	68 17       	cp	r22, r24
 492:	61 f0       	breq	.+24     	; 0x4ac <UART_sendStrByMark+0x28>
 494:	d6 2f       	mov	r29, r22
 496:	8f 01       	movw	r16, r30
 498:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_sendChr(str[i]);
 49a:	0e 94 3e 02 	call	0x47c	; 0x47c <UART_sendChr>
		i++;
 49e:	cf 5f       	subi	r28, 0xFF	; 255

/*notice that this function send the string except the null char */
void UART_sendStrByMark(const unint8_t * str , unint8_t mark)
{
	unint8_t i = 0;
	while(str[i] != mark)
 4a0:	f8 01       	movw	r30, r16
 4a2:	ec 0f       	add	r30, r28
 4a4:	f1 1d       	adc	r31, r1
 4a6:	80 81       	ld	r24, Z
 4a8:	8d 13       	cpse	r24, r29
 4aa:	f7 cf       	rjmp	.-18     	; 0x49a <UART_sendStrByMark+0x16>
	{
		UART_sendChr(str[i]);
		i++;
	}	
}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	1f 91       	pop	r17
 4b2:	0f 91       	pop	r16
 4b4:	08 95       	ret

000004b6 <_exit>:
 4b6:	f8 94       	cli

000004b8 <__stop_program>:
 4b8:	ff cf       	rjmp	.-2      	; 0x4b8 <__stop_program>
