
get_string.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000003ac  00000440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  00000444  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000898  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003a0  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b5  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000301  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a94  00000000  00000000  00001ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002565  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "millis0.h"
#include "uart_get_word.h"
#include "string.h"

int main(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	6e 97       	sbiw	r28, 0x1e	; 30
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	UART_init();
  a6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <UART_init>
	DDRB = 0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	87 bb       	out	0x17, r24	; 23
	char str[30];
	
    /* Replace with your application code */
    while (1) 
    {
		PORTB ^= 1;
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	81 27       	eor	r24, r17
  b4:	88 bb       	out	0x18, r24	; 24
		
		if (get_str_until(str, "123", 2000))
  b6:	40 ed       	ldi	r20, 0xD0	; 208
  b8:	57 e0       	ldi	r21, 0x07	; 7
  ba:	60 e6       	ldi	r22, 0x60	; 96
  bc:	70 e0       	ldi	r23, 0x00	; 0
  be:	ce 01       	movw	r24, r28
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	0e 94 2b 01 	call	0x256	; 0x256 <get_str_until>
  c6:	88 23       	and	r24, r24
  c8:	31 f0       	breq	.+12     	; 0xd6 <main+0x44>
		{
			UART_sendStrByMark(str,0);
  ca:	60 e0       	ldi	r22, 0x00	; 0
  cc:	ce 01       	movw	r24, r28
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <UART_sendStrByMark>
  d4:	ed cf       	rjmp	.-38     	; 0xb0 <main+0x1e>
			
		}
		else
		{
			UART_sendChr('N');
  d6:	8e e4       	ldi	r24, 0x4E	; 78
  d8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_sendChr>
  dc:	e9 cf       	rjmp	.-46     	; 0xb0 <main+0x1e>

000000de <millis>:
}

#else

 unint8_t millis(unint16_t t)
{
  de:	0f 93       	push	r16
  e0:	1f 93       	push	r17
  e2:	9c 01       	movw	r18, r24
	
	//if it's the first loop ( activate the timer)
	if ((n_ovf == 0) && (TCCR0 == 0))
  e4:	40 91 64 00 	lds	r20, 0x0064
  e8:	50 91 65 00 	lds	r21, 0x0065
  ec:	45 2b       	or	r20, r21
  ee:	99 f5       	brne	.+102    	; 0x156 <millis+0x78>
  f0:	83 b7       	in	r24, 0x33	; 51
  f2:	81 11       	cpse	r24, r1
  f4:	30 c0       	rjmp	.+96     	; 0x156 <millis+0x78>
	{
		//in the .h file we can have the number of overflows and the number of remaining ticks
		//we put the number of overflows in the static variable plus one for the remaining ticks
		n_ovf = NUMBER_OF_OVFLOWS + 1;
  f6:	a8 ee       	ldi	r26, 0xE8	; 232
  f8:	b3 e0       	ldi	r27, 0x03	; 3
  fa:	0e 94 be 01 	call	0x37c	; 0x37c <__umulhisi3>
  fe:	8b 01       	movw	r16, r22
 100:	9c 01       	movw	r18, r24
 102:	0f 2e       	mov	r0, r31
 104:	ff e0       	ldi	r31, 0x0F	; 15
 106:	36 95       	lsr	r19
 108:	27 95       	ror	r18
 10a:	17 95       	ror	r17
 10c:	07 95       	ror	r16
 10e:	fa 95       	dec	r31
 110:	d1 f7       	brne	.-12     	; 0x106 <millis+0x28>
 112:	f0 2d       	mov	r31, r0
 114:	98 01       	movw	r18, r16
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	3f 4f       	sbci	r19, 0xFF	; 255
 11a:	30 93 65 00 	sts	0x0065, r19
 11e:	20 93 64 00 	sts	0x0064, r18

		//initialize timer0 with 1024 prescaler and activate the timer mode
		TCCR0 = 0x05;
 122:	25 e0       	ldi	r18, 0x05	; 5
 124:	23 bf       	out	0x33, r18	; 51
		//if the number of ovf is 1 meaning there is just the remaining tick
			//make TCNT0=265-REMAINING_TICKS;
		//else TCNT=0 (clear the timer)
		if(n_ovf == 1)
 126:	20 91 64 00 	lds	r18, 0x0064
 12a:	30 91 65 00 	lds	r19, 0x0065
 12e:	21 30       	cpi	r18, 0x01	; 1
 130:	31 05       	cpc	r19, r1
 132:	71 f4       	brne	.+28     	; 0x150 <millis+0x72>
			TCNT0 = 256 - REMAINING_TICKS;
 134:	ab 01       	movw	r20, r22
 136:	bc 01       	movw	r22, r24
 138:	68 94       	set
 13a:	16 f8       	bld	r1, 6
 13c:	76 95       	lsr	r23
 13e:	67 95       	ror	r22
 140:	57 95       	ror	r21
 142:	47 95       	ror	r20
 144:	16 94       	lsr	r1
 146:	d1 f7       	brne	.-12     	; 0x13c <millis+0x5e>
 148:	41 95       	neg	r20
 14a:	42 bf       	out	0x32, r20	; 50

		}

	}

	return TRUE;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	3c c0       	rjmp	.+120    	; 0x1c8 <millis+0xea>
			//make TCNT0=265-REMAINING_TICKS;
		//else TCNT=0 (clear the timer)
		if(n_ovf == 1)
			TCNT0 = 256 - REMAINING_TICKS;
		else
			TCNT0=0;
 150:	12 be       	out	0x32, r1	; 50

		}

	}

	return TRUE;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	39 c0       	rjmp	.+114    	; 0x1c8 <millis+0xea>
			TCNT0=0;

	}
	else // if it's not the first loop 
	{
		if ((TIFR & (1 << TOV0))) // if the overflow flag was set in this tick
 156:	08 b6       	in	r0, 0x38	; 56
 158:	00 fe       	sbrs	r0, 0
 15a:	33 c0       	rjmp	.+102    	; 0x1c2 <millis+0xe4>
		{
			TIFR |= (1<<TOV0); // clear the flag
 15c:	98 b7       	in	r25, 0x38	; 56
 15e:	91 60       	ori	r25, 0x01	; 1
 160:	98 bf       	out	0x38, r25	; 56
			PORTC = (unint8_t)(n_ovf);
 162:	80 91 64 00 	lds	r24, 0x0064
 166:	85 bb       	out	0x15, r24	; 21
			//PORTD= (n_ovf>>8);
			n_ovf--;//decrement the number of overflows left by one static variable.
 168:	40 91 64 00 	lds	r20, 0x0064
 16c:	50 91 65 00 	lds	r21, 0x0065
 170:	41 50       	subi	r20, 0x01	; 1
 172:	51 09       	sbc	r21, r1
 174:	50 93 65 00 	sts	0x0065, r21
 178:	40 93 64 00 	sts	0x0064, r20
			
			if(n_ovf == 0) //if the number of overflows left is 0  
 17c:	41 15       	cp	r20, r1
 17e:	51 05       	cpc	r21, r1
 180:	21 f4       	brne	.+8      	; 0x18a <millis+0xac>
			{
				TCCR0=0;
 182:	13 be       	out	0x33, r1	; 51
				TCNT0=0;
 184:	12 be       	out	0x32, r1	; 50
				
				//because there are no ticks left .. then the time has ended so we return 0
				return FALSE;
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	1f c0       	rjmp	.+62     	; 0x1c8 <millis+0xea>
			}//if there are remaining OVERFLOWS is one .. this means the last flag has some ticks remaining but not all 256 ticks
			else if (n_ovf == 1)
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	51 05       	cpc	r21, r1
 18e:	99 f4       	brne	.+38     	; 0x1b6 <millis+0xd8>
			{
				TCNT0 = 256 - REMAINING_TICKS;// the last ovf we make the TCNT0 = (256 - remaining ticks)
 190:	a8 ee       	ldi	r26, 0xE8	; 232
 192:	b3 e0       	ldi	r27, 0x03	; 3
 194:	0e 94 be 01 	call	0x37c	; 0x37c <__umulhisi3>
 198:	dc 01       	movw	r26, r24
 19a:	cb 01       	movw	r24, r22
 19c:	68 94       	set
 19e:	16 f8       	bld	r1, 6
 1a0:	b6 95       	lsr	r27
 1a2:	a7 95       	ror	r26
 1a4:	97 95       	ror	r25
 1a6:	87 95       	ror	r24
 1a8:	16 94       	lsr	r1
 1aa:	d1 f7       	brne	.-12     	; 0x1a0 <millis+0xc2>
 1ac:	68 2f       	mov	r22, r24
 1ae:	61 95       	neg	r22
 1b0:	62 bf       	out	0x32, r22	; 50

		}

	}

	return TRUE;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	09 c0       	rjmp	.+18     	; 0x1c8 <millis+0xea>
			}//if there are remaining OVERFLOWS is one .. this means the last flag has some ticks remaining but not all 256 ticks
			else if (n_ovf == 1)
			{
				TCNT0 = 256 - REMAINING_TICKS;// the last ovf we make the TCNT0 = (256 - remaining ticks)
			}
			else if (n_ovf > 1)//if there are remaining OVERFLOWS .. just clear the timer to start ticking again
 1b6:	42 30       	cpi	r20, 0x02	; 2
 1b8:	51 05       	cpc	r21, r1
 1ba:	28 f0       	brcs	.+10     	; 0x1c6 <millis+0xe8>
			{
				TCNT0=0;
 1bc:	12 be       	out	0x32, r1	; 50

		}

	}

	return TRUE;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <millis+0xea>
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <millis+0xea>
 1c6:	81 e0       	ldi	r24, 0x01	; 1
}
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	08 95       	ret

000001ce <UART_init>:
		UBBR_value >>= UART_PRECISION_BITS; // round down by just removing the precision bit
	}
	
	//PORTB = UBBR_value; just for testing
	//setting the U2X bit to 1 for double speed asynchronous
	UCSRA = (DOUBLE_SPEED<< U2X);	
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	8b b9       	out	0x0b, r24	; 11
	 * RXEN  = 1/0 Receiver En/Disable
	 * TXEN  = 1/0 Transmitter En/DisEnable
	 * UCSZ2 = 0   For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (TRANSMIT_ENABLE << TXEN)|(RECIEVE_ENABLE<<RXEN) |(TRANSMIT_COMPLETE_INTERRUP<<TXCIE)|(RECEIVE_COMPLETE_INTERRUP<<RXCIE)|(DATA_REGISTER_EMPTY_INTERRUP<<UDRIE);
 1d2:	88 e1       	ldi	r24, 0x18	; 24
 1d4:	8a b9       	out	0x0a, r24	; 10
	 * UPM1:0  = 0 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 
	UCSRC =(1<<URSEL)|(SYNCH_ASYNCH<<UMSEL)|(PARITY<<UPM0)|(STOP_BITS<<USBS)|(DATA_SIZE<<UCSZ0)|(TRANS_SAMPLE_CONFIG<<UCPOL);
 1d6:	86 e8       	ldi	r24, 0x86	; 134
 1d8:	80 bd       	out	0x20, r24	; 32
 	
	//Put the upper part of the UBBR value here (bits 8 to 11)
	UBRRH = (unint8_t)(UBBR_value >> 8);
 1da:	10 bc       	out	0x20, r1	; 32
	//Put the remaining part of the UBBR value here
	UBRRL = (unint8_t)UBBR_value;
 1dc:	87 e6       	ldi	r24, 0x67	; 103
 1de:	89 b9       	out	0x09, r24	; 9
 1e0:	08 95       	ret

000001e2 <UART_sendChr>:
void UART_sendChr(const unint8_t byte)
{
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	#if(DATA_REGISTER_EMPTY_INTERRUP==0) //if the send interrupt is not activated keep the flag polling
		while (BIT_IS_CLEAR(UCSRA,UDRE)){}
 1e2:	5d 9b       	sbis	0x0b, 5	; 11
 1e4:	fe cf       	rjmp	.-4      	; 0x1e2 <UART_sendChr>
	#endif
	
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	
	UDR=byte;
 1e6:	8c b9       	out	0x0c, r24	; 12
 1e8:	08 95       	ret

000001ea <UART_sendStrByMark>:
    return UDR;		
}

/*notice that this function send the string except the null char */
void UART_sendStrByMark(const char *str , unint8_t mark)
{
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	fc 01       	movw	r30, r24
	unint8_t i = 0;
	while(str[i] != mark)
 1f4:	80 81       	ld	r24, Z
 1f6:	86 17       	cp	r24, r22
 1f8:	61 f0       	breq	.+24     	; 0x212 <UART_sendStrByMark+0x28>
 1fa:	d6 2f       	mov	r29, r22
 1fc:	8f 01       	movw	r16, r30
 1fe:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_sendChr(str[i]);
 200:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <UART_sendChr>
		i++;
 204:	cf 5f       	subi	r28, 0xFF	; 255

/*notice that this function send the string except the null char */
void UART_sendStrByMark(const char *str , unint8_t mark)
{
	unint8_t i = 0;
	while(str[i] != mark)
 206:	f8 01       	movw	r30, r16
 208:	ec 0f       	add	r30, r28
 20a:	f1 1d       	adc	r31, r1
 20c:	80 81       	ld	r24, Z
 20e:	8d 13       	cpse	r24, r29
 210:	f7 cf       	rjmp	.-18     	; 0x200 <UART_sendStrByMark+0x16>
	{
		UART_sendChr(str[i]);
		i++;
	}	
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	08 95       	ret

0000021c <is_str_reached>:
	DISABLE_TIMER0;
	
}

unint8_t is_str_reached(char * str, unint8_t length, unint8_t tmp1, unint8_t * tmp)
{
 21c:	fc 01       	movw	r30, r24
	//unint8_t tmp1; //stores the char in UDR then checks whether it's in the word----------------------------
	unint8_t b_found = 0; //determines if the chosen word is reached
	
	if (tmp1 == str[*tmp])//if it matches the corresponding char in the str buffer
 21e:	d9 01       	movw	r26, r18
 220:	9c 91       	ld	r25, X
 222:	df 01       	movw	r26, r30
 224:	a9 0f       	add	r26, r25
 226:	b1 1d       	adc	r27, r1
 228:	8c 91       	ld	r24, X
 22a:	84 13       	cpse	r24, r20
 22c:	08 c0       	rjmp	.+16     	; 0x23e <is_str_reached+0x22>
	{

		*tmp = *tmp + 1; //move to the next position
 22e:	9f 5f       	subi	r25, 0xFF	; 255
 230:	f9 01       	movw	r30, r18
 232:	90 83       	st	Z, r25
			
		if (*tmp == length) // if the word is reached .. then set the flag
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	96 17       	cp	r25, r22
 238:	69 f0       	breq	.+26     	; 0x254 <is_str_reached+0x38>
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	08 95       	ret
	}
	else //if the character is different then the word in the buffer is wrong
	{
		//check if the char in the tmp in tmp_str position is the same as the first character in str
		//if so then store it in the first position and then make tmp = 1
		if (tmp1 == str[0])
 23e:	80 81       	ld	r24, Z
 240:	84 13       	cpse	r24, r20
 242:	05 c0       	rjmp	.+10     	; 0x24e <is_str_reached+0x32>
		{
			*tmp = 1;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	d9 01       	movw	r26, r18
 248:	8c 93       	st	X, r24
}

unint8_t is_str_reached(char * str, unint8_t length, unint8_t tmp1, unint8_t * tmp)
{
	//unint8_t tmp1; //stores the char in UDR then checks whether it's in the word----------------------------
	unint8_t b_found = 0; //determines if the chosen word is reached
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	08 95       	ret
		{
			*tmp = 1;
		}
		else//if not the same as the first char in str position then omit it and start saving again from the beginning
		{
			*tmp = 0;
 24e:	f9 01       	movw	r30, r18
 250:	10 82       	st	Z, r1
}

unint8_t is_str_reached(char * str, unint8_t length, unint8_t tmp1, unint8_t * tmp)
{
	//unint8_t tmp1; //stores the char in UDR then checks whether it's in the word----------------------------
	unint8_t b_found = 0; //determines if the chosen word is reached
 252:	80 e0       	ldi	r24, 0x00	; 0

	}
		
	
	return b_found;
}
 254:	08 95       	ret

00000256 <get_str_until>:
	DISABLE_TIMER0;
	return event_flag;
}

unint8_t get_str_until(char * dest_str, char * afterstr, unint16_t delay_time)
{
 256:	4f 92       	push	r4
 258:	5f 92       	push	r5
 25a:	6f 92       	push	r6
 25c:	7f 92       	push	r7
 25e:	8f 92       	push	r8
 260:	9f 92       	push	r9
 262:	af 92       	push	r10
 264:	bf 92       	push	r11
 266:	cf 92       	push	r12
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	6f 97       	sbiw	r28, 0x1f	; 31
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	de bf       	out	0x3e, r29	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	cd bf       	out	0x3d, r28	; 61
 286:	5c 01       	movw	r10, r24
 288:	6b 01       	movw	r12, r22
 28a:	7a 01       	movw	r14, r20
	unint8_t get_flag = 0;
	char str[30] = {0};
 28c:	fe 01       	movw	r30, r28
 28e:	31 96       	adiw	r30, 0x01	; 1
 290:	8e e1       	ldi	r24, 0x1E	; 30
 292:	df 01       	movw	r26, r30
 294:	1d 92       	st	X+, r1
 296:	8a 95       	dec	r24
 298:	e9 f7       	brne	.-6      	; 0x294 <get_str_until+0x3e>
	unint8_t i = 0;
	unint8_t after_str_length = strlen(afterstr);
 29a:	fb 01       	movw	r30, r22
 29c:	01 90       	ld	r0, Z+
 29e:	00 20       	and	r0, r0
 2a0:	e9 f7       	brne	.-6      	; 0x29c <get_str_until+0x46>
 2a2:	31 97       	sbiw	r30, 0x01	; 1
 2a4:	e6 1b       	sub	r30, r22
 2a6:	f7 0b       	sbc	r31, r23
 2a8:	5e 2e       	mov	r5, r30
	unint8_t tmp = 0; //used for deciding the next position in the tmp_str for storing the received char from UART
 2aa:	1f 8e       	std	Y+31, r1	; 0x1f

unint8_t get_str_until(char * dest_str, char * afterstr, unint16_t delay_time)
{
	unint8_t get_flag = 0;
	char str[30] = {0};
	unint8_t i = 0;
 2ac:	00 e0       	ldi	r16, 0x00	; 0
	return event_flag;
}

unint8_t get_str_until(char * dest_str, char * afterstr, unint16_t delay_time)
{
	unint8_t get_flag = 0;
 2ae:	10 e0       	ldi	r17, 0x00	; 0
			{
				
				if (is_str_reached(afterstr, after_str_length, str[i], &tmp))//check if a received char is the last char in str
				{
					get_flag = 1; //set the flag indicating after_str_reached
					str[i - (after_str_length - 1)] = 0;//remove afterstr from str[30] by ending the string(putting
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	4c 01       	movw	r8, r24
 2b6:	8e 1a       	sub	r8, r30
 2b8:	91 08       	sbc	r9, r1
					//'\0' at the first address of afterstr stored in str[30]
					strcpy(dest_str, str);
					dest_str[i - (after_str_length - 1)] = 0;
					get_flag = 1;
 2ba:	44 24       	eor	r4, r4
 2bc:	43 94       	inc	r4
	char str[30] = {0};
	unint8_t i = 0;
	unint8_t after_str_length = strlen(afterstr);
	unint8_t tmp = 0; //used for deciding the next position in the tmp_str for storing the received char from UART
	
	while((millis(delay_time)) && (get_flag == 0))// if the first word is reached // then start getting the world
 2be:	30 c0       	rjmp	.+96     	; 0x320 <get_str_until+0xca>
	{

		if (BIT_IS_SET(UCSRA, RXC)) // if receive flag is activated
 2c0:	5f 9b       	sbis	0x0b, 7	; 11
 2c2:	2e c0       	rjmp	.+92     	; 0x320 <get_str_until+0xca>
		{
			str[i] = UDR; // receive the byte in the tmp_str buffer on the specified address
 2c4:	60 2e       	mov	r6, r16
 2c6:	71 2c       	mov	r7, r1
 2c8:	4c b1       	in	r20, 0x0c	; 12
 2ca:	e1 e0       	ldi	r30, 0x01	; 1
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	ec 0f       	add	r30, r28
 2d0:	fd 1f       	adc	r31, r29
 2d2:	e6 0d       	add	r30, r6
 2d4:	f7 1d       	adc	r31, r7
 2d6:	40 83       	st	Z, r20
			
			if (afterstr == NULL)
 2d8:	c1 14       	cp	r12, r1
 2da:	d1 04       	cpc	r13, r1
 2dc:	11 f4       	brne	.+4      	; 0x2e2 <get_str_until+0x8c>
			{
				i++;
 2de:	0f 5f       	subi	r16, 0xFF	; 255
 2e0:	1f c0       	rjmp	.+62     	; 0x320 <get_str_until+0xca>
			}
			else
			{
				
				if (is_str_reached(afterstr, after_str_length, str[i], &tmp))//check if a received char is the last char in str
 2e2:	9e 01       	movw	r18, r28
 2e4:	21 5e       	subi	r18, 0xE1	; 225
 2e6:	3f 4f       	sbci	r19, 0xFF	; 255
 2e8:	65 2d       	mov	r22, r5
 2ea:	c6 01       	movw	r24, r12
 2ec:	0e 94 0e 01 	call	0x21c	; 0x21c <is_str_reached>
 2f0:	88 23       	and	r24, r24
 2f2:	a9 f0       	breq	.+42     	; 0x31e <get_str_until+0xc8>
				{
					get_flag = 1; //set the flag indicating after_str_reached
					str[i - (after_str_length - 1)] = 0;//remove afterstr from str[30] by ending the string(putting
 2f4:	68 0c       	add	r6, r8
 2f6:	79 1c       	adc	r7, r9
 2f8:	e1 e0       	ldi	r30, 0x01	; 1
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	ec 0f       	add	r30, r28
 2fe:	fd 1f       	adc	r31, r29
 300:	e6 0d       	add	r30, r6
 302:	f7 1d       	adc	r31, r7
 304:	10 82       	st	Z, r1
					//'\0' at the first address of afterstr stored in str[30]
					strcpy(dest_str, str);
 306:	be 01       	movw	r22, r28
 308:	6f 5f       	subi	r22, 0xFF	; 255
 30a:	7f 4f       	sbci	r23, 0xFF	; 255
 30c:	c5 01       	movw	r24, r10
 30e:	0e 94 cd 01 	call	0x39a	; 0x39a <strcpy>
					dest_str[i - (after_str_length - 1)] = 0;
 312:	f5 01       	movw	r30, r10
 314:	e6 0d       	add	r30, r6
 316:	f7 1d       	adc	r31, r7
 318:	10 82       	st	Z, r1
					get_flag = 1;
 31a:	14 2d       	mov	r17, r4
 31c:	01 c0       	rjmp	.+2      	; 0x320 <get_str_until+0xca>
				}
				else
				{
					i++;
 31e:	0f 5f       	subi	r16, 0xFF	; 255
	char str[30] = {0};
	unint8_t i = 0;
	unint8_t after_str_length = strlen(afterstr);
	unint8_t tmp = 0; //used for deciding the next position in the tmp_str for storing the received char from UART
	
	while((millis(delay_time)) && (get_flag == 0))// if the first word is reached // then start getting the world
 320:	c7 01       	movw	r24, r14
 322:	0e 94 6f 00 	call	0xde	; 0xde <millis>
 326:	88 23       	and	r24, r24
 328:	11 f0       	breq	.+4      	; 0x32e <get_str_until+0xd8>
 32a:	11 23       	and	r17, r17
 32c:	49 f2       	breq	.-110    	; 0x2c0 <get_str_until+0x6a>
			}
			
		}
		
	}
	DISABLE_TIMER0; //disable timer0 . responsible for millis function
 32e:	13 be       	out	0x33, r1	; 51
 330:	12 be       	out	0x32, r1	; 50
 332:	10 92 65 00 	sts	0x0065, r1
 336:	10 92 64 00 	sts	0x0064, r1
	
	if (afterstr == NULL)
 33a:	cd 28       	or	r12, r13
 33c:	39 f4       	brne	.+14     	; 0x34c <get_str_until+0xf6>
	{
		strcpy(dest_str, str);
 33e:	be 01       	movw	r22, r28
 340:	6f 5f       	subi	r22, 0xFF	; 255
 342:	7f 4f       	sbci	r23, 0xFF	; 255
 344:	c5 01       	movw	r24, r10
 346:	0e 94 cd 01 	call	0x39a	; 0x39a <strcpy>
		get_flag = 1;
 34a:	11 e0       	ldi	r17, 0x01	; 1
	}
	
	return get_flag;
	
}
 34c:	81 2f       	mov	r24, r17
 34e:	6f 96       	adiw	r28, 0x1f	; 31
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	df 90       	pop	r13
 368:	cf 90       	pop	r12
 36a:	bf 90       	pop	r11
 36c:	af 90       	pop	r10
 36e:	9f 90       	pop	r9
 370:	8f 90       	pop	r8
 372:	7f 90       	pop	r7
 374:	6f 90       	pop	r6
 376:	5f 90       	pop	r5
 378:	4f 90       	pop	r4
 37a:	08 95       	ret

0000037c <__umulhisi3>:
 37c:	a2 9f       	mul	r26, r18
 37e:	b0 01       	movw	r22, r0
 380:	b3 9f       	mul	r27, r19
 382:	c0 01       	movw	r24, r0
 384:	a3 9f       	mul	r26, r19
 386:	70 0d       	add	r23, r0
 388:	81 1d       	adc	r24, r1
 38a:	11 24       	eor	r1, r1
 38c:	91 1d       	adc	r25, r1
 38e:	b2 9f       	mul	r27, r18
 390:	70 0d       	add	r23, r0
 392:	81 1d       	adc	r24, r1
 394:	11 24       	eor	r1, r1
 396:	91 1d       	adc	r25, r1
 398:	08 95       	ret

0000039a <strcpy>:
 39a:	fb 01       	movw	r30, r22
 39c:	dc 01       	movw	r26, r24
 39e:	01 90       	ld	r0, Z+
 3a0:	0d 92       	st	X+, r0
 3a2:	00 20       	and	r0, r0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <strcpy+0x4>
 3a6:	08 95       	ret

000003a8 <_exit>:
 3a8:	f8 94       	cli

000003aa <__stop_program>:
 3aa:	ff cf       	rjmp	.-2      	; 0x3aa <__stop_program>
