
esp_motors_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  00002220  000022b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800108  00800108  0000235c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000235c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000238c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000418  00000000  00000000  000023c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004958  00000000  00000000  000027e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001086  00000000  00000000  00007138  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000146f  00000000  00000000  000081be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e40  00000000  00000000  00009630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c4a  00000000  00000000  0000a470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f9f  00000000  00000000  0000b0ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000500  00000000  00000000  0000f059  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 16 09 	jmp	0x122c	; 0x122c <__vector_11>
      30:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__vector_12>
      34:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 b8 0e 	jmp	0x1d70	; 0x1d70 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 32       	cpi	r26, 0x2B	; 43
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6a 05 	call	0xad4	; 0xad4 <main>
      8a:	0c 94 0e 11 	jmp	0x221c	; 0x221c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_set_pin_dir>:
void dio_set_pin_dir(uint8_t a_pin_no,uint8_t a_pin_dir)
{
	//determine the port that was addressed from the dio_pin number 
	uint8_t pin_port= a_pin_no / NUM_PIN_PER_PORT;
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
      92:	e8 2f       	mov	r30, r24
      94:	e6 95       	lsr	r30
      96:	e6 95       	lsr	r30
      98:	e6 95       	lsr	r30
      9a:	87 70       	andi	r24, 0x07	; 7
	
	//of the direction is either input or output configure it
	if (a_pin_dir != DIO_PULLUP)
      9c:	62 30       	cpi	r22, 0x02	; 2
      9e:	e1 f0       	breq	.+56     	; 0xd8 <dio_set_pin_dir+0x46>
	{
		//put this direction in the specific pin_no in the specific port 
		ASSIGN_BIT(*(DDR_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, 
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	9f 01       	movw	r18, r30
      a4:	22 0f       	add	r18, r18
      a6:	33 1f       	adc	r19, r19
      a8:	e2 0f       	add	r30, r18
      aa:	f3 1f       	adc	r31, r19
      ac:	f1 95       	neg	r31
      ae:	e1 95       	neg	r30
      b0:	f1 09       	sbc	r31, r1
      b2:	22 ad       	ldd	r18, Z+58	; 0x3a
      b4:	41 e0       	ldi	r20, 0x01	; 1
      b6:	50 e0       	ldi	r21, 0x00	; 0
      b8:	08 2e       	mov	r0, r24
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <dio_set_pin_dir+0x2e>
      bc:	44 0f       	add	r20, r20
      be:	55 1f       	adc	r21, r21
      c0:	0a 94       	dec	r0
      c2:	e2 f7       	brpl	.-8      	; 0xbc <dio_set_pin_dir+0x2a>
      c4:	94 2f       	mov	r25, r20
      c6:	90 95       	com	r25
      c8:	92 23       	and	r25, r18
      ca:	01 c0       	rjmp	.+2      	; 0xce <dio_set_pin_dir+0x3c>
      cc:	66 0f       	add	r22, r22
      ce:	8a 95       	dec	r24
      d0:	ea f7       	brpl	.-6      	; 0xcc <dio_set_pin_dir+0x3a>
      d2:	69 2b       	or	r22, r25
      d4:	62 af       	std	Z+58, r22	; 0x3a
      d6:	08 95       	ret
		             a_pin_dir);
	}
	else //if pull up then make it input and put high to the PORT reg
	{ 
		// assign pin as input
		ASSIGN_BIT(*(DDR_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, 0); 
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	9f 01       	movw	r18, r30
      dc:	22 0f       	add	r18, r18
      de:	33 1f       	adc	r19, r19
      e0:	e2 0f       	add	r30, r18
      e2:	f3 1f       	adc	r31, r19
      e4:	f1 95       	neg	r31
      e6:	e1 95       	neg	r30
      e8:	f1 09       	sbc	r31, r1
      ea:	42 ad       	ldd	r20, Z+58	; 0x3a
      ec:	21 e0       	ldi	r18, 0x01	; 1
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	b9 01       	movw	r22, r18
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <dio_set_pin_dir+0x66>
      f4:	66 0f       	add	r22, r22
      f6:	77 1f       	adc	r23, r23
      f8:	8a 95       	dec	r24
      fa:	e2 f7       	brpl	.-8      	; 0xf4 <dio_set_pin_dir+0x62>
      fc:	cb 01       	movw	r24, r22
      fe:	96 2f       	mov	r25, r22
     100:	90 95       	com	r25
     102:	29 2f       	mov	r18, r25
     104:	24 23       	and	r18, r20
     106:	22 af       	std	Z+58, r18	; 0x3a
		// put 1 to port pin to make it pull up
		ASSIGN_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, 1); 
     108:	23 ad       	ldd	r18, Z+59	; 0x3b
     10a:	92 23       	and	r25, r18
     10c:	89 2b       	or	r24, r25
     10e:	83 af       	std	Z+59, r24	; 0x3b
     110:	08 95       	ret

00000112 <dio_set_pin_val>:
	return (GET_BIT(*(PIN_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port));
}


void dio_set_pin_val(uint8_t a_pin_no, uint8_t PinVal)
{
     112:	96 2f       	mov	r25, r22
	//determine the port that was addressed from the dio_pin number
	uint8_t pin_port = a_pin_no / NUM_PIN_PER_PORT;
     114:	38 2f       	mov	r19, r24
     116:	36 95       	lsr	r19
     118:	36 95       	lsr	r19
     11a:	36 95       	lsr	r19
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
	
	//assign the value to the specific pin_no in the specific port 
	ASSIGN_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, PinVal);
     11c:	e3 2f       	mov	r30, r19
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	af 01       	movw	r20, r30
     122:	44 0f       	add	r20, r20
     124:	55 1f       	adc	r21, r21
     126:	e4 0f       	add	r30, r20
     128:	f5 1f       	adc	r31, r21
     12a:	f1 95       	neg	r31
     12c:	e1 95       	neg	r30
     12e:	f1 09       	sbc	r31, r1
     130:	63 ad       	ldd	r22, Z+59	; 0x3b
void dio_set_pin_val(uint8_t a_pin_no, uint8_t PinVal)
{
	//determine the port that was addressed from the dio_pin number
	uint8_t pin_port = a_pin_no / NUM_PIN_PER_PORT;
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
     132:	33 0f       	add	r19, r19
     134:	33 0f       	add	r19, r19
     136:	33 0f       	add	r19, r19
     138:	83 1b       	sub	r24, r19
	
	//assign the value to the specific pin_no in the specific port 
	ASSIGN_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, PinVal);
     13a:	21 e0       	ldi	r18, 0x01	; 1
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	08 2e       	mov	r0, r24
     140:	02 c0       	rjmp	.+4      	; 0x146 <dio_set_pin_val+0x34>
     142:	22 0f       	add	r18, r18
     144:	33 1f       	adc	r19, r19
     146:	0a 94       	dec	r0
     148:	e2 f7       	brpl	.-8      	; 0x142 <dio_set_pin_val+0x30>
     14a:	20 95       	com	r18
     14c:	26 23       	and	r18, r22
     14e:	69 2f       	mov	r22, r25
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	02 c0       	rjmp	.+4      	; 0x158 <dio_set_pin_val+0x46>
     154:	66 0f       	add	r22, r22
     156:	77 1f       	adc	r23, r23
     158:	8a 95       	dec	r24
     15a:	e2 f7       	brpl	.-8      	; 0x154 <dio_set_pin_val+0x42>
     15c:	62 2b       	or	r22, r18
     15e:	63 af       	std	Z+59, r22	; 0x3b
     160:	08 95       	ret

00000162 <dio_togg_pin>:
}

void dio_togg_pin(uint8_t a_pin_no)
{
	//determine the port that was addressed from the dio_pin number
	uint8_t pin_port = a_pin_no / NUM_PIN_PER_PORT;
     162:	28 2f       	mov	r18, r24
     164:	26 95       	lsr	r18
     166:	26 95       	lsr	r18
     168:	26 95       	lsr	r18
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
	
	//toggle the specific pin_no in the specific port 
	TOGGLE_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port);
     16a:	e2 2f       	mov	r30, r18
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	af 01       	movw	r20, r30
     170:	44 0f       	add	r20, r20
     172:	55 1f       	adc	r21, r21
     174:	e4 0f       	add	r30, r20
     176:	f5 1f       	adc	r31, r21
     178:	f1 95       	neg	r31
     17a:	e1 95       	neg	r30
     17c:	f1 09       	sbc	r31, r1
     17e:	33 ad       	ldd	r19, Z+59	; 0x3b
void dio_togg_pin(uint8_t a_pin_no)
{
	//determine the port that was addressed from the dio_pin number
	uint8_t pin_port = a_pin_no / NUM_PIN_PER_PORT;
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
     180:	22 0f       	add	r18, r18
     182:	22 0f       	add	r18, r18
     184:	22 0f       	add	r18, r18
     186:	82 1b       	sub	r24, r18
     188:	28 2f       	mov	r18, r24
	
	//toggle the specific pin_no in the specific port 
	TOGGLE_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port);
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	02 c0       	rjmp	.+4      	; 0x194 <dio_togg_pin+0x32>
     190:	88 0f       	add	r24, r24
     192:	99 1f       	adc	r25, r25
     194:	2a 95       	dec	r18
     196:	e2 f7       	brpl	.-8      	; 0x190 <dio_togg_pin+0x2e>
     198:	83 27       	eor	r24, r19
     19a:	83 af       	std	Z+59, r24	; 0x3b
     19c:	08 95       	ret

0000019e <uart_rx_handler>:
uint8_t rx_end_flag = 0; // 0:indicates that it has ended ... 1: indicates that it's starting
volatile int8_t buffer[10];

void uart_rx_handler(void)
{
	rx_end_flag = 1;
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	80 93 08 01 	sts	0x0108, r24
	//5- if the string counter exceeded 10 and the end wasn't reached yet put the flag into -1 .. and the the string counter = -1
	//6- if the end is reached, if the flag = 0 then: the flag = 1, store the resulting string in the queue and clear the counter
	// .. otherwise (if the flag isn't 0) . then don't change any thing
	//any time it receives any thin it clears the timer OVF counter
	//dio_set_val(DIO_PIN31, DIO_HIGH);
	temp = UDR;
     1a4:	8c b1       	in	r24, 0x0c	; 12
     1a6:	80 93 0d 01 	sts	0x010D, r24
	
	if (receive_flag == -2) //if it's the first char to receive
     1aa:	80 91 67 00 	lds	r24, 0x0067
     1ae:	8e 3f       	cpi	r24, 0xFE	; 254
     1b0:	89 f4       	brne	.+34     	; 0x1d4 <uart_rx_handler+0x36>
	{
		millis(3);// activate the timer at the beginning of the reception
     1b2:	83 e0       	ldi	r24, 0x03	; 3
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <millis>
		receive_flag = -1; // make the flag in state 2(indicating currently receiving but didn't find the begin char yet
     1ba:	8f ef       	ldi	r24, 0xFF	; 255
     1bc:	80 93 67 00 	sts	0x0067, r24
		
		if (temp == '{') // if it's the begin character
     1c0:	80 91 0d 01 	lds	r24, 0x010D
     1c4:	8b 37       	cpi	r24, 0x7B	; 123
     1c6:	09 f0       	breq	.+2      	; 0x1ca <uart_rx_handler+0x2c>
     1c8:	50 c0       	rjmp	.+160    	; 0x26a <uart_rx_handler+0xcc>
		{
			//make the counter = 0;  and the flag = 0 indicating storing the next data coming
			receive_flag = 0;
     1ca:	10 92 67 00 	sts	0x0067, r1
			string_counter = 0;
     1ce:	10 92 66 00 	sts	0x0066, r1
     1d2:	08 95       	ret
		}
	}
	else if (receive_flag == -1) // if it's receiving but didn't find the char yet
     1d4:	80 91 67 00 	lds	r24, 0x0067
     1d8:	8f 3f       	cpi	r24, 0xFF	; 255
     1da:	51 f4       	brne	.+20     	; 0x1f0 <uart_rx_handler+0x52>
	{
			
		if (temp == '{') // if it's the begin character
     1dc:	80 91 0d 01 	lds	r24, 0x010D
     1e0:	8b 37       	cpi	r24, 0x7B	; 123
     1e2:	09 f0       	breq	.+2      	; 0x1e6 <uart_rx_handler+0x48>
     1e4:	42 c0       	rjmp	.+132    	; 0x26a <uart_rx_handler+0xcc>
		{
			//make the counter = 0;  and the flag = 0 indicating storing the next data coming
			receive_flag = 0;
     1e6:	10 92 67 00 	sts	0x0067, r1
			string_counter = 0;
     1ea:	10 92 66 00 	sts	0x0066, r1
     1ee:	08 95       	ret
		}
				
	}
	else if (receive_flag == 0) // if it has found the begin character .. then the next char holds the request type
     1f0:	80 91 67 00 	lds	r24, 0x0067
     1f4:	81 11       	cpse	r24, r1
     1f6:	08 c0       	rjmp	.+16     	; 0x208 <uart_rx_handler+0x6a>
	{
		req_type = temp; // store the next char in the req_type and
     1f8:	80 91 0d 01 	lds	r24, 0x010D
     1fc:	80 93 0b 01 	sts	0x010B, r24
		receive_flag = 1;//update the state to start putting the data in the buffer
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	80 93 67 00 	sts	0x0067, r24
     206:	08 95       	ret
	}
	else if (receive_flag == 1)// //if the first char is read(holds the request type)
     208:	80 91 67 00 	lds	r24, 0x0067
     20c:	81 30       	cpi	r24, 0x01	; 1
     20e:	69 f5       	brne	.+90     	; 0x26a <uart_rx_handler+0xcc>
	{
				
		if (temp == '}') // if the next char is the terminating char
     210:	80 91 0d 01 	lds	r24, 0x010D
     214:	8d 37       	cpi	r24, 0x7D	; 125
     216:	89 f4       	brne	.+34     	; 0x23a <uart_rx_handler+0x9c>
		{
				
			buffer[string_counter] = 0; // put the null at the end of the received chars
     218:	e0 91 66 00 	lds	r30, 0x0066
     21c:	0e 2e       	mov	r0, r30
     21e:	00 0c       	add	r0, r0
     220:	ff 0b       	sbc	r31, r31
     222:	e8 5e       	subi	r30, 0xE8	; 232
     224:	fe 4f       	sbci	r31, 0xFE	; 254
     226:	10 82       	st	Z, r1
			//change the state to -1 indicating that it has ended .. but not sure if the stream of received data has ended or not
			//it's assigned to -2 in the millis function

			receive_flag = -1;
     228:	8f ef       	ldi	r24, 0xFF	; 255
     22a:	80 93 67 00 	sts	0x0067, r24
				
			//TODO: allocate an array in the size of string_counter and store the string in it and pass it to the queue
			//get the counter to the initial state
			string_counter = -1;
     22e:	80 93 66 00 	sts	0x0066, r24
			//put the str reached flag to 1
			str_reached = TRUE;
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	80 93 0c 01 	sts	0x010C, r24
     238:	08 95       	ret
		}
		else
		{
			//keep storing the incoming chars into the buffer .. increment the buffer counter
			buffer[string_counter] = temp;
     23a:	e0 91 66 00 	lds	r30, 0x0066
     23e:	0e 2e       	mov	r0, r30
     240:	00 0c       	add	r0, r0
     242:	ff 0b       	sbc	r31, r31
     244:	80 91 0d 01 	lds	r24, 0x010D
     248:	e8 5e       	subi	r30, 0xE8	; 232
     24a:	fe 4f       	sbci	r31, 0xFE	; 254
     24c:	80 83       	st	Z, r24
			string_counter++ ;
     24e:	80 91 66 00 	lds	r24, 0x0066
     252:	8f 5f       	subi	r24, 0xFF	; 255
     254:	80 93 66 00 	sts	0x0066, r24
				
			if(string_counter > 10) // if it exceeded its limits .. then this is a false operation
     258:	80 91 66 00 	lds	r24, 0x0066
     25c:	8b 30       	cpi	r24, 0x0B	; 11
     25e:	2c f0       	brlt	.+10     	; 0x26a <uart_rx_handler+0xcc>
			{
				string_counter = -1;
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	80 93 66 00 	sts	0x0066, r24
				receive_flag = -1; // not -2 because it's still receiving
     266:	80 93 67 00 	sts	0x0067, r24
     26a:	08 95       	ret

0000026c <turn_right>:
void error_alarm ();

void turn_right()
{
	//PORTB = 0b00000110; // the first two bits for the right motor .. the second two bits for the left motor
	DIO_SET_VAL(L_FORWARD, DIO_LOW);
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	8a e0       	ldi	r24, 0x0A	; 10
     270:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_BACKWARD, DIO_HIGH);
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	8b e0       	ldi	r24, 0x0B	; 11
     278:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(R_FORWARD, DIO_HIGH);
     27c:	61 e0       	ldi	r22, 0x01	; 1
     27e:	88 e0       	ldi	r24, 0x08	; 8
     280:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(R_BACKWARD, DIO_LOW);
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	89 e0       	ldi	r24, 0x09	; 9
     288:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
     28c:	08 95       	ret

0000028e <move_backward>:
	DIO_SET_VAL(L_BACKWARD, DIO_LOW);
}

void move_backward()
{
	DIO_SET_VAL(R_FORWARD, DIO_LOW);
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	88 e0       	ldi	r24, 0x08	; 8
     292:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(R_BACKWARD, DIO_HIGH);
     296:	61 e0       	ldi	r22, 0x01	; 1
     298:	89 e0       	ldi	r24, 0x09	; 9
     29a:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_FORWARD, DIO_LOW);
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	8a e0       	ldi	r24, 0x0A	; 10
     2a2:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_BACKWARD, DIO_HIGH);
     2a6:	61 e0       	ldi	r22, 0x01	; 1
     2a8:	8b e0       	ldi	r24, 0x0B	; 11
     2aa:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
     2ae:	08 95       	ret

000002b0 <turn_left>:
}

void turn_left()
{
	DIO_SET_VAL(R_FORWARD, DIO_HIGH);
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	88 e0       	ldi	r24, 0x08	; 8
     2b4:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(R_BACKWARD, DIO_LOW);
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	89 e0       	ldi	r24, 0x09	; 9
     2bc:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_FORWARD, DIO_LOW);
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	8a e0       	ldi	r24, 0x0A	; 10
     2c4:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_BACKWARD, DIO_HIGH);
     2c8:	61 e0       	ldi	r22, 0x01	; 1
     2ca:	8b e0       	ldi	r24, 0x0B	; 11
     2cc:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
     2d0:	08 95       	ret

000002d2 <motors_init>:
}

void  motors_init()
{
	DDRB = 0x0f;
     2d2:	8f e0       	ldi	r24, 0x0F	; 15
     2d4:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;
     2d6:	18 ba       	out	0x18, r1	; 24
	DIO_SET_VAL(R_FORWARD, DIO_OUTPUT); //RF
     2d8:	61 e0       	ldi	r22, 0x01	; 1
     2da:	88 e0       	ldi	r24, 0x08	; 8
     2dc:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(R_BACKWARD, DIO_OUTPUT); //RB
     2e0:	61 e0       	ldi	r22, 0x01	; 1
     2e2:	89 e0       	ldi	r24, 0x09	; 9
     2e4:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_FORWARD, DIO_OUTPUT); //LF
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	8a e0       	ldi	r24, 0x0A	; 10
     2ec:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_BACKWARD, DIO_OUTPUT); //LB
     2f0:	61 e0       	ldi	r22, 0x01	; 1
     2f2:	8b e0       	ldi	r24, 0x0B	; 11
     2f4:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	
	pwm_init(PWM1 || PWM2, 1000);
     2f8:	68 ee       	ldi	r22, 0xE8	; 232
     2fa:	73 e0       	ldi	r23, 0x03	; 3
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <pwm_init>
	pwm_start(PWM1 || PWM2);
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	0e 94 33 0c 	call	0x1866	; 0x1866 <pwm_start>
	pwm_setDuty(PWM1 || PWM2, 80);
     308:	60 e5       	ldi	r22, 0x50	; 80
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <pwm_setDuty>
     310:	08 95       	ret

00000312 <store_data>:
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================

void store_data()
{
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
	if (list->size < 4) //maximum number of queued requests = 5
     31a:	e0 91 16 01 	lds	r30, 0x0116
     31e:	f0 91 17 01 	lds	r31, 0x0117
     322:	84 81       	ldd	r24, Z+4	; 0x04
     324:	95 81       	ldd	r25, Z+5	; 0x05
     326:	04 97       	sbiw	r24, 0x04	; 4
     328:	88 f5       	brcc	.+98     	; 0x38c <store_data+0x7a>
		// whenever the data that is being pointed to(buffer in this case) changes .. the node data in the queue will
		//change automatically despite the fact that we didn't want that .. so the right move is
		//to not but the pointer point to the buffer but instead copy the buffer data to the pointer and then pass the pointer
		//array instead of a pointer because in this time th element structure itself is going to contain the actual
		//data rather than a pointer to this data and when you push it you're ...
		e_ptr->str = malloc(strlen(buffer) + 1);
     32a:	00 91 71 00 	lds	r16, 0x0071
     32e:	10 91 72 00 	lds	r17, 0x0072
     332:	c8 e1       	ldi	r28, 0x18	; 24
     334:	d1 e0       	ldi	r29, 0x01	; 1
     336:	fe 01       	movw	r30, r28
     338:	01 90       	ld	r0, Z+
     33a:	00 20       	and	r0, r0
     33c:	e9 f7       	brne	.-6      	; 0x338 <store_data+0x26>
     33e:	cf 01       	movw	r24, r30
     340:	88 51       	subi	r24, 0x18	; 24
     342:	91 40       	sbci	r25, 0x01	; 1
     344:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <malloc>
     348:	f8 01       	movw	r30, r16
     34a:	91 83       	std	Z+1, r25	; 0x01
     34c:	80 83       	st	Z, r24
		memcpy(e_ptr->str, buffer, strlen(buffer) + 1);
     34e:	09 90       	ld	r0, Y+
     350:	00 20       	and	r0, r0
     352:	e9 f7       	brne	.-6      	; 0x34e <store_data+0x3c>
     354:	e0 91 71 00 	lds	r30, 0x0071
     358:	f0 91 72 00 	lds	r31, 0x0072
     35c:	ae 01       	movw	r20, r28
     35e:	48 51       	subi	r20, 0x18	; 24
     360:	51 40       	sbci	r21, 0x01	; 1
     362:	68 e1       	ldi	r22, 0x18	; 24
     364:	71 e0       	ldi	r23, 0x01	; 1
     366:	80 81       	ld	r24, Z
     368:	91 81       	ldd	r25, Z+1	; 0x01
     36a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <memcpy>
		e_ptr->request_type = req_type;
     36e:	60 91 71 00 	lds	r22, 0x0071
     372:	70 91 72 00 	lds	r23, 0x0072
     376:	80 91 0b 01 	lds	r24, 0x010B
     37a:	fb 01       	movw	r30, r22
     37c:	82 83       	std	Z+2, r24	; 0x02
		push(list, e_ptr, sizeof(element_t));// push the request in the Queue
     37e:	43 e0       	ldi	r20, 0x03	; 3
     380:	80 91 16 01 	lds	r24, 0x0116
     384:	90 91 17 01 	lds	r25, 0x0117
     388:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <push>
		UART_sendStrByMark("\r\n", 0);
		#endif
	}


}
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	1f 91       	pop	r17
     392:	0f 91       	pop	r16
     394:	08 95       	ret

00000396 <timer0_ovf_handler>:
		
}

void timer0_ovf_handler()
{	
	if (receive_flag != -2) // timer is working for a received request
     396:	80 91 67 00 	lds	r24, 0x0067
     39a:	8e 3f       	cpi	r24, 0xFE	; 254
     39c:	21 f1       	breq	.+72     	; 0x3e6 <timer0_ovf_handler+0x50>
	{
		//if it's still receiving then clear the flag .. and after 3 ms check again and if the flag is still 0 then it means that
		//it it's not receiving any more
		if (rx_end_flag == 1)             
     39e:	80 91 08 01 	lds	r24, 0x0108
     3a2:	81 30       	cpi	r24, 0x01	; 1
     3a4:	81 f4       	brne	.+32     	; 0x3c6 <timer0_ovf_handler+0x30>
		{
			rx_end_flag = 0;              
     3a6:	10 92 08 01 	sts	0x0108, r1
			millis_reset_tmr(3);          
     3aa:	83 e0       	ldi	r24, 0x03	; 3
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 cc 09 	call	0x1398	; 0x1398 <millis_reset_tmr>
			counter++ ;                   
     3b2:	80 91 09 01 	lds	r24, 0x0109
     3b6:	90 91 0a 01 	lds	r25, 0x010A
     3ba:	01 96       	adiw	r24, 0x01	; 1
     3bc:	90 93 0a 01 	sts	0x010A, r25
     3c0:	80 93 09 01 	sts	0x0109, r24
     3c4:	08 95       	ret
		}
		else if (rx_end_flag == 0) // if it's zero then there hasn't been any UART receive operation for the last 5 millis which means
     3c6:	81 11       	cpse	r24, r1
     3c8:	0e c0       	rjmp	.+28     	; 0x3e6 <timer0_ovf_handler+0x50>
		{
			//int8_t arr[10];
			//stop the timer
			millis_disable_tmr();
     3ca:	0e 94 c5 09 	call	0x138a	; 0x138a <millis_disable_tmr>
			//DISABLE_TIMER0;
			//put the receive flag to -2 indicating reception process has stopped
			receive_flag = -2; //default value
     3ce:	8e ef       	ldi	r24, 0xFE	; 254
     3d0:	80 93 67 00 	sts	0x0067, r24
			string_counter = -1;// default value
     3d4:	8f ef       	ldi	r24, 0xFF	; 255
     3d6:	80 93 66 00 	sts	0x0066, r24
			//itoa(counter, arr, 10);
			//UART_sendStrByMark(arr, 0);
			//UART_sendStrByMark("\r\n", 0);
			counter = 0;
     3da:	10 92 0a 01 	sts	0x010A, r1
     3de:	10 92 09 01 	sts	0x0109, r1
			
			store_data();
     3e2:	0e 94 89 01 	call	0x312	; 0x312 <store_data>
     3e6:	08 95       	ret

000003e8 <sensor_to_esp_buff>:
}

// this construct a string that contains the sensor type and its reading surrounded by brackets(esp_message format and stores 
//this string into esp_buff to be sent 
void sensor_to_esp_buff(char * sensor_str, uint8_t info_type)
{
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	ec 01       	movw	r28, r24
	uint8_t i = 0;
	esp_buff[0] = '{'; //can be moved to a a place where it's executed only once instead of getting executed every time 
     3ee:	e8 e6       	ldi	r30, 0x68	; 104
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	8b e7       	ldi	r24, 0x7B	; 123
     3f4:	80 83       	st	Z, r24
	esp_buff[1] = info_type;
     3f6:	61 83       	std	Z+1, r22	; 0x01
	 
	while (sensor_str[i] != 0)
     3f8:	98 81       	ld	r25, Y
     3fa:	99 23       	and	r25, r25
     3fc:	79 f0       	breq	.+30     	; 0x41c <sensor_to_esp_buff+0x34>
     3fe:	e0 e0       	ldi	r30, 0x00	; 0
	{
		esp_buff[i + 2] = sensor_str[i]; // i + 1 because the first element cantains a bracket({)
     400:	ae 2f       	mov	r26, r30
     402:	b0 e0       	ldi	r27, 0x00	; 0
     404:	a8 59       	subi	r26, 0x98	; 152
     406:	bf 4f       	sbci	r27, 0xFF	; 255
     408:	12 96       	adiw	r26, 0x02	; 2
     40a:	9c 93       	st	X, r25
		i++ ;
     40c:	ef 5f       	subi	r30, 0xFF	; 255
{
	uint8_t i = 0;
	esp_buff[0] = '{'; //can be moved to a a place where it's executed only once instead of getting executed every time 
	esp_buff[1] = info_type;
	 
	while (sensor_str[i] != 0)
     40e:	de 01       	movw	r26, r28
     410:	ae 0f       	add	r26, r30
     412:	b1 1d       	adc	r27, r1
     414:	9c 91       	ld	r25, X
     416:	91 11       	cpse	r25, r1
     418:	f3 cf       	rjmp	.-26     	; 0x400 <sensor_to_esp_buff+0x18>
     41a:	01 c0       	rjmp	.+2      	; 0x41e <sensor_to_esp_buff+0x36>

// this construct a string that contains the sensor type and its reading surrounded by brackets(esp_message format and stores 
//this string into esp_buff to be sent 
void sensor_to_esp_buff(char * sensor_str, uint8_t info_type)
{
	uint8_t i = 0;
     41c:	e0 e0       	ldi	r30, 0x00	; 0
	{
		esp_buff[i + 2] = sensor_str[i]; // i + 1 because the first element cantains a bracket({)
		i++ ;
	}
	
	esp_buff[i + 2] = '}'; // indicates the ending of the esp message
     41e:	ae 2f       	mov	r26, r30
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	a8 59       	subi	r26, 0x98	; 152
     424:	bf 4f       	sbci	r27, 0xFF	; 255
     426:	8d e7       	ldi	r24, 0x7D	; 125
     428:	12 96       	adiw	r26, 0x02	; 2
     42a:	8c 93       	st	X, r24
	i++ ;
     42c:	ef 5f       	subi	r30, 0xFF	; 255
	esp_buff[i + 2] = 0;
     42e:	f0 e0       	ldi	r31, 0x00	; 0
     430:	e8 59       	subi	r30, 0x98	; 152
     432:	ff 4f       	sbci	r31, 0xFF	; 255
     434:	12 82       	std	Z+2, r1	; 0x02
}
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <alarm>:
	}
	
}

void alarm()
{
     43c:	ef 92       	push	r14
     43e:	ff 92       	push	r15
     440:	0f 93       	push	r16
     442:	1f 93       	push	r17
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	05 e0       	ldi	r16, 0x05	; 5
     44a:	10 e0       	ldi	r17, 0x00	; 0
	
	for (int i = 0; i < 5; i++)
	{
		DIO_TOGGLE(31);
     44c:	0f 2e       	mov	r0, r31
     44e:	f8 ee       	ldi	r31, 0xE8	; 232
     450:	ef 2e       	mov	r14, r31
     452:	f0 2d       	mov	r31, r0
     454:	0f 2e       	mov	r0, r31
     456:	f3 e0       	ldi	r31, 0x03	; 3
     458:	ff 2e       	mov	r15, r31
     45a:	f0 2d       	mov	r31, r0
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     45c:	c8 ec       	ldi	r28, 0xC8	; 200
     45e:	d0 e0       	ldi	r29, 0x00	; 0
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
     466:	8e 2d       	mov	r24, r14
     468:	9f 2d       	mov	r25, r15
     46a:	fe 01       	movw	r30, r28
     46c:	31 97       	sbiw	r30, 0x01	; 1
     46e:	f1 f7       	brne	.-4      	; 0x46c <alarm+0x30>
     470:	01 97       	sbiw	r24, 0x01	; 1
	
	else if (tmp > 65535)//dividing the needed loops into 10  and then run
	{  //the loop 10 times in each one only do 1/10 of the actual number of loops
		loop_count = (uint16_t)(a_ms_time * 10.0);//
		
		while(loop_count)//repeat a_ms_time*10 times each time make a 1/10 ms delay
     472:	d9 f7       	brne	.-10     	; 0x46a <alarm+0x2e>
     474:	01 50       	subi	r16, 0x01	; 1
     476:	11 09       	sbc	r17, r1
}

void alarm()
{
	
	for (int i = 0; i < 5; i++)
     478:	99 f7       	brne	.-26     	; 0x460 <alarm+0x24>
	{
		DIO_TOGGLE(31);
		delay_msec(100);
	}
	
}
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	ff 90       	pop	r15
     484:	ef 90       	pop	r14
     486:	08 95       	ret

00000488 <no_data_alarm>:
	
	usart_set_rx_int(USART0, true);
}

void no_data_alarm()
{
     488:	ef 92       	push	r14
     48a:	ff 92       	push	r15
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	05 e0       	ldi	r16, 0x05	; 5
     496:	10 e0       	ldi	r17, 0x00	; 0
	
	for (int i = 0; i < 5; i++)
	{
		//PORTC ^= 1 << 5;
		DIO_TOGGLE(31);
     498:	0f 2e       	mov	r0, r31
     49a:	f0 ed       	ldi	r31, 0xD0	; 208
     49c:	ef 2e       	mov	r14, r31
     49e:	f0 2d       	mov	r31, r0
     4a0:	0f 2e       	mov	r0, r31
     4a2:	f7 e0       	ldi	r31, 0x07	; 7
     4a4:	ff 2e       	mov	r15, r31
     4a6:	f0 2d       	mov	r31, r0
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     4a8:	c8 ec       	ldi	r28, 0xC8	; 200
     4aa:	d0 e0       	ldi	r29, 0x00	; 0
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
     4b2:	8e 2d       	mov	r24, r14
     4b4:	9f 2d       	mov	r25, r15
     4b6:	fe 01       	movw	r30, r28
     4b8:	31 97       	sbiw	r30, 0x01	; 1
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <no_data_alarm+0x30>
     4bc:	01 97       	sbiw	r24, 0x01	; 1
	
	else if (tmp > 65535)//dividing the needed loops into 10  and then run
	{  //the loop 10 times in each one only do 1/10 of the actual number of loops
		loop_count = (uint16_t)(a_ms_time * 10.0);//
		
		while(loop_count)//repeat a_ms_time*10 times each time make a 1/10 ms delay
     4be:	d9 f7       	brne	.-10     	; 0x4b6 <no_data_alarm+0x2e>
     4c0:	01 50       	subi	r16, 0x01	; 1
     4c2:	11 09       	sbc	r17, r1
}

void no_data_alarm()
{
	
	for (int i = 0; i < 5; i++)
     4c4:	99 f7       	brne	.-26     	; 0x4ac <no_data_alarm+0x24>
		//PORTC ^= 1 << 5;
		DIO_TOGGLE(31);
		delay_msec(200);
	}
	
}
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	ff 90       	pop	r15
     4d0:	ef 90       	pop	r14
     4d2:	08 95       	ret

000004d4 <error_alarm>:

void error_alarm()
{
     4d4:	ef 92       	push	r14
     4d6:	ff 92       	push	r15
     4d8:	0f 93       	push	r16
     4da:	1f 93       	push	r17
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	0a e0       	ldi	r16, 0x0A	; 10
     4e2:	10 e0       	ldi	r17, 0x00	; 0
	
	for (int i = 0; i < 10; i++)
	{
		DIO_TOGGLE(31);
     4e4:	0f 2e       	mov	r0, r31
     4e6:	f8 ee       	ldi	r31, 0xE8	; 232
     4e8:	ef 2e       	mov	r14, r31
     4ea:	f0 2d       	mov	r31, r0
     4ec:	0f 2e       	mov	r0, r31
     4ee:	f3 e0       	ldi	r31, 0x03	; 3
     4f0:	ff 2e       	mov	r15, r31
     4f2:	f0 2d       	mov	r31, r0
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     4f4:	c8 ec       	ldi	r28, 0xC8	; 200
     4f6:	d0 e0       	ldi	r29, 0x00	; 0
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
     4fe:	8e 2d       	mov	r24, r14
     500:	9f 2d       	mov	r25, r15
     502:	fe 01       	movw	r30, r28
     504:	31 97       	sbiw	r30, 0x01	; 1
     506:	f1 f7       	brne	.-4      	; 0x504 <error_alarm+0x30>
     508:	01 97       	sbiw	r24, 0x01	; 1
	
	else if (tmp > 65535)//dividing the needed loops into 10  and then run
	{  //the loop 10 times in each one only do 1/10 of the actual number of loops
		loop_count = (uint16_t)(a_ms_time * 10.0);//
		
		while(loop_count)//repeat a_ms_time*10 times each time make a 1/10 ms delay
     50a:	d9 f7       	brne	.-10     	; 0x502 <error_alarm+0x2e>
     50c:	01 50       	subi	r16, 0x01	; 1
     50e:	11 09       	sbc	r17, r1
}

void error_alarm()
{
	
	for (int i = 0; i < 10; i++)
     510:	99 f7       	brne	.-26     	; 0x4f8 <error_alarm+0x24>
	{
		DIO_TOGGLE(31);
		delay_msec(100);
	}
	
}
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	1f 91       	pop	r17
     518:	0f 91       	pop	r16
     51a:	ff 90       	pop	r15
     51c:	ef 90       	pop	r14
     51e:	08 95       	ret

00000520 <esp_send>:
}



void esp_send(const char * str, unint8_t ch_num)
{
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	00 d0       	rcall	.+0      	; 0x52c <esp_send+0xc>
     52c:	00 d0       	rcall	.+0      	; 0x52e <esp_send+0xe>
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	8c 01       	movw	r16, r24
     534:	f6 2e       	mov	r15, r22
	uint8_t at_flag;
	char data_size_str[4] = {0};
     536:	19 82       	std	Y+1, r1	; 0x01
     538:	1a 82       	std	Y+2, r1	; 0x02
     53a:	1b 82       	std	Y+3, r1	; 0x03
     53c:	1c 82       	std	Y+4, r1	; 0x04
		
	itoa(strlen(str), data_size_str, 10);
     53e:	fc 01       	movw	r30, r24
     540:	01 90       	ld	r0, Z+
     542:	00 20       	and	r0, r0
     544:	e9 f7       	brne	.-6      	; 0x540 <esp_send+0x20>
     546:	cf 01       	movw	r24, r30
     548:	01 97       	sbiw	r24, 0x01	; 1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     54a:	4a e0       	ldi	r20, 0x0A	; 10
     54c:	be 01       	movw	r22, r28
     54e:	6f 5f       	subi	r22, 0xFF	; 255
     550:	7f 4f       	sbci	r23, 0xFF	; 255
     552:	80 1b       	sub	r24, r16
     554:	91 0b       	sbc	r25, r17
     556:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <__itoa_ncheck>
	
	usart_write_str_mark(USART0, "AT+CIPSEND=", 0);
     55a:	40 e0       	ldi	r20, 0x00	; 0
     55c:	6a e7       	ldi	r22, 0x7A	; 122
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <usart_write_str_mark>
	usart_write(USART0, ch_num + 48); 
     566:	60 e3       	ldi	r22, 0x30	; 48
     568:	6f 0d       	add	r22, r15
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <usart_write>
	usart_write(USART0, ',');
     570:	6c e2       	ldi	r22, 0x2C	; 44
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <usart_write>
	usart_write_str_mark(USART0, data_size_str, 0);
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	be 01       	movw	r22, r28
     57c:	6f 5f       	subi	r22, 0xFF	; 255
     57e:	7f 4f       	sbci	r23, 0xFF	; 255
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <usart_write_str_mark>
	//wait while the esp is receiving some message and then send the \r\n order to make the esp listen to your response
	while (receive_flag != -2);
     586:	90 91 67 00 	lds	r25, 0x0067
     58a:	9e 3f       	cpi	r25, 0xFE	; 254
     58c:	e1 f7       	brne	.-8      	; 0x586 <esp_send+0x66>
	//collision of data between the request and the response
	usart_set_rx_int(USART0, false); // disable the interrupt .. to do not listen for any request and listen only for the response of command
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	0e 94 67 0f 	call	0x1ece	; 0x1ece <usart_set_rx_int>
	usart_write_str_mark(USART0, "\r\n", 0);
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	6e ef       	ldi	r22, 0xFE	; 254
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <usart_write_str_mark>
	at_flag = check_strings(500, 2, "OK\r\n", "ERROR\r\n");
     5a2:	86 e8       	ldi	r24, 0x86	; 134
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	9f 93       	push	r25
     5a8:	8f 93       	push	r24
     5aa:	8e e8       	ldi	r24, 0x8E	; 142
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	9f 93       	push	r25
     5b0:	8f 93       	push	r24
     5b2:	1f 92       	push	r1
     5b4:	82 e0       	ldi	r24, 0x02	; 2
     5b6:	8f 93       	push	r24
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	8f 93       	push	r24
     5bc:	84 ef       	ldi	r24, 0xF4	; 244
     5be:	8f 93       	push	r24
     5c0:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <check_strings>
	if (!at_flag)
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
     5ce:	81 11       	cpse	r24, r1
     5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <esp_send+0xb8>
	{
		no_data_alarm();
     5d2:	0e 94 44 02 	call	0x488	; 0x488 <no_data_alarm>
     5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <esp_send+0xc0>
	}
	else if (at_flag == AT_ERROR)
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	11 f4       	brne	.+4      	; 0x5e0 <esp_send+0xc0>
	{
		error_alarm();
     5dc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <error_alarm>
	}

	usart_set_rx_int(USART0, true); //after getting the response activate the interrupt again to listen for any coming requests
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	0e 94 67 0f 	call	0x1ece	; 0x1ece <usart_set_rx_int>
	
	usart_write_str_mark(USART0, str, 0);
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	b8 01       	movw	r22, r16
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <usart_write_str_mark>
	usart_write_str_mark(USART0, "\r\n", 0);
     5f2:	40 e0       	ldi	r20, 0x00	; 0
     5f4:	6e ef       	ldi	r22, 0xFE	; 254
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <usart_write_str_mark>
}
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	1f 91       	pop	r17
     60c:	0f 91       	pop	r16
     60e:	ff 90       	pop	r15
     610:	08 95       	ret

00000612 <esp_send_smoke>:
	i++ ;
	esp_buff[i + 2] = 0;
}

void esp_send_smoke(unint8_t ch_num)
{
     612:	df 92       	push	r13
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	27 97       	sbiw	r28, 0x07	; 7
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
     630:	d8 2e       	mov	r13, r24
	char smoke[7] = "1234";
     632:	85 e0       	ldi	r24, 0x05	; 5
     634:	e3 e7       	ldi	r30, 0x73	; 115
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	de 01       	movw	r26, r28
     63a:	11 96       	adiw	r26, 0x01	; 1
     63c:	01 90       	ld	r0, Z+
     63e:	0d 92       	st	X+, r0
     640:	8a 95       	dec	r24
     642:	e1 f7       	brne	.-8      	; 0x63c <esp_send_smoke+0x2a>
     644:	1f 82       	std	Y+7, r1	; 0x07
     646:	1e 82       	std	Y+6, r1	; 0x06
	
#if MCP == 1
	mcp_send_remoteframe(MCP_TX(1), 8);
     648:	68 e0       	ldi	r22, 0x08	; 8
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	0e 94 09 09 	call	0x1212	; 0x1212 <mcp_send_remoteframe>
     650:	0f 2e       	mov	r0, r31
     652:	f8 ee       	ldi	r31, 0xE8	; 232
     654:	ef 2e       	mov	r14, r31
     656:	f0 2d       	mov	r31, r0
     658:	0f 2e       	mov	r0, r31
     65a:	f3 e0       	ldi	r31, 0x03	; 3
     65c:	ff 2e       	mov	r15, r31
     65e:	f0 2d       	mov	r31, r0
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     660:	08 ec       	ldi	r16, 0xC8	; 200
     662:	10 e0       	ldi	r17, 0x00	; 0
	
	while (mcp_check_flag(TX1IF_BIT) == 0)
     664:	0b c0       	rjmp	.+22     	; 0x67c <esp_send_smoke+0x6a>
     666:	2e 2d       	mov	r18, r14
     668:	3f 2d       	mov	r19, r15
     66a:	f8 01       	movw	r30, r16
     66c:	31 97       	sbiw	r30, 0x01	; 1
     66e:	f1 f7       	brne	.-4      	; 0x66c <esp_send_smoke+0x5a>
     670:	21 50       	subi	r18, 0x01	; 1
     672:	31 09       	sbc	r19, r1
	
	else if (tmp > 65535)//dividing the needed loops into 10  and then run
	{  //the loop 10 times in each one only do 1/10 of the actual number of loops
		loop_count = (uint16_t)(a_ms_time * 10.0);//
		
		while(loop_count)//repeat a_ms_time*10 times each time make a 1/10 ms delay
     674:	d1 f7       	brne	.-12     	; 0x66a <esp_send_smoke+0x58>
	{
		delay_msec(100);
		DIO_TOGGLE(31);
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
	char smoke[7] = "1234";
	
#if MCP == 1
	mcp_send_remoteframe(MCP_TX(1), 8);
	
	while (mcp_check_flag(TX1IF_BIT) == 0)
     67c:	85 e0       	ldi	r24, 0x05	; 5
     67e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <mcp_check_flag>
     682:	88 23       	and	r24, r24
     684:	81 f3       	breq	.-32     	; 0x666 <esp_send_smoke+0x54>
		delay_msec(100);
		DIO_TOGGLE(31);
		//PORTA ^= 1;
	}
	
	mcp_clear_flag(TX1IF_BIT);
     686:	85 e0       	ldi	r24, 0x05	; 5
     688:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mcp_clear_flag>
     68c:	0f 2e       	mov	r0, r31
     68e:	f8 ee       	ldi	r31, 0xE8	; 232
     690:	ef 2e       	mov	r14, r31
     692:	f0 2d       	mov	r31, r0
     694:	0f 2e       	mov	r0, r31
     696:	f3 e0       	ldi	r31, 0x03	; 3
     698:	ff 2e       	mov	r15, r31
     69a:	f0 2d       	mov	r31, r0
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     69c:	08 ec       	ldi	r16, 0xC8	; 200
     69e:	10 e0       	ldi	r17, 0x00	; 0
	
	while(mcp_check_flag(RX1IF_BIT) == 0)
     6a0:	0b c0       	rjmp	.+22     	; 0x6b8 <esp_send_smoke+0xa6>
     6a2:	2e 2d       	mov	r18, r14
     6a4:	3f 2d       	mov	r19, r15
     6a6:	f8 01       	movw	r30, r16
     6a8:	31 97       	sbiw	r30, 0x01	; 1
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <esp_send_smoke+0x96>
     6ac:	21 50       	subi	r18, 0x01	; 1
     6ae:	31 09       	sbc	r19, r1
	
	else if (tmp > 65535)//dividing the needed loops into 10  and then run
	{  //the loop 10 times in each one only do 1/10 of the actual number of loops
		loop_count = (uint16_t)(a_ms_time * 10.0);//
		
		while(loop_count)//repeat a_ms_time*10 times each time make a 1/10 ms delay
     6b0:	d1 f7       	brne	.-12     	; 0x6a6 <esp_send_smoke+0x94>
	{
		delay_msec(100);
		DIO_TOGGLE(31);
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
		//PORTA ^= 1;
	}
	
	mcp_clear_flag(TX1IF_BIT);
	
	while(mcp_check_flag(RX1IF_BIT) == 0)
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <mcp_check_flag>
     6be:	88 23       	and	r24, r24
     6c0:	81 f3       	breq	.-32     	; 0x6a2 <esp_send_smoke+0x90>
		delay_msec(100);
		DIO_TOGGLE(31);
		//PORTA ^= 1;
	}
	
	mcp_clear_flag(RX1IF_BIT);
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mcp_clear_flag>
	
	mcp_rx_data(MCP_RX(1), smoke);
     6c8:	be 01       	movw	r22, r28
     6ca:	6f 5f       	subi	r22, 0xFF	; 255
     6cc:	7f 4f       	sbci	r23, 0xFF	; 255
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	0e 94 5d 07 	call	0xeba	; 0xeba <mcp_rx_data>
#endif
	sensor_to_esp_buff(smoke, 'S');
     6d4:	63 e5       	ldi	r22, 0x53	; 83
     6d6:	ce 01       	movw	r24, r28
     6d8:	01 96       	adiw	r24, 0x01	; 1
     6da:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sensor_to_esp_buff>
	esp_send(esp_buff, ch_num);
     6de:	6d 2d       	mov	r22, r13
     6e0:	88 e6       	ldi	r24, 0x68	; 104
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 90 02 	call	0x520	; 0x520 <esp_send>
}
     6e8:	27 96       	adiw	r28, 0x07	; 7
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	08 95       	ret

00000704 <esp_send_temp>:



void esp_send_temp(unint8_t ch_num)
{
     704:	df 92       	push	r13
     706:	ef 92       	push	r14
     708:	ff 92       	push	r15
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	2d 97       	sbiw	r28, 0x0d	; 13
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	d8 2e       	mov	r13, r24
	char temp[4] = "12";
     724:	81 e3       	ldi	r24, 0x31	; 49
     726:	92 e3       	ldi	r25, 0x32	; 50
     728:	a0 e0       	ldi	r26, 0x00	; 0
     72a:	b0 e0       	ldi	r27, 0x00	; 0
     72c:	89 83       	std	Y+1, r24	; 0x01
     72e:	9a 83       	std	Y+2, r25	; 0x02
     730:	ab 83       	std	Y+3, r26	; 0x03
     732:	bc 83       	std	Y+4, r27	; 0x04
	char receive_buff[9];
	
#if MCP == 1
	mcp_send_remoteframe(MCP_TX(0), 5);
     734:	65 e0       	ldi	r22, 0x05	; 5
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	0e 94 09 09 	call	0x1212	; 0x1212 <mcp_send_remoteframe>
	
	while (mcp_check_flag(TX0IF_BIT) == 0);
     73c:	83 e0       	ldi	r24, 0x03	; 3
     73e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <mcp_check_flag>
     742:	88 23       	and	r24, r24
     744:	d9 f3       	breq	.-10     	; 0x73c <esp_send_temp+0x38>
		//PORTA ^= 1;
	}
#endif
	
	 
	mcp_clear_flag(TX0IF_BIT); 
     746:	83 e0       	ldi	r24, 0x03	; 3
     748:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mcp_clear_flag>
     74c:	0f 2e       	mov	r0, r31
     74e:	f8 ee       	ldi	r31, 0xE8	; 232
     750:	ef 2e       	mov	r14, r31
     752:	f0 2d       	mov	r31, r0
     754:	0f 2e       	mov	r0, r31
     756:	f3 e0       	ldi	r31, 0x03	; 3
     758:	ff 2e       	mov	r15, r31
     75a:	f0 2d       	mov	r31, r0
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     75c:	08 ec       	ldi	r16, 0xC8	; 200
     75e:	10 e0       	ldi	r17, 0x00	; 0
	
	while(mcp_check_flag(RX0IF_BIT) == 0)
     760:	0b c0       	rjmp	.+22     	; 0x778 <esp_send_temp+0x74>
     762:	2e 2d       	mov	r18, r14
     764:	3f 2d       	mov	r19, r15
     766:	f8 01       	movw	r30, r16
     768:	31 97       	sbiw	r30, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <esp_send_temp+0x64>
     76c:	21 50       	subi	r18, 0x01	; 1
     76e:	31 09       	sbc	r19, r1
	
	else if (tmp > 65535)//dividing the needed loops into 10  and then run
	{  //the loop 10 times in each one only do 1/10 of the actual number of loops
		loop_count = (uint16_t)(a_ms_time * 10.0);//
		
		while(loop_count)//repeat a_ms_time*10 times each time make a 1/10 ms delay
     770:	d1 f7       	brne	.-12     	; 0x766 <esp_send_temp+0x62>
	{
		delay_msec(100);
		DIO_TOGGLE(31);
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
#endif
	
	 
	mcp_clear_flag(TX0IF_BIT); 
	
	while(mcp_check_flag(RX0IF_BIT) == 0)
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <mcp_check_flag>
     77e:	88 23       	and	r24, r24
     780:	81 f3       	breq	.-32     	; 0x762 <esp_send_temp+0x5e>
		delay_msec(100);
		DIO_TOGGLE(31);
		//PORTA ^= 1;
	}
	
	mcp_clear_flag(RX0IF_BIT);
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mcp_clear_flag>
	
	mcp_rx_data(MCP_RX(0), receive_buff);
     788:	be 01       	movw	r22, r28
     78a:	6b 5f       	subi	r22, 0xFB	; 251
     78c:	7f 4f       	sbci	r23, 0xFF	; 255
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 5d 07 	call	0xeba	; 0xeba <mcp_rx_data>
	
	
	temp[0] = receive_buff[2];
     794:	8f 81       	ldd	r24, Y+7	; 0x07
     796:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = receive_buff[3];
     798:	88 85       	ldd	r24, Y+8	; 0x08
     79a:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = receive_buff[4];
     79c:	89 85       	ldd	r24, Y+9	; 0x09
     79e:	8b 83       	std	Y+3, r24	; 0x03
	temp[3] = 0;
     7a0:	1c 82       	std	Y+4, r1	; 0x04
	DIO_TOGGLE(0);
     7a2:	88 e0       	ldi	r24, 0x08	; 8
     7a4:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
	//PORTB ^= 1;
#endif
	sensor_to_esp_buff(temp, 'T');
     7a8:	64 e5       	ldi	r22, 0x54	; 84
     7aa:	ce 01       	movw	r24, r28
     7ac:	01 96       	adiw	r24, 0x01	; 1
     7ae:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sensor_to_esp_buff>
	esp_send(esp_buff, ch_num);
     7b2:	6d 2d       	mov	r22, r13
     7b4:	88 e6       	ldi	r24, 0x68	; 104
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 90 02 	call	0x520	; 0x520 <esp_send>
	
}
     7bc:	2d 96       	adiw	r28, 0x0d	; 13
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	0f 91       	pop	r16
     7d0:	ff 90       	pop	r15
     7d2:	ef 90       	pop	r14
     7d4:	df 90       	pop	r13
     7d6:	08 95       	ret

000007d8 <esp_send_H2O>:

void esp_send_H2O(unint8_t ch_num)
{
     7d8:	df 92       	push	r13
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	cd b7       	in	r28, 0x3d	; 61
     7e8:	de b7       	in	r29, 0x3e	; 62
     7ea:	2c 97       	sbiw	r28, 0x0c	; 12
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	d8 2e       	mov	r13, r24
	char h2o[3] = "89";
     7f8:	88 e3       	ldi	r24, 0x38	; 56
     7fa:	99 e3       	ldi	r25, 0x39	; 57
     7fc:	a0 e0       	ldi	r26, 0x00	; 0
     7fe:	89 83       	std	Y+1, r24	; 0x01
     800:	9a 83       	std	Y+2, r25	; 0x02
     802:	ab 83       	std	Y+3, r26	; 0x03
	char receive_buff[9];
	
#if MCP == 1
	mcp_send_remoteframe(MCP_TX(0), 5);
     804:	65 e0       	ldi	r22, 0x05	; 5
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	0e 94 09 09 	call	0x1212	; 0x1212 <mcp_send_remoteframe>
     80c:	0f 2e       	mov	r0, r31
     80e:	f8 ee       	ldi	r31, 0xE8	; 232
     810:	ef 2e       	mov	r14, r31
     812:	f0 2d       	mov	r31, r0
     814:	0f 2e       	mov	r0, r31
     816:	f3 e0       	ldi	r31, 0x03	; 3
     818:	ff 2e       	mov	r15, r31
     81a:	f0 2d       	mov	r31, r0
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     81c:	08 ec       	ldi	r16, 0xC8	; 200
     81e:	10 e0       	ldi	r17, 0x00	; 0
	
	while (mcp_check_flag(TX0IF_BIT) == 0)
     820:	0b c0       	rjmp	.+22     	; 0x838 <esp_send_H2O+0x60>
     822:	2e 2d       	mov	r18, r14
     824:	3f 2d       	mov	r19, r15
     826:	f8 01       	movw	r30, r16
     828:	31 97       	sbiw	r30, 0x01	; 1
     82a:	f1 f7       	brne	.-4      	; 0x828 <esp_send_H2O+0x50>
     82c:	21 50       	subi	r18, 0x01	; 1
     82e:	31 09       	sbc	r19, r1
	
	else if (tmp > 65535)//dividing the needed loops into 10  and then run
	{  //the loop 10 times in each one only do 1/10 of the actual number of loops
		loop_count = (uint16_t)(a_ms_time * 10.0);//
		
		while(loop_count)//repeat a_ms_time*10 times each time make a 1/10 ms delay
     830:	d1 f7       	brne	.-12     	; 0x826 <esp_send_H2O+0x4e>
	{
		delay_msec(100);
		DIO_TOGGLE(31);
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
	char receive_buff[9];
	
#if MCP == 1
	mcp_send_remoteframe(MCP_TX(0), 5);
	
	while (mcp_check_flag(TX0IF_BIT) == 0)
     838:	83 e0       	ldi	r24, 0x03	; 3
     83a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <mcp_check_flag>
     83e:	88 23       	and	r24, r24
     840:	81 f3       	breq	.-32     	; 0x822 <esp_send_H2O+0x4a>
		delay_msec(100);
		DIO_TOGGLE(31);
		//PORTA ^= 1;
	}
	
	mcp_clear_flag(TX0IF_BIT);
     842:	83 e0       	ldi	r24, 0x03	; 3
     844:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mcp_clear_flag>
     848:	0f 2e       	mov	r0, r31
     84a:	f8 ee       	ldi	r31, 0xE8	; 232
     84c:	ef 2e       	mov	r14, r31
     84e:	f0 2d       	mov	r31, r0
     850:	0f 2e       	mov	r0, r31
     852:	f3 e0       	ldi	r31, 0x03	; 3
     854:	ff 2e       	mov	r15, r31
     856:	f0 2d       	mov	r31, r0
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     858:	08 ec       	ldi	r16, 0xC8	; 200
     85a:	10 e0       	ldi	r17, 0x00	; 0
	
	while(mcp_check_flag(RX0IF_BIT) == 0)
     85c:	0b c0       	rjmp	.+22     	; 0x874 <__stack+0x15>
     85e:	2e 2d       	mov	r18, r14
     860:	3f 2d       	mov	r19, r15
     862:	f8 01       	movw	r30, r16
     864:	31 97       	sbiw	r30, 0x01	; 1
     866:	f1 f7       	brne	.-4      	; 0x864 <__stack+0x5>
     868:	21 50       	subi	r18, 0x01	; 1
     86a:	31 09       	sbc	r19, r1
	
	else if (tmp > 65535)//dividing the needed loops into 10  and then run
	{  //the loop 10 times in each one only do 1/10 of the actual number of loops
		loop_count = (uint16_t)(a_ms_time * 10.0);//
		
		while(loop_count)//repeat a_ms_time*10 times each time make a 1/10 ms delay
     86c:	d1 f7       	brne	.-12     	; 0x862 <__stack+0x3>
	{
		delay_msec(100);
		DIO_TOGGLE(31);
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
		//PORTA ^= 1;
	}
	
	mcp_clear_flag(TX0IF_BIT);
	
	while(mcp_check_flag(RX0IF_BIT) == 0)
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <mcp_check_flag>
     87a:	88 23       	and	r24, r24
     87c:	81 f3       	breq	.-32     	; 0x85e <esp_send_H2O+0x86>
	{
		delay_msec(100);
		DIO_TOGGLE(31);
	}
	
	mcp_clear_flag(RX0IF_BIT);
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mcp_clear_flag>
	
	mcp_rx_data(MCP_RX(0), receive_buff);
     884:	be 01       	movw	r22, r28
     886:	6c 5f       	subi	r22, 0xFC	; 252
     888:	7f 4f       	sbci	r23, 0xFF	; 255
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	0e 94 5d 07 	call	0xeba	; 0xeba <mcp_rx_data>
	
	h2o[0] = receive_buff[0];
     890:	8c 81       	ldd	r24, Y+4	; 0x04
     892:	89 83       	std	Y+1, r24	; 0x01
	h2o[1] = receive_buff[1];
     894:	8d 81       	ldd	r24, Y+5	; 0x05
     896:	8a 83       	std	Y+2, r24	; 0x02
	h2o[2] = 0;
     898:	1b 82       	std	Y+3, r1	; 0x03
	
	DIO_TOGGLE(0);
     89a:	88 e0       	ldi	r24, 0x08	; 8
     89c:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
#endif
	sensor_to_esp_buff(h2o, 'H');
     8a0:	68 e4       	ldi	r22, 0x48	; 72
     8a2:	ce 01       	movw	r24, r28
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <sensor_to_esp_buff>
	esp_send(esp_buff, ch_num);
     8aa:	6d 2d       	mov	r22, r13
     8ac:	88 e6       	ldi	r24, 0x68	; 104
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	0e 94 90 02 	call	0x520	; 0x520 <esp_send>
	
}
     8b4:	2c 96       	adiw	r28, 0x0c	; 12
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	de bf       	out	0x3e, r29	; 62
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	08 95       	ret

000008d0 <esp_init>:

void esp_init()
{
	uint8_t at_flag;
	
	usart_set_rx_int(USART0, false);
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	0e 94 67 0f 	call	0x1ece	; 0x1ece <usart_set_rx_int>
	usart_write_str_mark(USART0, "AT\r\n", 0);
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	60 eb       	ldi	r22, 0xB0	; 176
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <usart_write_str_mark>
	at_flag = check_strings(5000, 2, "OK\r\n", "ERROR\r\n");
     8e4:	86 e8       	ldi	r24, 0x86	; 134
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	9f 93       	push	r25
     8ea:	8f 93       	push	r24
     8ec:	8e e8       	ldi	r24, 0x8E	; 142
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	9f 93       	push	r25
     8f2:	8f 93       	push	r24
     8f4:	1f 92       	push	r1
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	8f 93       	push	r24
     8fa:	83 e1       	ldi	r24, 0x13	; 19
     8fc:	8f 93       	push	r24
     8fe:	88 e8       	ldi	r24, 0x88	; 136
     900:	8f 93       	push	r24
     902:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <check_strings>
	if (!at_flag)
     906:	2d b7       	in	r18, 0x3d	; 61
     908:	3e b7       	in	r19, 0x3e	; 62
     90a:	28 5f       	subi	r18, 0xF8	; 248
     90c:	3f 4f       	sbci	r19, 0xFF	; 255
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	3e bf       	out	0x3e, r19	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	2d bf       	out	0x3d, r18	; 61
     918:	81 11       	cpse	r24, r1
     91a:	03 c0       	rjmp	.+6      	; 0x922 <esp_init+0x52>
	{
		no_data_alarm();
     91c:	0e 94 44 02 	call	0x488	; 0x488 <no_data_alarm>
     920:	07 c0       	rjmp	.+14     	; 0x930 <esp_init+0x60>
	}
	else if (at_flag == AT_ERROR)
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	19 f4       	brne	.+6      	; 0x92c <esp_init+0x5c>
	{
		error_alarm();
     926:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <error_alarm>
     92a:	02 c0       	rjmp	.+4      	; 0x930 <esp_init+0x60>
	}
	else
	{
		alarm();
     92c:	0e 94 1e 02 	call	0x43c	; 0x43c <alarm>
	}
	
	
	usart_write_str_mark(USART0, "AT+CWMODE=1\r\n", 0);
     930:	40 e0       	ldi	r20, 0x00	; 0
     932:	65 eb       	ldi	r22, 0xB5	; 181
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <usart_write_str_mark>
	
	at_flag = check_strings(500, 2, "OK\r\n", "ERROR\r\n");
     93c:	86 e8       	ldi	r24, 0x86	; 134
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	9f 93       	push	r25
     942:	8f 93       	push	r24
     944:	8e e8       	ldi	r24, 0x8E	; 142
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	9f 93       	push	r25
     94a:	8f 93       	push	r24
     94c:	1f 92       	push	r1
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	8f 93       	push	r24
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	8f 93       	push	r24
     956:	84 ef       	ldi	r24, 0xF4	; 244
     958:	8f 93       	push	r24
     95a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <check_strings>
	if (!at_flag)
     95e:	2d b7       	in	r18, 0x3d	; 61
     960:	3e b7       	in	r19, 0x3e	; 62
     962:	28 5f       	subi	r18, 0xF8	; 248
     964:	3f 4f       	sbci	r19, 0xFF	; 255
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	3e bf       	out	0x3e, r19	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	2d bf       	out	0x3d, r18	; 61
     970:	81 11       	cpse	r24, r1
     972:	03 c0       	rjmp	.+6      	; 0x97a <esp_init+0xaa>
	{
		no_data_alarm();
     974:	0e 94 44 02 	call	0x488	; 0x488 <no_data_alarm>
     978:	04 c0       	rjmp	.+8      	; 0x982 <esp_init+0xb2>
	}
	else if (at_flag == AT_ERROR)
     97a:	82 30       	cpi	r24, 0x02	; 2
     97c:	11 f4       	brne	.+4      	; 0x982 <esp_init+0xb2>
	{
		error_alarm();
     97e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <error_alarm>
	}
	
	
	usart_write_str_mark(USART0, "AT+CIPMUX=1\r\n", 0);
     982:	40 e0       	ldi	r20, 0x00	; 0
     984:	63 ec       	ldi	r22, 0xC3	; 195
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <usart_write_str_mark>
	at_flag = check_strings(500, 2, "OK\r\n", "ERROR\r\n");
     98e:	86 e8       	ldi	r24, 0x86	; 134
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	9f 93       	push	r25
     994:	8f 93       	push	r24
     996:	8e e8       	ldi	r24, 0x8E	; 142
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	9f 93       	push	r25
     99c:	8f 93       	push	r24
     99e:	1f 92       	push	r1
     9a0:	82 e0       	ldi	r24, 0x02	; 2
     9a2:	8f 93       	push	r24
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	8f 93       	push	r24
     9a8:	84 ef       	ldi	r24, 0xF4	; 244
     9aa:	8f 93       	push	r24
     9ac:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <check_strings>
	if (!at_flag)
     9b0:	2d b7       	in	r18, 0x3d	; 61
     9b2:	3e b7       	in	r19, 0x3e	; 62
     9b4:	28 5f       	subi	r18, 0xF8	; 248
     9b6:	3f 4f       	sbci	r19, 0xFF	; 255
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	3e bf       	out	0x3e, r19	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	2d bf       	out	0x3d, r18	; 61
     9c2:	81 11       	cpse	r24, r1
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <esp_init+0xfc>
	{
		no_data_alarm();
     9c6:	0e 94 44 02 	call	0x488	; 0x488 <no_data_alarm>
     9ca:	04 c0       	rjmp	.+8      	; 0x9d4 <esp_init+0x104>
	}
	else if (at_flag == AT_ERROR)
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	11 f4       	brne	.+4      	; 0x9d4 <esp_init+0x104>
	{
		error_alarm();
     9d0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <error_alarm>
	}
	
	
	usart_write_str_mark(USART0, "AT+CIFSR\r\n", 0);
     9d4:	40 e0       	ldi	r20, 0x00	; 0
     9d6:	61 ed       	ldi	r22, 0xD1	; 209
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <usart_write_str_mark>
	at_flag = check_strings(500, 2, "OK\r\n", "ERROR\r\n");
     9e0:	86 e8       	ldi	r24, 0x86	; 134
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	9f 93       	push	r25
     9e6:	8f 93       	push	r24
     9e8:	8e e8       	ldi	r24, 0x8E	; 142
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	9f 93       	push	r25
     9ee:	8f 93       	push	r24
     9f0:	1f 92       	push	r1
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	8f 93       	push	r24
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	8f 93       	push	r24
     9fa:	84 ef       	ldi	r24, 0xF4	; 244
     9fc:	8f 93       	push	r24
     9fe:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <check_strings>
	if (!at_flag)
     a02:	2d b7       	in	r18, 0x3d	; 61
     a04:	3e b7       	in	r19, 0x3e	; 62
     a06:	28 5f       	subi	r18, 0xF8	; 248
     a08:	3f 4f       	sbci	r19, 0xFF	; 255
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	3e bf       	out	0x3e, r19	; 62
     a10:	0f be       	out	0x3f, r0	; 63
     a12:	2d bf       	out	0x3d, r18	; 61
     a14:	81 11       	cpse	r24, r1
     a16:	03 c0       	rjmp	.+6      	; 0xa1e <esp_init+0x14e>
	{
		no_data_alarm();
     a18:	0e 94 44 02 	call	0x488	; 0x488 <no_data_alarm>
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <esp_init+0x156>
	}
	else if (at_flag == AT_ERROR)
     a1e:	82 30       	cpi	r24, 0x02	; 2
     a20:	11 f4       	brne	.+4      	; 0xa26 <esp_init+0x156>
	{
		error_alarm();
     a22:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <error_alarm>
	}
	
	usart_write_str_mark(USART0, "AT+CIPSERVER=1,80\r\n", 0);
     a26:	40 e0       	ldi	r20, 0x00	; 0
     a28:	6c ed       	ldi	r22, 0xDC	; 220
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <usart_write_str_mark>
	at_flag = check_strings(500, 2, "OK\r\n", "ERROR\r\n");
     a32:	86 e8       	ldi	r24, 0x86	; 134
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	9f 93       	push	r25
     a38:	8f 93       	push	r24
     a3a:	8e e8       	ldi	r24, 0x8E	; 142
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	9f 93       	push	r25
     a40:	8f 93       	push	r24
     a42:	1f 92       	push	r1
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	8f 93       	push	r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	8f 93       	push	r24
     a4c:	84 ef       	ldi	r24, 0xF4	; 244
     a4e:	8f 93       	push	r24
     a50:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <check_strings>
	if (!at_flag)
     a54:	2d b7       	in	r18, 0x3d	; 61
     a56:	3e b7       	in	r19, 0x3e	; 62
     a58:	28 5f       	subi	r18, 0xF8	; 248
     a5a:	3f 4f       	sbci	r19, 0xFF	; 255
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	3e bf       	out	0x3e, r19	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	2d bf       	out	0x3d, r18	; 61
     a66:	81 11       	cpse	r24, r1
     a68:	03 c0       	rjmp	.+6      	; 0xa70 <esp_init+0x1a0>
	{
		no_data_alarm();
     a6a:	0e 94 44 02 	call	0x488	; 0x488 <no_data_alarm>
     a6e:	04 c0       	rjmp	.+8      	; 0xa78 <esp_init+0x1a8>
	}
	else if (at_flag == AT_ERROR)
     a70:	82 30       	cpi	r24, 0x02	; 2
     a72:	11 f4       	brne	.+4      	; 0xa78 <esp_init+0x1a8>
	{
		error_alarm();
     a74:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <error_alarm>
	}
	
	usart_write_str_mark(USART0, "AT+CIPSTO=1000\r\n", 0);
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	60 ef       	ldi	r22, 0xF0	; 240
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <usart_write_str_mark>
	at_flag = check_strings(500, 2, "OK\r\n", "ERROR\r\n");
     a84:	86 e8       	ldi	r24, 0x86	; 134
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	9f 93       	push	r25
     a8a:	8f 93       	push	r24
     a8c:	8e e8       	ldi	r24, 0x8E	; 142
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	9f 93       	push	r25
     a92:	8f 93       	push	r24
     a94:	1f 92       	push	r1
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	8f 93       	push	r24
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	8f 93       	push	r24
     a9e:	84 ef       	ldi	r24, 0xF4	; 244
     aa0:	8f 93       	push	r24
     aa2:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <check_strings>
	if (!at_flag)
     aa6:	2d b7       	in	r18, 0x3d	; 61
     aa8:	3e b7       	in	r19, 0x3e	; 62
     aaa:	28 5f       	subi	r18, 0xF8	; 248
     aac:	3f 4f       	sbci	r19, 0xFF	; 255
     aae:	0f b6       	in	r0, 0x3f	; 63
     ab0:	f8 94       	cli
     ab2:	3e bf       	out	0x3e, r19	; 62
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	2d bf       	out	0x3d, r18	; 61
     ab8:	81 11       	cpse	r24, r1
     aba:	03 c0       	rjmp	.+6      	; 0xac2 <esp_init+0x1f2>
	{
		no_data_alarm();
     abc:	0e 94 44 02 	call	0x488	; 0x488 <no_data_alarm>
     ac0:	04 c0       	rjmp	.+8      	; 0xaca <esp_init+0x1fa>
	}
	else if (at_flag == AT_ERROR)
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	11 f4       	brne	.+4      	; 0xaca <esp_init+0x1fa>
	{
		error_alarm();
     ac6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <error_alarm>
	}
	
	usart_set_rx_int(USART0, true);
     aca:	61 e0       	ldi	r22, 0x01	; 1
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	0e 94 67 0f 	call	0x1ece	; 0x1ece <usart_set_rx_int>
     ad2:	08 95       	ret

00000ad4 <main>:
	}

}

int main(void)
{
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	cd b7       	in	r28, 0x3d	; 61
     ada:	de b7       	in	r29, 0x3e	; 62
     adc:	28 97       	sbiw	r28, 0x08	; 8
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	cd bf       	out	0x3d, r28	; 61
	uint8_t receive_buff[9];
	uint8_t i = 0;
	uint8_t h2o[3] = {0};
	uint8_t temp[4] = {0};
	char ch_num[2] = {0};
     ae8:	1a 82       	std	Y+2, r1	; 0x02
     aea:	19 82       	std	Y+1, r1	; 0x01
		
	char esp_data[12] = {0};
	char break_f[6];
	uint8_t barrier_flag = 0;
	sei();
     aec:	78 94       	sei

	DIO_SET_DIR(31, DIO_OUTPUT);
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(29, DIO_OUTPUT);
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	82 e0       	ldi	r24, 0x02	; 2
     afa:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(0, DIO_OUTPUT);
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	88 e0       	ldi	r24, 0x08	; 8
     b02:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(15, DIO_OUTPUT);	
     b06:	61 e0       	ldi	r22, 0x01	; 1
     b08:	8f e1       	ldi	r24, 0x1F	; 31
     b0a:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(30, DIO_OUTPUT);
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	

	list = create_list(); // create the queue that is going to hold the esp requests
     b16:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <create_list>
     b1a:	90 93 17 01 	sts	0x0117, r25
     b1e:	80 93 16 01 	sts	0x0116, r24
	
	motors_init();
     b22:	0e 94 69 01 	call	0x2d2	; 0x2d2 <motors_init>
	
	usart_init(USART0, 9600, DATA_SIZE_8, TX_RX, NO_PARITY, ONE_STOP_BIT, TX_RISE);
     b26:	a1 2c       	mov	r10, r1
     b28:	c1 2c       	mov	r12, r1
     b2a:	e1 2c       	mov	r14, r1
     b2c:	03 e0       	ldi	r16, 0x03	; 3
     b2e:	23 e0       	ldi	r18, 0x03	; 3
     b30:	40 e8       	ldi	r20, 0x80	; 128
     b32:	55 e2       	ldi	r21, 0x25	; 37
     b34:	60 e0       	ldi	r22, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <usart_init>
	
	
	usart_set_rx_int(USART0, true);
     b3e:	61 e0       	ldi	r22, 0x01	; 1
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	0e 94 67 0f 	call	0x1ece	; 0x1ece <usart_set_rx_int>
	usart_set_rx_isr(USART0, uart_rx_handler);
     b46:	6f ec       	ldi	r22, 0xCF	; 207
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <usart_set_rx_isr>
	
	millis_add_ovf_isr(timer0_ovf_handler);
     b50:	8b ec       	ldi	r24, 0xCB	; 203
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <millis_add_ovf_isr>
	
	esp_init();
     b58:	0e 94 68 04 	call	0x8d0	; 0x8d0 <esp_init>

	
#if MCP == 1
	mcp_init();
     b5c:	0e 94 de 07 	call	0xfbc	; 0xfbc <mcp_init>

	mcp_tx_id(MCP_TX(0), 0, 0x058f);//000 1111 0111 001 10 00110101 10001111
     b60:	2f e8       	ldi	r18, 0x8F	; 143
     b62:	35 e0       	ldi	r19, 0x05	; 5
     b64:	40 e0       	ldi	r20, 0x00	; 0
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <mcp_tx_id>
	mcp_tx_id(MCP_TX(1), 0, 0x057f);//000 1111 0111 001 10 00110101 10001111
     b70:	2f e7       	ldi	r18, 0x7F	; 127
     b72:	35 e0       	ldi	r19, 0x05	; 5
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <mcp_tx_id>
	mcp_tx_id(MCP_TX(2), 0, 0x056f);//000 1111 0111 001 10 00110101 10001111
     b80:	2f e6       	ldi	r18, 0x6F	; 111
     b82:	35 e0       	ldi	r19, 0x05	; 5
     b84:	40 e0       	ldi	r20, 0x00	; 0
     b86:	50 e0       	ldi	r21, 0x00	; 0
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	84 e0       	ldi	r24, 0x04	; 4
     b8c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <mcp_tx_id>
#endif
	
	 
	 usart_write_str_mark(USART0, "READY", 0);
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	61 e0       	ldi	r22, 0x01	; 1
     b94:	71 e0       	ldi	r23, 0x01	; 1
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <usart_write_str_mark>
						esp_send("{BB}", ch_num);
					}
					else if (break_f[1] == '0')
					{
						barrier_flag = 0;
						esp_send("{BN}", ch_num);
     b9c:	8e 01       	movw	r16, r28
     b9e:	0f 5f       	subi	r16, 0xFF	; 255
     ba0:	1f 4f       	sbci	r17, 0xFF	; 255
						barrier_flag = 1;
						esp_send("{BB}", ch_num);
					}
					else if (break_f[1] == '0')
					{
						barrier_flag = 0;
     ba2:	f1 2c       	mov	r15, r1
	
		while (1)
		{

#if MCP == 1
			if (mcp_check_flag(TX1IF_BIT))
     ba4:	85 e0       	ldi	r24, 0x05	; 5
     ba6:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <mcp_check_flag>
     baa:	88 23       	and	r24, r24
     bac:	19 f0       	breq	.+6      	; 0xbb4 <main+0xe0>
			{
				//UART_sendStrByMark("SENT1\r\n", 0);
				mcp_clear_flag(TX1IF_BIT);
     bae:	85 e0       	ldi	r24, 0x05	; 5
     bb0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mcp_clear_flag>
			}
			
			if (mcp_check_flag(TX2IF_BIT))
     bb4:	87 e0       	ldi	r24, 0x07	; 7
     bb6:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <mcp_check_flag>
     bba:	88 23       	and	r24, r24
     bbc:	19 f0       	breq	.+6      	; 0xbc4 <main+0xf0>
			{
				//UART_sendStrByMark("SENT2\r\n", 0);
				mcp_clear_flag(TX2IF_BIT);
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mcp_clear_flag>
			}
			
			if (mcp_check_flag(RX1IF_BIT))
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <mcp_check_flag>
     bca:	88 23       	and	r24, r24
     bcc:	11 f1       	breq	.+68     	; 0xc12 <main+0x13e>
			{
				
				DIO_TOGGLE(29);
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
				//PORTA ^= (1 << 2);
				mcp_clear_flag(RX1IF_BIT);
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <mcp_clear_flag>
				mcp_rx_data(MCP_RX(1), break_f);
     bda:	be 01       	movw	r22, r28
     bdc:	6d 5f       	subi	r22, 0xFD	; 253
     bde:	7f 4f       	sbci	r23, 0xFF	; 255
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	0e 94 5d 07 	call	0xeba	; 0xeba <mcp_rx_data>
				
				if (break_f[0] == 'B')
     be6:	9b 81       	ldd	r25, Y+3	; 0x03
     be8:	92 34       	cpi	r25, 0x42	; 66
     bea:	99 f4       	brne	.+38     	; 0xc12 <main+0x13e>
				{
					
					if (break_f[1] == '1')
     bec:	8c 81       	ldd	r24, Y+4	; 0x04
     bee:	81 33       	cpi	r24, 0x31	; 49
     bf0:	41 f4       	brne	.+16     	; 0xc02 <main+0x12e>
					{
						barrier_flag = 1;
						esp_send("{BB}", ch_num);
     bf2:	60 2f       	mov	r22, r16
     bf4:	83 e9       	ldi	r24, 0x93	; 147
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 90 02 	call	0x520	; 0x520 <esp_send>
				if (break_f[0] == 'B')
				{
					
					if (break_f[1] == '1')
					{
						barrier_flag = 1;
     bfc:	ee 24       	eor	r14, r14
     bfe:	e3 94       	inc	r14
     c00:	08 c0       	rjmp	.+16     	; 0xc12 <main+0x13e>
						esp_send("{BB}", ch_num);
					}
					else if (break_f[1] == '0')
     c02:	80 33       	cpi	r24, 0x30	; 48
     c04:	31 f4       	brne	.+12     	; 0xc12 <main+0x13e>
					{
						barrier_flag = 0;
						esp_send("{BN}", ch_num);
     c06:	60 2f       	mov	r22, r16
     c08:	88 e9       	ldi	r24, 0x98	; 152
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 90 02 	call	0x520	; 0x520 <esp_send>
						barrier_flag = 1;
						esp_send("{BB}", ch_num);
					}
					else if (break_f[1] == '0')
					{
						barrier_flag = 0;
     c10:	ef 2c       	mov	r14, r15
				//esp_send_alert(break_f, ch_num);		
			}
#endif
			
			//ESP CODE
			if (list->size > 0)
     c12:	e0 91 16 01 	lds	r30, 0x0116
     c16:	f0 91 17 01 	lds	r31, 0x0117
     c1a:	24 81       	ldd	r18, Z+4	; 0x04
     c1c:	35 81       	ldd	r19, Z+5	; 0x05
     c1e:	23 2b       	or	r18, r19
     c20:	09 f4       	brne	.+2      	; 0xc24 <main+0x150>
     c22:	5f c0       	rjmp	.+190    	; 0xce2 <main+0x20e>
			{
				
				pop(list, e_ptr, sizeof(element_t));
     c24:	60 91 71 00 	lds	r22, 0x0071
     c28:	70 91 72 00 	lds	r23, 0x0072
     c2c:	43 e0       	ldi	r20, 0x03	; 3
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	cf 01       	movw	r24, r30
     c32:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <pop>

				//then it's an esp request
				if (e_ptr->request_type == 'S')
     c36:	e0 91 71 00 	lds	r30, 0x0071
     c3a:	f0 91 72 00 	lds	r31, 0x0072
     c3e:	92 81       	ldd	r25, Z+2	; 0x02
     c40:	93 35       	cpi	r25, 0x53	; 83
     c42:	21 f4       	brne	.+8      	; 0xc4c <main+0x178>
				{
					esp_send_smoke(ch_num[0]);
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	0e 94 09 03 	call	0x612	; 0x612 <esp_send_smoke>
     c4a:	48 c0       	rjmp	.+144    	; 0xcdc <main+0x208>
				}
				else if (e_ptr->request_type == 'T')
     c4c:	94 35       	cpi	r25, 0x54	; 84
     c4e:	21 f4       	brne	.+8      	; 0xc58 <main+0x184>
				{
					esp_send_temp(ch_num[0]);
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	0e 94 82 03 	call	0x704	; 0x704 <esp_send_temp>
     c56:	42 c0       	rjmp	.+132    	; 0xcdc <main+0x208>
				}
				else if (e_ptr->request_type == 'H')
     c58:	98 34       	cpi	r25, 0x48	; 72
     c5a:	21 f4       	brne	.+8      	; 0xc64 <main+0x190>
				{
					esp_send_H2O(ch_num[0]);
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <esp_send_H2O>
     c62:	3c c0       	rjmp	.+120    	; 0xcdc <main+0x208>
				}
				else if (e_ptr->request_type == 'D')
     c64:	94 34       	cpi	r25, 0x44	; 68
     c66:	d1 f5       	brne	.+116    	; 0xcdc <main+0x208>
				{
					if ( e_ptr->str[0] == 'R')
     c68:	01 90       	ld	r0, Z+
     c6a:	f0 81       	ld	r31, Z
     c6c:	e0 2d       	mov	r30, r0
     c6e:	80 81       	ld	r24, Z
     c70:	82 35       	cpi	r24, 0x52	; 82
     c72:	19 f4       	brne	.+6      	; 0xc7a <main+0x1a6>
					{
						turn_right();
     c74:	0e 94 36 01 	call	0x26c	; 0x26c <turn_right>
     c78:	31 c0       	rjmp	.+98     	; 0xcdc <main+0x208>
					}
					else if ( e_ptr->str[0] == 'L')
     c7a:	8c 34       	cpi	r24, 0x4C	; 76
     c7c:	19 f4       	brne	.+6      	; 0xc84 <main+0x1b0>
					{
						turn_left();
     c7e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <turn_left>
     c82:	2c c0       	rjmp	.+88     	; 0xcdc <main+0x208>
					}
					else if ( e_ptr->str[0] == 'F')
     c84:	86 34       	cpi	r24, 0x46	; 70
     c86:	99 f4       	brne	.+38     	; 0xcae <main+0x1da>
					{
						if (!barrier_flag)
     c88:	e1 10       	cpse	r14, r1
     c8a:	28 c0       	rjmp	.+80     	; 0xcdc <main+0x208>
	DIO_SET_VAL(R_BACKWARD, DIO_LOW);
}

inline void move_forward()
{
	DIO_SET_VAL(R_FORWARD, DIO_HIGH);
     c8c:	61 e0       	ldi	r22, 0x01	; 1
     c8e:	88 e0       	ldi	r24, 0x08	; 8
     c90:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(R_BACKWARD, DIO_LOW);
     c94:	6f 2d       	mov	r22, r15
     c96:	89 e0       	ldi	r24, 0x09	; 9
     c98:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_FORWARD, DIO_HIGH);
     c9c:	61 e0       	ldi	r22, 0x01	; 1
     c9e:	8a e0       	ldi	r24, 0x0A	; 10
     ca0:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_BACKWARD, DIO_LOW);
     ca4:	6f 2d       	mov	r22, r15
     ca6:	8b e0       	ldi	r24, 0x0B	; 11
     ca8:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
     cac:	17 c0       	rjmp	.+46     	; 0xcdc <main+0x208>
						{
							move_forward();
						}
						
					}
					else if ( e_ptr->str[0] == 'B')
     cae:	82 34       	cpi	r24, 0x42	; 66
     cb0:	19 f4       	brne	.+6      	; 0xcb8 <main+0x1e4>
					{
						move_backward();
     cb2:	0e 94 47 01 	call	0x28e	; 0x28e <move_backward>
     cb6:	12 c0       	rjmp	.+36     	; 0xcdc <main+0x208>
					}
					else if ( e_ptr->str[0] == 'S')
     cb8:	83 35       	cpi	r24, 0x53	; 83
     cba:	81 f4       	brne	.+32     	; 0xcdc <main+0x208>
	DIO_SET_VAL(R_BACKWARD, DIO_LOW);
}

inline void motors_stop()
{
	DIO_SET_VAL(L_FORWARD, DIO_LOW);
     cbc:	6f 2d       	mov	r22, r15
     cbe:	8a e0       	ldi	r24, 0x0A	; 10
     cc0:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_BACKWARD, DIO_LOW);
     cc4:	6f 2d       	mov	r22, r15
     cc6:	8b e0       	ldi	r24, 0x0B	; 11
     cc8:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(R_FORWARD, DIO_LOW);
     ccc:	6f 2d       	mov	r22, r15
     cce:	88 e0       	ldi	r24, 0x08	; 8
     cd0:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(R_BACKWARD, DIO_LOW);
     cd4:	6f 2d       	mov	r22, r15
     cd6:	89 e0       	ldi	r24, 0x09	; 9
     cd8:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
						motors_stop();
					}
					
				}
				
				alarm();
     cdc:	0e 94 1e 02 	call	0x43c	; 0x43c <alarm>
     ce0:	61 cf       	rjmp	.-318    	; 0xba4 <main+0xd0>
			}
			else // no +IPD, , found
			{
				DIO_TOGGLE(31);
     ce2:	8f 2d       	mov	r24, r15
     ce4:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
     ce8:	5d cf       	rjmp	.-326    	; 0xba4 <main+0xd0>

00000cea <mcp_reset>:
}


void mcp_reset()
{
	DIO_SET_VAL(SS, DIO_LOW);
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	8c e0       	ldi	r24, 0x0C	; 12
     cee:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	
	spi_send(MCP_RESET);
     cf2:	80 ec       	ldi	r24, 0xC0	; 192
     cf4:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	DIO_SET_VAL(SS, DIO_HIGH);
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	8c e0       	ldi	r24, 0x0C	; 12
     cfc:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
     d00:	08 95       	ret

00000d02 <mcp_read>:
}



void mcp_read(unint8_t add, unint8_t * data, unint8_t num_bytes)
{
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	d8 2f       	mov	r29, r24
     d0c:	8b 01       	movw	r16, r22
     d0e:	c4 2f       	mov	r28, r20
	DIO_SET_VAL(SS, DIO_LOW);
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	8c e0       	ldi	r24, 0x0C	; 12
     d14:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	spi_send(0b00000011);
     d18:	83 e0       	ldi	r24, 0x03	; 3
     d1a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send(add);
     d1e:	8d 2f       	mov	r24, r29
     d20:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	
	if (num_bytes == 1)
     d24:	c1 30       	cpi	r28, 0x01	; 1
     d26:	29 f4       	brne	.+10     	; 0xd32 <mcp_read+0x30>
	{
		data[0] = spi_read();
     d28:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <spi_read>
     d2c:	f8 01       	movw	r30, r16
     d2e:	80 83       	st	Z, r24
     d30:	04 c0       	rjmp	.+8      	; 0xd3a <mcp_read+0x38>
	}
	else
	{
		spi_read_str_size(data, num_bytes);
     d32:	6c 2f       	mov	r22, r28
     d34:	c8 01       	movw	r24, r16
     d36:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <spi_read_str_size>
	}

	DIO_SET_VAL(SS, DIO_HIGH);
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	8c e0       	ldi	r24, 0x0C	; 12
     d3e:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	08 95       	ret

00000d4c <mcp_set_mask_filter>:
	DIO_SET_VAL(SS, DIO_HIGH);
}


void mcp_set_mask_filter(unint8_t m_f_no, unint8_t id_type, unint32_t id)
{
     d4c:	cf 92       	push	r12
     d4e:	df 92       	push	r13
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	d8 2f       	mov	r29, r24
     d5a:	c6 2f       	mov	r28, r22
     d5c:	69 01       	movw	r12, r18
     d5e:	7a 01       	movw	r14, r20
	DIO_SET_VAL(SS, DIO_LOW);
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	8c e0       	ldi	r24, 0x0C	; 12
     d64:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	spi_send(0b00000010);
     d68:	82 e0       	ldi	r24, 0x02	; 2
     d6a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send(m_f_no);
     d6e:	8d 2f       	mov	r24, r29
     d70:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>

	if (id_type == 1) //if extended ID
     d74:	c1 30       	cpi	r28, 0x01	; 1
     d76:	31 f5       	brne	.+76     	; 0xdc4 <mcp_set_mask_filter+0x78>


inline void mcp_set_eid(unint32_t id)
{

	spi_send((id >> 21));
     d78:	d7 01       	movw	r26, r14
     d7a:	c6 01       	movw	r24, r12
     d7c:	07 2e       	mov	r0, r23
     d7e:	75 e1       	ldi	r23, 0x15	; 21
     d80:	b6 95       	lsr	r27
     d82:	a7 95       	ror	r26
     d84:	97 95       	ror	r25
     d86:	87 95       	ror	r24
     d88:	7a 95       	dec	r23
     d8a:	d1 f7       	brne	.-12     	; 0xd80 <mcp_set_mask_filter+0x34>
     d8c:	70 2d       	mov	r23, r0
     d8e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send((((id >> 13) & 0b11100000) | (1 << 3) | ((id >> 16) & 0b00000011)));
     d92:	d7 01       	movw	r26, r14
     d94:	c6 01       	movw	r24, r12
     d96:	07 2e       	mov	r0, r23
     d98:	7d e0       	ldi	r23, 0x0D	; 13
     d9a:	b6 95       	lsr	r27
     d9c:	a7 95       	ror	r26
     d9e:	97 95       	ror	r25
     da0:	87 95       	ror	r24
     da2:	7a 95       	dec	r23
     da4:	d1 f7       	brne	.-12     	; 0xd9a <mcp_set_mask_filter+0x4e>
     da6:	70 2d       	mov	r23, r0
     da8:	80 7e       	andi	r24, 0xE0	; 224
     daa:	9e 2d       	mov	r25, r14
     dac:	93 70       	andi	r25, 0x03	; 3
     dae:	89 2b       	or	r24, r25
     db0:	88 60       	ori	r24, 0x08	; 8
     db2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send((id >> 8));
     db6:	8d 2d       	mov	r24, r13
     db8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send(id);
     dbc:	8c 2d       	mov	r24, r12
     dbe:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
     dc2:	0f c0       	rjmp	.+30     	; 0xde2 <mcp_set_mask_filter+0x96>
}

inline void mcp_set_sid(unint16_t id)
{
	spi_send((id >> 3));
     dc4:	c6 01       	movw	r24, r12
     dc6:	96 95       	lsr	r25
     dc8:	87 95       	ror	r24
     dca:	96 95       	lsr	r25
     dcc:	87 95       	ror	r24
     dce:	96 95       	lsr	r25
     dd0:	87 95       	ror	r24
     dd2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send(((id << 5)));
     dd6:	8c 2d       	mov	r24, r12
     dd8:	82 95       	swap	r24
     dda:	88 0f       	add	r24, r24
     ddc:	80 7e       	andi	r24, 0xE0	; 224
     dde:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	else // if standard ID
	{
		mcp_set_sid(id);
	}
	
	DIO_SET_VAL(SS, DIO_HIGH);
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	8c e0       	ldi	r24, 0x0C	; 12
     de6:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
}
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	ff 90       	pop	r15
     df0:	ef 90       	pop	r14
     df2:	df 90       	pop	r13
     df4:	cf 90       	pop	r12
     df6:	08 95       	ret

00000df8 <mcp_tx_id>:


void mcp_tx_id(unint8_t tx_no, unint8_t id_type, unint32_t id)
{
     df8:	cf 92       	push	r12
     dfa:	df 92       	push	r13
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	c8 2f       	mov	r28, r24
     e06:	d6 2f       	mov	r29, r22
     e08:	69 01       	movw	r12, r18
     e0a:	7a 01       	movw	r14, r20
	//unint8_t var;
	
	DIO_SET_VAL(SS, DIO_LOW);
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	8c e0       	ldi	r24, 0x0C	; 12
     e10:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>

	if (id_type == 1) //if extended ID
     e14:	d1 30       	cpi	r29, 0x01	; 1
     e16:	81 f5       	brne	.+96     	; 0xe78 <mcp_tx_id+0x80>
	{
		spi_send(0b00000010);
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
		spi_send((TXB0SIDH + ((tx_no >> 1) << 4)));
     e1e:	c6 95       	lsr	r28
     e20:	8c 2f       	mov	r24, r28
     e22:	82 95       	swap	r24
     e24:	80 7f       	andi	r24, 0xF0	; 240
     e26:	8f 5c       	subi	r24, 0xCF	; 207
     e28:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>


inline void mcp_set_eid(unint32_t id)
{

	spi_send((id >> 21));
     e2c:	d7 01       	movw	r26, r14
     e2e:	c6 01       	movw	r24, r12
     e30:	07 2e       	mov	r0, r23
     e32:	75 e1       	ldi	r23, 0x15	; 21
     e34:	b6 95       	lsr	r27
     e36:	a7 95       	ror	r26
     e38:	97 95       	ror	r25
     e3a:	87 95       	ror	r24
     e3c:	7a 95       	dec	r23
     e3e:	d1 f7       	brne	.-12     	; 0xe34 <mcp_tx_id+0x3c>
     e40:	70 2d       	mov	r23, r0
     e42:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send((((id >> 13) & 0b11100000) | (1 << 3) | ((id >> 16) & 0b00000011)));
     e46:	d7 01       	movw	r26, r14
     e48:	c6 01       	movw	r24, r12
     e4a:	07 2e       	mov	r0, r23
     e4c:	7d e0       	ldi	r23, 0x0D	; 13
     e4e:	b6 95       	lsr	r27
     e50:	a7 95       	ror	r26
     e52:	97 95       	ror	r25
     e54:	87 95       	ror	r24
     e56:	7a 95       	dec	r23
     e58:	d1 f7       	brne	.-12     	; 0xe4e <mcp_tx_id+0x56>
     e5a:	70 2d       	mov	r23, r0
     e5c:	80 7e       	andi	r24, 0xE0	; 224
     e5e:	9e 2d       	mov	r25, r14
     e60:	93 70       	andi	r25, 0x03	; 3
     e62:	89 2b       	or	r24, r25
     e64:	88 60       	ori	r24, 0x08	; 8
     e66:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send((id >> 8));
     e6a:	8d 2d       	mov	r24, r13
     e6c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send(id);
     e70:	8c 2d       	mov	r24, r12
     e72:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
     e76:	16 c0       	rjmp	.+44     	; 0xea4 <mcp_tx_id+0xac>
		mcp_set_eid(id);		
	}
	else // if standard ID
	{
		
		if (tx_no == MCP_TX(0))
     e78:	c1 30       	cpi	r28, 0x01	; 1
     e7a:	09 f4       	brne	.+2      	; 0xe7e <mcp_tx_id+0x86>
		{
			tx_no >>= 1;
     e7c:	c0 e0       	ldi	r28, 0x00	; 0
		}

		spi_send(0b01000000 | tx_no);
     e7e:	8c 2f       	mov	r24, r28
     e80:	80 64       	ori	r24, 0x40	; 64
     e82:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send(id);
}

inline void mcp_set_sid(unint16_t id)
{
	spi_send((id >> 3));
     e86:	c6 01       	movw	r24, r12
     e88:	96 95       	lsr	r25
     e8a:	87 95       	ror	r24
     e8c:	96 95       	lsr	r25
     e8e:	87 95       	ror	r24
     e90:	96 95       	lsr	r25
     e92:	87 95       	ror	r24
     e94:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send(((id << 5)));
     e98:	8c 2d       	mov	r24, r12
     e9a:	82 95       	swap	r24
     e9c:	88 0f       	add	r24, r24
     e9e:	80 7e       	andi	r24, 0xE0	; 224
     ea0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
		spi_send(0b01000000 | tx_no);
		mcp_set_sid(id);

	}
	
	DIO_SET_VAL(SS, DIO_HIGH);
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	8c e0       	ldi	r24, 0x0C	; 12
     ea8:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
}
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	ff 90       	pop	r15
     eb2:	ef 90       	pop	r14
     eb4:	df 90       	pop	r13
     eb6:	cf 90       	pop	r12
     eb8:	08 95       	ret

00000eba <mcp_rx_data>:
}

//void mcp_filter(unint8_t filter_no

void mcp_rx_data(unint8_t rx_no, unint8_t * rx_buff)
{
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	c8 2f       	mov	r28, r24
     ec2:	8b 01       	movw	r16, r22
	unint8_t data_size = 0;
	
	DIO_SET_VAL(SS, DIO_LOW);
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	8c e0       	ldi	r24, 0x0C	; 12
     ec8:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	spi_send(0b00000011);
     ecc:	83 e0       	ldi	r24, 0x03	; 3
     ece:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send(RXB0DLC + (rx_no << 4));
     ed2:	8c 2f       	mov	r24, r28
     ed4:	82 95       	swap	r24
     ed6:	80 7f       	andi	r24, 0xF0	; 240
     ed8:	8b 59       	subi	r24, 0x9B	; 155
     eda:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	data_size = spi_read();
     ede:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <spi_read>
	//data_size = 8;
	spi_read_str_size(rx_buff, (data_size & 0x0f));
     ee2:	68 2f       	mov	r22, r24
     ee4:	6f 70       	andi	r22, 0x0F	; 15
     ee6:	c8 01       	movw	r24, r16
     ee8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <spi_read_str_size>
	DIO_SET_VAL(SS, DIO_HIGH);
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	8c e0       	ldi	r24, 0x0C	; 12
     ef0:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
}
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	08 95       	ret

00000efc <mcp_tx_data>:


void mcp_tx_data(unint8_t tx_no, uint8_t d_r_frame, unint8_t * data, unint8_t d_size)
{
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	c8 2f       	mov	r28, r24
     f08:	d6 2f       	mov	r29, r22
     f0a:	7a 01       	movw	r14, r20
     f0c:	12 2f       	mov	r17, r18
	DIO_SET_VAL(SS, DIO_LOW);
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	8c e0       	ldi	r24, 0x0C	; 12
     f12:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	//DIO_SET_VAL(SS, DIO_LOW);
	spi_send(0b00000010);
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send(TXB0DLC + ((tx_no >> 1) << 4));
     f1c:	c6 95       	lsr	r28
     f1e:	8c 2f       	mov	r24, r28
     f20:	82 95       	swap	r24
     f22:	80 7f       	andi	r24, 0xF0	; 240
     f24:	8b 5c       	subi	r24, 0xCB	; 203
     f26:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send(d_size | (d_r_frame << 6));	
     f2a:	20 e4       	ldi	r18, 0x40	; 64
     f2c:	d2 9f       	mul	r29, r18
     f2e:	c0 01       	movw	r24, r0
     f30:	11 24       	eor	r1, r1
     f32:	81 2b       	or	r24, r17
     f34:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	
	if (d_r_frame == 0) //if the frame is A datA frame .. the store the bytes into the datA segment
     f38:	d1 11       	cpse	r29, r1
     f3a:	04 c0       	rjmp	.+8      	; 0xf44 <mcp_tx_data+0x48>
	{
		spi_send_str_size(data, d_size);
     f3c:	61 2f       	mov	r22, r17
     f3e:	c7 01       	movw	r24, r14
     f40:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <spi_send_str_size>
	}	
	
	DIO_SET_VAL(SS, DIO_HIGH);
     f44:	61 e0       	ldi	r22, 0x01	; 1
     f46:	8c e0       	ldi	r24, 0x0C	; 12
     f48:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	//DIO_SET_VAL(SS, DIO_HIGH);
}
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	1f 91       	pop	r17
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
     f56:	08 95       	ret

00000f58 <mcp_tx_trigger>:

void mcp_tx_trigger(unint8_t tx_no)
{
     f58:	cf 93       	push	r28
     f5a:	c8 2f       	mov	r28, r24
	DIO_SET_VAL(SS, DIO_LOW);
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	8c e0       	ldi	r24, 0x0C	; 12
     f60:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	//DIO_SET_VAL(SS, DIO_LOW);	
	spi_send(0b10000000 | tx_no);		
     f64:	8c 2f       	mov	r24, r28
     f66:	80 68       	ori	r24, 0x80	; 128
     f68:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	DIO_SET_VAL(SS, DIO_HIGH);
     f6c:	61 e0       	ldi	r22, 0x01	; 1
     f6e:	8c e0       	ldi	r24, 0x0C	; 12
     f70:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     f74:	80 e1       	ldi	r24, 0x10	; 16
     f76:	97 e2       	ldi	r25, 0x27	; 39
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	f1 f7       	brne	.-4      	; 0xf78 <mcp_tx_trigger+0x20>
	//SPI_PORT|= (1 << SS);
	delay_msec(5);
}
     f7c:	cf 91       	pop	r28
     f7e:	08 95       	ret

00000f80 <mcp_bit_modify>:



void mcp_bit_modify(unint8_t add, unint8_t mask, unint8_t data)
{
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	18 2f       	mov	r17, r24
     f88:	d6 2f       	mov	r29, r22
     f8a:	c4 2f       	mov	r28, r20
	DIO_SET_VAL(SS, DIO_LOW);
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	8c e0       	ldi	r24, 0x0C	; 12
     f90:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	//DIO_SET_VAL(SS, DIO_LOW);
	spi_send(BIT_MODIFY);
     f94:	85 e0       	ldi	r24, 0x05	; 5
     f96:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send(add);
     f9a:	81 2f       	mov	r24, r17
     f9c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send(mask);
     fa0:	8d 2f       	mov	r24, r29
     fa2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	spi_send(data);
     fa6:	8c 2f       	mov	r24, r28
     fa8:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	DIO_SET_VAL(SS, DIO_HIGH);
     fac:	61 e0       	ldi	r22, 0x01	; 1
     fae:	8c e0       	ldi	r24, 0x0C	; 12
     fb0:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	//SPI_PORT|= (1 << SS);
}
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	08 95       	ret

00000fbc <mcp_init>:

inline void  mcp_set_sid(unint16_t id);

void mcp_init()
{
	spi_init();
     fbc:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <spi_init>
	
	mcp_reset();
     fc0:	0e 94 75 06 	call	0xcea	; 0xcea <mcp_reset>
	
	//RX0BF - RX1BF STATES
	mcp_bit_modify(BFPCTRL, 0b00001111, RX0BF_STATE | RX1BF_STATE);
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	6f e0       	ldi	r22, 0x0F	; 15
     fc8:	8c e0       	ldi	r24, 0x0C	; 12
     fca:	0e 94 c0 07 	call	0xf80	; 0xf80 <mcp_bit_modify>
	
	//REQUENST TRANSMISSION MESSAGE viA PINS
	mcp_bit_modify(TXRTSCTRL, 0b00000111, RTS_PINS);
     fce:	40 e0       	ldi	r20, 0x00	; 0
     fd0:	67 e0       	ldi	r22, 0x07	; 7
     fd2:	8d e0       	ldi	r24, 0x0D	; 13
     fd4:	0e 94 c0 07 	call	0xf80	; 0xf80 <mcp_bit_modify>
	
	//remove all masks
	mcp_bit_modify(RXB0CTRL, 0b01100000, 0b00000000);
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	60 e6       	ldi	r22, 0x60	; 96
     fdc:	80 e6       	ldi	r24, 0x60	; 96
     fde:	0e 94 c0 07 	call	0xf80	; 0xf80 <mcp_bit_modify>
	mcp_bit_modify(RXB1CTRL, 0b01100000, 0b00000000);
     fe2:	40 e0       	ldi	r20, 0x00	; 0
     fe4:	60 e6       	ldi	r22, 0x60	; 96
     fe6:	80 e7       	ldi	r24, 0x70	; 112
     fe8:	0e 94 c0 07 	call	0xf80	; 0xf80 <mcp_bit_modify>
	
	mcp_bit_modify(CANTINTE, 0b11111111, MCP_INT_BITS);
     fec:	4f ef       	ldi	r20, 0xFF	; 255
     fee:	6f ef       	ldi	r22, 0xFF	; 255
     ff0:	8b e2       	ldi	r24, 0x2B	; 43
     ff2:	0e 94 c0 07 	call	0xf80	; 0xf80 <mcp_bit_modify>

	mcp_bit_modify(CNF1, 0b11111111, ((SJW - 1) << 6) | BRP);
     ff6:	41 e4       	ldi	r20, 0x41	; 65
     ff8:	6f ef       	ldi	r22, 0xFF	; 255
     ffa:	8a e2       	ldi	r24, 0x2A	; 42
     ffc:	0e 94 c0 07 	call	0xf80	; 0xf80 <mcp_bit_modify>
	
	mcp_bit_modify(CNF2, 0b11111111, (1 << 7) | (SAMP_TIMES << 6) | ((PS1_SEG - 1) << 3) | (PROP_SEG - 1));
    1000:	41 eb       	ldi	r20, 0xB1	; 177
    1002:	6f ef       	ldi	r22, 0xFF	; 255
    1004:	89 e2       	ldi	r24, 0x29	; 41
    1006:	0e 94 c0 07 	call	0xf80	; 0xf80 <mcp_bit_modify>

	mcp_bit_modify(CNF3, 0b01000111, (PS2_SEG - 1));
    100a:	45 e0       	ldi	r20, 0x05	; 5
    100c:	67 e4       	ldi	r22, 0x47	; 71
    100e:	88 e2       	ldi	r24, 0x28	; 40
    1010:	0e 94 c0 07 	call	0xf80	; 0xf80 <mcp_bit_modify>
	
	

	
	#if (MASK0_ID != CLEARED)
	mcp_set_mask_filter(MCP_MASK(0), MASK0_TYPE, MASK0_ID);
    1014:	2f ef       	ldi	r18, 0xFF	; 255
    1016:	3f e0       	ldi	r19, 0x0F	; 15
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	80 e2       	ldi	r24, 0x20	; 32
    1020:	0e 94 a6 06 	call	0xd4c	; 0xd4c <mcp_set_mask_filter>
	#endif
	
	#if (MASK1_ID != CLEARED)
	mcp_set_mask_filter(MCP_MASK(1), MASK1_TYPE, MASK1_ID);
    1024:	2f ef       	ldi	r18, 0xFF	; 255
    1026:	3f e0       	ldi	r19, 0x0F	; 15
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	84 e2       	ldi	r24, 0x24	; 36
    1030:	0e 94 a6 06 	call	0xd4c	; 0xd4c <mcp_set_mask_filter>
	#endif
	
	#if (FILTER0_ID != CLEARED)
	mcp_set_mask_filter(MCP_FILTER(0), FILTER0_TYPE, FILTER0_ID);
    1034:	2f e8       	ldi	r18, 0x8F	; 143
    1036:	35 e0       	ldi	r19, 0x05	; 5
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	0e 94 a6 06 	call	0xd4c	; 0xd4c <mcp_set_mask_filter>
	#if (FILTER1_ID != CLEARED)
	mcp_set_mask_filter(MCP_FILTER(1), FILTER1_TYPE, FILTER1_ID);
	#endif
	
	#if (FILTER2_ID != CLEARED)
	mcp_set_mask_filter(MCP_FILTER(2), FILTER2_TYPE, FILTER2_ID);
    1044:	2f e7       	ldi	r18, 0x7F	; 127
    1046:	35 e0       	ldi	r19, 0x05	; 5
    1048:	40 e0       	ldi	r20, 0x00	; 0
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	88 e0       	ldi	r24, 0x08	; 8
    1050:	0e 94 a6 06 	call	0xd4c	; 0xd4c <mcp_set_mask_filter>
	#endif
	
	#if (FILTER3_ID != CLEARED)
	mcp_set_mask_filter(MCP_FILTER(3), FILTER3_TYPE, FILTER3_ID);
    1054:	2f e6       	ldi	r18, 0x6F	; 111
    1056:	35 e0       	ldi	r19, 0x05	; 5
    1058:	40 e0       	ldi	r20, 0x00	; 0
    105a:	50 e0       	ldi	r21, 0x00	; 0
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	80 e1       	ldi	r24, 0x10	; 16
    1060:	0e 94 a6 06 	call	0xd4c	; 0xd4c <mcp_set_mask_filter>
	#endif
	
	#if (FILTER4_ID != CLEARED)
	mcp_set_mask_filter(MCP_FILTER(4), FILTER4_TYPE, FILTER4_ID);
    1064:	2f e5       	ldi	r18, 0x5F	; 95
    1066:	35 e0       	ldi	r19, 0x05	; 5
    1068:	40 e0       	ldi	r20, 0x00	; 0
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	60 e0       	ldi	r22, 0x00	; 0
    106e:	84 e1       	ldi	r24, 0x14	; 20
    1070:	0e 94 a6 06 	call	0xd4c	; 0xd4c <mcp_set_mask_filter>
	#endif
	
	#if (FILTER5_ID != CLEARED)
	mcp_set_mask_filter(MCP_FILTER(5), FILTER5_TYPE, FILTER5_ID);
    1074:	2f e4       	ldi	r18, 0x4F	; 79
    1076:	35 e0       	ldi	r19, 0x05	; 5
    1078:	40 e0       	ldi	r20, 0x00	; 0
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	88 e1       	ldi	r24, 0x18	; 24
    1080:	0e 94 a6 06 	call	0xd4c	; 0xd4c <mcp_set_mask_filter>
	#endif
	
	
	//determine the operation mode.. one shot mode
	//CANCTRL = 0b01001000;  //loopback mode ... one shot mode
	mcp_bit_modify(CANCTRL, 0b11111111, (MCP_OP_MODE << 5) | (ONE_SHOT << 3) | (MCP_CLOCKOUT << 2) | (MCP_CKOUT_PRE));
    1084:	48 e0       	ldi	r20, 0x08	; 8
    1086:	6f ef       	ldi	r22, 0xFF	; 255
    1088:	8f e2       	ldi	r24, 0x2F	; 47
    108a:	0e 94 c0 07 	call	0xf80	; 0xf80 <mcp_bit_modify>
    108e:	08 95       	ret

00001090 <mcp_status>:
}



uint8_t mcp_status()
{
    1090:	cf 93       	push	r28
	uint8_t data;
	
	DIO_SET_VAL(SS, DIO_LOW);
    1092:	60 e0       	ldi	r22, 0x00	; 0
    1094:	8c e0       	ldi	r24, 0x0C	; 12
    1096:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	spi_send(0b10100000);
    109a:	80 ea       	ldi	r24, 0xA0	; 160
    109c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
	data = spi_read();
    10a0:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <spi_read>
    10a4:	c8 2f       	mov	r28, r24
	DIO_SET_VAL(SS, DIO_HIGH);
    10a6:	61 e0       	ldi	r22, 0x01	; 1
    10a8:	8c e0       	ldi	r24, 0x0C	; 12
    10aa:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>

	return data;
}
    10ae:	8c 2f       	mov	r24, r28
    10b0:	cf 91       	pop	r28
    10b2:	08 95       	ret

000010b4 <mcp_check_flag>:
TXWAR
RXWAR
EWARN
*/
uint8_t mcp_check_flag(uint8_t flag)
{
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	1f 92       	push	r1
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	18 2f       	mov	r17, r24
	uint8_t state;
	uint8_t data;
	
	if (flag < 8)
    10c2:	88 30       	cpi	r24, 0x08	; 8
    10c4:	58 f4       	brcc	.+22     	; 0x10dc <mcp_check_flag+0x28>
	{
		state = BIT_IS_SET(mcp_status(), flag);
    10c6:	0e 94 48 08 	call	0x1090	; 0x1090 <mcp_status>
    10ca:	21 e0       	ldi	r18, 0x01	; 1
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <mcp_check_flag+0x20>
    10d0:	22 0f       	add	r18, r18
    10d2:	33 1f       	adc	r19, r19
    10d4:	1a 95       	dec	r17
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <mcp_check_flag+0x1c>
    10d8:	82 23       	and	r24, r18
    10da:	61 c0       	rjmp	.+194    	; 0x119e <mcp_check_flag+0xea>
	}
	else if (flag < 16)//from CANTINF
    10dc:	80 31       	cpi	r24, 0x10	; 16
    10de:	90 f4       	brcc	.+36     	; 0x1104 <mcp_check_flag+0x50>
	{
		mcp_read(CANTINF, &data, 1);
    10e0:	41 e0       	ldi	r20, 0x01	; 1
    10e2:	be 01       	movw	r22, r28
    10e4:	6f 5f       	subi	r22, 0xFF	; 255
    10e6:	7f 4f       	sbci	r23, 0xFF	; 255
    10e8:	8c e2       	ldi	r24, 0x2C	; 44
    10ea:	0e 94 81 06 	call	0xd02	; 0xd02 <mcp_read>
		state = BIT_IS_SET(data, (flag - 8));
    10ee:	18 50       	subi	r17, 0x08	; 8
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <mcp_check_flag+0x46>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	1a 95       	dec	r17
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <mcp_check_flag+0x42>
    10fe:	29 81       	ldd	r18, Y+1	; 0x01
    1100:	82 23       	and	r24, r18
    1102:	4d c0       	rjmp	.+154    	; 0x119e <mcp_check_flag+0xea>
	}
	else if (flag < 24) // TXB0CTRL
    1104:	88 31       	cpi	r24, 0x18	; 24
    1106:	90 f4       	brcc	.+36     	; 0x112c <mcp_check_flag+0x78>
	{
		mcp_read(TXB0CTRL, &data, 1);
    1108:	41 e0       	ldi	r20, 0x01	; 1
    110a:	be 01       	movw	r22, r28
    110c:	6f 5f       	subi	r22, 0xFF	; 255
    110e:	7f 4f       	sbci	r23, 0xFF	; 255
    1110:	80 e3       	ldi	r24, 0x30	; 48
    1112:	0e 94 81 06 	call	0xd02	; 0xd02 <mcp_read>
		state = BIT_IS_SET(data, (flag - 16));
    1116:	10 51       	subi	r17, 0x10	; 16
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <mcp_check_flag+0x6e>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	1a 95       	dec	r17
    1124:	e2 f7       	brpl	.-8      	; 0x111e <mcp_check_flag+0x6a>
    1126:	29 81       	ldd	r18, Y+1	; 0x01
    1128:	82 23       	and	r24, r18
    112a:	39 c0       	rjmp	.+114    	; 0x119e <mcp_check_flag+0xea>
	}
	else if (flag < 32)// TXB1CTRL
    112c:	80 32       	cpi	r24, 0x20	; 32
    112e:	90 f4       	brcc	.+36     	; 0x1154 <mcp_check_flag+0xa0>
	{
		mcp_read(TXB1CTRL, &data, 1);
    1130:	41 e0       	ldi	r20, 0x01	; 1
    1132:	be 01       	movw	r22, r28
    1134:	6f 5f       	subi	r22, 0xFF	; 255
    1136:	7f 4f       	sbci	r23, 0xFF	; 255
    1138:	80 e4       	ldi	r24, 0x40	; 64
    113a:	0e 94 81 06 	call	0xd02	; 0xd02 <mcp_read>
		state = BIT_IS_SET(data, (flag - 24));
    113e:	18 51       	subi	r17, 0x18	; 24
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	02 c0       	rjmp	.+4      	; 0x114a <mcp_check_flag+0x96>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	1a 95       	dec	r17
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <mcp_check_flag+0x92>
    114e:	29 81       	ldd	r18, Y+1	; 0x01
    1150:	82 23       	and	r24, r18
    1152:	25 c0       	rjmp	.+74     	; 0x119e <mcp_check_flag+0xea>
	}
	else if (flag < 40)// TXB2CTRL
    1154:	88 32       	cpi	r24, 0x28	; 40
    1156:	90 f4       	brcc	.+36     	; 0x117c <mcp_check_flag+0xc8>
	{
		mcp_read(TXB2CTRL, &data, 1);
    1158:	41 e0       	ldi	r20, 0x01	; 1
    115a:	be 01       	movw	r22, r28
    115c:	6f 5f       	subi	r22, 0xFF	; 255
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	80 e5       	ldi	r24, 0x50	; 80
    1162:	0e 94 81 06 	call	0xd02	; 0xd02 <mcp_read>
		state = BIT_IS_SET(data, (flag - 32));
    1166:	10 52       	subi	r17, 0x20	; 32
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <mcp_check_flag+0xbe>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	1a 95       	dec	r17
    1174:	e2 f7       	brpl	.-8      	; 0x116e <mcp_check_flag+0xba>
    1176:	29 81       	ldd	r18, Y+1	; 0x01
    1178:	82 23       	and	r24, r18
    117a:	11 c0       	rjmp	.+34     	; 0x119e <mcp_check_flag+0xea>
	}
	else //EFLG flags
	{
		mcp_read(EFLG, &data, 1);
    117c:	41 e0       	ldi	r20, 0x01	; 1
    117e:	be 01       	movw	r22, r28
    1180:	6f 5f       	subi	r22, 0xFF	; 255
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	8d e2       	ldi	r24, 0x2D	; 45
    1186:	0e 94 81 06 	call	0xd02	; 0xd02 <mcp_read>
		state = BIT_IS_SET(data, (flag - 40));
    118a:	18 52       	subi	r17, 0x28	; 40
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <mcp_check_flag+0xe2>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	1a 95       	dec	r17
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <mcp_check_flag+0xde>
    119a:	29 81       	ldd	r18, Y+1	; 0x01
    119c:	82 23       	and	r24, r18
	}
	
	return state;
}
    119e:	0f 90       	pop	r0
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	08 95       	ret

000011a8 <mcp_clear_flag>:

void mcp_clear_flag (uint8_t flag)
{
	if (flag < 8)
    11a8:	88 30       	cpi	r24, 0x08	; 8
    11aa:	b8 f4       	brcc	.+46     	; 0x11da <mcp_clear_flag+0x32>
	{
		if (flag == 3)
    11ac:	83 30       	cpi	r24, 0x03	; 3
    11ae:	31 f0       	breq	.+12     	; 0x11bc <mcp_clear_flag+0x14>
		{
			flag -= 1;
		}
		
		if (flag == 5)
    11b0:	85 30       	cpi	r24, 0x05	; 5
    11b2:	31 f0       	breq	.+12     	; 0x11c0 <mcp_clear_flag+0x18>
		{
			flag -= 2;
		}
		
		if (flag == 7)
    11b4:	87 30       	cpi	r24, 0x07	; 7
    11b6:	29 f4       	brne	.+10     	; 0x11c2 <mcp_clear_flag+0x1a>
		{
			flag -= 3;
    11b8:	84 e0       	ldi	r24, 0x04	; 4
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <mcp_clear_flag+0x1a>
{
	if (flag < 8)
	{
		if (flag == 3)
		{
			flag -= 1;
    11bc:	82 e0       	ldi	r24, 0x02	; 2
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <mcp_clear_flag+0x1a>
		}
		
		if (flag == 5)
		{
			flag -= 2;
    11c0:	83 e0       	ldi	r24, 0x03	; 3
		if (flag == 7)
		{
			flag -= 3;
		} 
		
		mcp_bit_modify(CANTINF, (1 << flag), 0);
    11c2:	61 e0       	ldi	r22, 0x01	; 1
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <mcp_clear_flag+0x24>
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	8a 95       	dec	r24
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <mcp_clear_flag+0x20>
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	8c e2       	ldi	r24, 0x2C	; 44
    11d4:	0e 94 c0 07 	call	0xf80	; 0xf80 <mcp_bit_modify>
    11d8:	08 95       	ret
	}
	else if (flag < 16)//from CANTINF
    11da:	80 31       	cpi	r24, 0x10	; 16
    11dc:	68 f4       	brcc	.+26     	; 0x11f8 <mcp_clear_flag+0x50>
	{
		mcp_bit_modify(CANTINF, (1 << (flag - 8)), 0);
    11de:	88 50       	subi	r24, 0x08	; 8
    11e0:	61 e0       	ldi	r22, 0x01	; 1
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <mcp_clear_flag+0x42>
    11e6:	66 0f       	add	r22, r22
    11e8:	77 1f       	adc	r23, r23
    11ea:	8a 95       	dec	r24
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <mcp_clear_flag+0x3e>
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	8c e2       	ldi	r24, 0x2C	; 44
    11f2:	0e 94 c0 07 	call	0xf80	; 0xf80 <mcp_bit_modify>
    11f6:	08 95       	ret
	}
	else
	{
		mcp_bit_modify(CANTINF, (1 << (flag - 40)), 0);
    11f8:	88 52       	subi	r24, 0x28	; 40
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	70 e0       	ldi	r23, 0x00	; 0
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <mcp_clear_flag+0x5c>
    1200:	66 0f       	add	r22, r22
    1202:	77 1f       	adc	r23, r23
    1204:	8a 95       	dec	r24
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <mcp_clear_flag+0x58>
    1208:	40 e0       	ldi	r20, 0x00	; 0
    120a:	8c e2       	ldi	r24, 0x2C	; 44
    120c:	0e 94 c0 07 	call	0xf80	; 0xf80 <mcp_bit_modify>
    1210:	08 95       	ret

00001212 <mcp_send_remoteframe>:
	mcp_tx_data(tx_no, DATA_FRAME, data_buff, size);
	mcp_tx_trigger(tx_no);
}

void mcp_send_remoteframe(uint8_t tx_no, uint8_t size)
{
    1212:	cf 93       	push	r28
    1214:	c8 2f       	mov	r28, r24
    1216:	26 2f       	mov	r18, r22
	mcp_tx_data(tx_no, REMOTE_FRAME, NULL, size);
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	0e 94 7e 07 	call	0xefc	; 0xefc <mcp_tx_data>
	mcp_tx_trigger(tx_no);
    1222:	8c 2f       	mov	r24, r28
    1224:	0e 94 ac 07 	call	0xf58	; 0xf58 <mcp_tx_trigger>
}
    1228:	cf 91       	pop	r28
    122a:	08 95       	ret

0000122c <__vector_11>:
//the number of overflows needed to generate the needed ticks for making the
// delay time
static unint16_t g_ovf_count;

void CONFIG_TMR0_OVF_ISR()
{
    122c:	1f 92       	push	r1
    122e:	0f 92       	push	r0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	0f 92       	push	r0
    1234:	11 24       	eor	r1, r1
    1236:	2f 93       	push	r18
    1238:	3f 93       	push	r19
    123a:	4f 93       	push	r20
    123c:	5f 93       	push	r21
    123e:	6f 93       	push	r22
    1240:	7f 93       	push	r23
    1242:	8f 93       	push	r24
    1244:	9f 93       	push	r25
    1246:	af 93       	push	r26
    1248:	bf 93       	push	r27
    124a:	ef 93       	push	r30
    124c:	ff 93       	push	r31
	cli();
    124e:	f8 94       	cli
	 guarantee that millis will be checked every 1024 cycles(because the program 
	 might be is too big so that I can't check this function every 1024 cycles
	 */
	
	//if there are remaining overflows yet
	if (g_ovf_count)
    1250:	80 91 0e 01 	lds	r24, 0x010E
    1254:	90 91 0f 01 	lds	r25, 0x010F
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	61 f0       	breq	.+24     	; 0x1274 <__vector_11+0x48>
	{
		/* if (g_ovf_count == 1) then the n_of actual overflows has ended and
		   there are some remaining ticks which will be out in TCNT0 to get all
		   the ticks needed precisely*/
		if (g_ovf_count == 1)
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	09 f4       	brne	.+2      	; 0x1262 <__vector_11+0x36>
		{
			TCNT0 = 256 - g_last_ticks;
    1260:	12 be       	out	0x32, r1	; 50
		}
		
		g_ovf_count-- ;
    1262:	80 91 0e 01 	lds	r24, 0x010E
    1266:	90 91 0f 01 	lds	r25, 0x010F
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	90 93 0f 01 	sts	0x010F, r25
    1270:	80 93 0e 01 	sts	0x010E, r24
	}
	
	gp_tmr0_ovf_isr();
    1274:	e0 91 25 01 	lds	r30, 0x0125
    1278:	f0 91 26 01 	lds	r31, 0x0126
    127c:	09 95       	icall
	
	sei();
    127e:	78 94       	sei
}
    1280:	ff 91       	pop	r31
    1282:	ef 91       	pop	r30
    1284:	bf 91       	pop	r27
    1286:	af 91       	pop	r26
    1288:	9f 91       	pop	r25
    128a:	8f 91       	pop	r24
    128c:	7f 91       	pop	r23
    128e:	6f 91       	pop	r22
    1290:	5f 91       	pop	r21
    1292:	4f 91       	pop	r20
    1294:	3f 91       	pop	r19
    1296:	2f 91       	pop	r18
    1298:	0f 90       	pop	r0
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	0f 90       	pop	r0
    129e:	1f 90       	pop	r1
    12a0:	18 95       	reti

000012a2 <millis>:


bool millis(unint16_t t)
{
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	9c 01       	movw	r18, r24
	if ((g_ovf_count == 0) && (TCCR0 == 0)) //happens only at the beginning
    12a8:	40 91 0e 01 	lds	r20, 0x010E
    12ac:	50 91 0f 01 	lds	r21, 0x010F
    12b0:	45 2b       	or	r20, r21
    12b2:	b1 f5       	brne	.+108    	; 0x1320 <millis+0x7e>
    12b4:	83 b7       	in	r24, 0x33	; 51
    12b6:	81 11       	cpse	r24, r1
    12b8:	33 c0       	rjmp	.+102    	; 0x1320 <millis+0x7e>
		//every overflow occur until this number reaches zero then the timer will recognize that it's timeout
		//in the .h file we can have the number of overflows and the number of remaining ticks(calculated automatically from the time
		//parameter
		//we put the number of overflows plus one(because the required number of ticks are not exactly multiples of 256 so there will be
        //some ticks less that 256 remaining at the end ticks in a static variable plus one for the remaining ticks.*/
		g_ovf_count= NUMBER_OF_OVFLOWS + 1;
    12ba:	a8 ee       	ldi	r26, 0xE8	; 232
    12bc:	b3 e0       	ldi	r27, 0x03	; 3
    12be:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__umulhisi3>
    12c2:	8b 01       	movw	r16, r22
    12c4:	9c 01       	movw	r18, r24
    12c6:	0f 2e       	mov	r0, r31
    12c8:	ff e0       	ldi	r31, 0x0F	; 15
    12ca:	36 95       	lsr	r19
    12cc:	27 95       	ror	r18
    12ce:	17 95       	ror	r17
    12d0:	07 95       	ror	r16
    12d2:	fa 95       	dec	r31
    12d4:	d1 f7       	brne	.-12     	; 0x12ca <millis+0x28>
    12d6:	f0 2d       	mov	r31, r0
    12d8:	98 01       	movw	r18, r16
    12da:	2f 5f       	subi	r18, 0xFF	; 255
    12dc:	3f 4f       	sbci	r19, 0xFF	; 255
    12de:	30 93 0f 01 	sts	0x010F, r19
    12e2:	20 93 0e 01 	sts	0x010E, r18

		//initialize timer0 with 1024 pre_scaler and activate the timer mode
		TCCR0 = 0x05;
    12e6:	25 e0       	ldi	r18, 0x05	; 5
    12e8:	23 bf       	out	0x33, r18	; 51
		//else TCNT=0
		g_last_ticks = REMAINING_TICKS;
		#endif
		
		
		if(g_ovf_count == 1)
    12ea:	20 91 0e 01 	lds	r18, 0x010E
    12ee:	30 91 0f 01 	lds	r19, 0x010F
    12f2:	21 30       	cpi	r18, 0x01	; 1
    12f4:	31 05       	cpc	r19, r1
    12f6:	71 f4       	brne	.+28     	; 0x1314 <millis+0x72>
			TCNT0 = 256 - REMAINING_TICKS;
    12f8:	ab 01       	movw	r20, r22
    12fa:	bc 01       	movw	r22, r24
    12fc:	68 94       	set
    12fe:	16 f8       	bld	r1, 6
    1300:	76 95       	lsr	r23
    1302:	67 95       	ror	r22
    1304:	57 95       	ror	r21
    1306:	47 95       	ror	r20
    1308:	16 94       	lsr	r1
    130a:	d1 f7       	brne	.-12     	; 0x1300 <millis+0x5e>
    130c:	41 95       	neg	r20
    130e:	42 bf       	out	0x32, r20	; 50
		}

	}
	#endif
	
	return true;
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	38 c0       	rjmp	.+112    	; 0x1384 <millis+0xe2>
		#endif
		
		
		if(g_ovf_count == 1)
			TCNT0 = 256 - REMAINING_TICKS;
		else if ( g_ovf_count > 1) 
    1314:	22 30       	cpi	r18, 0x02	; 2
    1316:	31 05       	cpc	r19, r1
    1318:	80 f1       	brcs	.+96     	; 0x137a <millis+0xd8>
			TCNT0 = 0;
    131a:	12 be       	out	0x32, r1	; 50
		}

	}
	#endif
	
	return true;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	32 c0       	rjmp	.+100    	; 0x1384 <millis+0xe2>
	}
	#endif
	#if(MILLIS_INTERRUPT == 0) //here we have to poll the flag .. if set check for each state of g_ovf_count 
	else // if it's not the first loop
	{
		if ((TIFR & (1 << TOV0))) // if the overflow flag was set in this tick
    1320:	08 b6       	in	r0, 0x38	; 56
    1322:	00 fe       	sbrs	r0, 0
    1324:	2c c0       	rjmp	.+88     	; 0x137e <millis+0xdc>
		{
			TIFR |= (1 << TOV0); // clear the flag
    1326:	98 b7       	in	r25, 0x38	; 56
    1328:	91 60       	ori	r25, 0x01	; 1
    132a:	98 bf       	out	0x38, r25	; 56
			
			g_ovf_count-- ;//decrement the number of overflows left by one static variable.
    132c:	40 91 0e 01 	lds	r20, 0x010E
    1330:	50 91 0f 01 	lds	r21, 0x010F
    1334:	41 50       	subi	r20, 0x01	; 1
    1336:	51 09       	sbc	r21, r1
    1338:	50 93 0f 01 	sts	0x010F, r21
    133c:	40 93 0e 01 	sts	0x010E, r20
			
			if(g_ovf_count == 0) //if the number of overflows left is 0 (timeout) ..disable the timer and return false
    1340:	41 15       	cp	r20, r1
    1342:	51 05       	cpc	r21, r1
    1344:	21 f4       	brne	.+8      	; 0x134e <millis+0xac>
			{
				TCCR0 = 0;
    1346:	13 be       	out	0x33, r1	; 51
				TCNT0 = 0;
    1348:	12 be       	out	0x32, r1	; 50
				
				//because there are no ticks left .. then the time has ended so we return 0
				return false;
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	1b c0       	rjmp	.+54     	; 0x1384 <millis+0xe2>
			}//if there are remaining OVERFLOWS is one .. this means the last flag has some ticks remaining but complete 256 ticks
			else if (g_ovf_count == 1)
    134e:	41 30       	cpi	r20, 0x01	; 1
    1350:	51 05       	cpc	r21, r1
    1352:	b9 f4       	brne	.+46     	; 0x1382 <millis+0xe0>
			{
				TCNT0 = 256 - REMAINING_TICKS;// the last ovf we make the TCNT0 = (256 - remaining ticks)
    1354:	a8 ee       	ldi	r26, 0xE8	; 232
    1356:	b3 e0       	ldi	r27, 0x03	; 3
    1358:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__umulhisi3>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	68 94       	set
    1362:	16 f8       	bld	r1, 6
    1364:	b6 95       	lsr	r27
    1366:	a7 95       	ror	r26
    1368:	97 95       	ror	r25
    136a:	87 95       	ror	r24
    136c:	16 94       	lsr	r1
    136e:	d1 f7       	brne	.-12     	; 0x1364 <millis+0xc2>
    1370:	68 2f       	mov	r22, r24
    1372:	61 95       	neg	r22
    1374:	62 bf       	out	0x32, r22	; 50
		}

	}
	#endif
	
	return true;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	05 c0       	rjmp	.+10     	; 0x1384 <millis+0xe2>
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	03 c0       	rjmp	.+6      	; 0x1384 <millis+0xe2>
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	01 c0       	rjmp	.+2      	; 0x1384 <millis+0xe2>
    1382:	81 e0       	ldi	r24, 0x01	; 1
}
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	08 95       	ret

0000138a <millis_disable_tmr>:

void millis_disable_tmr()
{
	TCCR0 = 0;
    138a:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0;
    138c:	12 be       	out	0x32, r1	; 50
	g_ovf_count = 0;
    138e:	10 92 0f 01 	sts	0x010F, r1
    1392:	10 92 0e 01 	sts	0x010E, r1
    1396:	08 95       	ret

00001398 <millis_reset_tmr>:
	TCNT0 = 0;
}

void millis_reset_tmr(uint16_t t)
{
	g_ovf_count = NUMBER_OF_OVFLOWS + 1;
    1398:	9c 01       	movw	r18, r24
    139a:	a8 ee       	ldi	r26, 0xE8	; 232
    139c:	b3 e0       	ldi	r27, 0x03	; 3
    139e:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__umulhisi3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	07 2e       	mov	r0, r23
    13a8:	7f e0       	ldi	r23, 0x0F	; 15
    13aa:	b6 95       	lsr	r27
    13ac:	a7 95       	ror	r26
    13ae:	97 95       	ror	r25
    13b0:	87 95       	ror	r24
    13b2:	7a 95       	dec	r23
    13b4:	d1 f7       	brne	.-12     	; 0x13aa <millis_reset_tmr+0x12>
    13b6:	70 2d       	mov	r23, r0
    13b8:	bc 01       	movw	r22, r24
    13ba:	6f 5f       	subi	r22, 0xFF	; 255
    13bc:	7f 4f       	sbci	r23, 0xFF	; 255
    13be:	70 93 0f 01 	sts	0x010F, r23
    13c2:	60 93 0e 01 	sts	0x010E, r22
    13c6:	08 95       	ret

000013c8 <millis_add_ovf_isr>:
#endif
}

void millis_add_ovf_isr(void ( * additional_tmr_ovf_isr)(void))
{
	gp_tmr0_ovf_isr = additional_tmr_ovf_isr;
    13c8:	90 93 26 01 	sts	0x0126, r25
    13cc:	80 93 25 01 	sts	0x0125, r24
    13d0:	08 95       	ret

000013d2 <pwm_init>:

#include "pwm1.h"

#if defined(ATMEGA32) || defined(ATMEGA16)
void pwm_init(uint8_t pwm_no, uint16_t freq) // sets the frequency ..and setes the timer as 
{
    13d2:	4f 92       	push	r4
    13d4:	5f 92       	push	r5
    13d6:	6f 92       	push	r6
    13d8:	7f 92       	push	r7
    13da:	8f 92       	push	r8
    13dc:	9f 92       	push	r9
    13de:	af 92       	push	r10
    13e0:	bf 92       	push	r11
    13e2:	cf 92       	push	r12
    13e4:	df 92       	push	r13
    13e6:	ef 92       	push	r14
    13e8:	ff 92       	push	r15
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	18 2f       	mov	r17, r24
    13f4:	eb 01       	movw	r28, r22
	if (pwm_no & PWM0)
    13f6:	80 ff       	sbrs	r24, 0
    13f8:	91 c0       	rjmp	.+290    	; 0x151c <pwm_init+0x14a>
	{
		TCCR0 &= ~(0x07); // clear any previous pre scalers
    13fa:	83 b7       	in	r24, 0x33	; 51
    13fc:	88 7f       	andi	r24, 0xF8	; 248
    13fe:	83 bf       	out	0x33, r24	; 51
		
		if(NUM_REQUIRED_TICKS_NO_PRE < 255) //apply the frequency formula on prescaler = 1 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=1 for it) we have to increase the prescaler and apply the formulA again
    1400:	6b 01       	movw	r12, r22
    1402:	e1 2c       	mov	r14, r1
    1404:	f1 2c       	mov	r15, r1
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	72 e1       	ldi	r23, 0x12	; 18
    140a:	8a e7       	ldi	r24, 0x7A	; 122
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	a7 01       	movw	r20, r14
    1410:	96 01       	movw	r18, r12
    1412:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    1416:	2f 3f       	cpi	r18, 0xFF	; 255
    1418:	31 05       	cpc	r19, r1
    141a:	41 05       	cpc	r20, r1
    141c:	51 05       	cpc	r21, r1
    141e:	18 f4       	brcc	.+6      	; 0x1426 <pwm_init+0x54>
		{
			TCCR0 = (1<<CS00);
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	83 bf       	out	0x33, r24	; 51
    1424:	78 c0       	rjmp	.+240    	; 0x1516 <pwm_init+0x144>
		}
		else if(NUM_REQUIRED_TICKS_8_PRE < 255) //apply the frequency formula on prescaler = 8 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler = 8 for it) we have to increase the prescaler and apply the formulA again
    1426:	d7 01       	movw	r26, r14
    1428:	c6 01       	movw	r24, r12
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	aa 1f       	adc	r26, r26
    1430:	bb 1f       	adc	r27, r27
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	aa 1f       	adc	r26, r26
    1438:	bb 1f       	adc	r27, r27
    143a:	9c 01       	movw	r18, r24
    143c:	ad 01       	movw	r20, r26
    143e:	22 0f       	add	r18, r18
    1440:	33 1f       	adc	r19, r19
    1442:	44 1f       	adc	r20, r20
    1444:	55 1f       	adc	r21, r21
    1446:	60 e0       	ldi	r22, 0x00	; 0
    1448:	72 e1       	ldi	r23, 0x12	; 18
    144a:	8a e7       	ldi	r24, 0x7A	; 122
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    1452:	2f 3f       	cpi	r18, 0xFF	; 255
    1454:	31 05       	cpc	r19, r1
    1456:	41 05       	cpc	r20, r1
    1458:	51 05       	cpc	r21, r1
    145a:	20 f4       	brcc	.+8      	; 0x1464 <pwm_init+0x92>
		{
			TCCR0 |= (1<<CS01); //
    145c:	83 b7       	in	r24, 0x33	; 51
    145e:	82 60       	ori	r24, 0x02	; 2
    1460:	83 bf       	out	0x33, r24	; 51
    1462:	59 c0       	rjmp	.+178    	; 0x1516 <pwm_init+0x144>
		}
		else if(NUM_REQUIRED_TICKS_64_PRE < 255)//apply the frequency formula on prescaler = 64 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=64 for it) we have to increase the prescaler and apply the formulA again
    1464:	d7 01       	movw	r26, r14
    1466:	c6 01       	movw	r24, r12
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	aa 1f       	adc	r26, r26
    146e:	bb 1f       	adc	r27, r27
    1470:	88 0f       	add	r24, r24
    1472:	99 1f       	adc	r25, r25
    1474:	aa 1f       	adc	r26, r26
    1476:	bb 1f       	adc	r27, r27
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	aa 1f       	adc	r26, r26
    147e:	bb 1f       	adc	r27, r27
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	aa 1f       	adc	r26, r26
    1486:	bb 1f       	adc	r27, r27
    1488:	9c 01       	movw	r18, r24
    148a:	ad 01       	movw	r20, r26
    148c:	22 0f       	add	r18, r18
    148e:	33 1f       	adc	r19, r19
    1490:	44 1f       	adc	r20, r20
    1492:	55 1f       	adc	r21, r21
    1494:	22 0f       	add	r18, r18
    1496:	33 1f       	adc	r19, r19
    1498:	44 1f       	adc	r20, r20
    149a:	55 1f       	adc	r21, r21
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	72 e1       	ldi	r23, 0x12	; 18
    14a0:	8a e7       	ldi	r24, 0x7A	; 122
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    14a8:	2f 3f       	cpi	r18, 0xFF	; 255
    14aa:	31 05       	cpc	r19, r1
    14ac:	41 05       	cpc	r20, r1
    14ae:	51 05       	cpc	r21, r1
    14b0:	20 f4       	brcc	.+8      	; 0x14ba <pwm_init+0xe8>
		{
			TCCR0 |= (1<<CS10)|(1<<CS11); //
    14b2:	83 b7       	in	r24, 0x33	; 51
    14b4:	83 60       	ori	r24, 0x03	; 3
    14b6:	83 bf       	out	0x33, r24	; 51
    14b8:	2e c0       	rjmp	.+92     	; 0x1516 <pwm_init+0x144>
		}
		else if(NUM_REQUIRED_TICKS_256_PRE < 255)//apply the frequency formula on prescaler = 256 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=256 for it) we have to increase the prescaler and apply the formulA again
    14ba:	88 24       	eor	r8, r8
    14bc:	9c 2c       	mov	r9, r12
    14be:	ad 2c       	mov	r10, r13
    14c0:	be 2c       	mov	r11, r14
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	72 e1       	ldi	r23, 0x12	; 18
    14c6:	8a e7       	ldi	r24, 0x7A	; 122
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	a5 01       	movw	r20, r10
    14cc:	94 01       	movw	r18, r8
    14ce:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    14d2:	2f 3f       	cpi	r18, 0xFF	; 255
    14d4:	31 05       	cpc	r19, r1
    14d6:	41 05       	cpc	r20, r1
    14d8:	51 05       	cpc	r21, r1
    14da:	20 f4       	brcc	.+8      	; 0x14e4 <pwm_init+0x112>
		{
			TCCR0 |= (1<<CS02); //
    14dc:	83 b7       	in	r24, 0x33	; 51
    14de:	84 60       	ori	r24, 0x04	; 4
    14e0:	83 bf       	out	0x33, r24	; 51
    14e2:	19 c0       	rjmp	.+50     	; 0x1516 <pwm_init+0x144>
		}
		else if(NUM_REQUIRED_TICKS_1024_PRE < 255)//apply the frequency formulA on prescaler=1 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=1 for it) we have to increase the prescaler and apply the formulA again
    14e4:	a7 01       	movw	r20, r14
    14e6:	96 01       	movw	r18, r12
    14e8:	01 2e       	mov	r0, r17
    14ea:	1a e0       	ldi	r17, 0x0A	; 10
    14ec:	22 0f       	add	r18, r18
    14ee:	33 1f       	adc	r19, r19
    14f0:	44 1f       	adc	r20, r20
    14f2:	55 1f       	adc	r21, r21
    14f4:	1a 95       	dec	r17
    14f6:	d1 f7       	brne	.-12     	; 0x14ec <pwm_init+0x11a>
    14f8:	10 2d       	mov	r17, r0
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	72 e1       	ldi	r23, 0x12	; 18
    14fe:	8a e7       	ldi	r24, 0x7A	; 122
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    1506:	2f 3f       	cpi	r18, 0xFF	; 255
    1508:	31 05       	cpc	r19, r1
    150a:	41 05       	cpc	r20, r1
    150c:	51 05       	cpc	r21, r1
    150e:	18 f4       	brcc	.+6      	; 0x1516 <pwm_init+0x144>
		{
			TCCR0 |= (1<<CS00)|(1<<CS02);
    1510:	83 b7       	in	r24, 0x33	; 51
    1512:	85 60       	ori	r24, 0x05	; 5
    1514:	83 bf       	out	0x33, r24	; 51
		}

		TCCR0 |= (1<<WGM00) | (1<<WGM01); // SET THE BIT (FAST PWM WITH ICR1 AS TOP)
    1516:	83 b7       	in	r24, 0x33	; 51
    1518:	88 64       	ori	r24, 0x48	; 72
    151a:	83 bf       	out	0x33, r24	; 51
    151c:	81 2f       	mov	r24, r17
    151e:	86 70       	andi	r24, 0x06	; 6
	}
	
	if ((pwm_no & (PWM1)) || (pwm_no & (PWM2)))
    1520:	09 f4       	brne	.+2      	; 0x1524 <pwm_init+0x152>
    1522:	a7 c0       	rjmp	.+334    	; 0x1672 <pwm_init+0x2a0>
	{
		TCCR1A &= ~(0x07); // clear any previous pre scalers
    1524:	8f b5       	in	r24, 0x2f	; 47
    1526:	88 7f       	andi	r24, 0xF8	; 248
    1528:	8f bd       	out	0x2f, r24	; 47
		uint16_t ICR1_buffer = NUM_REQUIRED_TICKS_NO_PRE; // default value
    152a:	6e 01       	movw	r12, r28
    152c:	e1 2c       	mov	r14, r1
    152e:	f1 2c       	mov	r15, r1
    1530:	60 e0       	ldi	r22, 0x00	; 0
    1532:	72 e1       	ldi	r23, 0x12	; 18
    1534:	8a e7       	ldi	r24, 0x7A	; 122
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	a7 01       	movw	r20, r14
    153a:	96 01       	movw	r18, r12
    153c:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    1540:	02 2f       	mov	r16, r18
    1542:	b3 2e       	mov	r11, r19
		if(NUM_REQUIRED_TICKS_NO_PRE < (uint32_t)65535) //apply the frequency formula on prescaler = 1 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=1 for it) we have to increase the prescaler and apply the formulA again
    1544:	2f 3f       	cpi	r18, 0xFF	; 255
    1546:	3f 4f       	sbci	r19, 0xFF	; 255
    1548:	41 05       	cpc	r20, r1
    154a:	51 05       	cpc	r21, r1
    154c:	18 f4       	brcc	.+6      	; 0x1554 <pwm_init+0x182>
		{
			TCCR1B = (1<<CS10);
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	8e bd       	out	0x2e, r24	; 46
    1552:	84 c0       	rjmp	.+264    	; 0x165c <pwm_init+0x28a>
			ICR1_buffer = NUM_REQUIRED_TICKS_NO_PRE;
		}
		else if(NUM_REQUIRED_TICKS_8_PRE < (uint32_t)65535) //apply the frequency formulA on prescaler = 8 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler = 8 for it) we have to increase the prescaler and apply the formulA again
    1554:	d7 01       	movw	r26, r14
    1556:	c6 01       	movw	r24, r12
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	aa 1f       	adc	r26, r26
    155e:	bb 1f       	adc	r27, r27
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	aa 1f       	adc	r26, r26
    1566:	bb 1f       	adc	r27, r27
    1568:	9c 01       	movw	r18, r24
    156a:	ad 01       	movw	r20, r26
    156c:	22 0f       	add	r18, r18
    156e:	33 1f       	adc	r19, r19
    1570:	44 1f       	adc	r20, r20
    1572:	55 1f       	adc	r21, r21
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	72 e1       	ldi	r23, 0x12	; 18
    1578:	8a e7       	ldi	r24, 0x7A	; 122
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    1580:	2f 3f       	cpi	r18, 0xFF	; 255
    1582:	8f ef       	ldi	r24, 0xFF	; 255
    1584:	38 07       	cpc	r19, r24
    1586:	41 05       	cpc	r20, r1
    1588:	51 05       	cpc	r21, r1
    158a:	30 f4       	brcc	.+12     	; 0x1598 <pwm_init+0x1c6>
		{
			TCCR1B |= (1<<CS11); //
    158c:	8e b5       	in	r24, 0x2e	; 46
    158e:	82 60       	ori	r24, 0x02	; 2
    1590:	8e bd       	out	0x2e, r24	; 46
			ICR1_buffer = NUM_REQUIRED_TICKS_8_PRE;
    1592:	02 2f       	mov	r16, r18
    1594:	b3 2e       	mov	r11, r19
    1596:	62 c0       	rjmp	.+196    	; 0x165c <pwm_init+0x28a>
		}
		else if(NUM_REQUIRED_TICKS_64_PRE < (uint32_t)65535)//apply the frequency formulA on prescaler = 64 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=64 for it) we have to increase the prescaler and apply the formulA again
    1598:	d7 01       	movw	r26, r14
    159a:	c6 01       	movw	r24, r12
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	aa 1f       	adc	r26, r26
    15a2:	bb 1f       	adc	r27, r27
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	aa 1f       	adc	r26, r26
    15aa:	bb 1f       	adc	r27, r27
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	aa 1f       	adc	r26, r26
    15b2:	bb 1f       	adc	r27, r27
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	aa 1f       	adc	r26, r26
    15ba:	bb 1f       	adc	r27, r27
    15bc:	9c 01       	movw	r18, r24
    15be:	ad 01       	movw	r20, r26
    15c0:	22 0f       	add	r18, r18
    15c2:	33 1f       	adc	r19, r19
    15c4:	44 1f       	adc	r20, r20
    15c6:	55 1f       	adc	r21, r21
    15c8:	22 0f       	add	r18, r18
    15ca:	33 1f       	adc	r19, r19
    15cc:	44 1f       	adc	r20, r20
    15ce:	55 1f       	adc	r21, r21
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	72 e1       	ldi	r23, 0x12	; 18
    15d4:	8a e7       	ldi	r24, 0x7A	; 122
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    15dc:	2f 3f       	cpi	r18, 0xFF	; 255
    15de:	8f ef       	ldi	r24, 0xFF	; 255
    15e0:	38 07       	cpc	r19, r24
    15e2:	41 05       	cpc	r20, r1
    15e4:	51 05       	cpc	r21, r1
    15e6:	30 f4       	brcc	.+12     	; 0x15f4 <pwm_init+0x222>
		{
			TCCR1B |= (1<<CS10)|(1<<CS11); //
    15e8:	8e b5       	in	r24, 0x2e	; 46
    15ea:	83 60       	ori	r24, 0x03	; 3
    15ec:	8e bd       	out	0x2e, r24	; 46
			ICR1_buffer = NUM_REQUIRED_TICKS_64_PRE;
    15ee:	02 2f       	mov	r16, r18
    15f0:	b3 2e       	mov	r11, r19
    15f2:	34 c0       	rjmp	.+104    	; 0x165c <pwm_init+0x28a>
		}
		else if(NUM_REQUIRED_TICKS_256_PRE < (uint32_t)65535)//apply the frequency formulA on prescaler=256 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=256 for it) we have to increase the prescaler and apply the formulA again
    15f4:	44 24       	eor	r4, r4
    15f6:	5c 2c       	mov	r5, r12
    15f8:	6d 2c       	mov	r6, r13
    15fa:	7e 2c       	mov	r7, r14
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	72 e1       	ldi	r23, 0x12	; 18
    1600:	8a e7       	ldi	r24, 0x7A	; 122
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	a3 01       	movw	r20, r6
    1606:	92 01       	movw	r18, r4
    1608:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    160c:	2f 3f       	cpi	r18, 0xFF	; 255
    160e:	8f ef       	ldi	r24, 0xFF	; 255
    1610:	38 07       	cpc	r19, r24
    1612:	41 05       	cpc	r20, r1
    1614:	51 05       	cpc	r21, r1
    1616:	30 f4       	brcc	.+12     	; 0x1624 <pwm_init+0x252>
		{
			TCCR1B |= (1<<CS12); //
    1618:	8e b5       	in	r24, 0x2e	; 46
    161a:	84 60       	ori	r24, 0x04	; 4
    161c:	8e bd       	out	0x2e, r24	; 46
			ICR1_buffer = NUM_REQUIRED_TICKS_256_PRE;
    161e:	02 2f       	mov	r16, r18
    1620:	b3 2e       	mov	r11, r19
    1622:	1c c0       	rjmp	.+56     	; 0x165c <pwm_init+0x28a>
		}
		else if(NUM_REQUIRED_TICKS_1024_PRE < (uint16_t)65535)//apply the frequency formulA on prescaler=1 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=1 for it) we have to increase the prescaler and apply the formulA again
    1624:	a7 01       	movw	r20, r14
    1626:	96 01       	movw	r18, r12
    1628:	01 2e       	mov	r0, r17
    162a:	1a e0       	ldi	r17, 0x0A	; 10
    162c:	22 0f       	add	r18, r18
    162e:	33 1f       	adc	r19, r19
    1630:	44 1f       	adc	r20, r20
    1632:	55 1f       	adc	r21, r21
    1634:	1a 95       	dec	r17
    1636:	d1 f7       	brne	.-12     	; 0x162c <pwm_init+0x25a>
    1638:	10 2d       	mov	r17, r0
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	72 e1       	ldi	r23, 0x12	; 18
    163e:	8a e7       	ldi	r24, 0x7A	; 122
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    1646:	2f 3f       	cpi	r18, 0xFF	; 255
    1648:	8f ef       	ldi	r24, 0xFF	; 255
    164a:	38 07       	cpc	r19, r24
    164c:	41 05       	cpc	r20, r1
    164e:	51 05       	cpc	r21, r1
    1650:	28 f4       	brcc	.+10     	; 0x165c <pwm_init+0x28a>
		{
			TCCR1B |= (1<<CS10)|(1<<CS12); //
    1652:	8e b5       	in	r24, 0x2e	; 46
    1654:	85 60       	ori	r24, 0x05	; 5
    1656:	8e bd       	out	0x2e, r24	; 46
			ICR1_buffer = NUM_REQUIRED_TICKS_1024_PRE;
    1658:	02 2f       	mov	r16, r18
    165a:	b3 2e       	mov	r11, r19
		}

		ICR1H=ICR1_buffer >> 8;
    165c:	b7 bc       	out	0x27, r11	; 39
		ICR1L=(ICR1_buffer & 0x00ff);
    165e:	06 bd       	out	0x26, r16	; 38
		TCCR1B |= (1<<WGM12)|(1<<WGM13); // SET THE BIT (FAST PWM WITH ICR1 AS TOP)
    1660:	8e b5       	in	r24, 0x2e	; 46
    1662:	88 61       	ori	r24, 0x18	; 24
    1664:	8e bd       	out	0x2e, r24	; 46
		TCCR1A |= (1<<WGM11);
    1666:	8f b5       	in	r24, 0x2f	; 47
    1668:	82 60       	ori	r24, 0x02	; 2
    166a:	8f bd       	out	0x2f, r24	; 47
		TCCR1A &= ~(1 << WGM10);
    166c:	8f b5       	in	r24, 0x2f	; 47
    166e:	8e 7f       	andi	r24, 0xFE	; 254
    1670:	8f bd       	out	0x2f, r24	; 47
	}
	
	
	
	if (pwm_no & PWM3)
    1672:	13 ff       	sbrs	r17, 3
    1674:	e7 c0       	rjmp	.+462    	; 0x1844 <pwm_init+0x472>
	{
		TCCR2 &= ~(0x07); // clear any previous pre scalers
    1676:	85 b5       	in	r24, 0x25	; 37
    1678:	88 7f       	andi	r24, 0xF8	; 248
    167a:	85 bd       	out	0x25, r24	; 37
		
		if(NUM_REQUIRED_TICKS_NO_PRE < 255) //apply the frequency formula on prescaler = 1 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=1 for it) we have to increase the prescaler and apply the formulA again
    167c:	6e 01       	movw	r12, r28
    167e:	e1 2c       	mov	r14, r1
    1680:	f1 2c       	mov	r15, r1
    1682:	60 e0       	ldi	r22, 0x00	; 0
    1684:	72 e1       	ldi	r23, 0x12	; 18
    1686:	8a e7       	ldi	r24, 0x7A	; 122
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	a7 01       	movw	r20, r14
    168c:	96 01       	movw	r18, r12
    168e:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    1692:	2f 3f       	cpi	r18, 0xFF	; 255
    1694:	31 05       	cpc	r19, r1
    1696:	41 05       	cpc	r20, r1
    1698:	51 05       	cpc	r21, r1
    169a:	18 f4       	brcc	.+6      	; 0x16a2 <pwm_init+0x2d0>
		{
			TCCR2 = (1 << CS20);
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	85 bd       	out	0x25, r24	; 37
    16a0:	ce c0       	rjmp	.+412    	; 0x183e <pwm_init+0x46c>
		}
		else if(NUM_REQUIRED_TICKS_8_PRE < 255) //apply the frequency formula on prescaler = 8 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler = 8 for it) we have to increase the prescaler and apply the formulA again
    16a2:	d7 01       	movw	r26, r14
    16a4:	c6 01       	movw	r24, r12
    16a6:	88 0f       	add	r24, r24
    16a8:	99 1f       	adc	r25, r25
    16aa:	aa 1f       	adc	r26, r26
    16ac:	bb 1f       	adc	r27, r27
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	aa 1f       	adc	r26, r26
    16b4:	bb 1f       	adc	r27, r27
    16b6:	9c 01       	movw	r18, r24
    16b8:	ad 01       	movw	r20, r26
    16ba:	22 0f       	add	r18, r18
    16bc:	33 1f       	adc	r19, r19
    16be:	44 1f       	adc	r20, r20
    16c0:	55 1f       	adc	r21, r21
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	72 e1       	ldi	r23, 0x12	; 18
    16c6:	8a e7       	ldi	r24, 0x7A	; 122
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    16ce:	2f 3f       	cpi	r18, 0xFF	; 255
    16d0:	31 05       	cpc	r19, r1
    16d2:	41 05       	cpc	r20, r1
    16d4:	51 05       	cpc	r21, r1
    16d6:	20 f4       	brcc	.+8      	; 0x16e0 <pwm_init+0x30e>
		{
			TCCR2 |= (1<<CS21); //
    16d8:	85 b5       	in	r24, 0x25	; 37
    16da:	82 60       	ori	r24, 0x02	; 2
    16dc:	85 bd       	out	0x25, r24	; 37
    16de:	af c0       	rjmp	.+350    	; 0x183e <pwm_init+0x46c>
		}
		else if(NUM_REQUIRED_TICKS_32_PRE < 255) //apply the frequency formula on prescaler = 8 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler = 8 for it) we have to increase the prescaler and apply the formulA again
    16e0:	d7 01       	movw	r26, r14
    16e2:	c6 01       	movw	r24, r12
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	aa 1f       	adc	r26, r26
    16ea:	bb 1f       	adc	r27, r27
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	aa 1f       	adc	r26, r26
    16f2:	bb 1f       	adc	r27, r27
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	aa 1f       	adc	r26, r26
    16fa:	bb 1f       	adc	r27, r27
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	aa 1f       	adc	r26, r26
    1702:	bb 1f       	adc	r27, r27
    1704:	9c 01       	movw	r18, r24
    1706:	ad 01       	movw	r20, r26
    1708:	22 0f       	add	r18, r18
    170a:	33 1f       	adc	r19, r19
    170c:	44 1f       	adc	r20, r20
    170e:	55 1f       	adc	r21, r21
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	72 e1       	ldi	r23, 0x12	; 18
    1714:	8a e7       	ldi	r24, 0x7A	; 122
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    171c:	2f 3f       	cpi	r18, 0xFF	; 255
    171e:	31 05       	cpc	r19, r1
    1720:	41 05       	cpc	r20, r1
    1722:	51 05       	cpc	r21, r1
    1724:	20 f4       	brcc	.+8      	; 0x172e <pwm_init+0x35c>
		{
			TCCR2 |= (1 << CS20) | (1 << CS21); //
    1726:	85 b5       	in	r24, 0x25	; 37
    1728:	83 60       	ori	r24, 0x03	; 3
    172a:	85 bd       	out	0x25, r24	; 37
    172c:	88 c0       	rjmp	.+272    	; 0x183e <pwm_init+0x46c>
		}
		else if(NUM_REQUIRED_TICKS_64_PRE < 255)//apply the frequency formula on prescaler = 64 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=64 for it) we have to increase the prescaler and apply the formulA again
    172e:	d7 01       	movw	r26, r14
    1730:	c6 01       	movw	r24, r12
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	aa 1f       	adc	r26, r26
    1738:	bb 1f       	adc	r27, r27
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	aa 1f       	adc	r26, r26
    1740:	bb 1f       	adc	r27, r27
    1742:	88 0f       	add	r24, r24
    1744:	99 1f       	adc	r25, r25
    1746:	aa 1f       	adc	r26, r26
    1748:	bb 1f       	adc	r27, r27
    174a:	88 0f       	add	r24, r24
    174c:	99 1f       	adc	r25, r25
    174e:	aa 1f       	adc	r26, r26
    1750:	bb 1f       	adc	r27, r27
    1752:	9c 01       	movw	r18, r24
    1754:	ad 01       	movw	r20, r26
    1756:	22 0f       	add	r18, r18
    1758:	33 1f       	adc	r19, r19
    175a:	44 1f       	adc	r20, r20
    175c:	55 1f       	adc	r21, r21
    175e:	22 0f       	add	r18, r18
    1760:	33 1f       	adc	r19, r19
    1762:	44 1f       	adc	r20, r20
    1764:	55 1f       	adc	r21, r21
    1766:	60 e0       	ldi	r22, 0x00	; 0
    1768:	72 e1       	ldi	r23, 0x12	; 18
    176a:	8a e7       	ldi	r24, 0x7A	; 122
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    1772:	2f 3f       	cpi	r18, 0xFF	; 255
    1774:	31 05       	cpc	r19, r1
    1776:	41 05       	cpc	r20, r1
    1778:	51 05       	cpc	r21, r1
    177a:	20 f4       	brcc	.+8      	; 0x1784 <pwm_init+0x3b2>
		{
			TCCR2 |= (1 << CS22); //
    177c:	85 b5       	in	r24, 0x25	; 37
    177e:	84 60       	ori	r24, 0x04	; 4
    1780:	85 bd       	out	0x25, r24	; 37
    1782:	5d c0       	rjmp	.+186    	; 0x183e <pwm_init+0x46c>
		}
		else if(NUM_REQUIRED_TICKS_128_PRE < 255)//apply the frequency formula on prescaler = 256 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=256 for it) we have to increase the prescaler and apply the formulA again
    1784:	d7 01       	movw	r26, r14
    1786:	c6 01       	movw	r24, r12
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	aa 1f       	adc	r26, r26
    178e:	bb 1f       	adc	r27, r27
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	aa 1f       	adc	r26, r26
    1796:	bb 1f       	adc	r27, r27
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	aa 1f       	adc	r26, r26
    179e:	bb 1f       	adc	r27, r27
    17a0:	88 0f       	add	r24, r24
    17a2:	99 1f       	adc	r25, r25
    17a4:	aa 1f       	adc	r26, r26
    17a6:	bb 1f       	adc	r27, r27
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	aa 1f       	adc	r26, r26
    17ae:	bb 1f       	adc	r27, r27
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	aa 1f       	adc	r26, r26
    17b6:	bb 1f       	adc	r27, r27
    17b8:	9c 01       	movw	r18, r24
    17ba:	ad 01       	movw	r20, r26
    17bc:	22 0f       	add	r18, r18
    17be:	33 1f       	adc	r19, r19
    17c0:	44 1f       	adc	r20, r20
    17c2:	55 1f       	adc	r21, r21
    17c4:	60 e0       	ldi	r22, 0x00	; 0
    17c6:	72 e1       	ldi	r23, 0x12	; 18
    17c8:	8a e7       	ldi	r24, 0x7A	; 122
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    17d0:	2f 3f       	cpi	r18, 0xFF	; 255
    17d2:	31 05       	cpc	r19, r1
    17d4:	41 05       	cpc	r20, r1
    17d6:	51 05       	cpc	r21, r1
    17d8:	20 f4       	brcc	.+8      	; 0x17e2 <pwm_init+0x410>
		{
			TCCR2 |= (1 << CS20) | (1 << CS22); //
    17da:	85 b5       	in	r24, 0x25	; 37
    17dc:	85 60       	ori	r24, 0x05	; 5
    17de:	85 bd       	out	0x25, r24	; 37
    17e0:	2e c0       	rjmp	.+92     	; 0x183e <pwm_init+0x46c>

		}
		else if(NUM_REQUIRED_TICKS_256_PRE < 255)//apply the frequency formula on prescaler = 256 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=256 for it) we have to increase the prescaler and apply the formulA again
    17e2:	3e 2d       	mov	r19, r14
    17e4:	2d 2d       	mov	r18, r13
    17e6:	1c 2d       	mov	r17, r12
    17e8:	00 27       	eor	r16, r16
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	72 e1       	ldi	r23, 0x12	; 18
    17ee:	8a e7       	ldi	r24, 0x7A	; 122
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a9 01       	movw	r20, r18
    17f4:	98 01       	movw	r18, r16
    17f6:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    17fa:	2f 3f       	cpi	r18, 0xFF	; 255
    17fc:	31 05       	cpc	r19, r1
    17fe:	41 05       	cpc	r20, r1
    1800:	51 05       	cpc	r21, r1
    1802:	20 f4       	brcc	.+8      	; 0x180c <pwm_init+0x43a>
		{
			TCCR2 |= (1 << CS21) | (1 << CS22); //
    1804:	85 b5       	in	r24, 0x25	; 37
    1806:	86 60       	ori	r24, 0x06	; 6
    1808:	85 bd       	out	0x25, r24	; 37
    180a:	19 c0       	rjmp	.+50     	; 0x183e <pwm_init+0x46c>
		}
		else if(NUM_REQUIRED_TICKS_1024_PRE < 255)//apply the frequency formulA on prescaler=1 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=1 for it) we have to increase the prescaler and apply the formulA again
    180c:	a7 01       	movw	r20, r14
    180e:	96 01       	movw	r18, r12
    1810:	01 2e       	mov	r0, r17
    1812:	1a e0       	ldi	r17, 0x0A	; 10
    1814:	22 0f       	add	r18, r18
    1816:	33 1f       	adc	r19, r19
    1818:	44 1f       	adc	r20, r20
    181a:	55 1f       	adc	r21, r21
    181c:	1a 95       	dec	r17
    181e:	d1 f7       	brne	.-12     	; 0x1814 <pwm_init+0x442>
    1820:	10 2d       	mov	r17, r0
    1822:	60 e0       	ldi	r22, 0x00	; 0
    1824:	72 e1       	ldi	r23, 0x12	; 18
    1826:	8a e7       	ldi	r24, 0x7A	; 122
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    182e:	2f 3f       	cpi	r18, 0xFF	; 255
    1830:	31 05       	cpc	r19, r1
    1832:	41 05       	cpc	r20, r1
    1834:	51 05       	cpc	r21, r1
    1836:	18 f4       	brcc	.+6      	; 0x183e <pwm_init+0x46c>
		{
			TCCR2 |= (1 << CS20) | (1 << CS22) | (1 << CS21);    
    1838:	85 b5       	in	r24, 0x25	; 37
    183a:	87 60       	ori	r24, 0x07	; 7
    183c:	85 bd       	out	0x25, r24	; 37
		}

		TCCR2 |= (1<<WGM20) | (1<<WGM21); // SET THE BIT (FAST PWM WITH ICR1 AS TOP)
    183e:	85 b5       	in	r24, 0x25	; 37
    1840:	88 64       	ori	r24, 0x48	; 72
    1842:	85 bd       	out	0x25, r24	; 37
	}
	
}
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	ff 90       	pop	r15
    184e:	ef 90       	pop	r14
    1850:	df 90       	pop	r13
    1852:	cf 90       	pop	r12
    1854:	bf 90       	pop	r11
    1856:	af 90       	pop	r10
    1858:	9f 90       	pop	r9
    185a:	8f 90       	pop	r8
    185c:	7f 90       	pop	r7
    185e:	6f 90       	pop	r6
    1860:	5f 90       	pop	r5
    1862:	4f 90       	pop	r4
    1864:	08 95       	ret

00001866 <pwm_start>:

void pwm_start(uint8_t pwm_no)
{
    1866:	cf 93       	push	r28
    1868:	c8 2f       	mov	r28, r24
	if (pwm_no & PWM0)
    186a:	80 ff       	sbrs	r24, 0
    186c:	0a c0       	rjmp	.+20     	; 0x1882 <pwm_start+0x1c>
	{
		DIO_SET_DIR(DIO_OC0, DIO_OUTPUT);
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	8b e0       	ldi	r24, 0x0B	; 11
    1872:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
		TCCR0 |= (1 << COM01);
    1876:	83 b7       	in	r24, 0x33	; 51
    1878:	80 62       	ori	r24, 0x20	; 32
    187a:	83 bf       	out	0x33, r24	; 51
		TCCR0 &= ~(1<<COM00);
    187c:	83 b7       	in	r24, 0x33	; 51
    187e:	8f 7e       	andi	r24, 0xEF	; 239
    1880:	83 bf       	out	0x33, r24	; 51
	}
	
	if (pwm_no & PWM1)
    1882:	c1 ff       	sbrs	r28, 1
    1884:	0a c0       	rjmp	.+20     	; 0x189a <pwm_start+0x34>
	{
		DIO_SET_DIR(DIO_OC1A, DIO_OUTPUT);
    1886:	61 e0       	ldi	r22, 0x01	; 1
    1888:	8d e1       	ldi	r24, 0x1D	; 29
    188a:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
		TCCR1A &= ~(1 << COM1A0);
    188e:	8f b5       	in	r24, 0x2f	; 47
    1890:	8f 7b       	andi	r24, 0xBF	; 191
    1892:	8f bd       	out	0x2f, r24	; 47
		TCCR1A |= (1 << COM1A1); // SET THE BIT( START CLEAR ON COMPARE) (FAST PWM WITH ICR1 AS TOP) respectively
    1894:	8f b5       	in	r24, 0x2f	; 47
    1896:	80 68       	ori	r24, 0x80	; 128
    1898:	8f bd       	out	0x2f, r24	; 47
	}
	
	if (pwm_no & PWM2)
    189a:	c2 ff       	sbrs	r28, 2
    189c:	0a c0       	rjmp	.+20     	; 0x18b2 <pwm_start+0x4c>
	{
		DIO_SET_DIR(DIO_OC1B, DIO_OUTPUT);
    189e:	61 e0       	ldi	r22, 0x01	; 1
    18a0:	8c e1       	ldi	r24, 0x1C	; 28
    18a2:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
		TCCR1A &= ~(1 << COM1B0);
    18a6:	8f b5       	in	r24, 0x2f	; 47
    18a8:	8f 7e       	andi	r24, 0xEF	; 239
    18aa:	8f bd       	out	0x2f, r24	; 47
		TCCR1A |= (1 << COM1B1); // SET THE BIT ON (SET ON START, CLEAR ON COMPARE) (FAST PWM WITH ICR1 AS TOP)
    18ac:	8f b5       	in	r24, 0x2f	; 47
    18ae:	80 62       	ori	r24, 0x20	; 32
    18b0:	8f bd       	out	0x2f, r24	; 47
	}
	
	if (pwm_no & PWM3)
    18b2:	c3 ff       	sbrs	r28, 3
    18b4:	0b c0       	rjmp	.+22     	; 0x18cc <pwm_start+0x66>
	{
		DIO_SET_DIR(DIO_OC2, DIO_OUTPUT);
    18b6:	61 e0       	ldi	r22, 0x01	; 1
    18b8:	8f e1       	ldi	r24, 0x1F	; 31
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
		DDRD |= (1 << 7);
    18be:	8f 9a       	sbi	0x11, 7	; 17
		TCCR2 |= (1 << COM21);
    18c0:	85 b5       	in	r24, 0x25	; 37
    18c2:	80 62       	ori	r24, 0x20	; 32
    18c4:	85 bd       	out	0x25, r24	; 37
		TCCR2 &= ~(1 << COM20);
    18c6:	85 b5       	in	r24, 0x25	; 37
    18c8:	8f 7e       	andi	r24, 0xEF	; 239
    18ca:	85 bd       	out	0x25, r24	; 37
	}
	
	
}
    18cc:	cf 91       	pop	r28
    18ce:	08 95       	ret

000018d0 <pwm_setDuty>:

void pwm_setDuty(uint8_t pwn_no, uint8_t duty_percent)
{
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	c8 2f       	mov	r28, r24
    18d6:	d6 2f       	mov	r29, r22
	if (pwn_no & PWM0)
    18d8:	80 ff       	sbrs	r24, 0
    18da:	19 c0       	rjmp	.+50     	; 0x190e <pwm_setDuty+0x3e>
	{
		if (duty_percent == 100) // if the duty cycle is 100% putting OCR1A the same number as as top value will cause A compare and overflow at the same time which only one of the is going to be activated so we put it equal TOP value( which held in ICR1)-1
    18dc:	64 36       	cpi	r22, 0x64	; 100
    18de:	29 f4       	brne	.+10     	; 0x18ea <pwm_setDuty+0x1a>
			OCR0 = 255;
    18e0:	8f ef       	ldi	r24, 0xFF	; 255
    18e2:	8c bf       	out	0x3c, r24	; 60
		else
			OCR0 = (255 * (uint16_t)duty_percent) / 100;
	}
	
	if (pwn_no & PWM1)    
    18e4:	c1 fd       	sbrc	r28, 1
    18e6:	17 c0       	rjmp	.+46     	; 0x1916 <pwm_setDuty+0x46>
    18e8:	7d c0       	rjmp	.+250    	; 0x19e4 <pwm_setDuty+0x114>
	if (pwn_no & PWM0)
	{
		if (duty_percent == 100) // if the duty cycle is 100% putting OCR1A the same number as as top value will cause A compare and overflow at the same time which only one of the is going to be activated so we put it equal TOP value( which held in ICR1)-1
			OCR0 = 255;
		else
			OCR0 = (255 * (uint16_t)duty_percent) / 100;
    18ea:	8f ef       	ldi	r24, 0xFF	; 255
    18ec:	68 9f       	mul	r22, r24
    18ee:	90 01       	movw	r18, r0
    18f0:	11 24       	eor	r1, r1
    18f2:	36 95       	lsr	r19
    18f4:	27 95       	ror	r18
    18f6:	36 95       	lsr	r19
    18f8:	27 95       	ror	r18
    18fa:	ab e7       	ldi	r26, 0x7B	; 123
    18fc:	b4 e1       	ldi	r27, 0x14	; 20
    18fe:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__umulhisi3>
    1902:	96 95       	lsr	r25
    1904:	87 95       	ror	r24
    1906:	8c bf       	out	0x3c, r24	; 60
	}
	
	if (pwn_no & PWM1)    
    1908:	c1 fd       	sbrc	r28, 1
    190a:	15 c0       	rjmp	.+42     	; 0x1936 <pwm_setDuty+0x66>
    190c:	6e c0       	rjmp	.+220    	; 0x19ea <pwm_setDuty+0x11a>
    190e:	81 ff       	sbrs	r24, 1
    1910:	28 c0       	rjmp	.+80     	; 0x1962 <pwm_setDuty+0x92>
	{
		if (duty_percent == 100) // if the duty cycle is 100% putting OCR1A the same number as as top value will cause A compare and overflow at the same time which only one of the is going to be activated so we put it equal TOP value( which held in ICR1)-1
    1912:	64 36       	cpi	r22, 0x64	; 100
    1914:	81 f4       	brne	.+32     	; 0x1936 <pwm_setDuty+0x66>
			OCR1A = ((ICR1L) + ((uint16_t)ICR1H << 8)) - 1;
    1916:	26 b5       	in	r18, 0x26	; 38
    1918:	97 b5       	in	r25, 0x27	; 39
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	21 50       	subi	r18, 0x01	; 1
    191e:	31 09       	sbc	r19, r1
    1920:	89 2f       	mov	r24, r25
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	98 2f       	mov	r25, r24
    1926:	88 27       	eor	r24, r24
    1928:	82 0f       	add	r24, r18
    192a:	93 1f       	adc	r25, r19
    192c:	9b bd       	out	0x2b, r25	; 43
    192e:	8a bd       	out	0x2a, r24	; 42
		else
			OCR1A = ((uint32_t)((ICR1L) + ((uint16_t)ICR1H << 8)) * duty_percent) / 100;
	}
	
	if (pwn_no & PWM2)    
    1930:	c2 fd       	sbrc	r28, 2
    1932:	1b c0       	rjmp	.+54     	; 0x196a <pwm_setDuty+0x9a>
    1934:	40 c0       	rjmp	.+128    	; 0x19b6 <pwm_setDuty+0xe6>
	if (pwn_no & PWM1)    
	{
		if (duty_percent == 100) // if the duty cycle is 100% putting OCR1A the same number as as top value will cause A compare and overflow at the same time which only one of the is going to be activated so we put it equal TOP value( which held in ICR1)-1
			OCR1A = ((ICR1L) + ((uint16_t)ICR1H << 8)) - 1;
		else
			OCR1A = ((uint32_t)((ICR1L) + ((uint16_t)ICR1H << 8)) * duty_percent) / 100;
    1936:	86 b5       	in	r24, 0x26	; 38
    1938:	27 b5       	in	r18, 0x27	; 39
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	32 2f       	mov	r19, r18
    193e:	22 27       	eor	r18, r18
    1940:	28 0f       	add	r18, r24
    1942:	31 1d       	adc	r19, r1
    1944:	ad 2f       	mov	r26, r29
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__umulhisi3>
    194c:	24 e6       	ldi	r18, 0x64	; 100
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	50 e0       	ldi	r21, 0x00	; 0
    1954:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    1958:	3b bd       	out	0x2b, r19	; 43
    195a:	2a bd       	out	0x2a, r18	; 42
	}
	
	if (pwn_no & PWM2)    
    195c:	c2 fd       	sbrc	r28, 2
    195e:	15 c0       	rjmp	.+42     	; 0x198a <pwm_setDuty+0xba>
    1960:	2a c0       	rjmp	.+84     	; 0x19b6 <pwm_setDuty+0xe6>
    1962:	82 ff       	sbrs	r24, 2
    1964:	28 c0       	rjmp	.+80     	; 0x19b6 <pwm_setDuty+0xe6>
	{
		if (duty_percent == 100)// if the duty cycle is 100% putting OCR1A the same number as as top value will cause A compare and overflow at the same time which only one of the is going to be activated so we put it equal TOP value( which held in ICR1)-1
    1966:	64 36       	cpi	r22, 0x64	; 100
    1968:	81 f4       	brne	.+32     	; 0x198a <pwm_setDuty+0xba>
			OCR1B = ((ICR1L) + ((uint16_t)ICR1H << 8)) - 1;
    196a:	26 b5       	in	r18, 0x26	; 38
    196c:	97 b5       	in	r25, 0x27	; 39
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	21 50       	subi	r18, 0x01	; 1
    1972:	31 09       	sbc	r19, r1
    1974:	89 2f       	mov	r24, r25
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	98 2f       	mov	r25, r24
    197a:	88 27       	eor	r24, r24
    197c:	82 0f       	add	r24, r18
    197e:	93 1f       	adc	r25, r19
    1980:	99 bd       	out	0x29, r25	; 41
    1982:	88 bd       	out	0x28, r24	; 40
		else
			OCR1B =((uint32_t)((ICR1L) + ((uint16_t)ICR1H << 8))  * duty_percent) / 100;
	}
	
	if (pwn_no & PWM3)
    1984:	c3 fd       	sbrc	r28, 3
    1986:	1b c0       	rjmp	.+54     	; 0x19be <pwm_setDuty+0xee>
    1988:	33 c0       	rjmp	.+102    	; 0x19f0 <pwm_setDuty+0x120>
	if (pwn_no & PWM2)    
	{
		if (duty_percent == 100)// if the duty cycle is 100% putting OCR1A the same number as as top value will cause A compare and overflow at the same time which only one of the is going to be activated so we put it equal TOP value( which held in ICR1)-1
			OCR1B = ((ICR1L) + ((uint16_t)ICR1H << 8)) - 1;
		else
			OCR1B =((uint32_t)((ICR1L) + ((uint16_t)ICR1H << 8))  * duty_percent) / 100;
    198a:	86 b5       	in	r24, 0x26	; 38
    198c:	27 b5       	in	r18, 0x27	; 39
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	32 2f       	mov	r19, r18
    1992:	22 27       	eor	r18, r18
    1994:	28 0f       	add	r18, r24
    1996:	31 1d       	adc	r19, r1
    1998:	ad 2f       	mov	r26, r29
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__umulhisi3>
    19a0:	24 e6       	ldi	r18, 0x64	; 100
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	50 e0       	ldi	r21, 0x00	; 0
    19a8:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    19ac:	39 bd       	out	0x29, r19	; 41
    19ae:	28 bd       	out	0x28, r18	; 40
	}
	
	if (pwn_no & PWM3)
    19b0:	c3 fd       	sbrc	r28, 3
    19b2:	08 c0       	rjmp	.+16     	; 0x19c4 <pwm_setDuty+0xf4>
    19b4:	1d c0       	rjmp	.+58     	; 0x19f0 <pwm_setDuty+0x120>
    19b6:	c3 ff       	sbrs	r28, 3
    19b8:	1b c0       	rjmp	.+54     	; 0x19f0 <pwm_setDuty+0x120>
	{
		if (duty_percent == 100) // if the duty cycle is 100% putting OCR1A the same number as as top value will cause A compare and overflow at the same time which only one of the is going to be activated so we put it equal TOP value( which held in ICR1)-1
    19ba:	d4 36       	cpi	r29, 0x64	; 100
    19bc:	19 f4       	brne	.+6      	; 0x19c4 <pwm_setDuty+0xf4>
			OCR2 = 255;
    19be:	8f ef       	ldi	r24, 0xFF	; 255
    19c0:	83 bd       	out	0x23, r24	; 35
    19c2:	16 c0       	rjmp	.+44     	; 0x19f0 <pwm_setDuty+0x120>
		else
			OCR2 = (255 * (uint16_t)duty_percent) / 100;
    19c4:	8f ef       	ldi	r24, 0xFF	; 255
    19c6:	d8 9f       	mul	r29, r24
    19c8:	90 01       	movw	r18, r0
    19ca:	11 24       	eor	r1, r1
    19cc:	36 95       	lsr	r19
    19ce:	27 95       	ror	r18
    19d0:	36 95       	lsr	r19
    19d2:	27 95       	ror	r18
    19d4:	ab e7       	ldi	r26, 0x7B	; 123
    19d6:	b4 e1       	ldi	r27, 0x14	; 20
    19d8:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <__umulhisi3>
    19dc:	96 95       	lsr	r25
    19de:	87 95       	ror	r24
    19e0:	83 bd       	out	0x23, r24	; 35
    19e2:	06 c0       	rjmp	.+12     	; 0x19f0 <pwm_setDuty+0x120>
			OCR1A = ((ICR1L) + ((uint16_t)ICR1H << 8)) - 1;
		else
			OCR1A = ((uint32_t)((ICR1L) + ((uint16_t)ICR1H << 8)) * duty_percent) / 100;
	}
	
	if (pwn_no & PWM2)    
    19e4:	c2 fd       	sbrc	r28, 2
    19e6:	c1 cf       	rjmp	.-126    	; 0x196a <pwm_setDuty+0x9a>
    19e8:	e6 cf       	rjmp	.-52     	; 0x19b6 <pwm_setDuty+0xe6>
    19ea:	c2 fd       	sbrc	r28, 2
    19ec:	ce cf       	rjmp	.-100    	; 0x198a <pwm_setDuty+0xba>
    19ee:	e3 cf       	rjmp	.-58     	; 0x19b6 <pwm_setDuty+0xe6>
			OCR2 = 255;
		else
			OCR2 = (255 * (uint16_t)duty_percent) / 100;
	}

}
    19f0:	df 91       	pop	r29
    19f2:	cf 91       	pop	r28
    19f4:	08 95       	ret

000019f6 <create_list>:
//1- create list: size and a pointer to null
// the dynamic allocation happens inside this file not in the application file

start_t *create_list()
{
	start_t * st =  malloc(sizeof(start_t));
    19f6:	86 e0       	ldi	r24, 0x06	; 6
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <malloc>
	st->front = NULL;
    19fe:	fc 01       	movw	r30, r24
    1a00:	11 82       	std	Z+1, r1	; 0x01
    1a02:	10 82       	st	Z, r1
	st->rear = NULL;
    1a04:	13 82       	std	Z+3, r1	; 0x03
    1a06:	12 82       	std	Z+2, r1	; 0x02
	st->size = 0;
    1a08:	15 82       	std	Z+5, r1	; 0x05
    1a0a:	14 82       	std	Z+4, r1	; 0x04
	return st;
}
    1a0c:	08 95       	ret

00001a0e <push>:
{
    return st->size;
}

void push(start_t *st, void * element, uint8_t element_size)
{
    1a0e:	cf 92       	push	r12
    1a10:	df 92       	push	r13
    1a12:	ef 92       	push	r14
    1a14:	ff 92       	push	r15
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	ec 01       	movw	r28, r24
    1a20:	6b 01       	movw	r12, r22
    1a22:	04 2f       	mov	r16, r20
	return st;
}

static void * create_node(void * entry, uint8_t size)
{
	node_t * tmp_node = malloc(sizeof(node_t));//allocate a node to be added to the list
    1a24:	84 e0       	ldi	r24, 0x04	; 4
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <malloc>
    1a2c:	7c 01       	movw	r14, r24
	//allocate an element that will contain the element data
	tmp_node->p_element = malloc(size);
    1a2e:	10 e0       	ldi	r17, 0x00	; 0
    1a30:	c8 01       	movw	r24, r16
    1a32:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <malloc>
    1a36:	f7 01       	movw	r30, r14
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	80 83       	st	Z, r24
	//copy the data in *entry to the element side
	memcpy(tmp_node->p_element, entry, size);//(destination, source, element_size)
    1a3c:	a8 01       	movw	r20, r16
    1a3e:	b6 01       	movw	r22, r12
    1a40:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <memcpy>

	tmp_node->next = NULL;
    1a44:	f7 01       	movw	r30, r14
    1a46:	13 82       	std	Z+3, r1	; 0x03
    1a48:	12 82       	std	Z+2, r1	; 0x02

void push(start_t *st, void * element, uint8_t element_size)
{
    node_t * p_new_node = create_node(element, element_size);

    if (st->size == 0) // if its enpty /.. put one node and make the front and the rear point at it
    1a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4e:	89 2b       	or	r24, r25
    1a50:	29 f4       	brne	.+10     	; 0x1a5c <push+0x4e>
    {
        st->front = p_new_node;
    1a52:	f9 82       	std	Y+1, r15	; 0x01
    1a54:	e8 82       	st	Y, r14
        st->rear = p_new_node;
    1a56:	fb 82       	std	Y+3, r15	; 0x03
    1a58:	ea 82       	std	Y+2, r14	; 0x02
    1a5a:	0a c0       	rjmp	.+20     	; 0x1a70 <push+0x62>
    }
    else //if it's not empty ... make the add it at the rear side and make the rear point at it
    {
        st->rear->next = p_new_node;
    1a5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a60:	f3 82       	std	Z+3, r15	; 0x03
    1a62:	e2 82       	std	Z+2, r14	; 0x02
        st->rear = st->rear->next;
    1a64:	ea 81       	ldd	r30, Y+2	; 0x02
    1a66:	fb 81       	ldd	r31, Y+3	; 0x03
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	93 81       	ldd	r25, Z+3	; 0x03
    1a6c:	9b 83       	std	Y+3, r25	; 0x03
    1a6e:	8a 83       	std	Y+2, r24	; 0x02
    }

    st->size += 1;
    1a70:	8c 81       	ldd	r24, Y+4	; 0x04
    1a72:	9d 81       	ldd	r25, Y+5	; 0x05
    1a74:	01 96       	adiw	r24, 0x01	; 1
    1a76:	9d 83       	std	Y+5, r25	; 0x05
    1a78:	8c 83       	std	Y+4, r24	; 0x04
}
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ff 90       	pop	r15
    1a84:	ef 90       	pop	r14
    1a86:	df 90       	pop	r13
    1a88:	cf 90       	pop	r12
    1a8a:	08 95       	ret

00001a8c <pop>:

uint8_t pop(start_t * st, void * popped_e, uint16_t element_size)
{
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29

    if (st->size == 0)
    1a94:	fc 01       	movw	r30, r24
    1a96:	24 81       	ldd	r18, Z+4	; 0x04
    1a98:	35 81       	ldd	r19, Z+5	; 0x05
    1a9a:	23 2b       	or	r18, r19
    1a9c:	f9 f0       	breq	.+62     	; 0x1adc <pop+0x50>
    1a9e:	9b 01       	movw	r18, r22
    1aa0:	ec 01       	movw	r28, r24
    else
    {
        
		
		//copy the front node's element to the popped_e .. because we are going to free the front node after pop operation finishes
		memcpy(popped_e, st->front->p_element, element_size);
    1aa2:	01 90       	ld	r0, Z+
    1aa4:	f0 81       	ld	r31, Z
    1aa6:	e0 2d       	mov	r30, r0
    1aa8:	60 81       	ld	r22, Z
    1aaa:	71 81       	ldd	r23, Z+1	; 0x01
    1aac:	c9 01       	movw	r24, r18
    1aae:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <memcpy>
		
		//define a pointer that points to the front node
		node_t * tmp_node = st->front;
    1ab2:	08 81       	ld	r16, Y
    1ab4:	19 81       	ldd	r17, Y+1	; 0x01
        //make the front pointer points to the next node
        st->front = st->front->next;
    1ab6:	f8 01       	movw	r30, r16
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	99 83       	std	Y+1, r25	; 0x01
    1abe:	88 83       	st	Y, r24
		
		//free the node that was popped
		free(tmp_node->p_element);
    1ac0:	80 81       	ld	r24, Z
    1ac2:	91 81       	ldd	r25, Z+1	; 0x01
    1ac4:	0e 94 38 10 	call	0x2070	; 0x2070 <free>
		free(tmp_node);
    1ac8:	c8 01       	movw	r24, r16
    1aca:	0e 94 38 10 	call	0x2070	; 0x2070 <free>
		
        st->size -= 1;
    1ace:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	9d 83       	std	Y+5, r25	; 0x05
    1ad6:	8c 83       	std	Y+4, r24	; 0x04

        return 1;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <pop+0x52>
uint8_t pop(start_t * st, void * popped_e, uint16_t element_size)
{

    if (st->size == 0)
    {
        return ERROR;
    1adc:	8f ef       	ldi	r24, 0xFF	; 255
        st->size -= 1;

        return 1;
    }

}
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	08 95       	ret

00001ae8 <__vector_12>:
#include "spi_mcu_config.h"

static void ( * gp_spi_isr)(void);

void CONFIG_SPI_ISR() // finished
{
    1ae8:	1f 92       	push	r1
    1aea:	0f 92       	push	r0
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	0f 92       	push	r0
    1af0:	11 24       	eor	r1, r1
    1af2:	2f 93       	push	r18
    1af4:	3f 93       	push	r19
    1af6:	4f 93       	push	r20
    1af8:	5f 93       	push	r21
    1afa:	6f 93       	push	r22
    1afc:	7f 93       	push	r23
    1afe:	8f 93       	push	r24
    1b00:	9f 93       	push	r25
    1b02:	af 93       	push	r26
    1b04:	bf 93       	push	r27
    1b06:	ef 93       	push	r30
    1b08:	ff 93       	push	r31
	//-----------------------------------------------------------------------
	// we need to Global interrupt to prevent nested interrupt .
	cli();
    1b0a:	f8 94       	cli
	//-----------------------------------------------------------------------

	gp_spi_isr();
    1b0c:	e0 91 10 01 	lds	r30, 0x0110
    1b10:	f0 91 11 01 	lds	r31, 0x0111
    1b14:	09 95       	icall

	sei();
    1b16:	78 94       	sei
}
    1b18:	ff 91       	pop	r31
    1b1a:	ef 91       	pop	r30
    1b1c:	bf 91       	pop	r27
    1b1e:	af 91       	pop	r26
    1b20:	9f 91       	pop	r25
    1b22:	8f 91       	pop	r24
    1b24:	7f 91       	pop	r23
    1b26:	6f 91       	pop	r22
    1b28:	5f 91       	pop	r21
    1b2a:	4f 91       	pop	r20
    1b2c:	3f 91       	pop	r19
    1b2e:	2f 91       	pop	r18
    1b30:	0f 90       	pop	r0
    1b32:	0f be       	out	0x3f, r0	; 63
    1b34:	0f 90       	pop	r0
    1b36:	1f 90       	pop	r1
    1b38:	18 95       	reti

00001b3a <spi_init>:


void spi_init()
{	
#if (SPI_NODE_TYPE == SPI_MASTER)
	DIO_SET_DIR(MOSI, DIO_OUTPUT);
    1b3a:	61 e0       	ldi	r22, 0x01	; 1
    1b3c:	8d e0       	ldi	r24, 0x0D	; 13
    1b3e:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(SS, DIO_OUTPUT);
    1b42:	61 e0       	ldi	r22, 0x01	; 1
    1b44:	8c e0       	ldi	r24, 0x0C	; 12
    1b46:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(SCK, DIO_OUTPUT);
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	8f e0       	ldi	r24, 0x0F	; 15
    1b4e:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(MISO, DIO_INPUT);
    1b52:	60 e0       	ldi	r22, 0x00	; 0
    1b54:	8e e0       	ldi	r24, 0x0E	; 14
    1b56:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	
	//SPI_DIR  |= (1 << MOSI) | (1 << SCK) | (1 << SS);
	//SPI_DIR &= ~(1 << MISO);
	SPCR = (1 << SPE) | (DATA_ORDER << DORD) | 
    1b5a:	80 e5       	ldi	r24, 0x50	; 80
    1b5c:	8d b9       	out	0x0d, r24	; 13
	       (1 << MSTR) | (POLARITY << CPOL) | (PHASE << CPHA) | (SPR0_1 << SPR0);
	SPSR = (SPI2X << SPI2X);
    1b5e:	1e b8       	out	0x0e, r1	; 14
    1b60:	08 95       	ret

00001b62 <spi_send>:
}


void spi_send(unint8_t data)
{
	SPDR = data; //send datA by SPI
    1b62:	8f b9       	out	0x0f, r24	; 15



inline bool spi_int_stat()
{
    return ((BIT_IS_SET(SREG, I)) && (BIT_IS_SET(SPCR, SPIE)));
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	07 fe       	sbrs	r0, 7
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <spi_send+0xc>
    1b6a:	6f 99       	sbic	0x0d, 7	; 13
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <spi_send+0x10>
	
 	if (spi_int_stat() == false)
 	{
		while(BIT_IS_CLEAR(SPSR,SPIF))
    1b6e:	77 9b       	sbis	0x0e, 7	; 14
    1b70:	fe cf       	rjmp	.-4      	; 0x1b6e <spi_send+0xc>
    1b72:	08 95       	ret

00001b74 <spi_read>:

unint8_t spi_read(void)   /*here the slave must write the byte after that the master calls this function*/   
{
	
#if (SPI_NODE_TYPE == SPI_MASTER)
	spi_send('1');
    1b74:	81 e3       	ldi	r24, 0x31	; 49
    1b76:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>
		
	}
	
#endif

	return SPDR;
    1b7a:	8f b1       	in	r24, 0x0f	; 15
}
    1b7c:	08 95       	ret

00001b7e <spi_send_str_size>:
	}
	
}

void spi_send_str_size(const unint8_t *Str, unint8_t size)
{
    1b7e:	0f 93       	push	r16
    1b80:	1f 93       	push	r17
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
	unint8_t i = 0;
	
	while (i < size)
    1b86:	66 23       	and	r22, r22
    1b88:	71 f0       	breq	.+28     	; 0x1ba6 <spi_send_str_size+0x28>
    1b8a:	ec 01       	movw	r28, r24
    1b8c:	61 50       	subi	r22, 0x01	; 1
    1b8e:	06 2f       	mov	r16, r22
    1b90:	10 e0       	ldi	r17, 0x00	; 0
    1b92:	0f 5f       	subi	r16, 0xFF	; 255
    1b94:	1f 4f       	sbci	r17, 0xFF	; 255
    1b96:	08 0f       	add	r16, r24
    1b98:	19 1f       	adc	r17, r25
	{
		spi_send(Str[i]);
    1b9a:	89 91       	ld	r24, Y+
    1b9c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <spi_send>

void spi_send_str_size(const unint8_t *Str, unint8_t size)
{
	unint8_t i = 0;
	
	while (i < size)
    1ba0:	c0 17       	cp	r28, r16
    1ba2:	d1 07       	cpc	r29, r17
    1ba4:	d1 f7       	brne	.-12     	; 0x1b9a <spi_send_str_size+0x1c>
	{
		spi_send(Str[i]);
		i++;
	}
}
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	08 95       	ret

00001bb0 <spi_read_str_size>:
	//Str[i] = '\0';
}


void spi_read_str_size(unint8_t *Str, unint8_t size)
{
    1bb0:	0f 93       	push	r16
    1bb2:	1f 93       	push	r17
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
	unsigned char i = 0;
	
	while (i < size)
    1bb8:	66 23       	and	r22, r22
    1bba:	71 f0       	breq	.+28     	; 0x1bd8 <spi_read_str_size+0x28>
    1bbc:	ec 01       	movw	r28, r24
    1bbe:	61 50       	subi	r22, 0x01	; 1
    1bc0:	06 2f       	mov	r16, r22
    1bc2:	10 e0       	ldi	r17, 0x00	; 0
    1bc4:	0f 5f       	subi	r16, 0xFF	; 255
    1bc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc8:	08 0f       	add	r16, r24
    1bca:	19 1f       	adc	r17, r25
	{
		Str[i] = spi_read();
    1bcc:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <spi_read>
    1bd0:	89 93       	st	Y+, r24

void spi_read_str_size(unint8_t *Str, unint8_t size)
{
	unsigned char i = 0;
	
	while (i < size)
    1bd2:	c0 17       	cp	r28, r16
    1bd4:	d1 07       	cpc	r29, r17
    1bd6:	d1 f7       	brne	.-12     	; 0x1bcc <spi_read_str_size+0x1c>
	{
		Str[i] = spi_read();
		i++;
	}
	
}
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	08 95       	ret

00001be2 <usart_write_str_mark>:
extern inline bool usart_is_data_ready(unint8_t usart_no);
#endif


void usart_write_str_mark(unint8_t usart_no, unint8_t * str, unint8_t mark)
{
    1be2:	ff 92       	push	r15
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	fb 01       	movw	r30, r22
	unint8_t i = 0;
	
	while(str[i] != mark)
    1bee:	60 81       	ld	r22, Z
    1bf0:	64 17       	cp	r22, r20
    1bf2:	71 f0       	breq	.+28     	; 0x1c10 <usart_write_str_mark+0x2e>
    1bf4:	d4 2f       	mov	r29, r20
    1bf6:	8f 01       	movw	r16, r30
    1bf8:	f8 2e       	mov	r15, r24
    1bfa:	c0 e0       	ldi	r28, 0x00	; 0
	{
		usart_write(usart_no, str[i]);
    1bfc:	8f 2d       	mov	r24, r15
    1bfe:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <usart_write>
		i++;
    1c02:	cf 5f       	subi	r28, 0xFF	; 255

void usart_write_str_mark(unint8_t usart_no, unint8_t * str, unint8_t mark)
{
	unint8_t i = 0;
	
	while(str[i] != mark)
    1c04:	f8 01       	movw	r30, r16
    1c06:	ec 0f       	add	r30, r28
    1c08:	f1 1d       	adc	r31, r1
    1c0a:	60 81       	ld	r22, Z
    1c0c:	6d 13       	cpse	r22, r29
    1c0e:	f6 cf       	rjmp	.-20     	; 0x1bfc <usart_write_str_mark+0x1a>
	{
		usart_write(usart_no, str[i]);
		i++;
	}
}
    1c10:	df 91       	pop	r29
    1c12:	cf 91       	pop	r28
    1c14:	1f 91       	pop	r17
    1c16:	0f 91       	pop	r16
    1c18:	ff 90       	pop	r15
    1c1a:	08 95       	ret

00001c1c <is_str_reached>:
unint8_t is_str_reached(char * str, unint8_t tmp1, unint8_t * tmp)
{
	//unint8_t tmp1; //stores the char in UDR then checks whether it's in the word----------------------------
	unint8_t b_found = 0; //determines if the chosen word is reached
	
	if (tmp1 == str[*tmp])//if it matches the corresponding char in the str buffer
    1c1c:	fa 01       	movw	r30, r20
    1c1e:	20 81       	ld	r18, Z
    1c20:	fc 01       	movw	r30, r24
    1c22:	e2 0f       	add	r30, r18
    1c24:	f1 1d       	adc	r31, r1
    1c26:	30 81       	ld	r19, Z
    1c28:	36 13       	cpse	r19, r22
    1c2a:	0c c0       	rjmp	.+24     	; 0x1c44 <is_str_reached+0x28>
	{

		*tmp = *tmp + 1; //move to the next position
    1c2c:	2f 5f       	subi	r18, 0xFF	; 255
    1c2e:	fa 01       	movw	r30, r20
    1c30:	20 83       	st	Z, r18
		
		if (str[*tmp] == 0) // if the word is reached .. then set the flag
    1c32:	fc 01       	movw	r30, r24
    1c34:	e2 0f       	add	r30, r18
    1c36:	f1 1d       	adc	r31, r1
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	90 81       	ld	r25, Z
    1c3c:	99 23       	and	r25, r25
    1c3e:	71 f0       	breq	.+28     	; 0x1c5c <is_str_reached+0x40>
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	08 95       	ret
	}
	else //if the character is different then the word in the buffer is wrong
	{
		//check if the char in the tmp in tmp_str position is the same as the first character in str
		//if so then store it in the first position and then make tmp = 1
		if (tmp1 == str[0])
    1c44:	fc 01       	movw	r30, r24
    1c46:	80 81       	ld	r24, Z
    1c48:	86 13       	cpse	r24, r22
    1c4a:	05 c0       	rjmp	.+10     	; 0x1c56 <is_str_reached+0x3a>
		{
			*tmp = 1;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	fa 01       	movw	r30, r20
    1c50:	80 83       	st	Z, r24
}

unint8_t is_str_reached(char * str, unint8_t tmp1, unint8_t * tmp)
{
	//unint8_t tmp1; //stores the char in UDR then checks whether it's in the word----------------------------
	unint8_t b_found = 0; //determines if the chosen word is reached
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	08 95       	ret
		{
			*tmp = 1;
		}
		else//if not the same as the first char in str position then omit it and start saving again from the beginning
		{
			*tmp = 0;
    1c56:	fa 01       	movw	r30, r20
    1c58:	10 82       	st	Z, r1
}

unint8_t is_str_reached(char * str, unint8_t tmp1, unint8_t * tmp)
{
	//unint8_t tmp1; //stores the char in UDR then checks whether it's in the word----------------------------
	unint8_t b_found = 0; //determines if the chosen word is reached
    1c5a:	80 e0       	ldi	r24, 0x00	; 0

	}
	
	
	return b_found;
}
    1c5c:	08 95       	ret

00001c5e <check_strings>:
}



uint8_t check_strings(unint16_t millis_time, int16_t str_count, ...)
{
    1c5e:	2f 92       	push	r2
    1c60:	3f 92       	push	r3
    1c62:	4f 92       	push	r4
    1c64:	5f 92       	push	r5
    1c66:	6f 92       	push	r6
    1c68:	7f 92       	push	r7
    1c6a:	8f 92       	push	r8
    1c6c:	9f 92       	push	r9
    1c6e:	af 92       	push	r10
    1c70:	bf 92       	push	r11
    1c72:	cf 92       	push	r12
    1c74:	df 92       	push	r13
    1c76:	ef 92       	push	r14
    1c78:	ff 92       	push	r15
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	ed 88       	ldd	r14, Y+21	; 0x15
    1c88:	fe 88       	ldd	r15, Y+22	; 0x16
    1c8a:	af 88       	ldd	r10, Y+23	; 0x17
    1c8c:	b8 8c       	ldd	r11, Y+24	; 0x18
	}
	
	millis_disable_tmr();
	//DISABLE_TIMER0;
	return event_flag;
}
    1c8e:	6d b6       	in	r6, 0x3d	; 61
    1c90:	7e b6       	in	r7, 0x3e	; 62



uint8_t check_strings(unint16_t millis_time, int16_t str_count, ...)
{
	char * str_list[str_count];
    1c92:	c5 01       	movw	r24, r10
    1c94:	88 0f       	add	r24, r24
    1c96:	99 1f       	adc	r25, r25
    1c98:	2d b7       	in	r18, 0x3d	; 61
    1c9a:	3e b7       	in	r19, 0x3e	; 62
    1c9c:	28 1b       	sub	r18, r24
    1c9e:	39 0b       	sbc	r19, r25
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	3e bf       	out	0x3e, r19	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	2d bf       	out	0x3d, r18	; 61
    1caa:	2f 5f       	subi	r18, 0xFF	; 255
    1cac:	3f 4f       	sbci	r19, 0xFF	; 255
    1cae:	22 2e       	mov	r2, r18
    1cb0:	33 2e       	mov	r3, r19
	uint8_t str_flags[str_count];
    1cb2:	4d b7       	in	r20, 0x3d	; 61
    1cb4:	5e b7       	in	r21, 0x3e	; 62
    1cb6:	4a 19       	sub	r20, r10
    1cb8:	5b 09       	sbc	r21, r11
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	5e bf       	out	0x3e, r21	; 62
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	4d bf       	out	0x3d, r20	; 61
    1cc4:	ed b7       	in	r30, 0x3d	; 61
    1cc6:	fe b7       	in	r31, 0x3e	; 62
    1cc8:	31 96       	adiw	r30, 0x01	; 1
    1cca:	4f 01       	movw	r8, r30
	va_list ap;
	va_start(ap, str_count);
	
	
	for (int i = 0; i < str_count; i++ )
    1ccc:	1a 14       	cp	r1, r10
    1cce:	1b 04       	cpc	r1, r11
    1cd0:	64 f4       	brge	.+24     	; 0x1cea <check_strings+0x8c>
    1cd2:	de 01       	movw	r26, r28
    1cd4:	59 96       	adiw	r26, 0x19	; 25
    1cd6:	f9 01       	movw	r30, r18
    1cd8:	28 0f       	add	r18, r24
    1cda:	39 1f       	adc	r19, r25
	{
		str_list[i] = va_arg(ap, char *);
    1cdc:	8d 91       	ld	r24, X+
    1cde:	9d 91       	ld	r25, X+
    1ce0:	81 93       	st	Z+, r24
    1ce2:	91 93       	st	Z+, r25
	uint8_t str_flags[str_count];
	va_list ap;
	va_start(ap, str_count);
	
	
	for (int i = 0; i < str_count; i++ )
    1ce4:	e2 17       	cp	r30, r18
    1ce6:	f3 07       	cpc	r31, r19
    1ce8:	c9 f7       	brne	.-14     	; 0x1cdc <check_strings+0x7e>
	{
		
		if (BIT_IS_SET(UCSRA, RXC)) // if receive flag is activated
		{
			tmp = UDR;
			for (int i = 0; i < str_count; i++)
    1cea:	51 2c       	mov	r5, r1
    1cec:	1f c0       	rjmp	.+62     	; 0x1d2c <check_strings+0xce>
	unint8_t tmp = 0; //used for deciding the next position in the tmp_str for storing the received char from UART
	
	while (millis(millis_time) && (!event_flag)) // keep looping until either timeout or word found
	{
		
		if (BIT_IS_SET(UCSRA, RXC)) // if receive flag is activated
    1cee:	5f 9b       	sbis	0x0b, 7	; 11
    1cf0:	1d c0       	rjmp	.+58     	; 0x1d2c <check_strings+0xce>
		{
			tmp = UDR;
    1cf2:	4c b0       	in	r4, 0x0c	; 12
			for (int i = 0; i < str_count; i++)
    1cf4:	1a 14       	cp	r1, r10
    1cf6:	1b 04       	cpc	r1, r11
    1cf8:	cc f4       	brge	.+50     	; 0x1d2c <check_strings+0xce>
    1cfa:	c2 2c       	mov	r12, r2
    1cfc:	d3 2c       	mov	r13, r3
    1cfe:	00 e0       	ldi	r16, 0x00	; 0
    1d00:	10 e0       	ldi	r17, 0x00	; 0
    1d02:	a4 01       	movw	r20, r8
    1d04:	40 0f       	add	r20, r16
    1d06:	51 1f       	adc	r21, r17
			{
				if (is_str_reached(str_list[i], tmp, &str_flags[i])) // check if the received char is the last char in str
    1d08:	64 2d       	mov	r22, r4
    1d0a:	f6 01       	movw	r30, r12
    1d0c:	81 91       	ld	r24, Z+
    1d0e:	91 91       	ld	r25, Z+
    1d10:	6f 01       	movw	r12, r30
    1d12:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <is_str_reached>
    1d16:	88 23       	and	r24, r24
    1d18:	21 f0       	breq	.+8      	; 0x1d22 <check_strings+0xc4>
				{
					event_flag = i + 1;
    1d1a:	55 24       	eor	r5, r5
    1d1c:	53 94       	inc	r5
    1d1e:	50 0e       	add	r5, r16
					break;
    1d20:	05 c0       	rjmp	.+10     	; 0x1d2c <check_strings+0xce>
	{
		
		if (BIT_IS_SET(UCSRA, RXC)) // if receive flag is activated
		{
			tmp = UDR;
			for (int i = 0; i < str_count; i++)
    1d22:	0f 5f       	subi	r16, 0xFF	; 255
    1d24:	1f 4f       	sbci	r17, 0xFF	; 255
    1d26:	0a 15       	cp	r16, r10
    1d28:	1b 05       	cpc	r17, r11
    1d2a:	59 f7       	brne	.-42     	; 0x1d02 <check_strings+0xa4>
	}
	
	uint8_t event_flag = 0; //determines if the chosen word is reached
	unint8_t tmp = 0; //used for deciding the next position in the tmp_str for storing the received char from UART
	
	while (millis(millis_time) && (!event_flag)) // keep looping until either timeout or word found
    1d2c:	c7 01       	movw	r24, r14
    1d2e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <millis>
    1d32:	88 23       	and	r24, r24
    1d34:	11 f0       	breq	.+4      	; 0x1d3a <check_strings+0xdc>
    1d36:	55 20       	and	r5, r5
    1d38:	d1 f2       	breq	.-76     	; 0x1cee <check_strings+0x90>
			
		}
		
	}
	
	millis_disable_tmr();
    1d3a:	0e 94 c5 09 	call	0x138a	; 0x138a <millis_disable_tmr>
	//DISABLE_TIMER0;
	return event_flag;
}
    1d3e:	85 2d       	mov	r24, r5
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	7e be       	out	0x3e, r7	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	6d be       	out	0x3d, r6	; 61
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	1f 91       	pop	r17
    1d50:	0f 91       	pop	r16
    1d52:	ff 90       	pop	r15
    1d54:	ef 90       	pop	r14
    1d56:	df 90       	pop	r13
    1d58:	cf 90       	pop	r12
    1d5a:	bf 90       	pop	r11
    1d5c:	af 90       	pop	r10
    1d5e:	9f 90       	pop	r9
    1d60:	8f 90       	pop	r8
    1d62:	7f 90       	pop	r7
    1d64:	6f 90       	pop	r6
    1d66:	5f 90       	pop	r5
    1d68:	4f 90       	pop	r4
    1d6a:	3f 90       	pop	r3
    1d6c:	2f 90       	pop	r2
    1d6e:	08 95       	ret

00001d70 <__vector_15>:

static void ( * USART_TXC_ISR[NUM_USARTS])(void);
static void ( * USART_RXC_ISR[NUM_USARTS])(void);

void CONFIG_TXC_ISR() // finished
{
    1d70:	1f 92       	push	r1
    1d72:	0f 92       	push	r0
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	0f 92       	push	r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	2f 93       	push	r18
    1d7c:	3f 93       	push	r19
    1d7e:	4f 93       	push	r20
    1d80:	5f 93       	push	r21
    1d82:	6f 93       	push	r22
    1d84:	7f 93       	push	r23
    1d86:	8f 93       	push	r24
    1d88:	9f 93       	push	r25
    1d8a:	af 93       	push	r26
    1d8c:	bf 93       	push	r27
    1d8e:	ef 93       	push	r30
    1d90:	ff 93       	push	r31
	//-----------------------------------------------------------------------
	// we need to Global interrupt to prevent nested interrupt .
	cli();
    1d92:	f8 94       	cli
	//-----------------------------------------------------------------------

	USART_TXC_ISR[0]();
    1d94:	e0 91 14 01 	lds	r30, 0x0114
    1d98:	f0 91 15 01 	lds	r31, 0x0115
    1d9c:	09 95       	icall

	sei();
    1d9e:	78 94       	sei
}
    1da0:	ff 91       	pop	r31
    1da2:	ef 91       	pop	r30
    1da4:	bf 91       	pop	r27
    1da6:	af 91       	pop	r26
    1da8:	9f 91       	pop	r25
    1daa:	8f 91       	pop	r24
    1dac:	7f 91       	pop	r23
    1dae:	6f 91       	pop	r22
    1db0:	5f 91       	pop	r21
    1db2:	4f 91       	pop	r20
    1db4:	3f 91       	pop	r19
    1db6:	2f 91       	pop	r18
    1db8:	0f 90       	pop	r0
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	0f 90       	pop	r0
    1dbe:	1f 90       	pop	r1
    1dc0:	18 95       	reti

00001dc2 <__vector_13>:
//======================================================================================
void CONFIG_RXC_ISR()
{
    1dc2:	1f 92       	push	r1
    1dc4:	0f 92       	push	r0
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	0f 92       	push	r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	2f 93       	push	r18
    1dce:	3f 93       	push	r19
    1dd0:	4f 93       	push	r20
    1dd2:	5f 93       	push	r21
    1dd4:	6f 93       	push	r22
    1dd6:	7f 93       	push	r23
    1dd8:	8f 93       	push	r24
    1dda:	9f 93       	push	r25
    1ddc:	af 93       	push	r26
    1dde:	bf 93       	push	r27
    1de0:	ef 93       	push	r30
    1de2:	ff 93       	push	r31
	//-------------------------------------------------------------------
	// we need to Global interrupt to prevent nested interrupt .
	cli();
    1de4:	f8 94       	cli
	//-------------------------------------------------------------------
	

	USART_RXC_ISR[0]();
    1de6:	e0 91 12 01 	lds	r30, 0x0112
    1dea:	f0 91 13 01 	lds	r31, 0x0113
    1dee:	09 95       	icall

	
	sei();
    1df0:	78 94       	sei

}
    1df2:	ff 91       	pop	r31
    1df4:	ef 91       	pop	r30
    1df6:	bf 91       	pop	r27
    1df8:	af 91       	pop	r26
    1dfa:	9f 91       	pop	r25
    1dfc:	8f 91       	pop	r24
    1dfe:	7f 91       	pop	r23
    1e00:	6f 91       	pop	r22
    1e02:	5f 91       	pop	r21
    1e04:	4f 91       	pop	r20
    1e06:	3f 91       	pop	r19
    1e08:	2f 91       	pop	r18
    1e0a:	0f 90       	pop	r0
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	0f 90       	pop	r0
    1e10:	1f 90       	pop	r1
    1e12:	18 95       	reti

00001e14 <usart_set_rx_isr>:
extern inline bool usart_data_ready(unint8_t usart_no);


void usart_set_rx_isr (unint8_t usart_no, void ( * p_usart_rx_function)(void))
{
	USART_RXC_ISR[0] = p_usart_rx_function;
    1e14:	70 93 13 01 	sts	0x0113, r23
    1e18:	60 93 12 01 	sts	0x0112, r22
    1e1c:	08 95       	ret

00001e1e <usart_init>:
	USART_TXC_ISR[0] = p_usart_tx_function;
}

/***************************************************/
void usart_init (uint8_t usart_no, uint32_t baud_rate, uint8_t data_size, uint8_t tx_or_rx, uint8_t parity, uint8_t stop_bits, uint8_t sample_phase)
{
    1e1e:	af 92       	push	r10
    1e20:	cf 92       	push	r12
    1e22:	ef 92       	push	r14
    1e24:	ff 92       	push	r15
    1e26:	0f 93       	push	r16
    1e28:	cf 93       	push	r28
    1e2a:	c2 2f       	mov	r28, r18
    if (USART0 == usart_no)
    1e2c:	81 11       	cpse	r24, r1
    1e2e:	42 c0       	rjmp	.+132    	; 0x1eb4 <usart_init+0x96>
	{
		/*calculate UBBR value the formula is (CPU_FREQUENCY / (16_OR_8 * BAUD RATE))  -1 */
		unint16_t UBBR_value = FIXP_DIV(FIXP_FREQ, FIXP_MUL(FIXP_8_16, FIXP_BAUD, UART_PRECISION_BITS),
    1e30:	db 01       	movw	r26, r22
    1e32:	ca 01       	movw	r24, r20
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	aa 1f       	adc	r26, r26
    1e3a:	bb 1f       	adc	r27, r27
    1e3c:	88 0f       	add	r24, r24
    1e3e:	99 1f       	adc	r25, r25
    1e40:	aa 1f       	adc	r26, r26
    1e42:	bb 1f       	adc	r27, r27
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	aa 1f       	adc	r26, r26
    1e4a:	bb 1f       	adc	r27, r27
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	aa 1f       	adc	r26, r26
    1e52:	bb 1f       	adc	r27, r27
    1e54:	9c 01       	movw	r18, r24
    1e56:	ad 01       	movw	r20, r26
    1e58:	20 7f       	andi	r18, 0xF0	; 240
    1e5a:	5f 77       	andi	r21, 0x7F	; 127
    1e5c:	60 e0       	ldi	r22, 0x00	; 0
    1e5e:	78 e4       	ldi	r23, 0x48	; 72
    1e60:	88 ee       	ldi	r24, 0xE8	; 232
    1e62:	91 e0       	ldi	r25, 0x01	; 1
    1e64:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <__udivmodsi4>
    1e68:	22 50       	subi	r18, 0x02	; 2
    1e6a:	31 09       	sbc	r19, r1
										    UART_PRECISION_BITS) - (1<<UART_PRECISION_BITS);
		if ((UBBR_value & 1)) //if the precision bit is 0.1 in binary meaning 0.5 in decimal we should round up
    1e6c:	20 ff       	sbrs	r18, 0
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <usart_init+0x5c>
		{
			UBBR_value = (UBBR_value >> 1) + 1; //remove the precision bit and round up
    1e70:	36 95       	lsr	r19
    1e72:	27 95       	ror	r18
    1e74:	2f 5f       	subi	r18, 0xFF	; 255
    1e76:	3f 4f       	sbci	r19, 0xFF	; 255
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <usart_init+0x60>
		}
		else //if the precision bit is not 0.1 in binary meaning less than 0.5 in decimal we should round down
		{
			UBBR_value >>= UART_PRECISION_BITS; // round down by just removing the precision bit
    1e7a:	36 95       	lsr	r19
    1e7c:	27 95       	ror	r18
		}
	
		//PORTB = UBBR_value; just for testing
		//setting the U2X bit to 1 for double speed asynchronous
		UCSRA = (DOUBLE_SPEED << U2X);	
    1e7e:	82 e0       	ldi	r24, 0x02	; 2
    1e80:	8b b9       	out	0x0b, r24	; 11
			* RXEN  = 1/0 Receiver En/Disable
			* TXEN  = 1/0 Transmitter En/DisEnable
			* UCSZ2 = 0   For 8-bit data mode
			* RXB8 & TXB8 not used for 8-bit data mode
			***********************************************************************/ 
		UCSRB = (tx_or_rx << RXEN_TXEN) | (data_size & (1 << 2));
    1e82:	00 0f       	add	r16, r16
    1e84:	00 0f       	add	r16, r16
    1e86:	00 0f       	add	r16, r16
    1e88:	8c 2f       	mov	r24, r28
    1e8a:	84 70       	andi	r24, 0x04	; 4
    1e8c:	08 2b       	or	r16, r24
    1e8e:	0a b9       	out	0x0a, r16	; 10
    1e90:	8a 2d       	mov	r24, r10
    1e92:	80 68       	ori	r24, 0x80	; 128
			* UPM1:0  = 0 Disable parity bit
			* USBS    = 0 One stop bit
			* UCSZ1:0 = 11 For 8-bit data mode
			* UCPOL   = 0 Used with the Synchronous operation only
			***********************************************************************/ 
		UCSRC = (1 << URSEL) | (parity << UPM_0_1) | (stop_bits << USBS) | ((data_size & 0x03) << UCSZ_0_1) | (sample_phase << UCPOL);
    1e94:	cc 0c       	add	r12, r12
    1e96:	cc 0c       	add	r12, r12
    1e98:	cc 0c       	add	r12, r12
    1e9a:	ac 2c       	mov	r10, r12
    1e9c:	a8 2a       	or	r10, r24
    1e9e:	80 e1       	ldi	r24, 0x10	; 16
    1ea0:	e8 9e       	mul	r14, r24
    1ea2:	70 01       	movw	r14, r0
    1ea4:	11 24       	eor	r1, r1
    1ea6:	ea 28       	or	r14, r10
    1ea8:	c3 70       	andi	r28, 0x03	; 3
    1eaa:	cc 0f       	add	r28, r28
    1eac:	ec 2a       	or	r14, r28
    1eae:	e0 bc       	out	0x20, r14	; 32
 	
		//Put the upper part of the UBBR value here (bits 8 to 11)
		UBRRH = (unint8_t)(UBBR_value >> 8);
    1eb0:	30 bd       	out	0x20, r19	; 32
		//Put the remaining part of the UBBR value here
		UBRRL = (unint8_t)UBBR_value;
    1eb2:	29 b9       	out	0x09, r18	; 9
	}

}
    1eb4:	cf 91       	pop	r28
    1eb6:	0f 91       	pop	r16
    1eb8:	ff 90       	pop	r15
    1eba:	ef 90       	pop	r14
    1ebc:	cf 90       	pop	r12
    1ebe:	af 90       	pop	r10
    1ec0:	08 95       	ret

00001ec2 <usart_write>:
void usart_write(unint8_t usart_no, unint8_t data)
{
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	//#if(DATA_REGISTER_EMPTY_INTERRUP==0) //if the send interrupt is not activated keep the flag polling
	if (BIT_IS_CLEAR(UCSRB, UDRIE))
    1ec2:	55 99       	sbic	0x0a, 5	; 10
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <usart_write+0x8>
	{
		while (BIT_IS_CLEAR(UCSRA,UDRE))
    1ec6:	5d 9b       	sbis	0x0b, 5	; 11
    1ec8:	fe cf       	rjmp	.-4      	; 0x1ec6 <usart_write+0x4>
	}

	
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	
	UDR = data;
    1eca:	6c b9       	out	0x0c, r22	; 12
    1ecc:	08 95       	ret

00001ece <usart_set_rx_int>:


void usart_set_rx_int (unint8_t usart_no, bool b_state)
{
	
	if (USART0 == usart_no)
    1ece:	81 11       	cpse	r24, r1
    1ed0:	08 c0       	rjmp	.+16     	; 0x1ee2 <usart_set_rx_int+0x14>
	{
		UCSRB = (b_state ? UCSRB | (1 << RXCIE) : UCSRB & ~(1 << RXCIE));
    1ed2:	66 23       	and	r22, r22
    1ed4:	19 f0       	breq	.+6      	; 0x1edc <usart_set_rx_int+0xe>
    1ed6:	8a b1       	in	r24, 0x0a	; 10
    1ed8:	80 68       	ori	r24, 0x80	; 128
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <usart_set_rx_int+0x12>
    1edc:	8a b1       	in	r24, 0x0a	; 10
    1ede:	8f 77       	andi	r24, 0x7F	; 127
    1ee0:	8a b9       	out	0x0a, r24	; 10
    1ee2:	08 95       	ret

00001ee4 <__udivmodsi4>:
    1ee4:	a1 e2       	ldi	r26, 0x21	; 33
    1ee6:	1a 2e       	mov	r1, r26
    1ee8:	aa 1b       	sub	r26, r26
    1eea:	bb 1b       	sub	r27, r27
    1eec:	fd 01       	movw	r30, r26
    1eee:	0d c0       	rjmp	.+26     	; 0x1f0a <__udivmodsi4_ep>

00001ef0 <__udivmodsi4_loop>:
    1ef0:	aa 1f       	adc	r26, r26
    1ef2:	bb 1f       	adc	r27, r27
    1ef4:	ee 1f       	adc	r30, r30
    1ef6:	ff 1f       	adc	r31, r31
    1ef8:	a2 17       	cp	r26, r18
    1efa:	b3 07       	cpc	r27, r19
    1efc:	e4 07       	cpc	r30, r20
    1efe:	f5 07       	cpc	r31, r21
    1f00:	20 f0       	brcs	.+8      	; 0x1f0a <__udivmodsi4_ep>
    1f02:	a2 1b       	sub	r26, r18
    1f04:	b3 0b       	sbc	r27, r19
    1f06:	e4 0b       	sbc	r30, r20
    1f08:	f5 0b       	sbc	r31, r21

00001f0a <__udivmodsi4_ep>:
    1f0a:	66 1f       	adc	r22, r22
    1f0c:	77 1f       	adc	r23, r23
    1f0e:	88 1f       	adc	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	1a 94       	dec	r1
    1f14:	69 f7       	brne	.-38     	; 0x1ef0 <__udivmodsi4_loop>
    1f16:	60 95       	com	r22
    1f18:	70 95       	com	r23
    1f1a:	80 95       	com	r24
    1f1c:	90 95       	com	r25
    1f1e:	9b 01       	movw	r18, r22
    1f20:	ac 01       	movw	r20, r24
    1f22:	bd 01       	movw	r22, r26
    1f24:	cf 01       	movw	r24, r30
    1f26:	08 95       	ret

00001f28 <__umulhisi3>:
    1f28:	a2 9f       	mul	r26, r18
    1f2a:	b0 01       	movw	r22, r0
    1f2c:	b3 9f       	mul	r27, r19
    1f2e:	c0 01       	movw	r24, r0
    1f30:	a3 9f       	mul	r26, r19
    1f32:	70 0d       	add	r23, r0
    1f34:	81 1d       	adc	r24, r1
    1f36:	11 24       	eor	r1, r1
    1f38:	91 1d       	adc	r25, r1
    1f3a:	b2 9f       	mul	r27, r18
    1f3c:	70 0d       	add	r23, r0
    1f3e:	81 1d       	adc	r24, r1
    1f40:	11 24       	eor	r1, r1
    1f42:	91 1d       	adc	r25, r1
    1f44:	08 95       	ret

00001f46 <malloc>:
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	82 30       	cpi	r24, 0x02	; 2
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	10 f4       	brcc	.+4      	; 0x1f54 <malloc+0xe>
    1f50:	82 e0       	ldi	r24, 0x02	; 2
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	e0 91 29 01 	lds	r30, 0x0129
    1f58:	f0 91 2a 01 	lds	r31, 0x012A
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	c0 e0       	ldi	r28, 0x00	; 0
    1f62:	d0 e0       	ldi	r29, 0x00	; 0
    1f64:	30 97       	sbiw	r30, 0x00	; 0
    1f66:	11 f1       	breq	.+68     	; 0x1fac <malloc+0x66>
    1f68:	40 81       	ld	r20, Z
    1f6a:	51 81       	ldd	r21, Z+1	; 0x01
    1f6c:	48 17       	cp	r20, r24
    1f6e:	59 07       	cpc	r21, r25
    1f70:	c0 f0       	brcs	.+48     	; 0x1fa2 <malloc+0x5c>
    1f72:	48 17       	cp	r20, r24
    1f74:	59 07       	cpc	r21, r25
    1f76:	61 f4       	brne	.+24     	; 0x1f90 <malloc+0x4a>
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	20 97       	sbiw	r28, 0x00	; 0
    1f7e:	19 f0       	breq	.+6      	; 0x1f86 <malloc+0x40>
    1f80:	9b 83       	std	Y+3, r25	; 0x03
    1f82:	8a 83       	std	Y+2, r24	; 0x02
    1f84:	2b c0       	rjmp	.+86     	; 0x1fdc <malloc+0x96>
    1f86:	90 93 2a 01 	sts	0x012A, r25
    1f8a:	80 93 29 01 	sts	0x0129, r24
    1f8e:	26 c0       	rjmp	.+76     	; 0x1fdc <malloc+0x96>
    1f90:	21 15       	cp	r18, r1
    1f92:	31 05       	cpc	r19, r1
    1f94:	19 f0       	breq	.+6      	; 0x1f9c <malloc+0x56>
    1f96:	42 17       	cp	r20, r18
    1f98:	53 07       	cpc	r21, r19
    1f9a:	18 f4       	brcc	.+6      	; 0x1fa2 <malloc+0x5c>
    1f9c:	9a 01       	movw	r18, r20
    1f9e:	be 01       	movw	r22, r28
    1fa0:	df 01       	movw	r26, r30
    1fa2:	ef 01       	movw	r28, r30
    1fa4:	02 80       	ldd	r0, Z+2	; 0x02
    1fa6:	f3 81       	ldd	r31, Z+3	; 0x03
    1fa8:	e0 2d       	mov	r30, r0
    1faa:	dc cf       	rjmp	.-72     	; 0x1f64 <malloc+0x1e>
    1fac:	21 15       	cp	r18, r1
    1fae:	31 05       	cpc	r19, r1
    1fb0:	09 f1       	breq	.+66     	; 0x1ff4 <malloc+0xae>
    1fb2:	28 1b       	sub	r18, r24
    1fb4:	39 0b       	sbc	r19, r25
    1fb6:	24 30       	cpi	r18, 0x04	; 4
    1fb8:	31 05       	cpc	r19, r1
    1fba:	90 f4       	brcc	.+36     	; 0x1fe0 <malloc+0x9a>
    1fbc:	12 96       	adiw	r26, 0x02	; 2
    1fbe:	8d 91       	ld	r24, X+
    1fc0:	9c 91       	ld	r25, X
    1fc2:	13 97       	sbiw	r26, 0x03	; 3
    1fc4:	61 15       	cp	r22, r1
    1fc6:	71 05       	cpc	r23, r1
    1fc8:	21 f0       	breq	.+8      	; 0x1fd2 <malloc+0x8c>
    1fca:	fb 01       	movw	r30, r22
    1fcc:	93 83       	std	Z+3, r25	; 0x03
    1fce:	82 83       	std	Z+2, r24	; 0x02
    1fd0:	04 c0       	rjmp	.+8      	; 0x1fda <malloc+0x94>
    1fd2:	90 93 2a 01 	sts	0x012A, r25
    1fd6:	80 93 29 01 	sts	0x0129, r24
    1fda:	fd 01       	movw	r30, r26
    1fdc:	32 96       	adiw	r30, 0x02	; 2
    1fde:	44 c0       	rjmp	.+136    	; 0x2068 <malloc+0x122>
    1fe0:	fd 01       	movw	r30, r26
    1fe2:	e2 0f       	add	r30, r18
    1fe4:	f3 1f       	adc	r31, r19
    1fe6:	81 93       	st	Z+, r24
    1fe8:	91 93       	st	Z+, r25
    1fea:	22 50       	subi	r18, 0x02	; 2
    1fec:	31 09       	sbc	r19, r1
    1fee:	2d 93       	st	X+, r18
    1ff0:	3c 93       	st	X, r19
    1ff2:	3a c0       	rjmp	.+116    	; 0x2068 <malloc+0x122>
    1ff4:	20 91 27 01 	lds	r18, 0x0127
    1ff8:	30 91 28 01 	lds	r19, 0x0128
    1ffc:	23 2b       	or	r18, r19
    1ffe:	41 f4       	brne	.+16     	; 0x2010 <malloc+0xca>
    2000:	20 91 62 00 	lds	r18, 0x0062
    2004:	30 91 63 00 	lds	r19, 0x0063
    2008:	30 93 28 01 	sts	0x0128, r19
    200c:	20 93 27 01 	sts	0x0127, r18
    2010:	20 91 60 00 	lds	r18, 0x0060
    2014:	30 91 61 00 	lds	r19, 0x0061
    2018:	21 15       	cp	r18, r1
    201a:	31 05       	cpc	r19, r1
    201c:	41 f4       	brne	.+16     	; 0x202e <malloc+0xe8>
    201e:	2d b7       	in	r18, 0x3d	; 61
    2020:	3e b7       	in	r19, 0x3e	; 62
    2022:	40 91 64 00 	lds	r20, 0x0064
    2026:	50 91 65 00 	lds	r21, 0x0065
    202a:	24 1b       	sub	r18, r20
    202c:	35 0b       	sbc	r19, r21
    202e:	e0 91 27 01 	lds	r30, 0x0127
    2032:	f0 91 28 01 	lds	r31, 0x0128
    2036:	e2 17       	cp	r30, r18
    2038:	f3 07       	cpc	r31, r19
    203a:	a0 f4       	brcc	.+40     	; 0x2064 <malloc+0x11e>
    203c:	2e 1b       	sub	r18, r30
    203e:	3f 0b       	sbc	r19, r31
    2040:	28 17       	cp	r18, r24
    2042:	39 07       	cpc	r19, r25
    2044:	78 f0       	brcs	.+30     	; 0x2064 <malloc+0x11e>
    2046:	ac 01       	movw	r20, r24
    2048:	4e 5f       	subi	r20, 0xFE	; 254
    204a:	5f 4f       	sbci	r21, 0xFF	; 255
    204c:	24 17       	cp	r18, r20
    204e:	35 07       	cpc	r19, r21
    2050:	48 f0       	brcs	.+18     	; 0x2064 <malloc+0x11e>
    2052:	4e 0f       	add	r20, r30
    2054:	5f 1f       	adc	r21, r31
    2056:	50 93 28 01 	sts	0x0128, r21
    205a:	40 93 27 01 	sts	0x0127, r20
    205e:	81 93       	st	Z+, r24
    2060:	91 93       	st	Z+, r25
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <malloc+0x122>
    2064:	e0 e0       	ldi	r30, 0x00	; 0
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	cf 01       	movw	r24, r30
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	08 95       	ret

00002070 <free>:
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	09 f4       	brne	.+2      	; 0x207e <free+0xe>
    207c:	8c c0       	rjmp	.+280    	; 0x2196 <free+0x126>
    207e:	fc 01       	movw	r30, r24
    2080:	32 97       	sbiw	r30, 0x02	; 2
    2082:	13 82       	std	Z+3, r1	; 0x03
    2084:	12 82       	std	Z+2, r1	; 0x02
    2086:	00 91 29 01 	lds	r16, 0x0129
    208a:	10 91 2a 01 	lds	r17, 0x012A
    208e:	01 15       	cp	r16, r1
    2090:	11 05       	cpc	r17, r1
    2092:	81 f4       	brne	.+32     	; 0x20b4 <free+0x44>
    2094:	20 81       	ld	r18, Z
    2096:	31 81       	ldd	r19, Z+1	; 0x01
    2098:	82 0f       	add	r24, r18
    209a:	93 1f       	adc	r25, r19
    209c:	20 91 27 01 	lds	r18, 0x0127
    20a0:	30 91 28 01 	lds	r19, 0x0128
    20a4:	28 17       	cp	r18, r24
    20a6:	39 07       	cpc	r19, r25
    20a8:	79 f5       	brne	.+94     	; 0x2108 <free+0x98>
    20aa:	f0 93 28 01 	sts	0x0128, r31
    20ae:	e0 93 27 01 	sts	0x0127, r30
    20b2:	71 c0       	rjmp	.+226    	; 0x2196 <free+0x126>
    20b4:	d8 01       	movw	r26, r16
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	50 e0       	ldi	r21, 0x00	; 0
    20ba:	ae 17       	cp	r26, r30
    20bc:	bf 07       	cpc	r27, r31
    20be:	50 f4       	brcc	.+20     	; 0x20d4 <free+0x64>
    20c0:	12 96       	adiw	r26, 0x02	; 2
    20c2:	2d 91       	ld	r18, X+
    20c4:	3c 91       	ld	r19, X
    20c6:	13 97       	sbiw	r26, 0x03	; 3
    20c8:	ad 01       	movw	r20, r26
    20ca:	21 15       	cp	r18, r1
    20cc:	31 05       	cpc	r19, r1
    20ce:	09 f1       	breq	.+66     	; 0x2112 <free+0xa2>
    20d0:	d9 01       	movw	r26, r18
    20d2:	f3 cf       	rjmp	.-26     	; 0x20ba <free+0x4a>
    20d4:	9d 01       	movw	r18, r26
    20d6:	da 01       	movw	r26, r20
    20d8:	33 83       	std	Z+3, r19	; 0x03
    20da:	22 83       	std	Z+2, r18	; 0x02
    20dc:	60 81       	ld	r22, Z
    20de:	71 81       	ldd	r23, Z+1	; 0x01
    20e0:	86 0f       	add	r24, r22
    20e2:	97 1f       	adc	r25, r23
    20e4:	82 17       	cp	r24, r18
    20e6:	93 07       	cpc	r25, r19
    20e8:	69 f4       	brne	.+26     	; 0x2104 <free+0x94>
    20ea:	ec 01       	movw	r28, r24
    20ec:	28 81       	ld	r18, Y
    20ee:	39 81       	ldd	r19, Y+1	; 0x01
    20f0:	26 0f       	add	r18, r22
    20f2:	37 1f       	adc	r19, r23
    20f4:	2e 5f       	subi	r18, 0xFE	; 254
    20f6:	3f 4f       	sbci	r19, 0xFF	; 255
    20f8:	31 83       	std	Z+1, r19	; 0x01
    20fa:	20 83       	st	Z, r18
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2100:	93 83       	std	Z+3, r25	; 0x03
    2102:	82 83       	std	Z+2, r24	; 0x02
    2104:	45 2b       	or	r20, r21
    2106:	29 f4       	brne	.+10     	; 0x2112 <free+0xa2>
    2108:	f0 93 2a 01 	sts	0x012A, r31
    210c:	e0 93 29 01 	sts	0x0129, r30
    2110:	42 c0       	rjmp	.+132    	; 0x2196 <free+0x126>
    2112:	13 96       	adiw	r26, 0x03	; 3
    2114:	fc 93       	st	X, r31
    2116:	ee 93       	st	-X, r30
    2118:	12 97       	sbiw	r26, 0x02	; 2
    211a:	ed 01       	movw	r28, r26
    211c:	49 91       	ld	r20, Y+
    211e:	59 91       	ld	r21, Y+
    2120:	9e 01       	movw	r18, r28
    2122:	24 0f       	add	r18, r20
    2124:	35 1f       	adc	r19, r21
    2126:	e2 17       	cp	r30, r18
    2128:	f3 07       	cpc	r31, r19
    212a:	71 f4       	brne	.+28     	; 0x2148 <free+0xd8>
    212c:	80 81       	ld	r24, Z
    212e:	91 81       	ldd	r25, Z+1	; 0x01
    2130:	84 0f       	add	r24, r20
    2132:	95 1f       	adc	r25, r21
    2134:	02 96       	adiw	r24, 0x02	; 2
    2136:	11 96       	adiw	r26, 0x01	; 1
    2138:	9c 93       	st	X, r25
    213a:	8e 93       	st	-X, r24
    213c:	82 81       	ldd	r24, Z+2	; 0x02
    213e:	93 81       	ldd	r25, Z+3	; 0x03
    2140:	13 96       	adiw	r26, 0x03	; 3
    2142:	9c 93       	st	X, r25
    2144:	8e 93       	st	-X, r24
    2146:	12 97       	sbiw	r26, 0x02	; 2
    2148:	e0 e0       	ldi	r30, 0x00	; 0
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	d8 01       	movw	r26, r16
    214e:	12 96       	adiw	r26, 0x02	; 2
    2150:	8d 91       	ld	r24, X+
    2152:	9c 91       	ld	r25, X
    2154:	13 97       	sbiw	r26, 0x03	; 3
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	19 f0       	breq	.+6      	; 0x2160 <free+0xf0>
    215a:	f8 01       	movw	r30, r16
    215c:	8c 01       	movw	r16, r24
    215e:	f6 cf       	rjmp	.-20     	; 0x214c <free+0xdc>
    2160:	8d 91       	ld	r24, X+
    2162:	9c 91       	ld	r25, X
    2164:	98 01       	movw	r18, r16
    2166:	2e 5f       	subi	r18, 0xFE	; 254
    2168:	3f 4f       	sbci	r19, 0xFF	; 255
    216a:	82 0f       	add	r24, r18
    216c:	93 1f       	adc	r25, r19
    216e:	20 91 27 01 	lds	r18, 0x0127
    2172:	30 91 28 01 	lds	r19, 0x0128
    2176:	28 17       	cp	r18, r24
    2178:	39 07       	cpc	r19, r25
    217a:	69 f4       	brne	.+26     	; 0x2196 <free+0x126>
    217c:	30 97       	sbiw	r30, 0x00	; 0
    217e:	29 f4       	brne	.+10     	; 0x218a <free+0x11a>
    2180:	10 92 2a 01 	sts	0x012A, r1
    2184:	10 92 29 01 	sts	0x0129, r1
    2188:	02 c0       	rjmp	.+4      	; 0x218e <free+0x11e>
    218a:	13 82       	std	Z+3, r1	; 0x03
    218c:	12 82       	std	Z+2, r1	; 0x02
    218e:	10 93 28 01 	sts	0x0128, r17
    2192:	00 93 27 01 	sts	0x0127, r16
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	08 95       	ret

000021a0 <memcpy>:
    21a0:	fb 01       	movw	r30, r22
    21a2:	dc 01       	movw	r26, r24
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <memcpy+0xa>
    21a6:	01 90       	ld	r0, Z+
    21a8:	0d 92       	st	X+, r0
    21aa:	41 50       	subi	r20, 0x01	; 1
    21ac:	50 40       	sbci	r21, 0x00	; 0
    21ae:	d8 f7       	brcc	.-10     	; 0x21a6 <memcpy+0x6>
    21b0:	08 95       	ret

000021b2 <__itoa_ncheck>:
    21b2:	bb 27       	eor	r27, r27
    21b4:	4a 30       	cpi	r20, 0x0A	; 10
    21b6:	31 f4       	brne	.+12     	; 0x21c4 <__itoa_ncheck+0x12>
    21b8:	99 23       	and	r25, r25
    21ba:	22 f4       	brpl	.+8      	; 0x21c4 <__itoa_ncheck+0x12>
    21bc:	bd e2       	ldi	r27, 0x2D	; 45
    21be:	90 95       	com	r25
    21c0:	81 95       	neg	r24
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	0c 94 e5 10 	jmp	0x21ca	; 0x21ca <__utoa_common>

000021c8 <__utoa_ncheck>:
    21c8:	bb 27       	eor	r27, r27

000021ca <__utoa_common>:
    21ca:	fb 01       	movw	r30, r22
    21cc:	55 27       	eor	r21, r21
    21ce:	aa 27       	eor	r26, r26
    21d0:	88 0f       	add	r24, r24
    21d2:	99 1f       	adc	r25, r25
    21d4:	aa 1f       	adc	r26, r26
    21d6:	a4 17       	cp	r26, r20
    21d8:	10 f0       	brcs	.+4      	; 0x21de <__utoa_common+0x14>
    21da:	a4 1b       	sub	r26, r20
    21dc:	83 95       	inc	r24
    21de:	50 51       	subi	r21, 0x10	; 16
    21e0:	b9 f7       	brne	.-18     	; 0x21d0 <__utoa_common+0x6>
    21e2:	a0 5d       	subi	r26, 0xD0	; 208
    21e4:	aa 33       	cpi	r26, 0x3A	; 58
    21e6:	08 f0       	brcs	.+2      	; 0x21ea <__utoa_common+0x20>
    21e8:	a9 5d       	subi	r26, 0xD9	; 217
    21ea:	a1 93       	st	Z+, r26
    21ec:	00 97       	sbiw	r24, 0x00	; 0
    21ee:	79 f7       	brne	.-34     	; 0x21ce <__utoa_common+0x4>
    21f0:	b1 11       	cpse	r27, r1
    21f2:	b1 93       	st	Z+, r27
    21f4:	11 92       	st	Z+, r1
    21f6:	cb 01       	movw	r24, r22
    21f8:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <strrev>

000021fc <strrev>:
    21fc:	dc 01       	movw	r26, r24
    21fe:	fc 01       	movw	r30, r24
    2200:	67 2f       	mov	r22, r23
    2202:	71 91       	ld	r23, Z+
    2204:	77 23       	and	r23, r23
    2206:	e1 f7       	brne	.-8      	; 0x2200 <strrev+0x4>
    2208:	32 97       	sbiw	r30, 0x02	; 2
    220a:	04 c0       	rjmp	.+8      	; 0x2214 <strrev+0x18>
    220c:	7c 91       	ld	r23, X
    220e:	6d 93       	st	X+, r22
    2210:	70 83       	st	Z, r23
    2212:	62 91       	ld	r22, -Z
    2214:	ae 17       	cp	r26, r30
    2216:	bf 07       	cpc	r27, r31
    2218:	c8 f3       	brcs	.-14     	; 0x220c <strrev+0x10>
    221a:	08 95       	ret

0000221c <_exit>:
    221c:	f8 94       	cli

0000221e <__stop_program>:
    221e:	ff cf       	rjmp	.-2      	; 0x221e <__stop_program>
