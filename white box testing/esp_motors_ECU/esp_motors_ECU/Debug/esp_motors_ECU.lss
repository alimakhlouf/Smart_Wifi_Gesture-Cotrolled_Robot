
esp_motors_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002074  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  00002074  00002108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800108  00800108  000021b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  0000221c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004a41  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000113a  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014ac  00000000  00000000  000081bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e60  00000000  00000000  0000966c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ce3  00000000  00000000  0000a4cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003fda  00000000  00000000  0000b1af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  0000f189  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 2b 08 	jmp	0x1056	; 0x1056 <__vector_11>
      30:	0c 94 7f 0c 	jmp	0x18fe	; 0x18fe <__vector_12>
      34:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__vector_13>
      38:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__vector_14>
      3c:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 32       	cpi	r26, 0x2E	; 46
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 65 04 	call	0x8ca	; 0x8ca <main>
      8a:	0c 94 38 10 	jmp	0x2070	; 0x2070 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_set_pin_dir>:
void dio_set_pin_dir(uint8_t a_pin_no, uint8_t a_pin_dir)
{
	//determine the port that was addressed from the dio_pin number 
	uint8_t pin_port= a_pin_no / NUM_PIN_PER_PORT;
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
      92:	e8 2f       	mov	r30, r24
      94:	e6 95       	lsr	r30
      96:	e6 95       	lsr	r30
      98:	e6 95       	lsr	r30
      9a:	87 70       	andi	r24, 0x07	; 7
	
	//of the direction is either input or output configure it
	if (a_pin_dir != DIO_PULLUP)
      9c:	62 30       	cpi	r22, 0x02	; 2
      9e:	e1 f0       	breq	.+56     	; 0xd8 <dio_set_pin_dir+0x46>
	{
		//put this direction in the specific pin_no in the specific port 
		ASSIGN_BIT(*(DDR_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, 
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	9f 01       	movw	r18, r30
      a4:	22 0f       	add	r18, r18
      a6:	33 1f       	adc	r19, r19
      a8:	e2 0f       	add	r30, r18
      aa:	f3 1f       	adc	r31, r19
      ac:	f1 95       	neg	r31
      ae:	e1 95       	neg	r30
      b0:	f1 09       	sbc	r31, r1
      b2:	22 ad       	ldd	r18, Z+58	; 0x3a
      b4:	41 e0       	ldi	r20, 0x01	; 1
      b6:	50 e0       	ldi	r21, 0x00	; 0
      b8:	08 2e       	mov	r0, r24
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <dio_set_pin_dir+0x2e>
      bc:	44 0f       	add	r20, r20
      be:	55 1f       	adc	r21, r21
      c0:	0a 94       	dec	r0
      c2:	e2 f7       	brpl	.-8      	; 0xbc <dio_set_pin_dir+0x2a>
      c4:	94 2f       	mov	r25, r20
      c6:	90 95       	com	r25
      c8:	92 23       	and	r25, r18
      ca:	01 c0       	rjmp	.+2      	; 0xce <dio_set_pin_dir+0x3c>
      cc:	66 0f       	add	r22, r22
      ce:	8a 95       	dec	r24
      d0:	ea f7       	brpl	.-6      	; 0xcc <dio_set_pin_dir+0x3a>
      d2:	69 2b       	or	r22, r25
      d4:	62 af       	std	Z+58, r22	; 0x3a
      d6:	08 95       	ret
		             a_pin_dir);
	}
	else //if pull up then make it input and put high to the PORT reg
	{ 
		// assign pin as input
		ASSIGN_BIT(*(DDR_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, 0); 
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	9f 01       	movw	r18, r30
      dc:	22 0f       	add	r18, r18
      de:	33 1f       	adc	r19, r19
      e0:	e2 0f       	add	r30, r18
      e2:	f3 1f       	adc	r31, r19
      e4:	f1 95       	neg	r31
      e6:	e1 95       	neg	r30
      e8:	f1 09       	sbc	r31, r1
      ea:	42 ad       	ldd	r20, Z+58	; 0x3a
      ec:	21 e0       	ldi	r18, 0x01	; 1
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	b9 01       	movw	r22, r18
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <dio_set_pin_dir+0x66>
      f4:	66 0f       	add	r22, r22
      f6:	77 1f       	adc	r23, r23
      f8:	8a 95       	dec	r24
      fa:	e2 f7       	brpl	.-8      	; 0xf4 <dio_set_pin_dir+0x62>
      fc:	cb 01       	movw	r24, r22
      fe:	96 2f       	mov	r25, r22
     100:	90 95       	com	r25
     102:	29 2f       	mov	r18, r25
     104:	24 23       	and	r18, r20
     106:	22 af       	std	Z+58, r18	; 0x3a
		// put 1 to port pin to make it pull up
		ASSIGN_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, 1); 
     108:	23 ad       	ldd	r18, Z+59	; 0x3b
     10a:	92 23       	and	r25, r18
     10c:	89 2b       	or	r24, r25
     10e:	83 af       	std	Z+59, r24	; 0x3b
     110:	08 95       	ret

00000112 <dio_set_pin_val>:
	return (BIT_IS_SET(*(PIN_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port));
}


void dio_set_pin_val(uint8_t a_pin_no, uint8_t PinVal)
{
     112:	96 2f       	mov	r25, r22
	//determine the port that was addressed from the dio_pin number
	uint8_t pin_port = a_pin_no / NUM_PIN_PER_PORT;
     114:	38 2f       	mov	r19, r24
     116:	36 95       	lsr	r19
     118:	36 95       	lsr	r19
     11a:	36 95       	lsr	r19
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
	
	//assign the value to the specific pin_no in the specific port 
	ASSIGN_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, PinVal);
     11c:	e3 2f       	mov	r30, r19
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	af 01       	movw	r20, r30
     122:	44 0f       	add	r20, r20
     124:	55 1f       	adc	r21, r21
     126:	e4 0f       	add	r30, r20
     128:	f5 1f       	adc	r31, r21
     12a:	f1 95       	neg	r31
     12c:	e1 95       	neg	r30
     12e:	f1 09       	sbc	r31, r1
     130:	63 ad       	ldd	r22, Z+59	; 0x3b
void dio_set_pin_val(uint8_t a_pin_no, uint8_t PinVal)
{
	//determine the port that was addressed from the dio_pin number
	uint8_t pin_port = a_pin_no / NUM_PIN_PER_PORT;
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
     132:	33 0f       	add	r19, r19
     134:	33 0f       	add	r19, r19
     136:	33 0f       	add	r19, r19
     138:	83 1b       	sub	r24, r19
	
	//assign the value to the specific pin_no in the specific port 
	ASSIGN_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, PinVal);
     13a:	21 e0       	ldi	r18, 0x01	; 1
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	08 2e       	mov	r0, r24
     140:	02 c0       	rjmp	.+4      	; 0x146 <dio_set_pin_val+0x34>
     142:	22 0f       	add	r18, r18
     144:	33 1f       	adc	r19, r19
     146:	0a 94       	dec	r0
     148:	e2 f7       	brpl	.-8      	; 0x142 <dio_set_pin_val+0x30>
     14a:	20 95       	com	r18
     14c:	26 23       	and	r18, r22
     14e:	69 2f       	mov	r22, r25
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	02 c0       	rjmp	.+4      	; 0x158 <dio_set_pin_val+0x46>
     154:	66 0f       	add	r22, r22
     156:	77 1f       	adc	r23, r23
     158:	8a 95       	dec	r24
     15a:	e2 f7       	brpl	.-8      	; 0x154 <dio_set_pin_val+0x42>
     15c:	62 2b       	or	r22, r18
     15e:	63 af       	std	Z+59, r22	; 0x3b
     160:	08 95       	ret

00000162 <dio_togg_pin>:
}

void dio_togg_pin(uint8_t a_pin_no)
{
	//determine the port that was addressed from the dio_pin number
	uint8_t pin_port = a_pin_no / NUM_PIN_PER_PORT;
     162:	28 2f       	mov	r18, r24
     164:	26 95       	lsr	r18
     166:	26 95       	lsr	r18
     168:	26 95       	lsr	r18
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
	
	//toggle the specific pin_no in the specific port 
	TOGGLE_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port);
     16a:	e2 2f       	mov	r30, r18
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	af 01       	movw	r20, r30
     170:	44 0f       	add	r20, r20
     172:	55 1f       	adc	r21, r21
     174:	e4 0f       	add	r30, r20
     176:	f5 1f       	adc	r31, r21
     178:	f1 95       	neg	r31
     17a:	e1 95       	neg	r30
     17c:	f1 09       	sbc	r31, r1
     17e:	33 ad       	ldd	r19, Z+59	; 0x3b
void dio_togg_pin(uint8_t a_pin_no)
{
	//determine the port that was addressed from the dio_pin number
	uint8_t pin_port = a_pin_no / NUM_PIN_PER_PORT;
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
     180:	22 0f       	add	r18, r18
     182:	22 0f       	add	r18, r18
     184:	22 0f       	add	r18, r18
     186:	82 1b       	sub	r24, r18
     188:	28 2f       	mov	r18, r24
	
	//toggle the specific pin_no in the specific port 
	TOGGLE_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port);
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	02 c0       	rjmp	.+4      	; 0x194 <dio_togg_pin+0x32>
     190:	88 0f       	add	r24, r24
     192:	99 1f       	adc	r25, r25
     194:	2a 95       	dec	r18
     196:	e2 f7       	brpl	.-8      	; 0x190 <dio_togg_pin+0x2e>
     198:	83 27       	eor	r24, r19
     19a:	83 af       	std	Z+59, r24	; 0x3b
     19c:	08 95       	ret

0000019e <uart_rx_handler>:
	{
		no_data_alarm();
	}
	else if (at_flag == AT_ERROR)
	{
		error_alarm();
     19e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	usart_write_str_mark(USART0, "AT+CIPSTO=1000\r\n", 0);
     1a0:	80 93 08 01 	sts	0x0108, r24
     1a4:	8c b1       	in	r24, 0x0c	; 12
     1a6:	80 93 0d 01 	sts	0x010D, r24
     1aa:	80 91 67 00 	lds	r24, 0x0067
	at_flag = check_strings(500, 2, "OK\r\n", "ERROR\r\n");
     1ae:	8e 3f       	cpi	r24, 0xFE	; 254
     1b0:	89 f4       	brne	.+34     	; 0x1d4 <uart_rx_handler+0x36>
     1b2:	83 e0       	ldi	r24, 0x03	; 3
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <millis>
     1ba:	8f ef       	ldi	r24, 0xFF	; 255
     1bc:	80 93 67 00 	sts	0x0067, r24
     1c0:	80 91 0d 01 	lds	r24, 0x010D
     1c4:	8b 37       	cpi	r24, 0x7B	; 123
     1c6:	09 f0       	breq	.+2      	; 0x1ca <uart_rx_handler+0x2c>
     1c8:	50 c0       	rjmp	.+160    	; 0x26a <uart_rx_handler+0xcc>
     1ca:	10 92 67 00 	sts	0x0067, r1
	if (!at_flag)
     1ce:	10 92 66 00 	sts	0x0066, r1
     1d2:	08 95       	ret
     1d4:	80 91 67 00 	lds	r24, 0x0067
     1d8:	8f 3f       	cpi	r24, 0xFF	; 255
     1da:	51 f4       	brne	.+20     	; 0x1f0 <uart_rx_handler+0x52>
     1dc:	80 91 0d 01 	lds	r24, 0x010D
     1e0:	8b 37       	cpi	r24, 0x7B	; 123
     1e2:	09 f0       	breq	.+2      	; 0x1e6 <uart_rx_handler+0x48>
	{
		no_data_alarm();
     1e4:	42 c0       	rjmp	.+132    	; 0x26a <uart_rx_handler+0xcc>
     1e6:	10 92 67 00 	sts	0x0067, r1
	}
	else if (at_flag == AT_ERROR)
     1ea:	10 92 66 00 	sts	0x0066, r1
	{
		error_alarm();
     1ee:	08 95       	ret
     1f0:	80 91 67 00 	lds	r24, 0x0067
			receive_flag = REQUEST_DETECTED;
			string_counter = 0;
		}
				
	}
	else if (REQUEST_DETECTED == receive_flag) // if it has found the begin character .. then the next char holds the request type
     1f4:	81 11       	cpse	r24, r1
     1f6:	08 c0       	rjmp	.+16     	; 0x208 <uart_rx_handler+0x6a>
	{
		req_type = temp; // store the next char in the req_type and
     1f8:	80 91 0d 01 	lds	r24, 0x010D
     1fc:	80 93 0b 01 	sts	0x010B, r24
		receive_flag = REQUEST_STORING;//update the state to start putting the data in the buffer
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	80 93 67 00 	sts	0x0067, r24
     206:	08 95       	ret
	}
	else if (REQUEST_STORING == receive_flag)//if the first char is read(holds the request type)
     208:	80 91 67 00 	lds	r24, 0x0067
     20c:	81 30       	cpi	r24, 0x01	; 1
     20e:	69 f5       	brne	.+90     	; 0x26a <uart_rx_handler+0xcc>
	{
				
		if (temp == '}')//if the end symbol has been reached
     210:	80 91 0d 01 	lds	r24, 0x010D
     214:	8d 37       	cpi	r24, 0x7D	; 125
     216:	89 f4       	brne	.+34     	; 0x23a <uart_rx_handler+0x9c>
		{
			// put the null at the end of the received request
			buffer[string_counter] = 0;
     218:	e0 91 66 00 	lds	r30, 0x0066
     21c:	0e 2e       	mov	r0, r30
     21e:	00 0c       	add	r0, r0
     220:	ff 0b       	sbc	r31, r31
     222:	e3 5e       	subi	r30, 0xE3	; 227
     224:	fe 4f       	sbci	r31, 0xFE	; 254
     226:	10 82       	st	Z, r1
			
			//change the state to RECEIVING indicating that it has ended, but 
			//not sure if the stream of received data has ended or not
			//only in the millis function(where the end of data stream can be
			//detected)received_flag assigned to NOT_RECEIVING 
			receive_flag = RECEIVING;
     228:	8f ef       	ldi	r24, 0xFF	; 255
     22a:	80 93 67 00 	sts	0x0067, r24
				
			//TODO: allocate an array in the size of string_counter and store the string in it and pass it to the queue
			//get the counter to the initial state
			RESET_STR_COUNTER();
     22e:	80 93 66 00 	sts	0x0066, r24
			//put the str reached flag to 1
			b_str_reached = TRUE;
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	80 93 0c 01 	sts	0x010C, r24
     238:	08 95       	ret
		}
		else//if the end symbol hasn't been reached yet
		{
			//keep storing the incoming chars into the buffer .. increment the buffer counter
			buffer[string_counter] = temp;
     23a:	e0 91 66 00 	lds	r30, 0x0066
     23e:	0e 2e       	mov	r0, r30
     240:	00 0c       	add	r0, r0
     242:	ff 0b       	sbc	r31, r31
     244:	80 91 0d 01 	lds	r24, 0x010D
     248:	e3 5e       	subi	r30, 0xE3	; 227
     24a:	fe 4f       	sbci	r31, 0xFE	; 254
     24c:	80 83       	st	Z, r24
			string_counter++ ;
     24e:	80 91 66 00 	lds	r24, 0x0066
     252:	8f 5f       	subi	r24, 0xFF	; 255
     254:	80 93 66 00 	sts	0x0066, r24
				
			if(string_counter > 10) // if it exceeded its limits .. then this is a false operation
     258:	80 91 66 00 	lds	r24, 0x0066
     25c:	8b 30       	cpi	r24, 0x0B	; 11
     25e:	2c f0       	brlt	.+10     	; 0x26a <uart_rx_handler+0xcc>
			{
				RESET_STR_COUNTER();
     260:	8f ef       	ldi	r24, 0xFF	; 255
     262:	80 93 66 00 	sts	0x0066, r24
				// not -2 because it might be still receiving
				receive_flag = RECEIVING; 
     266:	80 93 67 00 	sts	0x0067, r24
     26a:	08 95       	ret

0000026c <motor_right>:
void no_data_alarm ();
void error_alarm ();

void motor_right()
{
	DIO_SET_VAL(L_FORWARD, DIO_LOW);
     26c:	60 e0       	ldi	r22, 0x00	; 0
     26e:	8a e0       	ldi	r24, 0x0A	; 10
     270:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_BACKWARD, DIO_HIGH);
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	8b e0       	ldi	r24, 0x0B	; 11
     278:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(R_FORWARD, DIO_HIGH);
     27c:	61 e0       	ldi	r22, 0x01	; 1
     27e:	88 e0       	ldi	r24, 0x08	; 8
     280:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(R_BACKWARD, DIO_LOW);
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	89 e0       	ldi	r24, 0x09	; 9
     288:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
     28c:	08 95       	ret

0000028e <motor_backward>:
	DIO_SET_VAL(L_BACKWARD, DIO_LOW);
}

void motor_backward()
{
	DIO_SET_VAL(R_FORWARD, DIO_LOW);
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	88 e0       	ldi	r24, 0x08	; 8
     292:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(R_BACKWARD, DIO_HIGH);
     296:	61 e0       	ldi	r22, 0x01	; 1
     298:	89 e0       	ldi	r24, 0x09	; 9
     29a:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_FORWARD, DIO_LOW);
     29e:	60 e0       	ldi	r22, 0x00	; 0
     2a0:	8a e0       	ldi	r24, 0x0A	; 10
     2a2:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_BACKWARD, DIO_HIGH);
     2a6:	61 e0       	ldi	r22, 0x01	; 1
     2a8:	8b e0       	ldi	r24, 0x0B	; 11
     2aa:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
     2ae:	08 95       	ret

000002b0 <motor_left>:
}

void motor_left()
{
	DIO_SET_VAL(R_FORWARD, DIO_HIGH);
     2b0:	61 e0       	ldi	r22, 0x01	; 1
     2b2:	88 e0       	ldi	r24, 0x08	; 8
     2b4:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(R_BACKWARD, DIO_LOW);
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	89 e0       	ldi	r24, 0x09	; 9
     2bc:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_FORWARD, DIO_LOW);
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	8a e0       	ldi	r24, 0x0A	; 10
     2c4:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_BACKWARD, DIO_HIGH);
     2c8:	61 e0       	ldi	r22, 0x01	; 1
     2ca:	8b e0       	ldi	r24, 0x0B	; 11
     2cc:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
     2d0:	08 95       	ret

000002d2 <motors_init>:
}

void  motors_init()
{
	DIO_SET_DIR(R_FORWARD, DIO_OUTPUT);  //RF
     2d2:	61 e0       	ldi	r22, 0x01	; 1
     2d4:	88 e0       	ldi	r24, 0x08	; 8
     2d6:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(R_BACKWARD, DIO_OUTPUT); //RB
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	89 e0       	ldi	r24, 0x09	; 9
     2de:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(L_FORWARD, DIO_OUTPUT);  //LF
     2e2:	61 e0       	ldi	r22, 0x01	; 1
     2e4:	8a e0       	ldi	r24, 0x0A	; 10
     2e6:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(L_BACKWARD, DIO_OUTPUT); //LB
     2ea:	61 e0       	ldi	r22, 0x01	; 1
     2ec:	8b e0       	ldi	r24, 0x0B	; 11
     2ee:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>

	
 	pwm_init(PWM1 | PWM2, 1000);  
     2f2:	68 ee       	ldi	r22, 0xE8	; 232
     2f4:	73 e0       	ldi	r23, 0x03	; 3
     2f6:	86 e0       	ldi	r24, 0x06	; 6
     2f8:	0e 94 f5 08 	call	0x11ea	; 0x11ea <pwm_init>
 	pwm_start(PWM1 | PWM2);       
     2fc:	86 e0       	ldi	r24, 0x06	; 6
     2fe:	0e 94 3f 0b 	call	0x167e	; 0x167e <pwm_start>
	pwm_setDuty(PWM1 | PWM2, 80); 
     302:	60 e5       	ldi	r22, 0x50	; 80
     304:	86 e0       	ldi	r24, 0x06	; 6
     306:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <pwm_setDuty>
     30a:	08 95       	ret

0000030c <store_data>:
//===============================================================================================================================
//===============================================================================================================================
//===============================================================================================================================

void store_data()
{
     30c:	0f 93       	push	r16
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
	if (list->size < 4) //maximum number of queued requests = 5
     314:	e0 91 1b 01 	lds	r30, 0x011B
     318:	f0 91 1c 01 	lds	r31, 0x011C
     31c:	84 81       	ldd	r24, Z+4	; 0x04
     31e:	95 81       	ldd	r25, Z+5	; 0x05
     320:	04 97       	sbiw	r24, 0x04	; 4
     322:	88 f5       	brcc	.+98     	; 0x386 <store_data+0x7a>
		//whenever the data that is being pointed to(buffer in this case) changes .. the node data in the queue will
		//change automatically despite the fact that we didn't want that .. so the right move is
		//to not but the pointer point to the buffer but instead copy the buffer data to the pointer and then pass the pointer
		//array instead of a pointer because in this time th element structure itself is going to contain the actual
		//data rather than a pointer to this data and when you push it you're ...
		e_ptr->str = malloc(strlen(buffer) + 1);
     324:	00 91 71 00 	lds	r16, 0x0071
     328:	10 91 72 00 	lds	r17, 0x0072
     32c:	cd e1       	ldi	r28, 0x1D	; 29
     32e:	d1 e0       	ldi	r29, 0x01	; 1
     330:	fe 01       	movw	r30, r28
     332:	01 90       	ld	r0, Z+
     334:	00 20       	and	r0, r0
     336:	e9 f7       	brne	.-6      	; 0x332 <store_data+0x26>
     338:	cf 01       	movw	r24, r30
     33a:	8d 51       	subi	r24, 0x1D	; 29
     33c:	91 40       	sbci	r25, 0x01	; 1
     33e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <malloc>
     342:	f8 01       	movw	r30, r16
     344:	91 83       	std	Z+1, r25	; 0x01
     346:	80 83       	st	Z, r24
		memcpy(e_ptr->str, buffer, strlen(buffer) + 1);
     348:	09 90       	ld	r0, Y+
     34a:	00 20       	and	r0, r0
     34c:	e9 f7       	brne	.-6      	; 0x348 <store_data+0x3c>
     34e:	e0 91 71 00 	lds	r30, 0x0071
     352:	f0 91 72 00 	lds	r31, 0x0072
     356:	ae 01       	movw	r20, r28
     358:	4d 51       	subi	r20, 0x1D	; 29
     35a:	51 40       	sbci	r21, 0x01	; 1
     35c:	6d e1       	ldi	r22, 0x1D	; 29
     35e:	71 e0       	ldi	r23, 0x01	; 1
     360:	80 81       	ld	r24, Z
     362:	91 81       	ldd	r25, Z+1	; 0x01
     364:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <memcpy>
		e_ptr->request_type = req_type;
     368:	60 91 71 00 	lds	r22, 0x0071
     36c:	70 91 72 00 	lds	r23, 0x0072
     370:	80 91 0b 01 	lds	r24, 0x010B
     374:	fb 01       	movw	r30, r22
     376:	82 83       	std	Z+2, r24	; 0x02
		q_push(list, e_ptr, sizeof(element_t));// push the request in the Queue
     378:	43 e0       	ldi	r20, 0x03	; 3
     37a:	80 91 1b 01 	lds	r24, 0x011B
     37e:	90 91 1c 01 	lds	r25, 0x011C
     382:	0e 94 12 0c 	call	0x1824	; 0x1824 <q_push>
		UART_sendStrByMark("\r\n", 0);
		#endif
	}


}
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	1f 91       	pop	r17
     38c:	0f 91       	pop	r16
     38e:	08 95       	ret

00000390 <timer0_ovf_handler>:
}

void timer0_ovf_handler()
{	
	// timer is working for a received request
	if (receive_flag != NOT_RECEIVING) 
     390:	80 91 67 00 	lds	r24, 0x0067
     394:	8e 3f       	cpi	r24, 0xFE	; 254
     396:	21 f1       	breq	.+72     	; 0x3e0 <timer0_ovf_handler+0x50>
	{
		//if it's still receiving then clear the flag .. and after 3 ms check again and if the flag is still 0 then it means that
		//it it's not receiving any more
		if (rx_end_flag == 1)             
     398:	80 91 08 01 	lds	r24, 0x0108
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	81 f4       	brne	.+32     	; 0x3c0 <timer0_ovf_handler+0x30>
		{
			rx_end_flag = 0;              
     3a0:	10 92 08 01 	sts	0x0108, r1
			millis_reset_tmr(3);          
     3a4:	83 e0       	ldi	r24, 0x03	; 3
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	0e 94 c7 08 	call	0x118e	; 0x118e <millis_reset_tmr>
			counter++ ;                   
     3ac:	80 91 09 01 	lds	r24, 0x0109
     3b0:	90 91 0a 01 	lds	r25, 0x010A
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	90 93 0a 01 	sts	0x010A, r25
     3ba:	80 93 09 01 	sts	0x0109, r24
     3be:	08 95       	ret
		}
		else if (rx_end_flag == 0) // if it's zero then there hasn't been any UART receive operation for the last 5 millis which means
     3c0:	81 11       	cpse	r24, r1
     3c2:	0e c0       	rjmp	.+28     	; 0x3e0 <timer0_ovf_handler+0x50>
		{
			//int8_t arr[10];
			//stop the timer
			millis_disable_tmr();
     3c4:	0e 94 c0 08 	call	0x1180	; 0x1180 <millis_disable_tmr>
			//DISABLE_TIMER0;
			//put the receive flag to -2 indicating reception process has stopped
			receive_flag = NOT_RECEIVING; //default value
     3c8:	8e ef       	ldi	r24, 0xFE	; 254
     3ca:	80 93 67 00 	sts	0x0067, r24
			string_counter = -1;// default value
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	80 93 66 00 	sts	0x0066, r24
			//itoa(counter, arr, 10); 
			//UART_sendStrByMark(arr, 0);
			//UART_sendStrByMark("\r\n", 0);
			counter = 0;
     3d4:	10 92 0a 01 	sts	0x010A, r1
     3d8:	10 92 09 01 	sts	0x0109, r1
			
			store_data();
     3dc:	0e 94 86 01 	call	0x30c	; 0x30c <store_data>
     3e0:	08 95       	ret

000003e2 <sensor_to_esp_buff>:

//this construct a string that contains the sensor type and its reading
//surrounded by brackets(esp_message format and stores this string
//into esp_buff to be sent
void sensor_to_esp_buff(char * sensor_str, uint8_t info_type)
{
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	ec 01       	movw	r28, r24
	uint8_t i = 0;
	esp_buff[0] = '{'; //can be moved to a a place where it's executed only once instead of getting executed every time 
     3e8:	e8 e6       	ldi	r30, 0x68	; 104
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	8b e7       	ldi	r24, 0x7B	; 123
     3ee:	80 83       	st	Z, r24
	esp_buff[1] = info_type;
     3f0:	61 83       	std	Z+1, r22	; 0x01
	 
	while (sensor_str[i] != 0)
     3f2:	98 81       	ld	r25, Y
     3f4:	99 23       	and	r25, r25
     3f6:	79 f0       	breq	.+30     	; 0x416 <sensor_to_esp_buff+0x34>
     3f8:	e0 e0       	ldi	r30, 0x00	; 0
	{
		esp_buff[i + 2] = sensor_str[i]; // i + 1 because the first element cantains a bracket({)
     3fa:	ae 2f       	mov	r26, r30
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	a8 59       	subi	r26, 0x98	; 152
     400:	bf 4f       	sbci	r27, 0xFF	; 255
     402:	12 96       	adiw	r26, 0x02	; 2
     404:	9c 93       	st	X, r25
		i++ ;
     406:	ef 5f       	subi	r30, 0xFF	; 255
{
	uint8_t i = 0;
	esp_buff[0] = '{'; //can be moved to a a place where it's executed only once instead of getting executed every time 
	esp_buff[1] = info_type;
	 
	while (sensor_str[i] != 0)
     408:	de 01       	movw	r26, r28
     40a:	ae 0f       	add	r26, r30
     40c:	b1 1d       	adc	r27, r1
     40e:	9c 91       	ld	r25, X
     410:	91 11       	cpse	r25, r1
     412:	f3 cf       	rjmp	.-26     	; 0x3fa <sensor_to_esp_buff+0x18>
     414:	01 c0       	rjmp	.+2      	; 0x418 <sensor_to_esp_buff+0x36>
//this construct a string that contains the sensor type and its reading
//surrounded by brackets(esp_message format and stores this string
//into esp_buff to be sent
void sensor_to_esp_buff(char * sensor_str, uint8_t info_type)
{
	uint8_t i = 0;
     416:	e0 e0       	ldi	r30, 0x00	; 0
	{
		esp_buff[i + 2] = sensor_str[i]; // i + 1 because the first element cantains a bracket({)
		i++ ;
	}
	
	esp_buff[i + 2] = '}'; // indicates the ending of the esp message
     418:	ae 2f       	mov	r26, r30
     41a:	b0 e0       	ldi	r27, 0x00	; 0
     41c:	a8 59       	subi	r26, 0x98	; 152
     41e:	bf 4f       	sbci	r27, 0xFF	; 255
     420:	8d e7       	ldi	r24, 0x7D	; 125
     422:	12 96       	adiw	r26, 0x02	; 2
     424:	8c 93       	st	X, r24
	i++ ;
     426:	ef 5f       	subi	r30, 0xFF	; 255
	esp_buff[i + 2] = 0;
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	e8 59       	subi	r30, 0x98	; 152
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	12 82       	std	Z+2, r1	; 0x02
}
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <alarm>:
	}
	
}

void alarm()
{
     436:	ef 92       	push	r14
     438:	ff 92       	push	r15
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	05 e0       	ldi	r16, 0x05	; 5
     444:	10 e0       	ldi	r17, 0x00	; 0
	
	for (int i = 0; i < 5; i++)
	{
		DIO_TOGGLE(31);
     446:	0f 2e       	mov	r0, r31
     448:	f8 ee       	ldi	r31, 0xE8	; 232
     44a:	ef 2e       	mov	r14, r31
     44c:	f0 2d       	mov	r31, r0
     44e:	0f 2e       	mov	r0, r31
     450:	f3 e0       	ldi	r31, 0x03	; 3
     452:	ff 2e       	mov	r15, r31
     454:	f0 2d       	mov	r31, r0
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     456:	c8 ec       	ldi	r28, 0xC8	; 200
     458:	d0 e0       	ldi	r29, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
     460:	8e 2d       	mov	r24, r14
     462:	9f 2d       	mov	r25, r15
     464:	fe 01       	movw	r30, r28
     466:	31 97       	sbiw	r30, 0x01	; 1
     468:	f1 f7       	brne	.-4      	; 0x466 <alarm+0x30>
     46a:	01 97       	sbiw	r24, 0x01	; 1
	
	else if (tmp > 65535)//dividing the needed loops into 10  and then run
	{  //the loop 10 times in each one only do 1/10 of the actual number of loops
		loop_count = (uint16_t)(a_ms_time * 10.0);//
		
		while(loop_count)//repeat a_ms_time*10 times each time make a 1/10 ms delay
     46c:	d9 f7       	brne	.-10     	; 0x464 <alarm+0x2e>
     46e:	01 50       	subi	r16, 0x01	; 1
     470:	11 09       	sbc	r17, r1
}

void alarm()
{
	
	for (int i = 0; i < 5; i++)
     472:	99 f7       	brne	.-26     	; 0x45a <alarm+0x24>
	{
		DIO_TOGGLE(31);
		delay_msec(100);
	}
	
}
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	ff 90       	pop	r15
     47e:	ef 90       	pop	r14
     480:	08 95       	ret

00000482 <no_data_alarm>:
	}
	
}

void no_data_alarm()
{
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	05 e0       	ldi	r16, 0x05	; 5
     490:	10 e0       	ldi	r17, 0x00	; 0
	
	for (int i = 0; i < 5; i++)
	{
		DIO_TOGGLE(31);
     492:	0f 2e       	mov	r0, r31
     494:	f0 ed       	ldi	r31, 0xD0	; 208
     496:	ef 2e       	mov	r14, r31
     498:	f0 2d       	mov	r31, r0
     49a:	0f 2e       	mov	r0, r31
     49c:	f7 e0       	ldi	r31, 0x07	; 7
     49e:	ff 2e       	mov	r15, r31
     4a0:	f0 2d       	mov	r31, r0
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     4a2:	c8 ec       	ldi	r28, 0xC8	; 200
     4a4:	d0 e0       	ldi	r29, 0x00	; 0
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
     4ac:	8e 2d       	mov	r24, r14
     4ae:	9f 2d       	mov	r25, r15
     4b0:	fe 01       	movw	r30, r28
     4b2:	31 97       	sbiw	r30, 0x01	; 1
     4b4:	f1 f7       	brne	.-4      	; 0x4b2 <no_data_alarm+0x30>
     4b6:	01 97       	sbiw	r24, 0x01	; 1
	
	else if (tmp > 65535)//dividing the needed loops into 10  and then run
	{  //the loop 10 times in each one only do 1/10 of the actual number of loops
		loop_count = (uint16_t)(a_ms_time * 10.0);//
		
		while(loop_count)//repeat a_ms_time*10 times each time make a 1/10 ms delay
     4b8:	d9 f7       	brne	.-10     	; 0x4b0 <no_data_alarm+0x2e>
     4ba:	01 50       	subi	r16, 0x01	; 1
     4bc:	11 09       	sbc	r17, r1
}

void no_data_alarm()
{
	
	for (int i = 0; i < 5; i++)
     4be:	99 f7       	brne	.-26     	; 0x4a6 <no_data_alarm+0x24>
	{
		DIO_TOGGLE(31);
		delay_msec(200);
	}
	
}
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	ff 90       	pop	r15
     4ca:	ef 90       	pop	r14
     4cc:	08 95       	ret

000004ce <error_alarm>:

void error_alarm()
{
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	0a e0       	ldi	r16, 0x0A	; 10
     4dc:	10 e0       	ldi	r17, 0x00	; 0
	
	for (int i = 0; i < 10; i++)
	{
		DIO_TOGGLE(31);
     4de:	0f 2e       	mov	r0, r31
     4e0:	f8 ee       	ldi	r31, 0xE8	; 232
     4e2:	ef 2e       	mov	r14, r31
     4e4:	f0 2d       	mov	r31, r0
     4e6:	0f 2e       	mov	r0, r31
     4e8:	f3 e0       	ldi	r31, 0x03	; 3
     4ea:	ff 2e       	mov	r15, r31
     4ec:	f0 2d       	mov	r31, r0
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     4ee:	c8 ec       	ldi	r28, 0xC8	; 200
     4f0:	d0 e0       	ldi	r29, 0x00	; 0
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
     4f8:	8e 2d       	mov	r24, r14
     4fa:	9f 2d       	mov	r25, r15
     4fc:	fe 01       	movw	r30, r28
     4fe:	31 97       	sbiw	r30, 0x01	; 1
     500:	f1 f7       	brne	.-4      	; 0x4fe <error_alarm+0x30>
     502:	01 97       	sbiw	r24, 0x01	; 1
	
	else if (tmp > 65535)//dividing the needed loops into 10  and then run
	{  //the loop 10 times in each one only do 1/10 of the actual number of loops
		loop_count = (uint16_t)(a_ms_time * 10.0);//
		
		while(loop_count)//repeat a_ms_time*10 times each time make a 1/10 ms delay
     504:	d9 f7       	brne	.-10     	; 0x4fc <error_alarm+0x2e>
     506:	01 50       	subi	r16, 0x01	; 1
     508:	11 09       	sbc	r17, r1
}

void error_alarm()
{
	
	for (int i = 0; i < 10; i++)
     50a:	99 f7       	brne	.-26     	; 0x4f2 <error_alarm+0x24>
	{
		DIO_TOGGLE(31);
		delay_msec(100);
	}
	
}
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	ff 90       	pop	r15
     516:	ef 90       	pop	r14
     518:	08 95       	ret

0000051a <esp_send>:
}



void esp_send(const char * str, unint8_t ch_num)
{
     51a:	ff 92       	push	r15
     51c:	0f 93       	push	r16
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	00 d0       	rcall	.+0      	; 0x526 <esp_send+0xc>
     526:	00 d0       	rcall	.+0      	; 0x528 <esp_send+0xe>
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	8c 01       	movw	r16, r24
     52e:	f6 2e       	mov	r15, r22
	uint8_t at_flag;
	char data_size_str[4] = {0};
     530:	19 82       	std	Y+1, r1	; 0x01
     532:	1a 82       	std	Y+2, r1	; 0x02
     534:	1b 82       	std	Y+3, r1	; 0x03
     536:	1c 82       	std	Y+4, r1	; 0x04
		
	itoa(strlen(str), data_size_str, 10);
     538:	fc 01       	movw	r30, r24
     53a:	01 90       	ld	r0, Z+
     53c:	00 20       	and	r0, r0
     53e:	e9 f7       	brne	.-6      	; 0x53a <esp_send+0x20>
     540:	cf 01       	movw	r24, r30
     542:	01 97       	sbiw	r24, 0x01	; 1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     544:	4a e0       	ldi	r20, 0x0A	; 10
     546:	be 01       	movw	r22, r28
     548:	6f 5f       	subi	r22, 0xFF	; 255
     54a:	7f 4f       	sbci	r23, 0xFF	; 255
     54c:	80 1b       	sub	r24, r16
     54e:	91 0b       	sbc	r25, r17
     550:	0e 94 03 10 	call	0x2006	; 0x2006 <__itoa_ncheck>
	
	usart_write_str_mark(USART0, "AT+CIPSEND=", 0);
     554:	40 e0       	ldi	r20, 0x00	; 0
     556:	6a e7       	ldi	r22, 0x7A	; 122
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <usart_write_str_mark>
	usart_write(USART0, ch_num + 48); 
     560:	60 e3       	ldi	r22, 0x30	; 48
     562:	6f 0d       	add	r22, r15
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <usart_write>
	usart_write(USART0, ',');
     56a:	6c e2       	ldi	r22, 0x2C	; 44
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <usart_write>
	usart_write_str_mark(USART0, data_size_str, 0);
     572:	40 e0       	ldi	r20, 0x00	; 0
     574:	be 01       	movw	r22, r28
     576:	6f 5f       	subi	r22, 0xFF	; 255
     578:	7f 4f       	sbci	r23, 0xFF	; 255
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <usart_write_str_mark>
	//wait while the esp is receiving some message and then send the \r\n order to make the esp listen to your response
	while (receive_flag != -2);
     580:	90 91 67 00 	lds	r25, 0x0067
     584:	9e 3f       	cpi	r25, 0xFE	; 254
     586:	e1 f7       	brne	.-8      	; 0x580 <esp_send+0x66>
	//collision of data between the request and the response
	usart_set_rx_int(USART0, false); // disable the interrupt .. to do not listen for any request and listen only for the response of command
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <usart_set_rx_int>
	usart_write_str_mark(USART0, "\r\n", 0);
     590:	40 e0       	ldi	r20, 0x00	; 0
     592:	64 e0       	ldi	r22, 0x04	; 4
     594:	71 e0       	ldi	r23, 0x01	; 1
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <usart_write_str_mark>
	at_flag = check_strings(500, 2, "OK\r\n", "ERROR\r\n");
     59c:	86 e8       	ldi	r24, 0x86	; 134
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	9f 93       	push	r25
     5a2:	8f 93       	push	r24
     5a4:	8e e8       	ldi	r24, 0x8E	; 142
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	1f 92       	push	r1
     5ae:	82 e0       	ldi	r24, 0x02	; 2
     5b0:	8f 93       	push	r24
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	8f 93       	push	r24
     5b6:	84 ef       	ldi	r24, 0xF4	; 244
     5b8:	8f 93       	push	r24
     5ba:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <check_strings>
	if (!at_flag)
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	81 11       	cpse	r24, r1
     5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <esp_send+0xb8>
	{
		no_data_alarm();
     5cc:	0e 94 41 02 	call	0x482	; 0x482 <no_data_alarm>
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <esp_send+0xc0>
	}
	else if (at_flag == AT_ERROR)
     5d2:	82 30       	cpi	r24, 0x02	; 2
     5d4:	11 f4       	brne	.+4      	; 0x5da <esp_send+0xc0>
	{
		error_alarm();
     5d6:	0e 94 67 02 	call	0x4ce	; 0x4ce <error_alarm>
	}

	usart_set_rx_int(USART0, true); //after getting the response activate the interrupt again to listen for any coming requests
     5da:	61 e0       	ldi	r22, 0x01	; 1
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <usart_set_rx_int>
	
	usart_write_str_mark(USART0, str, 0);
     5e2:	40 e0       	ldi	r20, 0x00	; 0
     5e4:	b8 01       	movw	r22, r16
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <usart_write_str_mark>
	usart_write_str_mark(USART0, "\r\n", 0);
     5ec:	40 e0       	ldi	r20, 0x00	; 0
     5ee:	64 e0       	ldi	r22, 0x04	; 4
     5f0:	71 e0       	ldi	r23, 0x01	; 1
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <usart_write_str_mark>
}
     5f8:	0f 90       	pop	r0
     5fa:	0f 90       	pop	r0
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	1f 91       	pop	r17
     606:	0f 91       	pop	r16
     608:	ff 90       	pop	r15
     60a:	08 95       	ret

0000060c <esp_send_smoke>:
	i++ ;
	esp_buff[i + 2] = 0;
}

void esp_send_smoke(unint8_t ch_num)
{
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
     61e:	27 97       	sbiw	r28, 0x07	; 7
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	d8 2e       	mov	r13, r24
	char smoke[7] = "1234";
     62c:	85 e0       	ldi	r24, 0x05	; 5
     62e:	e3 e7       	ldi	r30, 0x73	; 115
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	de 01       	movw	r26, r28
     634:	11 96       	adiw	r26, 0x01	; 1
     636:	01 90       	ld	r0, Z+
     638:	0d 92       	st	X+, r0
     63a:	8a 95       	dec	r24
     63c:	e1 f7       	brne	.-8      	; 0x636 <esp_send_smoke+0x2a>
     63e:	1f 82       	std	Y+7, r1	; 0x07
     640:	1e 82       	std	Y+6, r1	; 0x06
	
#if MCP == 1
	mcp_send_remoteframe(MCP_TX(1), 8);
     642:	68 e0       	ldi	r22, 0x08	; 8
     644:	82 e0       	ldi	r24, 0x02	; 2
     646:	0e 94 1e 08 	call	0x103c	; 0x103c <mcp_send_remoteframe>
     64a:	0f 2e       	mov	r0, r31
     64c:	f8 e8       	ldi	r31, 0x88	; 136
     64e:	ef 2e       	mov	r14, r31
     650:	f0 2d       	mov	r31, r0
     652:	0f 2e       	mov	r0, r31
     654:	f3 e1       	ldi	r31, 0x13	; 19
     656:	ff 2e       	mov	r15, r31
     658:	f0 2d       	mov	r31, r0
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     65a:	08 ec       	ldi	r16, 0xC8	; 200
     65c:	10 e0       	ldi	r17, 0x00	; 0
	
	while (mcp_check_flag(TX1IF_BIT) == 0)
     65e:	0b c0       	rjmp	.+22     	; 0x676 <esp_send_smoke+0x6a>
     660:	2e 2d       	mov	r18, r14
     662:	3f 2d       	mov	r19, r15
     664:	f8 01       	movw	r30, r16
     666:	31 97       	sbiw	r30, 0x01	; 1
     668:	f1 f7       	brne	.-4      	; 0x666 <esp_send_smoke+0x5a>
     66a:	21 50       	subi	r18, 0x01	; 1
     66c:	31 09       	sbc	r19, r1
	
	else if (tmp > 65535)//dividing the needed loops into 10  and then run
	{  //the loop 10 times in each one only do 1/10 of the actual number of loops
		loop_count = (uint16_t)(a_ms_time * 10.0);//
		
		while(loop_count)//repeat a_ms_time*10 times each time make a 1/10 ms delay
     66e:	d1 f7       	brne	.-12     	; 0x664 <esp_send_smoke+0x58>
	{
		delay_msec(500);
		DIO_TOGGLE(31);
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
	char smoke[7] = "1234";
	
#if MCP == 1
	mcp_send_remoteframe(MCP_TX(1), 8);
	
	while (mcp_check_flag(TX1IF_BIT) == 0)
     676:	85 e0       	ldi	r24, 0x05	; 5
     678:	0e 94 6b 07 	call	0xed6	; 0xed6 <mcp_check_flag>
     67c:	88 23       	and	r24, r24
     67e:	81 f3       	breq	.-32     	; 0x660 <esp_send_smoke+0x54>
	{
		delay_msec(500);
		DIO_TOGGLE(31);
	}
	
	mcp_clear_flag(TX1IF_BIT);
     680:	85 e0       	ldi	r24, 0x05	; 5
     682:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <mcp_clear_flag>
     686:	0f 2e       	mov	r0, r31
     688:	f8 ee       	ldi	r31, 0xE8	; 232
     68a:	ef 2e       	mov	r14, r31
     68c:	f0 2d       	mov	r31, r0
     68e:	0f 2e       	mov	r0, r31
     690:	f3 e0       	ldi	r31, 0x03	; 3
     692:	ff 2e       	mov	r15, r31
     694:	f0 2d       	mov	r31, r0
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     696:	08 ec       	ldi	r16, 0xC8	; 200
     698:	10 e0       	ldi	r17, 0x00	; 0
	
	while(mcp_check_flag(RX1IF_BIT) == 0)
     69a:	0b c0       	rjmp	.+22     	; 0x6b2 <esp_send_smoke+0xa6>
     69c:	2e 2d       	mov	r18, r14
     69e:	3f 2d       	mov	r19, r15
     6a0:	f8 01       	movw	r30, r16
     6a2:	31 97       	sbiw	r30, 0x01	; 1
     6a4:	f1 f7       	brne	.-4      	; 0x6a2 <esp_send_smoke+0x96>
     6a6:	21 50       	subi	r18, 0x01	; 1
     6a8:	31 09       	sbc	r19, r1
	
	else if (tmp > 65535)//dividing the needed loops into 10  and then run
	{  //the loop 10 times in each one only do 1/10 of the actual number of loops
		loop_count = (uint16_t)(a_ms_time * 10.0);//
		
		while(loop_count)//repeat a_ms_time*10 times each time make a 1/10 ms delay
     6aa:	d1 f7       	brne	.-12     	; 0x6a0 <esp_send_smoke+0x94>
	{
		delay_msec(100);
		DIO_TOGGLE(31);
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
		DIO_TOGGLE(31);
	}
	
	mcp_clear_flag(TX1IF_BIT);
	
	while(mcp_check_flag(RX1IF_BIT) == 0)
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	0e 94 6b 07 	call	0xed6	; 0xed6 <mcp_check_flag>
     6b8:	88 23       	and	r24, r24
     6ba:	81 f3       	breq	.-32     	; 0x69c <esp_send_smoke+0x90>
		delay_msec(100);
		DIO_TOGGLE(31);
		//PORTA ^= 1;
	}
	
	mcp_clear_flag(RX1IF_BIT);
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <mcp_clear_flag>
	
	mcp_rx_data(MCP_RX(1), smoke);
     6c2:	be 01       	movw	r22, r28
     6c4:	6f 5f       	subi	r22, 0xFF	; 255
     6c6:	7f 4f       	sbci	r23, 0xFF	; 255
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	0e 94 46 06 	call	0xc8c	; 0xc8c <mcp_rx_data>
#endif
	sensor_to_esp_buff(smoke, 'S');
     6ce:	63 e5       	ldi	r22, 0x53	; 83
     6d0:	ce 01       	movw	r24, r28
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <sensor_to_esp_buff>
	esp_send(esp_buff, ch_num);
     6d8:	6d 2d       	mov	r22, r13
     6da:	88 e6       	ldi	r24, 0x68	; 104
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0e 94 8d 02 	call	0x51a	; 0x51a <esp_send>
}
     6e2:	27 96       	adiw	r28, 0x07	; 7
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	ef 90       	pop	r14
     6fa:	df 90       	pop	r13
     6fc:	08 95       	ret

000006fe <esp_send_temp>:

void esp_send_temp(unint8_t ch_num)
{
     6fe:	df 92       	push	r13
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	2d 97       	sbiw	r28, 0x0d	; 13
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	d8 2e       	mov	r13, r24
	char temp[4] = "12";
     71e:	81 e3       	ldi	r24, 0x31	; 49
     720:	92 e3       	ldi	r25, 0x32	; 50
     722:	a0 e0       	ldi	r26, 0x00	; 0
     724:	b0 e0       	ldi	r27, 0x00	; 0
     726:	89 83       	std	Y+1, r24	; 0x01
     728:	9a 83       	std	Y+2, r25	; 0x02
     72a:	ab 83       	std	Y+3, r26	; 0x03
     72c:	bc 83       	std	Y+4, r27	; 0x04
	char receive_buff[9];
	
#if MCP == 1
	mcp_send_remoteframe(MCP_TX(0), 5);
     72e:	65 e0       	ldi	r22, 0x05	; 5
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	0e 94 1e 08 	call	0x103c	; 0x103c <mcp_send_remoteframe>
	
	while (mcp_check_flag(TX0IF_BIT) == 0);
     736:	83 e0       	ldi	r24, 0x03	; 3
     738:	0e 94 6b 07 	call	0xed6	; 0xed6 <mcp_check_flag>
     73c:	88 23       	and	r24, r24
     73e:	d9 f3       	breq	.-10     	; 0x736 <esp_send_temp+0x38>
		//PORTA ^= 1;
	}
#endif
	
	 
	mcp_clear_flag(TX0IF_BIT); 
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <mcp_clear_flag>
     746:	0f 2e       	mov	r0, r31
     748:	f8 ee       	ldi	r31, 0xE8	; 232
     74a:	ef 2e       	mov	r14, r31
     74c:	f0 2d       	mov	r31, r0
     74e:	0f 2e       	mov	r0, r31
     750:	f3 e0       	ldi	r31, 0x03	; 3
     752:	ff 2e       	mov	r15, r31
     754:	f0 2d       	mov	r31, r0
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     756:	08 ec       	ldi	r16, 0xC8	; 200
     758:	10 e0       	ldi	r17, 0x00	; 0
	
	while(mcp_check_flag(RX0IF_BIT) == 0)
     75a:	0b c0       	rjmp	.+22     	; 0x772 <esp_send_temp+0x74>
     75c:	2e 2d       	mov	r18, r14
     75e:	3f 2d       	mov	r19, r15
     760:	f8 01       	movw	r30, r16
     762:	31 97       	sbiw	r30, 0x01	; 1
     764:	f1 f7       	brne	.-4      	; 0x762 <esp_send_temp+0x64>
     766:	21 50       	subi	r18, 0x01	; 1
     768:	31 09       	sbc	r19, r1
	
	else if (tmp > 65535)//dividing the needed loops into 10  and then run
	{  //the loop 10 times in each one only do 1/10 of the actual number of loops
		loop_count = (uint16_t)(a_ms_time * 10.0);//
		
		while(loop_count)//repeat a_ms_time*10 times each time make a 1/10 ms delay
     76a:	d1 f7       	brne	.-12     	; 0x760 <esp_send_temp+0x62>
	{
		delay_msec(100);
		DIO_TOGGLE(31);
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
#endif
	
	 
	mcp_clear_flag(TX0IF_BIT); 
	
	while(mcp_check_flag(RX0IF_BIT) == 0)
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0e 94 6b 07 	call	0xed6	; 0xed6 <mcp_check_flag>
     778:	88 23       	and	r24, r24
     77a:	81 f3       	breq	.-32     	; 0x75c <esp_send_temp+0x5e>
		delay_msec(100);
		DIO_TOGGLE(31);
		//PORTA ^= 1;
	}
	
	mcp_clear_flag(RX0IF_BIT);
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <mcp_clear_flag>
	
	mcp_rx_data(MCP_RX(0), receive_buff);
     782:	be 01       	movw	r22, r28
     784:	6b 5f       	subi	r22, 0xFB	; 251
     786:	7f 4f       	sbci	r23, 0xFF	; 255
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	0e 94 46 06 	call	0xc8c	; 0xc8c <mcp_rx_data>
	
	
	temp[0] = receive_buff[2];
     78e:	8f 81       	ldd	r24, Y+7	; 0x07
     790:	89 83       	std	Y+1, r24	; 0x01
	temp[1] = receive_buff[3];
     792:	88 85       	ldd	r24, Y+8	; 0x08
     794:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = receive_buff[4];
     796:	89 85       	ldd	r24, Y+9	; 0x09
     798:	8b 83       	std	Y+3, r24	; 0x03
	temp[3] = 0;
     79a:	1c 82       	std	Y+4, r1	; 0x04
	DIO_TOGGLE(31);
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
	//PORTB ^= 1;
#endif
	sensor_to_esp_buff(temp, 'T');
     7a2:	64 e5       	ldi	r22, 0x54	; 84
     7a4:	ce 01       	movw	r24, r28
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <sensor_to_esp_buff>
	esp_send(esp_buff, ch_num);
     7ac:	6d 2d       	mov	r22, r13
     7ae:	88 e6       	ldi	r24, 0x68	; 104
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	0e 94 8d 02 	call	0x51a	; 0x51a <esp_send>
	
}
     7b6:	2d 96       	adiw	r28, 0x0d	; 13
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	1f 91       	pop	r17
     7c8:	0f 91       	pop	r16
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	08 95       	ret

000007d2 <esp_send_H2O>:

void esp_send_H2O(unint8_t ch_num)
{
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	0f 93       	push	r16
     7da:	1f 93       	push	r17
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
     7e4:	2c 97       	sbiw	r28, 0x0c	; 12
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	d8 2e       	mov	r13, r24
	char h2o[3] = "89";
     7f2:	88 e3       	ldi	r24, 0x38	; 56
     7f4:	99 e3       	ldi	r25, 0x39	; 57
     7f6:	a0 e0       	ldi	r26, 0x00	; 0
     7f8:	89 83       	std	Y+1, r24	; 0x01
     7fa:	9a 83       	std	Y+2, r25	; 0x02
     7fc:	ab 83       	std	Y+3, r26	; 0x03
	char receive_buff[9];
	
#if MCP == 1
	mcp_send_remoteframe(MCP_TX(0), 5);
     7fe:	65 e0       	ldi	r22, 0x05	; 5
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	0e 94 1e 08 	call	0x103c	; 0x103c <mcp_send_remoteframe>
     806:	0f 2e       	mov	r0, r31
     808:	f8 e8       	ldi	r31, 0x88	; 136
     80a:	ef 2e       	mov	r14, r31
     80c:	f0 2d       	mov	r31, r0
     80e:	0f 2e       	mov	r0, r31
     810:	f3 e1       	ldi	r31, 0x13	; 19
     812:	ff 2e       	mov	r15, r31
     814:	f0 2d       	mov	r31, r0
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     816:	08 ec       	ldi	r16, 0xC8	; 200
     818:	10 e0       	ldi	r17, 0x00	; 0
	
	while (mcp_check_flag(TX0IF_BIT) == 0)
     81a:	0b c0       	rjmp	.+22     	; 0x832 <esp_send_H2O+0x60>
     81c:	2e 2d       	mov	r18, r14
     81e:	3f 2d       	mov	r19, r15
     820:	f8 01       	movw	r30, r16
     822:	31 97       	sbiw	r30, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <esp_send_H2O+0x50>
     826:	21 50       	subi	r18, 0x01	; 1
     828:	31 09       	sbc	r19, r1
	
	else if (tmp > 65535)//dividing the needed loops into 10  and then run
	{  //the loop 10 times in each one only do 1/10 of the actual number of loops
		loop_count = (uint16_t)(a_ms_time * 10.0);//
		
		while(loop_count)//repeat a_ms_time*10 times each time make a 1/10 ms delay
     82a:	d1 f7       	brne	.-12     	; 0x820 <esp_send_H2O+0x4e>
	{
		delay_msec(500);
		DIO_TOGGLE(31);
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
	char receive_buff[9];
	
#if MCP == 1
	mcp_send_remoteframe(MCP_TX(0), 5);
	
	while (mcp_check_flag(TX0IF_BIT) == 0)
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	0e 94 6b 07 	call	0xed6	; 0xed6 <mcp_check_flag>
     838:	88 23       	and	r24, r24
     83a:	81 f3       	breq	.-32     	; 0x81c <esp_send_H2O+0x4a>
		delay_msec(500);
		DIO_TOGGLE(31);
		//PORTA ^= 1;
	}
	
	mcp_clear_flag(TX0IF_BIT);
     83c:	83 e0       	ldi	r24, 0x03	; 3
     83e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <mcp_clear_flag>
     842:	0f 2e       	mov	r0, r31
     844:	f8 ee       	ldi	r31, 0xE8	; 232
     846:	ef 2e       	mov	r14, r31
     848:	f0 2d       	mov	r31, r0
     84a:	0f 2e       	mov	r0, r31
     84c:	f3 e0       	ldi	r31, 0x03	; 3
     84e:	ff 2e       	mov	r15, r31
     850:	f0 2d       	mov	r31, r0
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     852:	08 ec       	ldi	r16, 0xC8	; 200
     854:	10 e0       	ldi	r17, 0x00	; 0
	
	while(mcp_check_flag(RX0IF_BIT) == 0)
     856:	0b c0       	rjmp	.+22     	; 0x86e <__stack+0xf>
     858:	2e 2d       	mov	r18, r14
     85a:	3f 2d       	mov	r19, r15
     85c:	f8 01       	movw	r30, r16
     85e:	31 97       	sbiw	r30, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <esp_send_H2O+0x8c>
     862:	21 50       	subi	r18, 0x01	; 1
     864:	31 09       	sbc	r19, r1
	
	else if (tmp > 65535)//dividing the needed loops into 10  and then run
	{  //the loop 10 times in each one only do 1/10 of the actual number of loops
		loop_count = (uint16_t)(a_ms_time * 10.0);//
		
		while(loop_count)//repeat a_ms_time*10 times each time make a 1/10 ms delay
     866:	d1 f7       	brne	.-12     	; 0x85c <esp_send_H2O+0x8a>
	{
		delay_msec(100);
		DIO_TOGGLE(31);
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
		//PORTA ^= 1;
	}
	
	mcp_clear_flag(TX0IF_BIT);
	
	while(mcp_check_flag(RX0IF_BIT) == 0)
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	0e 94 6b 07 	call	0xed6	; 0xed6 <mcp_check_flag>
     874:	88 23       	and	r24, r24
     876:	81 f3       	breq	.-32     	; 0x858 <esp_send_H2O+0x86>
	{
		delay_msec(100);
		DIO_TOGGLE(31);
	}
	
	mcp_clear_flag(RX0IF_BIT);
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <mcp_clear_flag>
	
	mcp_rx_data(MCP_RX(0), receive_buff);
     87e:	be 01       	movw	r22, r28
     880:	6c 5f       	subi	r22, 0xFC	; 252
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <mcp_rx_data>
	
	h2o[0] = receive_buff[0];
     88a:	8c 81       	ldd	r24, Y+4	; 0x04
     88c:	89 83       	std	Y+1, r24	; 0x01
	h2o[1] = receive_buff[1];
     88e:	8d 81       	ldd	r24, Y+5	; 0x05
     890:	8a 83       	std	Y+2, r24	; 0x02
	h2o[2] = 0;
     892:	1b 82       	std	Y+3, r1	; 0x03
	
	DIO_TOGGLE(0);
     894:	88 e0       	ldi	r24, 0x08	; 8
     896:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
#endif
	sensor_to_esp_buff(h2o, 'H');
     89a:	68 e4       	ldi	r22, 0x48	; 72
     89c:	ce 01       	movw	r24, r28
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <sensor_to_esp_buff>
	esp_send(esp_buff, ch_num);
     8a4:	6d 2d       	mov	r22, r13
     8a6:	88 e6       	ldi	r24, 0x68	; 104
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	0e 94 8d 02 	call	0x51a	; 0x51a <esp_send>
	
}
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	ff 90       	pop	r15
     8c4:	ef 90       	pop	r14
     8c6:	df 90       	pop	r13
     8c8:	08 95       	ret

000008ca <main>:
	}

}

int main(void)
{
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	28 97       	sbiw	r28, 0x08	; 8
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	de bf       	out	0x3e, r29	; 62
     8da:	0f be       	out	0x3f, r0	; 63
     8dc:	cd bf       	out	0x3d, r28	; 61
	uint8_t receive_buff[9];
	uint8_t i = 0;
	uint8_t h2o[3] = {0};
	uint8_t temp[4] = {0};
	char ch_num[2] = {0};
     8de:	1a 82       	std	Y+2, r1	; 0x02
     8e0:	19 82       	std	Y+1, r1	; 0x01
		
	char esp_data[12] = {0};
	char break_f[6];
	uint8_t barrier_flag = 0;
	sei();
     8e2:	78 94       	sei

	DIO_SET_DIR(31, DIO_OUTPUT);
     8e4:	61 e0       	ldi	r22, 0x01	; 1
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(29, DIO_OUTPUT);
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(15, DIO_OUTPUT);	
     8f4:	61 e0       	ldi	r22, 0x01	; 1
     8f6:	8f e1       	ldi	r24, 0x1F	; 31
     8f8:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(30, DIO_OUTPUT);
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	
	list = q_create_list(); // create the queue that is going to hold the esp requests
     904:	0e 94 06 0c 	call	0x180c	; 0x180c <q_create_list>
     908:	90 93 1c 01 	sts	0x011C, r25
     90c:	80 93 1b 01 	sts	0x011B, r24
	
	usart_init(USART0, 9600, DATA_SIZE_8, TX_RX, NO_PARITY, ONE_STOP_BIT, 
     910:	a1 2c       	mov	r10, r1
     912:	c1 2c       	mov	r12, r1
     914:	e1 2c       	mov	r14, r1
     916:	03 e0       	ldi	r16, 0x03	; 3
     918:	23 e0       	ldi	r18, 0x03	; 3
     91a:	40 e8       	ldi	r20, 0x80	; 128
     91c:	55 e2       	ldi	r21, 0x25	; 37
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <usart_init>
	               TX_RISE_RX_FALL); 
	
	usart_set_rx_isr(USART0, uart_rx_handler);
     928:	6f ec       	ldi	r22, 0xCF	; 207
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <usart_set_rx_isr>
	millis_add_ovf_isr(timer0_ovf_handler);
     932:	88 ec       	ldi	r24, 0xC8	; 200
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <millis_add_ovf_isr>
	usart_set_rx_int(USART0, false);
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <usart_set_rx_int>
	
	//esp_init();	
	
#if MCP == 1
	mcp_init();
     942:	0e 94 c7 06 	call	0xd8e	; 0xd8e <mcp_init>

	mcp_tx_id(MCP_TX(0), 0, 0x058f);//000 1111 0111 001 10 00110101 10001111
     946:	2f e8       	ldi	r18, 0x8F	; 143
     948:	35 e0       	ldi	r19, 0x05	; 5
     94a:	40 e0       	ldi	r20, 0x00	; 0
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	0e 94 06 06 	call	0xc0c	; 0xc0c <mcp_tx_id>
	mcp_tx_id(MCP_TX(1), 0, 0x057f);//000 1111 0111 001 10 00110101 10001111
     956:	2f e7       	ldi	r18, 0x7F	; 127
     958:	35 e0       	ldi	r19, 0x05	; 5
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	0e 94 06 06 	call	0xc0c	; 0xc0c <mcp_tx_id>
	mcp_tx_id(MCP_TX(2), 0, 0x056f);//000 1111 0111 001 10 00110101 10001111
     966:	2f e6       	ldi	r18, 0x6F	; 111
     968:	35 e0       	ldi	r19, 0x05	; 5
     96a:	40 e0       	ldi	r20, 0x00	; 0
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	84 e0       	ldi	r24, 0x04	; 4
     972:	0e 94 06 06 	call	0xc0c	; 0xc0c <mcp_tx_id>
		usart_write(USART0, 'W');
		_delay_ms(1000);
	}
	#endif
	
	usart_write_str_mark(USART0, "READY", 0);
     976:	40 e0       	ldi	r20, 0x00	; 0
     978:	63 e9       	ldi	r22, 0x93	; 147
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <usart_write_str_mark>
	
	
	
	/* Replace with your application code */
	motors_init();                       
     982:	0e 94 69 01 	call	0x2d2	; 0x2d2 <motors_init>
	usart_set_rx_int(USART0, true);		
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <usart_set_rx_int>
	motor_backward();	   
     98e:	0e 94 47 01 	call	0x28e	; 0x28e <motor_backward>
						esp_send("{BB}", ch_num);
					}
					else if (break_f[1] == '0')
					{
						barrier_flag = 0;
						esp_send("{BN}", ch_num);
     992:	8e 01       	movw	r16, r28
     994:	0f 5f       	subi	r16, 0xFF	; 255
     996:	1f 4f       	sbci	r17, 0xFF	; 255
						barrier_flag = 1;
						esp_send("{BB}", ch_num);
					}
					else if (break_f[1] == '0')
					{
						barrier_flag = 0;
     998:	f1 2c       	mov	r15, r1

		while (1)
		{

#if MCP == 1
			if (mcp_check_flag(TX1IF_BIT))
     99a:	85 e0       	ldi	r24, 0x05	; 5
     99c:	0e 94 6b 07 	call	0xed6	; 0xed6 <mcp_check_flag>
     9a0:	88 23       	and	r24, r24
     9a2:	19 f0       	breq	.+6      	; 0x9aa <main+0xe0>
			{
				//UART_sendStrByMark("SENT1\r\n", 0);
				mcp_clear_flag(TX1IF_BIT);
     9a4:	85 e0       	ldi	r24, 0x05	; 5
     9a6:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <mcp_clear_flag>
			}
			
			if (mcp_check_flag(TX2IF_BIT))
     9aa:	87 e0       	ldi	r24, 0x07	; 7
     9ac:	0e 94 6b 07 	call	0xed6	; 0xed6 <mcp_check_flag>
     9b0:	88 23       	and	r24, r24
     9b2:	19 f0       	breq	.+6      	; 0x9ba <main+0xf0>
			{
				//UART_sendStrByMark("SENT2\r\n", 0);
				mcp_clear_flag(TX2IF_BIT);
     9b4:	87 e0       	ldi	r24, 0x07	; 7
     9b6:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <mcp_clear_flag>
			}
			
			if (mcp_check_flag(RX1IF_BIT))
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	0e 94 6b 07 	call	0xed6	; 0xed6 <mcp_check_flag>
     9c0:	88 23       	and	r24, r24
     9c2:	11 f1       	breq	.+68     	; 0xa08 <main+0x13e>
			{
				
				DIO_TOGGLE(29);
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
				//PORTA ^= (1 << 2);
				mcp_clear_flag(RX1IF_BIT);
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <mcp_clear_flag>
				mcp_rx_data(MCP_RX(1), break_f);
     9d0:	be 01       	movw	r22, r28
     9d2:	6d 5f       	subi	r22, 0xFD	; 253
     9d4:	7f 4f       	sbci	r23, 0xFF	; 255
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	0e 94 46 06 	call	0xc8c	; 0xc8c <mcp_rx_data>
				
				if (break_f[0] == 'B')
     9dc:	9b 81       	ldd	r25, Y+3	; 0x03
     9de:	92 34       	cpi	r25, 0x42	; 66
     9e0:	99 f4       	brne	.+38     	; 0xa08 <main+0x13e>
				{
					
					if (break_f[1] == '1')
     9e2:	8c 81       	ldd	r24, Y+4	; 0x04
     9e4:	81 33       	cpi	r24, 0x31	; 49
     9e6:	41 f4       	brne	.+16     	; 0x9f8 <main+0x12e>
					{
						barrier_flag = 1;
						esp_send("{BB}", ch_num);
     9e8:	60 2f       	mov	r22, r16
     9ea:	89 e9       	ldi	r24, 0x99	; 153
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 8d 02 	call	0x51a	; 0x51a <esp_send>
				if (break_f[0] == 'B')
				{
					
					if (break_f[1] == '1')
					{
						barrier_flag = 1;
     9f2:	ee 24       	eor	r14, r14
     9f4:	e3 94       	inc	r14
     9f6:	08 c0       	rjmp	.+16     	; 0xa08 <main+0x13e>
						esp_send("{BB}", ch_num);
					}
					else if (break_f[1] == '0')
     9f8:	80 33       	cpi	r24, 0x30	; 48
     9fa:	31 f4       	brne	.+12     	; 0xa08 <main+0x13e>
					{
						barrier_flag = 0;
						esp_send("{BN}", ch_num);
     9fc:	60 2f       	mov	r22, r16
     9fe:	8e e9       	ldi	r24, 0x9E	; 158
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 8d 02 	call	0x51a	; 0x51a <esp_send>
						barrier_flag = 1;
						esp_send("{BB}", ch_num);
					}
					else if (break_f[1] == '0')
					{
						barrier_flag = 0;
     a06:	ef 2c       	mov	r14, r15
				//esp_send_alert(break_f, ch_num);		
			}
#endif
			
			//ESP CODE
			if (list->size > 0)
     a08:	e0 91 1b 01 	lds	r30, 0x011B
     a0c:	f0 91 1c 01 	lds	r31, 0x011C
     a10:	24 81       	ldd	r18, Z+4	; 0x04
     a12:	35 81       	ldd	r19, Z+5	; 0x05
     a14:	23 2b       	or	r18, r19
     a16:	09 f4       	brne	.+2      	; 0xa1a <main+0x150>
     a18:	5f c0       	rjmp	.+190    	; 0xad8 <main+0x20e>
			{
				
				q_pop(list, e_ptr, sizeof(element_t));
     a1a:	60 91 71 00 	lds	r22, 0x0071
     a1e:	70 91 72 00 	lds	r23, 0x0072
     a22:	43 e0       	ldi	r20, 0x03	; 3
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	cf 01       	movw	r24, r30
     a28:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <q_pop>

				//then it's an esp request
				if (e_ptr->request_type == 'S')
     a2c:	e0 91 71 00 	lds	r30, 0x0071
     a30:	f0 91 72 00 	lds	r31, 0x0072
     a34:	92 81       	ldd	r25, Z+2	; 0x02
     a36:	93 35       	cpi	r25, 0x53	; 83
     a38:	21 f4       	brne	.+8      	; 0xa42 <main+0x178>
				{
					esp_send_smoke(ch_num[0]);
     a3a:	89 81       	ldd	r24, Y+1	; 0x01
     a3c:	0e 94 06 03 	call	0x60c	; 0x60c <esp_send_smoke>
     a40:	48 c0       	rjmp	.+144    	; 0xad2 <main+0x208>
				}
				else if (e_ptr->request_type == 'T')
     a42:	94 35       	cpi	r25, 0x54	; 84
     a44:	21 f4       	brne	.+8      	; 0xa4e <main+0x184>
				{
					esp_send_temp(ch_num[0]);
     a46:	89 81       	ldd	r24, Y+1	; 0x01
     a48:	0e 94 7f 03 	call	0x6fe	; 0x6fe <esp_send_temp>
     a4c:	42 c0       	rjmp	.+132    	; 0xad2 <main+0x208>
				}
				else if (e_ptr->request_type == 'H')
     a4e:	98 34       	cpi	r25, 0x48	; 72
     a50:	21 f4       	brne	.+8      	; 0xa5a <main+0x190>
				{
					esp_send_H2O(ch_num[0]);
     a52:	89 81       	ldd	r24, Y+1	; 0x01
     a54:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <esp_send_H2O>
     a58:	3c c0       	rjmp	.+120    	; 0xad2 <main+0x208>
				}
				else if (e_ptr->request_type == 'D')
     a5a:	94 34       	cpi	r25, 0x44	; 68
     a5c:	d1 f5       	brne	.+116    	; 0xad2 <main+0x208>
				{
					if ( e_ptr->str[0] == 'R')
     a5e:	01 90       	ld	r0, Z+
     a60:	f0 81       	ld	r31, Z
     a62:	e0 2d       	mov	r30, r0
     a64:	80 81       	ld	r24, Z
     a66:	82 35       	cpi	r24, 0x52	; 82
     a68:	19 f4       	brne	.+6      	; 0xa70 <main+0x1a6>
					{
					motor_right();
     a6a:	0e 94 36 01 	call	0x26c	; 0x26c <motor_right>
     a6e:	31 c0       	rjmp	.+98     	; 0xad2 <main+0x208>
					}
					else if ( e_ptr->str[0] == 'L')
     a70:	8c 34       	cpi	r24, 0x4C	; 76
     a72:	19 f4       	brne	.+6      	; 0xa7a <main+0x1b0>
					{
						motor_left();
     a74:	0e 94 58 01 	call	0x2b0	; 0x2b0 <motor_left>
     a78:	2c c0       	rjmp	.+88     	; 0xad2 <main+0x208>
					}
					else if ( e_ptr->str[0] == 'F')
     a7a:	86 34       	cpi	r24, 0x46	; 70
     a7c:	99 f4       	brne	.+38     	; 0xaa4 <main+0x1da>
					{
						if (!barrier_flag)
     a7e:	e1 10       	cpse	r14, r1
     a80:	28 c0       	rjmp	.+80     	; 0xad2 <main+0x208>
	DIO_SET_VAL(R_BACKWARD, DIO_LOW);
}

inline void motor_forward()
{
	DIO_SET_VAL(R_FORWARD, DIO_HIGH);
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	88 e0       	ldi	r24, 0x08	; 8
     a86:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(R_BACKWARD, DIO_LOW);
     a8a:	6f 2d       	mov	r22, r15
     a8c:	89 e0       	ldi	r24, 0x09	; 9
     a8e:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_FORWARD, DIO_HIGH);
     a92:	61 e0       	ldi	r22, 0x01	; 1
     a94:	8a e0       	ldi	r24, 0x0A	; 10
     a96:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_BACKWARD, DIO_LOW);
     a9a:	6f 2d       	mov	r22, r15
     a9c:	8b e0       	ldi	r24, 0x0B	; 11
     a9e:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
     aa2:	17 c0       	rjmp	.+46     	; 0xad2 <main+0x208>
						{
							motor_forward();
						}
						
					}
					else if ( e_ptr->str[0] == 'B')
     aa4:	82 34       	cpi	r24, 0x42	; 66
     aa6:	19 f4       	brne	.+6      	; 0xaae <main+0x1e4>
					{
						motor_backward();
     aa8:	0e 94 47 01 	call	0x28e	; 0x28e <motor_backward>
     aac:	12 c0       	rjmp	.+36     	; 0xad2 <main+0x208>
					}
					else if ( e_ptr->str[0] == 'S')
     aae:	83 35       	cpi	r24, 0x53	; 83
     ab0:	81 f4       	brne	.+32     	; 0xad2 <main+0x208>
	DIO_SET_VAL(R_BACKWARD, DIO_LOW);
}

inline void motor_stop()
{
	DIO_SET_VAL(L_FORWARD, DIO_LOW);
     ab2:	6f 2d       	mov	r22, r15
     ab4:	8a e0       	ldi	r24, 0x0A	; 10
     ab6:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(L_BACKWARD, DIO_LOW);
     aba:	6f 2d       	mov	r22, r15
     abc:	8b e0       	ldi	r24, 0x0B	; 11
     abe:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(R_FORWARD, DIO_LOW);
     ac2:	6f 2d       	mov	r22, r15
     ac4:	88 e0       	ldi	r24, 0x08	; 8
     ac6:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	DIO_SET_VAL(R_BACKWARD, DIO_LOW);
     aca:	6f 2d       	mov	r22, r15
     acc:	89 e0       	ldi	r24, 0x09	; 9
     ace:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
						motor_stop();
					}
					
				}
				
				alarm();
     ad2:	0e 94 1b 02 	call	0x436	; 0x436 <alarm>
     ad6:	61 cf       	rjmp	.-318    	; 0x99a <main+0xd0>
			}
			else // no +IPD, , found
			{
				DIO_TOGGLE(31);
     ad8:	8f 2d       	mov	r24, r15
     ada:	0e 94 b1 00 	call	0x162	; 0x162 <dio_togg_pin>
     ade:	5d cf       	rjmp	.-326    	; 0x99a <main+0xd0>

00000ae0 <mcp_set_eid>:
	uint8_t temp = stat_reg & ((specific_bits == MCP_STAT_NO_TX)? MCP_STAT_BOTH_TX : specific_bits);
	return temp == specific_bits;	
}

static void mcp_set_eid(unint32_t id)
{
     ae0:	cf 92       	push	r12
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	6b 01       	movw	r12, r22
     aea:	7c 01       	movw	r14, r24

	spi_send((id >> 21));
     aec:	dc 01       	movw	r26, r24
     aee:	cb 01       	movw	r24, r22
     af0:	07 2e       	mov	r0, r23
     af2:	75 e1       	ldi	r23, 0x15	; 21
     af4:	b6 95       	lsr	r27
     af6:	a7 95       	ror	r26
     af8:	97 95       	ror	r25
     afa:	87 95       	ror	r24
     afc:	7a 95       	dec	r23
     afe:	d1 f7       	brne	.-12     	; 0xaf4 <mcp_set_eid+0x14>
     b00:	70 2d       	mov	r23, r0
     b02:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	spi_send((((id >> 13) & 0b11100000) | (1 << 3) | ((id >> 16) & 0b00000011)));
     b06:	d7 01       	movw	r26, r14
     b08:	c6 01       	movw	r24, r12
     b0a:	07 2e       	mov	r0, r23
     b0c:	7d e0       	ldi	r23, 0x0D	; 13
     b0e:	b6 95       	lsr	r27
     b10:	a7 95       	ror	r26
     b12:	97 95       	ror	r25
     b14:	87 95       	ror	r24
     b16:	7a 95       	dec	r23
     b18:	d1 f7       	brne	.-12     	; 0xb0e <mcp_set_eid+0x2e>
     b1a:	70 2d       	mov	r23, r0
     b1c:	80 7e       	andi	r24, 0xE0	; 224
     b1e:	9e 2d       	mov	r25, r14
     b20:	93 70       	andi	r25, 0x03	; 3
     b22:	89 2b       	or	r24, r25
     b24:	88 60       	ori	r24, 0x08	; 8
     b26:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	spi_send((id >> 8));
     b2a:	8d 2d       	mov	r24, r13
     b2c:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	spi_send(id);
     b30:	8c 2d       	mov	r24, r12
     b32:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
}
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	cf 90       	pop	r12
     b3e:	08 95       	ret

00000b40 <mcp_reset>:
}


void mcp_reset()
{
	DIO_SET_VAL(SS, DIO_LOW);
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	8c e0       	ldi	r24, 0x0C	; 12
     b44:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	
	spi_send(MCP_RESET);
     b48:	80 ec       	ldi	r24, 0xC0	; 192
     b4a:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	DIO_SET_VAL(SS, DIO_HIGH);
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	8c e0       	ldi	r24, 0x0C	; 12
     b52:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
     b56:	08 95       	ret

00000b58 <mcp_read>:
}



void mcp_read(unint8_t add, unint8_t * data, unint8_t num_bytes)
{
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	d8 2f       	mov	r29, r24
     b62:	8b 01       	movw	r16, r22
     b64:	c4 2f       	mov	r28, r20
	DIO_SET_VAL(SS, DIO_LOW);
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	8c e0       	ldi	r24, 0x0C	; 12
     b6a:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	spi_send(0b00000011);
     b6e:	83 e0       	ldi	r24, 0x03	; 3
     b70:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	spi_send(add);
     b74:	8d 2f       	mov	r24, r29
     b76:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	
	if (num_bytes == 1)
     b7a:	c1 30       	cpi	r28, 0x01	; 1
     b7c:	29 f4       	brne	.+10     	; 0xb88 <mcp_read+0x30>
	{
		data[0] = spi_read();
     b7e:	0e 94 c7 0c 	call	0x198e	; 0x198e <spi_read>
     b82:	f8 01       	movw	r30, r16
     b84:	80 83       	st	Z, r24
     b86:	04 c0       	rjmp	.+8      	; 0xb90 <mcp_read+0x38>
	}
	else
	{
		spi_read_str_size(data, num_bytes);
     b88:	6c 2f       	mov	r22, r28
     b8a:	c8 01       	movw	r24, r16
     b8c:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <spi_read_str_size>
	}

	DIO_SET_VAL(SS, DIO_HIGH);
     b90:	61 e0       	ldi	r22, 0x01	; 1
     b92:	8c e0       	ldi	r24, 0x0C	; 12
     b94:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	08 95       	ret

00000ba2 <mcp_set_mask_filter>:
	DIO_SET_VAL(SS, DIO_HIGH);
}


void mcp_set_mask_filter(unint8_t m_f_no, unint8_t id_type, unint32_t id)
{
     ba2:	cf 92       	push	r12
     ba4:	df 92       	push	r13
     ba6:	ef 92       	push	r14
     ba8:	ff 92       	push	r15
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	d8 2f       	mov	r29, r24
     bb0:	c6 2f       	mov	r28, r22
     bb2:	69 01       	movw	r12, r18
     bb4:	7a 01       	movw	r14, r20
	DIO_SET_VAL(SS, DIO_LOW);
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	8c e0       	ldi	r24, 0x0C	; 12
     bba:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	spi_send(0b00000010);
     bbe:	82 e0       	ldi	r24, 0x02	; 2
     bc0:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	spi_send(m_f_no);
     bc4:	8d 2f       	mov	r24, r29
     bc6:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>

	if (id_type == 1) //if extended ID
     bca:	c1 30       	cpi	r28, 0x01	; 1
     bcc:	29 f4       	brne	.+10     	; 0xbd8 <mcp_set_mask_filter+0x36>
	{
		mcp_set_eid(id);
     bce:	c7 01       	movw	r24, r14
     bd0:	b6 01       	movw	r22, r12
     bd2:	0e 94 70 05 	call	0xae0	; 0xae0 <mcp_set_eid>
     bd6:	0f c0       	rjmp	.+30     	; 0xbf6 <mcp_set_mask_filter+0x54>
	spi_send(id);
}

static void mcp_set_sid(unint16_t id)
{
	spi_send((id >> 3));
     bd8:	c6 01       	movw	r24, r12
     bda:	96 95       	lsr	r25
     bdc:	87 95       	ror	r24
     bde:	96 95       	lsr	r25
     be0:	87 95       	ror	r24
     be2:	96 95       	lsr	r25
     be4:	87 95       	ror	r24
     be6:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	spi_send(((id << 5)));
     bea:	8c 2d       	mov	r24, r12
     bec:	82 95       	swap	r24
     bee:	88 0f       	add	r24, r24
     bf0:	80 7e       	andi	r24, 0xE0	; 224
     bf2:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	else // if standard ID
	{
		mcp_set_sid(id);
	}
	
	DIO_SET_VAL(SS, DIO_HIGH);
     bf6:	61 e0       	ldi	r22, 0x01	; 1
     bf8:	8c e0       	ldi	r24, 0x0C	; 12
     bfa:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
}
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	df 90       	pop	r13
     c08:	cf 90       	pop	r12
     c0a:	08 95       	ret

00000c0c <mcp_tx_id>:


void mcp_tx_id(unint8_t tx_no, unint8_t id_type, unint32_t id)
{
     c0c:	cf 92       	push	r12
     c0e:	df 92       	push	r13
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	c8 2f       	mov	r28, r24
     c1a:	d6 2f       	mov	r29, r22
     c1c:	69 01       	movw	r12, r18
     c1e:	7a 01       	movw	r14, r20
	//unint8_t var;
	
	DIO_SET_VAL(SS, DIO_LOW);
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	8c e0       	ldi	r24, 0x0C	; 12
     c24:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>

	if (id_type == 1) //if extended ID
     c28:	d1 30       	cpi	r29, 0x01	; 1
     c2a:	79 f4       	brne	.+30     	; 0xc4a <mcp_tx_id+0x3e>
	{
		spi_send(0b00000010);
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
		spi_send((TXB0SIDH + ((tx_no >> 1) << 4)));
     c32:	c6 95       	lsr	r28
     c34:	8c 2f       	mov	r24, r28
     c36:	82 95       	swap	r24
     c38:	80 7f       	andi	r24, 0xF0	; 240
     c3a:	8f 5c       	subi	r24, 0xCF	; 207
     c3c:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
		mcp_set_eid(id);		
     c40:	c7 01       	movw	r24, r14
     c42:	b6 01       	movw	r22, r12
     c44:	0e 94 70 05 	call	0xae0	; 0xae0 <mcp_set_eid>
     c48:	16 c0       	rjmp	.+44     	; 0xc76 <mcp_tx_id+0x6a>
	}
	else // if standard ID
	{
		
		if (tx_no == MCP_TX(0))
     c4a:	c1 30       	cpi	r28, 0x01	; 1
     c4c:	09 f4       	brne	.+2      	; 0xc50 <mcp_tx_id+0x44>
		{
			tx_no >>= 1;
     c4e:	c0 e0       	ldi	r28, 0x00	; 0
		}

		spi_send(0b01000000 | tx_no);
     c50:	8c 2f       	mov	r24, r28
     c52:	80 64       	ori	r24, 0x40	; 64
     c54:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	spi_send(id);
}

static void mcp_set_sid(unint16_t id)
{
	spi_send((id >> 3));
     c58:	c6 01       	movw	r24, r12
     c5a:	96 95       	lsr	r25
     c5c:	87 95       	ror	r24
     c5e:	96 95       	lsr	r25
     c60:	87 95       	ror	r24
     c62:	96 95       	lsr	r25
     c64:	87 95       	ror	r24
     c66:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	spi_send(((id << 5)));
     c6a:	8c 2d       	mov	r24, r12
     c6c:	82 95       	swap	r24
     c6e:	88 0f       	add	r24, r24
     c70:	80 7e       	andi	r24, 0xE0	; 224
     c72:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
		spi_send(0b01000000 | tx_no);
		mcp_set_sid(id);

	}
	
	DIO_SET_VAL(SS, DIO_HIGH);
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	8c e0       	ldi	r24, 0x0C	; 12
     c7a:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
}
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	df 90       	pop	r13
     c88:	cf 90       	pop	r12
     c8a:	08 95       	ret

00000c8c <mcp_rx_data>:


//void mcp_filter(unint8_t filter_no

void mcp_rx_data(unint8_t rx_no, unint8_t * rx_buff)
{
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	c8 2f       	mov	r28, r24
     c94:	8b 01       	movw	r16, r22
	unint8_t data_size = 0;
	
	DIO_SET_VAL(SS, DIO_LOW);
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	8c e0       	ldi	r24, 0x0C	; 12
     c9a:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	spi_send(0b00000011);
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	spi_send(RXB0DLC + (rx_no << 4));
     ca4:	8c 2f       	mov	r24, r28
     ca6:	82 95       	swap	r24
     ca8:	80 7f       	andi	r24, 0xF0	; 240
     caa:	8b 59       	subi	r24, 0x9B	; 155
     cac:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	data_size = spi_read();
     cb0:	0e 94 c7 0c 	call	0x198e	; 0x198e <spi_read>
	//data_size = 8;
	spi_read_str_size(rx_buff, (data_size & 0x0f));
     cb4:	68 2f       	mov	r22, r24
     cb6:	6f 70       	andi	r22, 0x0F	; 15
     cb8:	c8 01       	movw	r24, r16
     cba:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <spi_read_str_size>
	DIO_SET_VAL(SS, DIO_HIGH);
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	8c e0       	ldi	r24, 0x0C	; 12
     cc2:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
}
     cc6:	cf 91       	pop	r28
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	08 95       	ret

00000cce <mcp_tx_data>:


void mcp_tx_data(unint8_t tx_no, uint8_t d_r_frame, unint8_t * data, unint8_t d_size)
{
     cce:	ef 92       	push	r14
     cd0:	ff 92       	push	r15
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	c8 2f       	mov	r28, r24
     cda:	d6 2f       	mov	r29, r22
     cdc:	7a 01       	movw	r14, r20
     cde:	12 2f       	mov	r17, r18
	DIO_SET_VAL(SS, DIO_LOW);
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	8c e0       	ldi	r24, 0x0C	; 12
     ce4:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	spi_send(0b00000010);
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	spi_send(TXB0DLC + ((tx_no >> 1) << 4));
     cee:	c6 95       	lsr	r28
     cf0:	8c 2f       	mov	r24, r28
     cf2:	82 95       	swap	r24
     cf4:	80 7f       	andi	r24, 0xF0	; 240
     cf6:	8b 5c       	subi	r24, 0xCB	; 203
     cf8:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	spi_send(d_size | (d_r_frame << 6));	
     cfc:	20 e4       	ldi	r18, 0x40	; 64
     cfe:	d2 9f       	mul	r29, r18
     d00:	c0 01       	movw	r24, r0
     d02:	11 24       	eor	r1, r1
     d04:	81 2b       	or	r24, r17
     d06:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	//if the frame is a data frame .. the store the bytes into the data segment
	if (d_r_frame == 0) 
     d0a:	d1 11       	cpse	r29, r1
     d0c:	04 c0       	rjmp	.+8      	; 0xd16 <mcp_tx_data+0x48>
	{
		spi_send_str_size(data, d_size);
     d0e:	61 2f       	mov	r22, r17
     d10:	c7 01       	movw	r24, r14
     d12:	0e 94 cc 0c 	call	0x1998	; 0x1998 <spi_send_str_size>
	}	
	
	DIO_SET_VAL(SS, DIO_HIGH);
     d16:	61 e0       	ldi	r22, 0x01	; 1
     d18:	8c e0       	ldi	r24, 0x0C	; 12
     d1a:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	//DIO_SET_VAL(SS, DIO_HIGH);
}
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	08 95       	ret

00000d2a <mcp_tx_trigger>:

void mcp_tx_trigger(unint8_t tx_no)
{
     d2a:	cf 93       	push	r28
     d2c:	c8 2f       	mov	r28, r24
	DIO_SET_VAL(SS, DIO_LOW);
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	8c e0       	ldi	r24, 0x0C	; 12
     d32:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	spi_send(0b10000000 | tx_no);		
     d36:	8c 2f       	mov	r24, r28
     d38:	80 68       	ori	r24, 0x80	; 128
     d3a:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	DIO_SET_VAL(SS, DIO_HIGH);
     d3e:	61 e0       	ldi	r22, 0x01	; 1
     d40:	8c e0       	ldi	r24, 0x0C	; 12
     d42:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
}

void _delay_loop2(uint16_t __count)
{
	//to write an assemble code, it needs to be put in this form of block 
	__asm__ volatile ( 
     d46:	80 e1       	ldi	r24, 0x10	; 16
     d48:	97 e2       	ldi	r25, 0x27	; 39
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <mcp_tx_trigger+0x20>
	delay_msec(5);
}
     d4e:	cf 91       	pop	r28
     d50:	08 95       	ret

00000d52 <mcp_bit_modify>:



void mcp_bit_modify(unint8_t add, unint8_t mask, unint8_t data)
{
     d52:	1f 93       	push	r17
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	18 2f       	mov	r17, r24
     d5a:	d6 2f       	mov	r29, r22
     d5c:	c4 2f       	mov	r28, r20
	DIO_SET_VAL(SS, DIO_LOW);
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	8c e0       	ldi	r24, 0x0C	; 12
     d62:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	spi_send(BIT_MODIFY);
     d66:	85 e0       	ldi	r24, 0x05	; 5
     d68:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	spi_send(add);
     d6c:	81 2f       	mov	r24, r17
     d6e:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	spi_send(mask);
     d72:	8d 2f       	mov	r24, r29
     d74:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	spi_send(data);
     d78:	8c 2f       	mov	r24, r28
     d7a:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	DIO_SET_VAL(SS, DIO_HIGH);
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	8c e0       	ldi	r24, 0x0C	; 12
     d82:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
}
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	08 95       	ret

00000d8e <mcp_init>:
static void mcp_set_eid(unint32_t id);

static void  mcp_set_sid(unint16_t id);

void mcp_init()
{
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	2d 97       	sbiw	r28, 0x0d	; 13
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
	//initialize SPI  
	spi_init();
     da2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <spi_init>
	//reset is recommended by the data sheet
	mcp_reset();
     da6:	0e 94 a0 05 	call	0xb40	; 0xb40 <mcp_reset>
	
	
	
	//RX0BF - RX1BF STATES
	mcp_bit_modify(BFPCTRL, 0b00001111, RX0BF_STATE | RX1BF_STATE);
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	6f e0       	ldi	r22, 0x0F	; 15
     dae:	8c e0       	ldi	r24, 0x0C	; 12
     db0:	0e 94 a9 06 	call	0xd52	; 0xd52 <mcp_bit_modify>
	
	//REQUENST TRANSMISSION MESSAGE viA PINS
	mcp_bit_modify(TXRTSCTRL, 0b00000111, RTS_PINS);
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	67 e0       	ldi	r22, 0x07	; 7
     db8:	8d e0       	ldi	r24, 0x0D	; 13
     dba:	0e 94 a9 06 	call	0xd52	; 0xd52 <mcp_bit_modify>
	
	//remove all masks
	mcp_bit_modify(RXB0CTRL, 0b01100000, 0b00000000);
     dbe:	40 e0       	ldi	r20, 0x00	; 0
     dc0:	60 e6       	ldi	r22, 0x60	; 96
     dc2:	80 e6       	ldi	r24, 0x60	; 96
     dc4:	0e 94 a9 06 	call	0xd52	; 0xd52 <mcp_bit_modify>
	mcp_bit_modify(RXB1CTRL, 0b01100000, 0b00000000);
     dc8:	40 e0       	ldi	r20, 0x00	; 0
     dca:	60 e6       	ldi	r22, 0x60	; 96
     dcc:	80 e7       	ldi	r24, 0x70	; 112
     dce:	0e 94 a9 06 	call	0xd52	; 0xd52 <mcp_bit_modify>
	
	mcp_bit_modify(CANTINTE, 0b11111111, MCP_INT_BITS);
     dd2:	4f ef       	ldi	r20, 0xFF	; 255
     dd4:	6f ef       	ldi	r22, 0xFF	; 255
     dd6:	8b e2       	ldi	r24, 0x2B	; 43
     dd8:	0e 94 a9 06 	call	0xd52	; 0xd52 <mcp_bit_modify>

	mcp_bit_modify(CNF1, 0b11111111, ((SJW - 1) << 6) | BRP);
     ddc:	41 e4       	ldi	r20, 0x41	; 65
     dde:	6f ef       	ldi	r22, 0xFF	; 255
     de0:	8a e2       	ldi	r24, 0x2A	; 42
     de2:	0e 94 a9 06 	call	0xd52	; 0xd52 <mcp_bit_modify>
	
	mcp_bit_modify(CNF2, 0b11111111, (1 << 7) | (SAMP_TIMES << 6) | ((PS1_SEG - 1) << 3) | (PROP_SEG - 1));
     de6:	41 eb       	ldi	r20, 0xB1	; 177
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	89 e2       	ldi	r24, 0x29	; 41
     dec:	0e 94 a9 06 	call	0xd52	; 0xd52 <mcp_bit_modify>

	mcp_bit_modify(CNF3, 0b01000111, (PS2_SEG - 1));
     df0:	45 e0       	ldi	r20, 0x05	; 5
     df2:	67 e4       	ldi	r22, 0x47	; 71
     df4:	88 e2       	ldi	r24, 0x28	; 40
     df6:	0e 94 a9 06 	call	0xd52	; 0xd52 <mcp_bit_modify>
	
	
	#if (MASK0_ID != CLEARED)
	mcp_set_mask_filter(MCP_MASK(0), MASK0_TYPE, MASK0_ID);
     dfa:	2f ef       	ldi	r18, 0xFF	; 255
     dfc:	3f e0       	ldi	r19, 0x0F	; 15
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	50 e0       	ldi	r21, 0x00	; 0
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	80 e2       	ldi	r24, 0x20	; 32
     e06:	0e 94 d1 05 	call	0xba2	; 0xba2 <mcp_set_mask_filter>
	#endif
	
	#if (MASK1_ID != CLEARED)
	mcp_set_mask_filter(MCP_MASK(1), MASK1_TYPE, MASK1_ID);
     e0a:	2f ef       	ldi	r18, 0xFF	; 255
     e0c:	3f e0       	ldi	r19, 0x0F	; 15
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	50 e0       	ldi	r21, 0x00	; 0
     e12:	60 e0       	ldi	r22, 0x00	; 0
     e14:	84 e2       	ldi	r24, 0x24	; 36
     e16:	0e 94 d1 05 	call	0xba2	; 0xba2 <mcp_set_mask_filter>
	#endif
	
	#if (FILTER0_ID != CLEARED)
	mcp_set_mask_filter(MCP_FILTER(0), FILTER0_TYPE, FILTER0_ID);
     e1a:	2f e8       	ldi	r18, 0x8F	; 143
     e1c:	35 e0       	ldi	r19, 0x05	; 5
     e1e:	40 e0       	ldi	r20, 0x00	; 0
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 d1 05 	call	0xba2	; 0xba2 <mcp_set_mask_filter>
	#if (FILTER1_ID != CLEARED)
	mcp_set_mask_filter(MCP_FILTER(1), FILTER1_TYPE, FILTER1_ID);
	#endif
	
	#if (FILTER2_ID != CLEARED)
	mcp_set_mask_filter(MCP_FILTER(2), FILTER2_TYPE, FILTER2_ID);
     e2a:	2f e7       	ldi	r18, 0x7F	; 127
     e2c:	35 e0       	ldi	r19, 0x05	; 5
     e2e:	40 e0       	ldi	r20, 0x00	; 0
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	88 e0       	ldi	r24, 0x08	; 8
     e36:	0e 94 d1 05 	call	0xba2	; 0xba2 <mcp_set_mask_filter>
	#endif
	
	#if (FILTER3_ID != CLEARED)
	mcp_set_mask_filter(MCP_FILTER(3), FILTER3_TYPE, FILTER3_ID);
     e3a:	2f e6       	ldi	r18, 0x6F	; 111
     e3c:	35 e0       	ldi	r19, 0x05	; 5
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	50 e0       	ldi	r21, 0x00	; 0
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	80 e1       	ldi	r24, 0x10	; 16
     e46:	0e 94 d1 05 	call	0xba2	; 0xba2 <mcp_set_mask_filter>
	#endif
	
	#if (FILTER4_ID != CLEARED)
	mcp_set_mask_filter(MCP_FILTER(4), FILTER4_TYPE, FILTER4_ID);
     e4a:	2f e5       	ldi	r18, 0x5F	; 95
     e4c:	35 e0       	ldi	r19, 0x05	; 5
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	84 e1       	ldi	r24, 0x14	; 20
     e56:	0e 94 d1 05 	call	0xba2	; 0xba2 <mcp_set_mask_filter>
	#endif
	
	#if (FILTER5_ID != CLEARED)
	mcp_set_mask_filter(MCP_FILTER(5), FILTER5_TYPE, FILTER5_ID);
     e5a:	2f e4       	ldi	r18, 0x4F	; 79
     e5c:	35 e0       	ldi	r19, 0x05	; 5
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	88 e1       	ldi	r24, 0x18	; 24
     e66:	0e 94 d1 05 	call	0xba2	; 0xba2 <mcp_set_mask_filter>
	#endif

#if CAN_D == 1
	uint8_t datame;
	uint8_t str[12];
	mcp_read(CANSTATE, &datame, 1);
     e6a:	41 e0       	ldi	r20, 0x01	; 1
     e6c:	be 01       	movw	r22, r28
     e6e:	6f 5f       	subi	r22, 0xFF	; 255
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	8e e2       	ldi	r24, 0x2E	; 46
     e74:	0e 94 ac 05 	call	0xb58	; 0xb58 <mcp_read>
	itoa(datame, str, 2);
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	42 e0       	ldi	r20, 0x02	; 2
     e7c:	be 01       	movw	r22, r28
     e7e:	6e 5f       	subi	r22, 0xFE	; 254
     e80:	7f 4f       	sbci	r23, 0xFF	; 255
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 03 10 	call	0x2006	; 0x2006 <__itoa_ncheck>
	usart_write_str_mark(USART0, str, 0);
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	be 01       	movw	r22, r28
     e8c:	6e 5f       	subi	r22, 0xFE	; 254
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <usart_write_str_mark>
#endif
	
	//determine the operation mode.. one shot mode
	//CANCTRL = 0b01001000;  //normal mode ... one shot mode
	mcp_bit_modify(CANCTRL, 0b11111111, (MCP_OP_MODE << 5) | (ONE_SHOT << 3) | (MCP_CLOCKOUT << 2) | (MCP_CKOUT_PRE));
     e96:	48 e0       	ldi	r20, 0x08	; 8
     e98:	6f ef       	ldi	r22, 0xFF	; 255
     e9a:	8f e2       	ldi	r24, 0x2F	; 47
     e9c:	0e 94 a9 06 	call	0xd52	; 0xd52 <mcp_bit_modify>
	
	
}
     ea0:	2d 96       	adiw	r28, 0x0d	; 13
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <mcp_status>:
}



uint8_t mcp_status()
{
     eb2:	cf 93       	push	r28
	uint8_t data;
	
	DIO_SET_VAL(SS, DIO_LOW);
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	8c e0       	ldi	r24, 0x0C	; 12
     eb8:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>
	spi_send(0b10100000);
     ebc:	80 ea       	ldi	r24, 0xA0	; 160
     ebe:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
	data = spi_read();
     ec2:	0e 94 c7 0c 	call	0x198e	; 0x198e <spi_read>
     ec6:	c8 2f       	mov	r28, r24
	DIO_SET_VAL(SS, DIO_HIGH);
     ec8:	61 e0       	ldi	r22, 0x01	; 1
     eca:	8c e0       	ldi	r24, 0x0C	; 12
     ecc:	0e 94 89 00 	call	0x112	; 0x112 <dio_set_pin_val>

	return data;
}
     ed0:	8c 2f       	mov	r24, r28
     ed2:	cf 91       	pop	r28
     ed4:	08 95       	ret

00000ed6 <mcp_check_flag>:
TXWAR
RXWAR
EWARN
*/
uint8_t mcp_check_flag(uint8_t flag)
{
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	1f 92       	push	r1
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	18 2f       	mov	r17, r24
	uint8_t state;
	uint8_t data;
	
	if (flag < 8)
     ee4:	88 30       	cpi	r24, 0x08	; 8
     ee6:	60 f4       	brcc	.+24     	; 0xf00 <mcp_check_flag+0x2a>
	{
		state = BIT_IS_SET(mcp_status(), flag);
     ee8:	0e 94 59 07 	call	0xeb2	; 0xeb2 <mcp_status>
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	c9 01       	movw	r24, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <mcp_check_flag+0x22>
     ef4:	95 95       	asr	r25
     ef6:	87 95       	ror	r24
     ef8:	1a 95       	dec	r17
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <mcp_check_flag+0x1e>
     efc:	81 70       	andi	r24, 0x01	; 1
     efe:	64 c0       	rjmp	.+200    	; 0xfc8 <mcp_check_flag+0xf2>
	}
	else if (flag < 16)//from CANTINF
     f00:	80 31       	cpi	r24, 0x10	; 16
     f02:	90 f4       	brcc	.+36     	; 0xf28 <mcp_check_flag+0x52>
	{
		mcp_read(CANTINF, &data, 1);
     f04:	41 e0       	ldi	r20, 0x01	; 1
     f06:	be 01       	movw	r22, r28
     f08:	6f 5f       	subi	r22, 0xFF	; 255
     f0a:	7f 4f       	sbci	r23, 0xFF	; 255
     f0c:	8c e2       	ldi	r24, 0x2C	; 44
     f0e:	0e 94 ac 05 	call	0xb58	; 0xb58 <mcp_read>
		state = BIT_IS_SET(data, (flag - 8));
     f12:	29 81       	ldd	r18, Y+1	; 0x01
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	18 50       	subi	r17, 0x08	; 8
     f18:	c9 01       	movw	r24, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <mcp_check_flag+0x4a>
     f1c:	95 95       	asr	r25
     f1e:	87 95       	ror	r24
     f20:	1a 95       	dec	r17
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <mcp_check_flag+0x46>
     f24:	81 70       	andi	r24, 0x01	; 1
     f26:	50 c0       	rjmp	.+160    	; 0xfc8 <mcp_check_flag+0xf2>
	}
	else if (flag < 24) // TXB0CTRL
     f28:	88 31       	cpi	r24, 0x18	; 24
     f2a:	98 f4       	brcc	.+38     	; 0xf52 <mcp_check_flag+0x7c>
	{
		mcp_read(TXB0CTRL, &data, 1);
     f2c:	41 e0       	ldi	r20, 0x01	; 1
     f2e:	be 01       	movw	r22, r28
     f30:	6f 5f       	subi	r22, 0xFF	; 255
     f32:	7f 4f       	sbci	r23, 0xFF	; 255
     f34:	80 e3       	ldi	r24, 0x30	; 48
     f36:	0e 94 ac 05 	call	0xb58	; 0xb58 <mcp_read>
		state = BIT_IS_SET(data, (flag - 16));
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	10 51       	subi	r17, 0x10	; 16
     f42:	c9 01       	movw	r24, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <mcp_check_flag+0x74>
     f46:	95 95       	asr	r25
     f48:	87 95       	ror	r24
     f4a:	1a 95       	dec	r17
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <mcp_check_flag+0x70>
     f4e:	81 70       	andi	r24, 0x01	; 1
     f50:	3b c0       	rjmp	.+118    	; 0xfc8 <mcp_check_flag+0xf2>
	}
	else if (flag < 32)// TXB1CTRL
     f52:	80 32       	cpi	r24, 0x20	; 32
     f54:	98 f4       	brcc	.+38     	; 0xf7c <mcp_check_flag+0xa6>
	{
		mcp_read(TXB1CTRL, &data, 1);
     f56:	41 e0       	ldi	r20, 0x01	; 1
     f58:	be 01       	movw	r22, r28
     f5a:	6f 5f       	subi	r22, 0xFF	; 255
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	80 e4       	ldi	r24, 0x40	; 64
     f60:	0e 94 ac 05 	call	0xb58	; 0xb58 <mcp_read>
		state = BIT_IS_SET(data, (flag - 24));
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	18 51       	subi	r17, 0x18	; 24
     f6c:	c9 01       	movw	r24, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <mcp_check_flag+0x9e>
     f70:	95 95       	asr	r25
     f72:	87 95       	ror	r24
     f74:	1a 95       	dec	r17
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <mcp_check_flag+0x9a>
     f78:	81 70       	andi	r24, 0x01	; 1
     f7a:	26 c0       	rjmp	.+76     	; 0xfc8 <mcp_check_flag+0xf2>
	}
	else if (flag < 40)// TXB2CTRL
     f7c:	88 32       	cpi	r24, 0x28	; 40
     f7e:	98 f4       	brcc	.+38     	; 0xfa6 <mcp_check_flag+0xd0>
	{
		mcp_read(TXB2CTRL, &data, 1);
     f80:	41 e0       	ldi	r20, 0x01	; 1
     f82:	be 01       	movw	r22, r28
     f84:	6f 5f       	subi	r22, 0xFF	; 255
     f86:	7f 4f       	sbci	r23, 0xFF	; 255
     f88:	80 e5       	ldi	r24, 0x50	; 80
     f8a:	0e 94 ac 05 	call	0xb58	; 0xb58 <mcp_read>
		state = BIT_IS_SET(data, (flag - 32));
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	10 52       	subi	r17, 0x20	; 32
     f96:	c9 01       	movw	r24, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <mcp_check_flag+0xc8>
     f9a:	95 95       	asr	r25
     f9c:	87 95       	ror	r24
     f9e:	1a 95       	dec	r17
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <mcp_check_flag+0xc4>
     fa2:	81 70       	andi	r24, 0x01	; 1
     fa4:	11 c0       	rjmp	.+34     	; 0xfc8 <mcp_check_flag+0xf2>
	}
	else //EFLG flags
	{
		mcp_read(EFLG, &data, 1);
     fa6:	41 e0       	ldi	r20, 0x01	; 1
     fa8:	be 01       	movw	r22, r28
     faa:	6f 5f       	subi	r22, 0xFF	; 255
     fac:	7f 4f       	sbci	r23, 0xFF	; 255
     fae:	8d e2       	ldi	r24, 0x2D	; 45
     fb0:	0e 94 ac 05 	call	0xb58	; 0xb58 <mcp_read>
		state = BIT_IS_SET(data, (flag - 40));
     fb4:	29 81       	ldd	r18, Y+1	; 0x01
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	18 52       	subi	r17, 0x28	; 40
     fba:	c9 01       	movw	r24, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <mcp_check_flag+0xec>
     fbe:	95 95       	asr	r25
     fc0:	87 95       	ror	r24
     fc2:	1a 95       	dec	r17
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <mcp_check_flag+0xe8>
     fc6:	81 70       	andi	r24, 0x01	; 1
	}
	
	return state;
}
     fc8:	0f 90       	pop	r0
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	08 95       	ret

00000fd2 <mcp_clear_flag>:

void mcp_clear_flag (uint8_t flag)
{
	if (flag < 8)
     fd2:	88 30       	cpi	r24, 0x08	; 8
     fd4:	b8 f4       	brcc	.+46     	; 0x1004 <mcp_clear_flag+0x32>
	{
		if (flag == 3)
     fd6:	83 30       	cpi	r24, 0x03	; 3
     fd8:	31 f0       	breq	.+12     	; 0xfe6 <mcp_clear_flag+0x14>
		{
			flag -= 1;
		}
		
		if (flag == 5)
     fda:	85 30       	cpi	r24, 0x05	; 5
     fdc:	31 f0       	breq	.+12     	; 0xfea <mcp_clear_flag+0x18>
		{
			flag -= 2;
		}
		
		if (flag == 7)
     fde:	87 30       	cpi	r24, 0x07	; 7
     fe0:	29 f4       	brne	.+10     	; 0xfec <mcp_clear_flag+0x1a>
		{
			flag -= 3;
     fe2:	84 e0       	ldi	r24, 0x04	; 4
     fe4:	03 c0       	rjmp	.+6      	; 0xfec <mcp_clear_flag+0x1a>
{
	if (flag < 8)
	{
		if (flag == 3)
		{
			flag -= 1;
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <mcp_clear_flag+0x1a>
		}
		
		if (flag == 5)
		{
			flag -= 2;
     fea:	83 e0       	ldi	r24, 0x03	; 3
		if (flag == 7)
		{
			flag -= 3;
		} 
		
		mcp_bit_modify(CANTINF, (1 << flag), 0);
     fec:	61 e0       	ldi	r22, 0x01	; 1
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <mcp_clear_flag+0x24>
     ff2:	66 0f       	add	r22, r22
     ff4:	77 1f       	adc	r23, r23
     ff6:	8a 95       	dec	r24
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <mcp_clear_flag+0x20>
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	8c e2       	ldi	r24, 0x2C	; 44
     ffe:	0e 94 a9 06 	call	0xd52	; 0xd52 <mcp_bit_modify>
    1002:	08 95       	ret
	}
	else if (flag < 16)//from CANTINF
    1004:	80 31       	cpi	r24, 0x10	; 16
    1006:	68 f4       	brcc	.+26     	; 0x1022 <mcp_clear_flag+0x50>
	{
		mcp_bit_modify(CANTINF, (1 << (flag - 8)), 0);
    1008:	88 50       	subi	r24, 0x08	; 8
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <mcp_clear_flag+0x42>
    1010:	66 0f       	add	r22, r22
    1012:	77 1f       	adc	r23, r23
    1014:	8a 95       	dec	r24
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <mcp_clear_flag+0x3e>
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	8c e2       	ldi	r24, 0x2C	; 44
    101c:	0e 94 a9 06 	call	0xd52	; 0xd52 <mcp_bit_modify>
    1020:	08 95       	ret
	}
	else
	{
		mcp_bit_modify(CANTINF, (1 << (flag - 40)), 0);
    1022:	88 52       	subi	r24, 0x28	; 40
    1024:	61 e0       	ldi	r22, 0x01	; 1
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	02 c0       	rjmp	.+4      	; 0x102e <mcp_clear_flag+0x5c>
    102a:	66 0f       	add	r22, r22
    102c:	77 1f       	adc	r23, r23
    102e:	8a 95       	dec	r24
    1030:	e2 f7       	brpl	.-8      	; 0x102a <mcp_clear_flag+0x58>
    1032:	40 e0       	ldi	r20, 0x00	; 0
    1034:	8c e2       	ldi	r24, 0x2C	; 44
    1036:	0e 94 a9 06 	call	0xd52	; 0xd52 <mcp_bit_modify>
    103a:	08 95       	ret

0000103c <mcp_send_remoteframe>:
	mcp_tx_data(tx_no, DATA_FRAME, data_buff, size);
	mcp_tx_trigger(tx_no);
}

void mcp_send_remoteframe(uint8_t tx_no, uint8_t size)
{
    103c:	cf 93       	push	r28
    103e:	c8 2f       	mov	r28, r24
    1040:	26 2f       	mov	r18, r22
	mcp_tx_data(tx_no, REMOTE_FRAME, NULL, size);
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	61 e0       	ldi	r22, 0x01	; 1
    1048:	0e 94 67 06 	call	0xcce	; 0xcce <mcp_tx_data>
	mcp_tx_trigger(tx_no);
    104c:	8c 2f       	mov	r24, r28
    104e:	0e 94 95 06 	call	0xd2a	; 0xd2a <mcp_tx_trigger>
}
    1052:	cf 91       	pop	r28
    1054:	08 95       	ret

00001056 <__vector_11>:
//the number of overflows needed to generate the needed ticks for making the
// delay time
static sint16_t g_ovf_count = 0;

void CONFIG_TMR0_OVF_ISR()
{
    1056:	1f 92       	push	r1
    1058:	0f 92       	push	r0
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	0f 92       	push	r0
    105e:	11 24       	eor	r1, r1
    1060:	2f 93       	push	r18
    1062:	3f 93       	push	r19
    1064:	4f 93       	push	r20
    1066:	5f 93       	push	r21
    1068:	6f 93       	push	r22
    106a:	7f 93       	push	r23
    106c:	8f 93       	push	r24
    106e:	9f 93       	push	r25
    1070:	af 93       	push	r26
    1072:	bf 93       	push	r27
    1074:	ef 93       	push	r30
    1076:	ff 93       	push	r31
	cli();
    1078:	f8 94       	cli
	 guarantee that millis will be checked every 1024 cycles(because the program 
	 might be is too big so that I can't check this function every 1024 cycles
	 */
	
	//if there are remaining overflows yet
	if (g_ovf_count)
    107a:	80 91 0e 01 	lds	r24, 0x010E
    107e:	90 91 0f 01 	lds	r25, 0x010F
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	79 f0       	breq	.+30     	; 0x10a4 <__vector_11+0x4e>
	{
		/* if (g_ovf_count == 1) then the n_of actual overflows has ended and
		   there are some remaining ticks which will be out in TCNT0 to get all
		   the ticks needed precisely*/
		if (g_ovf_count == 1)
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	21 f4       	brne	.+8      	; 0x1092 <__vector_11+0x3c>
		{
			TCNT0 = 256 - g_last_ticks;
    108a:	80 91 10 01 	lds	r24, 0x0110
    108e:	81 95       	neg	r24
    1090:	82 bf       	out	0x32, r24	; 50
		}
		
		g_ovf_count-- ;
    1092:	80 91 0e 01 	lds	r24, 0x010E
    1096:	90 91 0f 01 	lds	r25, 0x010F
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	90 93 0f 01 	sts	0x010F, r25
    10a0:	80 93 0e 01 	sts	0x010E, r24
	}
	
	if (gp_tmr0_ovf_isr != NULL)
    10a4:	e0 91 11 01 	lds	r30, 0x0111
    10a8:	f0 91 12 01 	lds	r31, 0x0112
    10ac:	30 97       	sbiw	r30, 0x00	; 0
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <__vector_11+0x5c>
	{
		gp_tmr0_ovf_isr();
    10b0:	09 95       	icall
	}
	//gp_tmr0_ovf_isr();
	
	sei();
    10b2:	78 94       	sei
}
    10b4:	ff 91       	pop	r31
    10b6:	ef 91       	pop	r30
    10b8:	bf 91       	pop	r27
    10ba:	af 91       	pop	r26
    10bc:	9f 91       	pop	r25
    10be:	8f 91       	pop	r24
    10c0:	7f 91       	pop	r23
    10c2:	6f 91       	pop	r22
    10c4:	5f 91       	pop	r21
    10c6:	4f 91       	pop	r20
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	0f 90       	pop	r0
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	0f 90       	pop	r0
    10d2:	1f 90       	pop	r1
    10d4:	18 95       	reti

000010d6 <millis>:


bool millis(unint16_t t)
{
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
	if ((g_ovf_count == 0) && (TCCR0 == 0)) //happens only at the beginning
    10da:	40 91 0e 01 	lds	r20, 0x010E
    10de:	50 91 0f 01 	lds	r21, 0x010F
    10e2:	45 2b       	or	r20, r21
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <millis+0x12>
    10e6:	46 c0       	rjmp	.+140    	; 0x1174 <millis+0x9e>
    10e8:	23 b7       	in	r18, 0x33	; 51
    10ea:	21 11       	cpse	r18, r1
    10ec:	3c c0       	rjmp	.+120    	; 0x1166 <millis+0x90>
		//every overflow occur until this number reaches zero then the timer will recognize that it's timeout
		//in the .h file we can have the number of overflows and the number of remaining ticks(calculated automatically from the time
		//parameter
		//we put the number of overflows plus one(because the required number of ticks are not exactly multiples of 256 so there will be
        //some ticks less that 256 remaining at the end ticks in a static variable plus one for the remaining ticks.*/
		g_ovf_count= NUMBER_OF_OVFLOWS + 1;
    10ee:	9c 01       	movw	r18, r24
    10f0:	a8 ee       	ldi	r26, 0xE8	; 232
    10f2:	b3 e0       	ldi	r27, 0x03	; 3
    10f4:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__umulhisi3>
    10f8:	8b 01       	movw	r16, r22
    10fa:	9c 01       	movw	r18, r24
    10fc:	0f 2e       	mov	r0, r31
    10fe:	ff e0       	ldi	r31, 0x0F	; 15
    1100:	36 95       	lsr	r19
    1102:	27 95       	ror	r18
    1104:	17 95       	ror	r17
    1106:	07 95       	ror	r16
    1108:	fa 95       	dec	r31
    110a:	d1 f7       	brne	.-12     	; 0x1100 <millis+0x2a>
    110c:	f0 2d       	mov	r31, r0
    110e:	0f 5f       	subi	r16, 0xFF	; 255
    1110:	1f 4f       	sbci	r17, 0xFF	; 255
    1112:	10 93 0f 01 	sts	0x010F, r17
    1116:	00 93 0e 01 	sts	0x010E, r16

		//initialize timer0 with 1024 pre_scaler and activate the timer mode
		TCCR0 = 0x05;
    111a:	25 e0       	ldi	r18, 0x05	; 5
    111c:	23 bf       	out	0x33, r18	; 51
		
		#if (MILLIS_INTERRUPT == 1)
		TIMSK = (1 << 0); //enable timer0 interrupt
    111e:	21 e0       	ldi	r18, 0x01	; 1
    1120:	29 bf       	out	0x39, r18	; 57
		//if the number of ovf is 1 meaning there is just the remaining ticks
		//make TCNT0=265-REMAINING_TICKS;
		//else TCNT=0
		g_last_ticks = REMAINING_TICKS;
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	88 7f       	andi	r24, 0xF8	; 248
    1128:	9f 77       	andi	r25, 0x7F	; 127
    112a:	aa 27       	eor	r26, r26
    112c:	bb 27       	eor	r27, r27
    112e:	68 94       	set
    1130:	16 f8       	bld	r1, 6
    1132:	b6 95       	lsr	r27
    1134:	a7 95       	ror	r26
    1136:	97 95       	ror	r25
    1138:	87 95       	ror	r24
    113a:	16 94       	lsr	r1
    113c:	d1 f7       	brne	.-12     	; 0x1132 <millis+0x5c>
    113e:	80 93 10 01 	sts	0x0110, r24
		#endif
		
		if(g_ovf_count == 1)
    1142:	20 91 0e 01 	lds	r18, 0x010E
    1146:	30 91 0f 01 	lds	r19, 0x010F
    114a:	21 30       	cpi	r18, 0x01	; 1
    114c:	31 05       	cpc	r19, r1
    114e:	29 f4       	brne	.+10     	; 0x115a <millis+0x84>
		{
			TCNT0 = 256 - REMAINING_TICKS;
    1150:	68 2f       	mov	r22, r24
    1152:	61 95       	neg	r22
    1154:	62 bf       	out	0x32, r22	; 50
		}

	}
	#endif
	
	return true;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	10 c0       	rjmp	.+32     	; 0x117a <millis+0xa4>
		
		if(g_ovf_count == 1)
		{
			TCNT0 = 256 - REMAINING_TICKS;
		}
		else if (g_ovf_count > 1) 
    115a:	22 30       	cpi	r18, 0x02	; 2
    115c:	31 05       	cpc	r19, r1
    115e:	64 f0       	brlt	.+24     	; 0x1178 <millis+0xa2>
		{
			TCNT0 = 0;
    1160:	12 be       	out	0x32, r1	; 50
		}

	}
	#endif
	
	return true;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	0a c0       	rjmp	.+20     	; 0x117a <millis+0xa4>
	#if (MILLIS_INTERRUPT == 1)
	// we only check for the timeout state(g_ovf_count reaches 0) other states 
	//are handled in the OVF ISR
	else if (g_ovf_count == 0) 
	{
		TCCR0 = 0;//disable the timer and return false
    1166:	13 be       	out	0x33, r1	; 51
		TCNT0 = 0;
    1168:	12 be       	out	0x32, r1	; 50
		TIMSK &= ~(1 << 0);
    116a:	89 b7       	in	r24, 0x39	; 57
    116c:	8e 7f       	andi	r24, 0xFE	; 254
    116e:	89 bf       	out	0x39, r24	; 57
		return false;
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	03 c0       	rjmp	.+6      	; 0x117a <millis+0xa4>
		}

	}
	#endif
	
	return true;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	01 c0       	rjmp	.+2      	; 0x117a <millis+0xa4>
    1178:	81 e0       	ldi	r24, 0x01	; 1
}
    117a:	1f 91       	pop	r17
    117c:	0f 91       	pop	r16
    117e:	08 95       	ret

00001180 <millis_disable_tmr>:


void millis_disable_tmr()
{
	TCCR0 = 0;
    1180:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0;
    1182:	12 be       	out	0x32, r1	; 50
	g_ovf_count = 0;
    1184:	10 92 0f 01 	sts	0x010F, r1
    1188:	10 92 0e 01 	sts	0x010E, r1
    118c:	08 95       	ret

0000118e <millis_reset_tmr>:
{
	TCNT0 = 0;
}

void millis_reset_tmr(uint16_t t)
{
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
	g_ovf_count = NUMBER_OF_OVFLOWS + 1;
    1192:	9c 01       	movw	r18, r24
    1194:	a8 ee       	ldi	r26, 0xE8	; 232
    1196:	b3 e0       	ldi	r27, 0x03	; 3
    1198:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__umulhisi3>
    119c:	8b 01       	movw	r16, r22
    119e:	9c 01       	movw	r18, r24
    11a0:	0f 2e       	mov	r0, r31
    11a2:	ff e0       	ldi	r31, 0x0F	; 15
    11a4:	36 95       	lsr	r19
    11a6:	27 95       	ror	r18
    11a8:	17 95       	ror	r17
    11aa:	07 95       	ror	r16
    11ac:	fa 95       	dec	r31
    11ae:	d1 f7       	brne	.-12     	; 0x11a4 <millis_reset_tmr+0x16>
    11b0:	f0 2d       	mov	r31, r0
    11b2:	0f 5f       	subi	r16, 0xFF	; 255
    11b4:	1f 4f       	sbci	r17, 0xFF	; 255
    11b6:	10 93 0f 01 	sts	0x010F, r17
    11ba:	00 93 0e 01 	sts	0x010E, r16
#if (MILLIS_INTERRUPT == 1)
	TIMSK = 1; //enable timer0 interrupt
    11be:	21 e0       	ldi	r18, 0x01	; 1
    11c0:	29 bf       	out	0x39, r18	; 57
	//if the number of ovf is 1 meaning there is just the remaining ticks
	//make TCNT0=265-REMAINING_TICKS;
	//else TCNT=0
	g_last_ticks = REMAINING_TICKS;
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	68 94       	set
    11c8:	16 f8       	bld	r1, 6
    11ca:	b6 95       	lsr	r27
    11cc:	a7 95       	ror	r26
    11ce:	97 95       	ror	r25
    11d0:	87 95       	ror	r24
    11d2:	16 94       	lsr	r1
    11d4:	d1 f7       	brne	.-12     	; 0x11ca <millis_reset_tmr+0x3c>
    11d6:	80 93 10 01 	sts	0x0110, r24
#endif
}
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	08 95       	ret

000011e0 <millis_add_ovf_isr>:
and adjust your program algorithm based on that
------------------------------------------------------------------------------*/
void millis_add_ovf_isr(void ( * additional_tmr_ovf_isr)(void))
{
	
	gp_tmr0_ovf_isr = additional_tmr_ovf_isr;
    11e0:	90 93 12 01 	sts	0x0112, r25
    11e4:	80 93 11 01 	sts	0x0111, r24
    11e8:	08 95       	ret

000011ea <pwm_init>:

#if defined(ATMEGA32) || defined(ATMEGA16)


void pwm_init(uint8_t pwm_no, uint16_t freq) 
{
    11ea:	4f 92       	push	r4
    11ec:	5f 92       	push	r5
    11ee:	6f 92       	push	r6
    11f0:	7f 92       	push	r7
    11f2:	8f 92       	push	r8
    11f4:	9f 92       	push	r9
    11f6:	af 92       	push	r10
    11f8:	bf 92       	push	r11
    11fa:	cf 92       	push	r12
    11fc:	df 92       	push	r13
    11fe:	ef 92       	push	r14
    1200:	ff 92       	push	r15
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	18 2f       	mov	r17, r24
    120c:	eb 01       	movw	r28, r22
	if (pwm_no & PWM0)
    120e:	80 ff       	sbrs	r24, 0
    1210:	91 c0       	rjmp	.+290    	; 0x1334 <pwm_init+0x14a>
	{
		TCCR0 &= ~(0x07); // clear any previous pre scalers
    1212:	83 b7       	in	r24, 0x33	; 51
    1214:	88 7f       	andi	r24, 0xF8	; 248
    1216:	83 bf       	out	0x33, r24	; 51
		
		/*get number of ticks for required for the delay at 1 prescaler
		 if it overflowed the TOP(255) increase the prescaler */
		if(NUM_REQUIRED_TICKS_NO_PRE < 255) 
    1218:	6b 01       	movw	r12, r22
    121a:	e1 2c       	mov	r14, r1
    121c:	f1 2c       	mov	r15, r1
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	72 e1       	ldi	r23, 0x12	; 18
    1222:	8a e7       	ldi	r24, 0x7A	; 122
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	a7 01       	movw	r20, r14
    1228:	96 01       	movw	r18, r12
    122a:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    122e:	2f 3f       	cpi	r18, 0xFF	; 255
    1230:	31 05       	cpc	r19, r1
    1232:	41 05       	cpc	r20, r1
    1234:	51 05       	cpc	r21, r1
    1236:	18 f4       	brcc	.+6      	; 0x123e <pwm_init+0x54>
		{
			//if no overflow select prescaler 1
			TCCR0 = (1<<CS00);
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	83 bf       	out	0x33, r24	; 51
    123c:	78 c0       	rjmp	.+240    	; 0x132e <pwm_init+0x144>
		}//do the same for the 8 prescaler 
		else if(NUM_REQUIRED_TICKS_8_PRE < 255) 
    123e:	d7 01       	movw	r26, r14
    1240:	c6 01       	movw	r24, r12
    1242:	88 0f       	add	r24, r24
    1244:	99 1f       	adc	r25, r25
    1246:	aa 1f       	adc	r26, r26
    1248:	bb 1f       	adc	r27, r27
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	aa 1f       	adc	r26, r26
    1250:	bb 1f       	adc	r27, r27
    1252:	9c 01       	movw	r18, r24
    1254:	ad 01       	movw	r20, r26
    1256:	22 0f       	add	r18, r18
    1258:	33 1f       	adc	r19, r19
    125a:	44 1f       	adc	r20, r20
    125c:	55 1f       	adc	r21, r21
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	72 e1       	ldi	r23, 0x12	; 18
    1262:	8a e7       	ldi	r24, 0x7A	; 122
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    126a:	2f 3f       	cpi	r18, 0xFF	; 255
    126c:	31 05       	cpc	r19, r1
    126e:	41 05       	cpc	r20, r1
    1270:	51 05       	cpc	r21, r1
    1272:	20 f4       	brcc	.+8      	; 0x127c <pwm_init+0x92>
		{
			TCCR0 |= (1<<CS01); //
    1274:	83 b7       	in	r24, 0x33	; 51
    1276:	82 60       	ori	r24, 0x02	; 2
    1278:	83 bf       	out	0x33, r24	; 51
    127a:	59 c0       	rjmp	.+178    	; 0x132e <pwm_init+0x144>
		}//do the same for the 64 prescaler 
		else if(NUM_REQUIRED_TICKS_64_PRE < 255)
    127c:	d7 01       	movw	r26, r14
    127e:	c6 01       	movw	r24, r12
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	aa 1f       	adc	r26, r26
    1286:	bb 1f       	adc	r27, r27
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	aa 1f       	adc	r26, r26
    128e:	bb 1f       	adc	r27, r27
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	aa 1f       	adc	r26, r26
    1296:	bb 1f       	adc	r27, r27
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	aa 1f       	adc	r26, r26
    129e:	bb 1f       	adc	r27, r27
    12a0:	9c 01       	movw	r18, r24
    12a2:	ad 01       	movw	r20, r26
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	44 1f       	adc	r20, r20
    12aa:	55 1f       	adc	r21, r21
    12ac:	22 0f       	add	r18, r18
    12ae:	33 1f       	adc	r19, r19
    12b0:	44 1f       	adc	r20, r20
    12b2:	55 1f       	adc	r21, r21
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	72 e1       	ldi	r23, 0x12	; 18
    12b8:	8a e7       	ldi	r24, 0x7A	; 122
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    12c0:	2f 3f       	cpi	r18, 0xFF	; 255
    12c2:	31 05       	cpc	r19, r1
    12c4:	41 05       	cpc	r20, r1
    12c6:	51 05       	cpc	r21, r1
    12c8:	20 f4       	brcc	.+8      	; 0x12d2 <pwm_init+0xe8>
		{
			TCCR0 |= (1<<CS10)|(1<<CS11); //
    12ca:	83 b7       	in	r24, 0x33	; 51
    12cc:	83 60       	ori	r24, 0x03	; 3
    12ce:	83 bf       	out	0x33, r24	; 51
    12d0:	2e c0       	rjmp	.+92     	; 0x132e <pwm_init+0x144>
		}//do the same for the 256 prescaler 
		else if(NUM_REQUIRED_TICKS_256_PRE < 255)
    12d2:	88 24       	eor	r8, r8
    12d4:	9c 2c       	mov	r9, r12
    12d6:	ad 2c       	mov	r10, r13
    12d8:	be 2c       	mov	r11, r14
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	72 e1       	ldi	r23, 0x12	; 18
    12de:	8a e7       	ldi	r24, 0x7A	; 122
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a5 01       	movw	r20, r10
    12e4:	94 01       	movw	r18, r8
    12e6:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    12ea:	2f 3f       	cpi	r18, 0xFF	; 255
    12ec:	31 05       	cpc	r19, r1
    12ee:	41 05       	cpc	r20, r1
    12f0:	51 05       	cpc	r21, r1
    12f2:	20 f4       	brcc	.+8      	; 0x12fc <pwm_init+0x112>
		{
			TCCR0 |= (1<<CS02); //
    12f4:	83 b7       	in	r24, 0x33	; 51
    12f6:	84 60       	ori	r24, 0x04	; 4
    12f8:	83 bf       	out	0x33, r24	; 51
    12fa:	19 c0       	rjmp	.+50     	; 0x132e <pwm_init+0x144>
		}//do the same for the 1024 prescaler 
		else if(NUM_REQUIRED_TICKS_1024_PRE < 255)
    12fc:	a7 01       	movw	r20, r14
    12fe:	96 01       	movw	r18, r12
    1300:	01 2e       	mov	r0, r17
    1302:	1a e0       	ldi	r17, 0x0A	; 10
    1304:	22 0f       	add	r18, r18
    1306:	33 1f       	adc	r19, r19
    1308:	44 1f       	adc	r20, r20
    130a:	55 1f       	adc	r21, r21
    130c:	1a 95       	dec	r17
    130e:	d1 f7       	brne	.-12     	; 0x1304 <pwm_init+0x11a>
    1310:	10 2d       	mov	r17, r0
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	72 e1       	ldi	r23, 0x12	; 18
    1316:	8a e7       	ldi	r24, 0x7A	; 122
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    131e:	2f 3f       	cpi	r18, 0xFF	; 255
    1320:	31 05       	cpc	r19, r1
    1322:	41 05       	cpc	r20, r1
    1324:	51 05       	cpc	r21, r1
    1326:	18 f4       	brcc	.+6      	; 0x132e <pwm_init+0x144>
		{
			TCCR0 |= (1<<CS00)|(1<<CS02);
    1328:	83 b7       	in	r24, 0x33	; 51
    132a:	85 60       	ori	r24, 0x05	; 5
    132c:	83 bf       	out	0x33, r24	; 51
		else
		{
			//barcoding standard
		}
		//set the bits for FAST PWM
		TCCR0 |= (1<<WGM00) | (1<<WGM01); 
    132e:	83 b7       	in	r24, 0x33	; 51
    1330:	88 64       	ori	r24, 0x48	; 72
    1332:	83 bf       	out	0x33, r24	; 51
    1334:	81 2f       	mov	r24, r17
    1336:	86 70       	andi	r24, 0x06	; 6
	}
	
	if ((pwm_no & (PWM1)) || (pwm_no & (PWM2)))
    1338:	09 f4       	brne	.+2      	; 0x133c <pwm_init+0x152>
    133a:	a7 c0       	rjmp	.+334    	; 0x148a <pwm_init+0x2a0>
	{
		TCCR1A &= ~(0x07); // clear any previous pre scalers
    133c:	8f b5       	in	r24, 0x2f	; 47
    133e:	88 7f       	andi	r24, 0xF8	; 248
    1340:	8f bd       	out	0x2f, r24	; 47
		
		uint16_t ICR1_buffer = NUM_REQUIRED_TICKS_NO_PRE; // default value
    1342:	6e 01       	movw	r12, r28
    1344:	e1 2c       	mov	r14, r1
    1346:	f1 2c       	mov	r15, r1
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	72 e1       	ldi	r23, 0x12	; 18
    134c:	8a e7       	ldi	r24, 0x7A	; 122
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a7 01       	movw	r20, r14
    1352:	96 01       	movw	r18, r12
    1354:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    1358:	02 2f       	mov	r16, r18
    135a:	b3 2e       	mov	r11, r19
		
		/*get number of ticks for required for the delay at 1 prescaler if it 
		 overflowed ICR1(66635) increase the prescaler 
		*/
		if(NUM_REQUIRED_TICKS_NO_PRE < (uint32_t)65535)
    135c:	2f 3f       	cpi	r18, 0xFF	; 255
    135e:	3f 4f       	sbci	r19, 0xFF	; 255
    1360:	41 05       	cpc	r20, r1
    1362:	51 05       	cpc	r21, r1
    1364:	18 f4       	brcc	.+6      	; 0x136c <pwm_init+0x182>
		{
			//if no overflow select prescaler 1
			TCCR1B = (1<<CS10);
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	8e bd       	out	0x2e, r24	; 46
    136a:	84 c0       	rjmp	.+264    	; 0x1474 <pwm_init+0x28a>
			//put number of ticks needed to ICR1
			ICR1_buffer = NUM_REQUIRED_TICKS_NO_PRE;
		}//do the same for the 8 prescaler 
		else if(NUM_REQUIRED_TICKS_8_PRE < (uint32_t)65535)
    136c:	d7 01       	movw	r26, r14
    136e:	c6 01       	movw	r24, r12
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	aa 1f       	adc	r26, r26
    1376:	bb 1f       	adc	r27, r27
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	aa 1f       	adc	r26, r26
    137e:	bb 1f       	adc	r27, r27
    1380:	9c 01       	movw	r18, r24
    1382:	ad 01       	movw	r20, r26
    1384:	22 0f       	add	r18, r18
    1386:	33 1f       	adc	r19, r19
    1388:	44 1f       	adc	r20, r20
    138a:	55 1f       	adc	r21, r21
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	72 e1       	ldi	r23, 0x12	; 18
    1390:	8a e7       	ldi	r24, 0x7A	; 122
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    1398:	2f 3f       	cpi	r18, 0xFF	; 255
    139a:	8f ef       	ldi	r24, 0xFF	; 255
    139c:	38 07       	cpc	r19, r24
    139e:	41 05       	cpc	r20, r1
    13a0:	51 05       	cpc	r21, r1
    13a2:	30 f4       	brcc	.+12     	; 0x13b0 <pwm_init+0x1c6>
		{
			TCCR1B |= (1<<CS11);	
    13a4:	8e b5       	in	r24, 0x2e	; 46
    13a6:	82 60       	ori	r24, 0x02	; 2
    13a8:	8e bd       	out	0x2e, r24	; 46
			ICR1_buffer = NUM_REQUIRED_TICKS_8_PRE; 
    13aa:	02 2f       	mov	r16, r18
    13ac:	b3 2e       	mov	r11, r19
    13ae:	62 c0       	rjmp	.+196    	; 0x1474 <pwm_init+0x28a>
		}//do the same for the 64 prescaler 
		else if(NUM_REQUIRED_TICKS_64_PRE < (uint32_t)65535)
    13b0:	d7 01       	movw	r26, r14
    13b2:	c6 01       	movw	r24, r12
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	aa 1f       	adc	r26, r26
    13ba:	bb 1f       	adc	r27, r27
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	aa 1f       	adc	r26, r26
    13c2:	bb 1f       	adc	r27, r27
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	aa 1f       	adc	r26, r26
    13ca:	bb 1f       	adc	r27, r27
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	aa 1f       	adc	r26, r26
    13d2:	bb 1f       	adc	r27, r27
    13d4:	9c 01       	movw	r18, r24
    13d6:	ad 01       	movw	r20, r26
    13d8:	22 0f       	add	r18, r18
    13da:	33 1f       	adc	r19, r19
    13dc:	44 1f       	adc	r20, r20
    13de:	55 1f       	adc	r21, r21
    13e0:	22 0f       	add	r18, r18
    13e2:	33 1f       	adc	r19, r19
    13e4:	44 1f       	adc	r20, r20
    13e6:	55 1f       	adc	r21, r21
    13e8:	60 e0       	ldi	r22, 0x00	; 0
    13ea:	72 e1       	ldi	r23, 0x12	; 18
    13ec:	8a e7       	ldi	r24, 0x7A	; 122
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    13f4:	2f 3f       	cpi	r18, 0xFF	; 255
    13f6:	8f ef       	ldi	r24, 0xFF	; 255
    13f8:	38 07       	cpc	r19, r24
    13fa:	41 05       	cpc	r20, r1
    13fc:	51 05       	cpc	r21, r1
    13fe:	30 f4       	brcc	.+12     	; 0x140c <pwm_init+0x222>
		{
			TCCR1B |= (1<<CS10)|(1<<CS11); //
    1400:	8e b5       	in	r24, 0x2e	; 46
    1402:	83 60       	ori	r24, 0x03	; 3
    1404:	8e bd       	out	0x2e, r24	; 46
			ICR1_buffer = NUM_REQUIRED_TICKS_64_PRE;
    1406:	02 2f       	mov	r16, r18
    1408:	b3 2e       	mov	r11, r19
    140a:	34 c0       	rjmp	.+104    	; 0x1474 <pwm_init+0x28a>
		}//do the same for the 256 prescaler 
		else if(NUM_REQUIRED_TICKS_256_PRE < (uint32_t)65535)//apply the frequency formulA on prescaler=256 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=256 for it) we have to increase the prescaler and apply the formulA again
    140c:	44 24       	eor	r4, r4
    140e:	5c 2c       	mov	r5, r12
    1410:	6d 2c       	mov	r6, r13
    1412:	7e 2c       	mov	r7, r14
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	72 e1       	ldi	r23, 0x12	; 18
    1418:	8a e7       	ldi	r24, 0x7A	; 122
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	a3 01       	movw	r20, r6
    141e:	92 01       	movw	r18, r4
    1420:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    1424:	2f 3f       	cpi	r18, 0xFF	; 255
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	38 07       	cpc	r19, r24
    142a:	41 05       	cpc	r20, r1
    142c:	51 05       	cpc	r21, r1
    142e:	30 f4       	brcc	.+12     	; 0x143c <pwm_init+0x252>
		{
			TCCR1B |= (1<<CS12); //
    1430:	8e b5       	in	r24, 0x2e	; 46
    1432:	84 60       	ori	r24, 0x04	; 4
    1434:	8e bd       	out	0x2e, r24	; 46
			ICR1_buffer = NUM_REQUIRED_TICKS_256_PRE;
    1436:	02 2f       	mov	r16, r18
    1438:	b3 2e       	mov	r11, r19
    143a:	1c c0       	rjmp	.+56     	; 0x1474 <pwm_init+0x28a>
		}//do the same for the 1024 prescaler 
		else if(NUM_REQUIRED_TICKS_1024_PRE < (uint16_t)65535)//apply the frequency formulA on prescaler=1 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=1 for it) we have to increase the prescaler and apply the formulA again
    143c:	a7 01       	movw	r20, r14
    143e:	96 01       	movw	r18, r12
    1440:	01 2e       	mov	r0, r17
    1442:	1a e0       	ldi	r17, 0x0A	; 10
    1444:	22 0f       	add	r18, r18
    1446:	33 1f       	adc	r19, r19
    1448:	44 1f       	adc	r20, r20
    144a:	55 1f       	adc	r21, r21
    144c:	1a 95       	dec	r17
    144e:	d1 f7       	brne	.-12     	; 0x1444 <pwm_init+0x25a>
    1450:	10 2d       	mov	r17, r0
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	72 e1       	ldi	r23, 0x12	; 18
    1456:	8a e7       	ldi	r24, 0x7A	; 122
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    145e:	2f 3f       	cpi	r18, 0xFF	; 255
    1460:	8f ef       	ldi	r24, 0xFF	; 255
    1462:	38 07       	cpc	r19, r24
    1464:	41 05       	cpc	r20, r1
    1466:	51 05       	cpc	r21, r1
    1468:	28 f4       	brcc	.+10     	; 0x1474 <pwm_init+0x28a>
		{
			TCCR1B |= (1<<CS10)|(1<<CS12); //
    146a:	8e b5       	in	r24, 0x2e	; 46
    146c:	85 60       	ori	r24, 0x05	; 5
    146e:	8e bd       	out	0x2e, r24	; 46
			ICR1_buffer = NUM_REQUIRED_TICKS_1024_PRE;
    1470:	02 2f       	mov	r16, r18
    1472:	b3 2e       	mov	r11, r19
		{
			//barcoding standard
		}
		

		ICR1H = ICR1_buffer >> 8;
    1474:	b7 bc       	out	0x27, r11	; 39
		ICR1L = (ICR1_buffer & 0x00ff);
    1476:	06 bd       	out	0x26, r16	; 38
		
		// SET THE BIT (FAST PWM WITH ICR1 AS TOP)
		TCCR1B |= (1<<WGM12)|(1<<WGM13); 
    1478:	8e b5       	in	r24, 0x2e	; 46
    147a:	88 61       	ori	r24, 0x18	; 24
    147c:	8e bd       	out	0x2e, r24	; 46
		TCCR1A |= (1<<WGM11);
    147e:	8f b5       	in	r24, 0x2f	; 47
    1480:	82 60       	ori	r24, 0x02	; 2
    1482:	8f bd       	out	0x2f, r24	; 47
		TCCR1A &= ~(1 << WGM10);
    1484:	8f b5       	in	r24, 0x2f	; 47
    1486:	8e 7f       	andi	r24, 0xFE	; 254
    1488:	8f bd       	out	0x2f, r24	; 47
	}
	
	
	
	if (pwm_no & PWM3)
    148a:	13 ff       	sbrs	r17, 3
    148c:	e7 c0       	rjmp	.+462    	; 0x165c <pwm_init+0x472>
	{
		TCCR2 &= ~(0x07); // clear any previous pre scalers
    148e:	85 b5       	in	r24, 0x25	; 37
    1490:	88 7f       	andi	r24, 0xF8	; 248
    1492:	85 bd       	out	0x25, r24	; 37
		
		/*get number of ticks for required for the delay at 1 prescaler
		 if it overflowed the TOP(255) increase the prescaler*/
		if(NUM_REQUIRED_TICKS_NO_PRE < 255)
    1494:	6e 01       	movw	r12, r28
    1496:	e1 2c       	mov	r14, r1
    1498:	f1 2c       	mov	r15, r1
    149a:	60 e0       	ldi	r22, 0x00	; 0
    149c:	72 e1       	ldi	r23, 0x12	; 18
    149e:	8a e7       	ldi	r24, 0x7A	; 122
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	a7 01       	movw	r20, r14
    14a4:	96 01       	movw	r18, r12
    14a6:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    14aa:	2f 3f       	cpi	r18, 0xFF	; 255
    14ac:	31 05       	cpc	r19, r1
    14ae:	41 05       	cpc	r20, r1
    14b0:	51 05       	cpc	r21, r1
    14b2:	18 f4       	brcc	.+6      	; 0x14ba <pwm_init+0x2d0>
		{
			//if no overflow select prescaler 1
			TCCR2 = (1 << CS20);//if no overflow assign prescaler 1 to the PWM time
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	85 bd       	out	0x25, r24	; 37
    14b8:	ce c0       	rjmp	.+412    	; 0x1656 <pwm_init+0x46c>
		}//do the same for the 8 prescaler 
		else if(NUM_REQUIRED_TICKS_8_PRE < 255)
    14ba:	d7 01       	movw	r26, r14
    14bc:	c6 01       	movw	r24, r12
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	aa 1f       	adc	r26, r26
    14c4:	bb 1f       	adc	r27, r27
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	aa 1f       	adc	r26, r26
    14cc:	bb 1f       	adc	r27, r27
    14ce:	9c 01       	movw	r18, r24
    14d0:	ad 01       	movw	r20, r26
    14d2:	22 0f       	add	r18, r18
    14d4:	33 1f       	adc	r19, r19
    14d6:	44 1f       	adc	r20, r20
    14d8:	55 1f       	adc	r21, r21
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	72 e1       	ldi	r23, 0x12	; 18
    14de:	8a e7       	ldi	r24, 0x7A	; 122
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    14e6:	2f 3f       	cpi	r18, 0xFF	; 255
    14e8:	31 05       	cpc	r19, r1
    14ea:	41 05       	cpc	r20, r1
    14ec:	51 05       	cpc	r21, r1
    14ee:	20 f4       	brcc	.+8      	; 0x14f8 <pwm_init+0x30e>
		{
			TCCR2 |= (1<<CS21); //
    14f0:	85 b5       	in	r24, 0x25	; 37
    14f2:	82 60       	ori	r24, 0x02	; 2
    14f4:	85 bd       	out	0x25, r24	; 37
    14f6:	af c0       	rjmp	.+350    	; 0x1656 <pwm_init+0x46c>
		}//do the same for the 32 prescaler 
		else if(NUM_REQUIRED_TICKS_32_PRE < 255) 
    14f8:	d7 01       	movw	r26, r14
    14fa:	c6 01       	movw	r24, r12
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	aa 1f       	adc	r26, r26
    1502:	bb 1f       	adc	r27, r27
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	aa 1f       	adc	r26, r26
    150a:	bb 1f       	adc	r27, r27
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	aa 1f       	adc	r26, r26
    1512:	bb 1f       	adc	r27, r27
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	aa 1f       	adc	r26, r26
    151a:	bb 1f       	adc	r27, r27
    151c:	9c 01       	movw	r18, r24
    151e:	ad 01       	movw	r20, r26
    1520:	22 0f       	add	r18, r18
    1522:	33 1f       	adc	r19, r19
    1524:	44 1f       	adc	r20, r20
    1526:	55 1f       	adc	r21, r21
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	72 e1       	ldi	r23, 0x12	; 18
    152c:	8a e7       	ldi	r24, 0x7A	; 122
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    1534:	2f 3f       	cpi	r18, 0xFF	; 255
    1536:	31 05       	cpc	r19, r1
    1538:	41 05       	cpc	r20, r1
    153a:	51 05       	cpc	r21, r1
    153c:	20 f4       	brcc	.+8      	; 0x1546 <pwm_init+0x35c>
		{
			TCCR2 |= (1 << CS20) | (1 << CS21);
    153e:	85 b5       	in	r24, 0x25	; 37
    1540:	83 60       	ori	r24, 0x03	; 3
    1542:	85 bd       	out	0x25, r24	; 37
    1544:	88 c0       	rjmp	.+272    	; 0x1656 <pwm_init+0x46c>
		}//do the same for the 64 prescaler 
		else if(NUM_REQUIRED_TICKS_64_PRE < 255)
    1546:	d7 01       	movw	r26, r14
    1548:	c6 01       	movw	r24, r12
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	aa 1f       	adc	r26, r26
    1550:	bb 1f       	adc	r27, r27
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	aa 1f       	adc	r26, r26
    1558:	bb 1f       	adc	r27, r27
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	aa 1f       	adc	r26, r26
    1560:	bb 1f       	adc	r27, r27
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	aa 1f       	adc	r26, r26
    1568:	bb 1f       	adc	r27, r27
    156a:	9c 01       	movw	r18, r24
    156c:	ad 01       	movw	r20, r26
    156e:	22 0f       	add	r18, r18
    1570:	33 1f       	adc	r19, r19
    1572:	44 1f       	adc	r20, r20
    1574:	55 1f       	adc	r21, r21
    1576:	22 0f       	add	r18, r18
    1578:	33 1f       	adc	r19, r19
    157a:	44 1f       	adc	r20, r20
    157c:	55 1f       	adc	r21, r21
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	72 e1       	ldi	r23, 0x12	; 18
    1582:	8a e7       	ldi	r24, 0x7A	; 122
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    158a:	2f 3f       	cpi	r18, 0xFF	; 255
    158c:	31 05       	cpc	r19, r1
    158e:	41 05       	cpc	r20, r1
    1590:	51 05       	cpc	r21, r1
    1592:	20 f4       	brcc	.+8      	; 0x159c <pwm_init+0x3b2>
		{
			TCCR2 |= (1 << CS22); //
    1594:	85 b5       	in	r24, 0x25	; 37
    1596:	84 60       	ori	r24, 0x04	; 4
    1598:	85 bd       	out	0x25, r24	; 37
    159a:	5d c0       	rjmp	.+186    	; 0x1656 <pwm_init+0x46c>
		}//do the same for the 128 prescaler 
		else if(NUM_REQUIRED_TICKS_128_PRE < 255)
    159c:	d7 01       	movw	r26, r14
    159e:	c6 01       	movw	r24, r12
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	aa 1f       	adc	r26, r26
    15a6:	bb 1f       	adc	r27, r27
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	aa 1f       	adc	r26, r26
    15ae:	bb 1f       	adc	r27, r27
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	aa 1f       	adc	r26, r26
    15b6:	bb 1f       	adc	r27, r27
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	aa 1f       	adc	r26, r26
    15be:	bb 1f       	adc	r27, r27
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	aa 1f       	adc	r26, r26
    15c6:	bb 1f       	adc	r27, r27
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	aa 1f       	adc	r26, r26
    15ce:	bb 1f       	adc	r27, r27
    15d0:	9c 01       	movw	r18, r24
    15d2:	ad 01       	movw	r20, r26
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	44 1f       	adc	r20, r20
    15da:	55 1f       	adc	r21, r21
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	72 e1       	ldi	r23, 0x12	; 18
    15e0:	8a e7       	ldi	r24, 0x7A	; 122
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    15e8:	2f 3f       	cpi	r18, 0xFF	; 255
    15ea:	31 05       	cpc	r19, r1
    15ec:	41 05       	cpc	r20, r1
    15ee:	51 05       	cpc	r21, r1
    15f0:	20 f4       	brcc	.+8      	; 0x15fa <pwm_init+0x410>
		{
			TCCR2 |= (1 << CS20) | (1 << CS22); 
    15f2:	85 b5       	in	r24, 0x25	; 37
    15f4:	85 60       	ori	r24, 0x05	; 5
    15f6:	85 bd       	out	0x25, r24	; 37
    15f8:	2e c0       	rjmp	.+92     	; 0x1656 <pwm_init+0x46c>
		}//do the same for the 256 prescaler 
		else if(NUM_REQUIRED_TICKS_256_PRE < 255)
    15fa:	3e 2d       	mov	r19, r14
    15fc:	2d 2d       	mov	r18, r13
    15fe:	1c 2d       	mov	r17, r12
    1600:	00 27       	eor	r16, r16
    1602:	60 e0       	ldi	r22, 0x00	; 0
    1604:	72 e1       	ldi	r23, 0x12	; 18
    1606:	8a e7       	ldi	r24, 0x7A	; 122
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a9 01       	movw	r20, r18
    160c:	98 01       	movw	r18, r16
    160e:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    1612:	2f 3f       	cpi	r18, 0xFF	; 255
    1614:	31 05       	cpc	r19, r1
    1616:	41 05       	cpc	r20, r1
    1618:	51 05       	cpc	r21, r1
    161a:	20 f4       	brcc	.+8      	; 0x1624 <pwm_init+0x43a>
		{
			TCCR2 |= (1 << CS21) | (1 << CS22); //
    161c:	85 b5       	in	r24, 0x25	; 37
    161e:	86 60       	ori	r24, 0x06	; 6
    1620:	85 bd       	out	0x25, r24	; 37
    1622:	19 c0       	rjmp	.+50     	; 0x1656 <pwm_init+0x46c>
		}//do the same for the 1024 prescaler 
		else if(NUM_REQUIRED_TICKS_1024_PRE < 255)//apply the frequency formulA on prescaler=1 and get ICR1 value if it's larger than what ICR1 register can hold(this means that the frequency we want too low to use prescaler=1 for it) we have to increase the prescaler and apply the formulA again
    1624:	a7 01       	movw	r20, r14
    1626:	96 01       	movw	r18, r12
    1628:	01 2e       	mov	r0, r17
    162a:	1a e0       	ldi	r17, 0x0A	; 10
    162c:	22 0f       	add	r18, r18
    162e:	33 1f       	adc	r19, r19
    1630:	44 1f       	adc	r20, r20
    1632:	55 1f       	adc	r21, r21
    1634:	1a 95       	dec	r17
    1636:	d1 f7       	brne	.-12     	; 0x162c <pwm_init+0x442>
    1638:	10 2d       	mov	r17, r0
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	72 e1       	ldi	r23, 0x12	; 18
    163e:	8a e7       	ldi	r24, 0x7A	; 122
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    1646:	2f 3f       	cpi	r18, 0xFF	; 255
    1648:	31 05       	cpc	r19, r1
    164a:	41 05       	cpc	r20, r1
    164c:	51 05       	cpc	r21, r1
    164e:	18 f4       	brcc	.+6      	; 0x1656 <pwm_init+0x46c>
		{
			TCCR2 |= (1 << CS20) | (1 << CS22) | (1 << CS21);    
    1650:	85 b5       	in	r24, 0x25	; 37
    1652:	87 60       	ori	r24, 0x07	; 7
    1654:	85 bd       	out	0x25, r24	; 37
		}

		//set the bits for FAST PWM
		TCCR2 |= (1<<WGM20) | (1<<WGM21); 
    1656:	85 b5       	in	r24, 0x25	; 37
    1658:	88 64       	ori	r24, 0x48	; 72
    165a:	85 bd       	out	0x25, r24	; 37
	}
	
}
    165c:	df 91       	pop	r29
    165e:	cf 91       	pop	r28
    1660:	1f 91       	pop	r17
    1662:	0f 91       	pop	r16
    1664:	ff 90       	pop	r15
    1666:	ef 90       	pop	r14
    1668:	df 90       	pop	r13
    166a:	cf 90       	pop	r12
    166c:	bf 90       	pop	r11
    166e:	af 90       	pop	r10
    1670:	9f 90       	pop	r9
    1672:	8f 90       	pop	r8
    1674:	7f 90       	pop	r7
    1676:	6f 90       	pop	r6
    1678:	5f 90       	pop	r5
    167a:	4f 90       	pop	r4
    167c:	08 95       	ret

0000167e <pwm_start>:

void pwm_start(uint8_t pwm_no)
{
    167e:	cf 93       	push	r28
    1680:	c8 2f       	mov	r28, r24
	if (pwm_no & PWM0)
    1682:	80 ff       	sbrs	r24, 0
    1684:	0a c0       	rjmp	.+20     	; 0x169a <pwm_start+0x1c>
	{
		//set the pin OC0 as output
		DIO_SET_DIR(DIO_OC0, DIO_OUTPUT);
    1686:	61 e0       	ldi	r22, 0x01	; 1
    1688:	8b e0       	ldi	r24, 0x0B	; 11
    168a:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
		//set OC0 pin to fast PWM mode
		TCCR0 |= (1 << COM01);
    168e:	83 b7       	in	r24, 0x33	; 51
    1690:	80 62       	ori	r24, 0x20	; 32
    1692:	83 bf       	out	0x33, r24	; 51
		TCCR0 &= ~(1 << COM00);
    1694:	83 b7       	in	r24, 0x33	; 51
    1696:	8f 7e       	andi	r24, 0xEF	; 239
    1698:	83 bf       	out	0x33, r24	; 51
	}
	
	if (pwm_no & PWM1)
    169a:	c1 ff       	sbrs	r28, 1
    169c:	0a c0       	rjmp	.+20     	; 0x16b2 <pwm_start+0x34>
	{
		//set the pin OC1A as output
		DIO_SET_DIR(DIO_OC1A, DIO_OUTPUT);
    169e:	61 e0       	ldi	r22, 0x01	; 1
    16a0:	8d e1       	ldi	r24, 0x1D	; 29
    16a2:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
		//set OC1A pin to fast PWM mode
		TCCR1A &= ~(1 << COM1A0);
    16a6:	8f b5       	in	r24, 0x2f	; 47
    16a8:	8f 7b       	andi	r24, 0xBF	; 191
    16aa:	8f bd       	out	0x2f, r24	; 47
		TCCR1A |= (1 << COM1A1); // SET THE BIT( CLEAR ON COMPARE)
    16ac:	8f b5       	in	r24, 0x2f	; 47
    16ae:	80 68       	ori	r24, 0x80	; 128
    16b0:	8f bd       	out	0x2f, r24	; 47
	}
	
	if (pwm_no & PWM2)
    16b2:	c2 ff       	sbrs	r28, 2
    16b4:	0a c0       	rjmp	.+20     	; 0x16ca <pwm_start+0x4c>
	{
		//set the pin OC1B as output
		DIO_SET_DIR(DIO_OC1B, DIO_OUTPUT);
    16b6:	61 e0       	ldi	r22, 0x01	; 1
    16b8:	8c e1       	ldi	r24, 0x1C	; 28
    16ba:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
		//set OC1B pin to fast PWM mode
		TCCR1A &= ~(1 << COM1B0);
    16be:	8f b5       	in	r24, 0x2f	; 47
    16c0:	8f 7e       	andi	r24, 0xEF	; 239
    16c2:	8f bd       	out	0x2f, r24	; 47
		TCCR1A |= (1 << COM1B1); 
    16c4:	8f b5       	in	r24, 0x2f	; 47
    16c6:	80 62       	ori	r24, 0x20	; 32
    16c8:	8f bd       	out	0x2f, r24	; 47
	}
	
	if (pwm_no & PWM3)
    16ca:	c3 ff       	sbrs	r28, 3
    16cc:	0a c0       	rjmp	.+20     	; 0x16e2 <pwm_start+0x64>
	{
		//set the pin OC2 as output
		DIO_SET_DIR(DIO_OC2, DIO_OUTPUT);
    16ce:	61 e0       	ldi	r22, 0x01	; 1
    16d0:	8f e1       	ldi	r24, 0x1F	; 31
    16d2:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
		//set OC2 pin to fast PWM mode
		TCCR2 |= (1 << COM21);
    16d6:	85 b5       	in	r24, 0x25	; 37
    16d8:	80 62       	ori	r24, 0x20	; 32
    16da:	85 bd       	out	0x25, r24	; 37
		TCCR2 &= ~(1 << COM20);
    16dc:	85 b5       	in	r24, 0x25	; 37
    16de:	8f 7e       	andi	r24, 0xEF	; 239
    16e0:	85 bd       	out	0x25, r24	; 37
	}
	
}
    16e2:	cf 91       	pop	r28
    16e4:	08 95       	ret

000016e6 <pwm_setDuty>:

void pwm_setDuty(uint8_t pwn_no, uint8_t duty_percent)
{
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	c8 2f       	mov	r28, r24
    16ec:	d6 2f       	mov	r29, r22
	if (pwn_no & PWM0)
    16ee:	80 ff       	sbrs	r24, 0
    16f0:	19 c0       	rjmp	.+50     	; 0x1724 <pwm_setDuty+0x3e>
		/*[NOTE] :if the duty cycle is 100% putting the same number as 
		top value(256) will cause A compare and overflow at the same time which 
		it will be always either set or clear for the whole time so we put it
		 equal to TOP value 255
		*/
		if (duty_percent == 100) 
    16f2:	64 36       	cpi	r22, 0x64	; 100
    16f4:	29 f4       	brne	.+10     	; 0x1700 <pwm_setDuty+0x1a>
		{
			OCR0 = 255;
    16f6:	8f ef       	ldi	r24, 0xFF	; 255
    16f8:	8c bf       	out	0x3c, r24	; 60
	/*[NOTE] :if the duty cycle is 100% putting the same number as 
		ICR1 value will cause A compare and overflow at the same time which 
		it will be always either set or clear for the whole time so we put it
		 equal to ICR1 -1
		*/
	if (pwn_no & PWM1)    
    16fa:	c1 fd       	sbrc	r28, 1
    16fc:	17 c0       	rjmp	.+46     	; 0x172c <pwm_setDuty+0x46>
    16fe:	7d c0       	rjmp	.+250    	; 0x17fa <pwm_setDuty+0x114>
			OCR0 = 255;
		}
		else
		{
			//assign OCR0(holds the compare value) to the duty cycle percentage 
			OCR0 = (255 * (uint16_t)duty_percent) / 100;
    1700:	8f ef       	ldi	r24, 0xFF	; 255
    1702:	68 9f       	mul	r22, r24
    1704:	90 01       	movw	r18, r0
    1706:	11 24       	eor	r1, r1
    1708:	36 95       	lsr	r19
    170a:	27 95       	ror	r18
    170c:	36 95       	lsr	r19
    170e:	27 95       	ror	r18
    1710:	ab e7       	ldi	r26, 0x7B	; 123
    1712:	b4 e1       	ldi	r27, 0x14	; 20
    1714:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__umulhisi3>
    1718:	96 95       	lsr	r25
    171a:	87 95       	ror	r24
    171c:	8c bf       	out	0x3c, r24	; 60
	/*[NOTE] :if the duty cycle is 100% putting the same number as 
		ICR1 value will cause A compare and overflow at the same time which 
		it will be always either set or clear for the whole time so we put it
		 equal to ICR1 -1
		*/
	if (pwn_no & PWM1)    
    171e:	c1 fd       	sbrc	r28, 1
    1720:	15 c0       	rjmp	.+42     	; 0x174c <pwm_setDuty+0x66>
    1722:	6e c0       	rjmp	.+220    	; 0x1800 <pwm_setDuty+0x11a>
    1724:	81 ff       	sbrs	r24, 1
    1726:	28 c0       	rjmp	.+80     	; 0x1778 <pwm_setDuty+0x92>
	{
		if (duty_percent == 100)
    1728:	64 36       	cpi	r22, 0x64	; 100
    172a:	81 f4       	brne	.+32     	; 0x174c <pwm_setDuty+0x66>
		{
			OCR1A = ((ICR1L) + ((uint16_t)ICR1H << 8)) - 1;
    172c:	26 b5       	in	r18, 0x26	; 38
    172e:	97 b5       	in	r25, 0x27	; 39
    1730:	30 e0       	ldi	r19, 0x00	; 0
    1732:	21 50       	subi	r18, 0x01	; 1
    1734:	31 09       	sbc	r19, r1
    1736:	89 2f       	mov	r24, r25
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	98 2f       	mov	r25, r24
    173c:	88 27       	eor	r24, r24
    173e:	82 0f       	add	r24, r18
    1740:	93 1f       	adc	r25, r19
    1742:	9b bd       	out	0x2b, r25	; 43
    1744:	8a bd       	out	0x2a, r24	; 42
		}
			
	}
	
	//[NOTE]: same as PWM1
	if (pwn_no & PWM2)    
    1746:	c2 fd       	sbrc	r28, 2
    1748:	1b c0       	rjmp	.+54     	; 0x1780 <pwm_setDuty+0x9a>
    174a:	40 c0       	rjmp	.+128    	; 0x17cc <pwm_setDuty+0xe6>
			OCR1A = ((ICR1L) + ((uint16_t)ICR1H << 8)) - 1;
		}
		else
		{
			//assign OCR1A(holds the compare value) to the duty cycle percentage 
			OCR1A = ((uint32_t)((ICR1L) + ((uint16_t)ICR1H << 8)) * duty_percent) / 100;	
    174c:	86 b5       	in	r24, 0x26	; 38
    174e:	27 b5       	in	r18, 0x27	; 39
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	32 2f       	mov	r19, r18
    1754:	22 27       	eor	r18, r18
    1756:	28 0f       	add	r18, r24
    1758:	31 1d       	adc	r19, r1
    175a:	ad 2f       	mov	r26, r29
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__umulhisi3>
    1762:	24 e6       	ldi	r18, 0x64	; 100
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    176e:	3b bd       	out	0x2b, r19	; 43
    1770:	2a bd       	out	0x2a, r18	; 42
		}
			
	}
	
	//[NOTE]: same as PWM1
	if (pwn_no & PWM2)    
    1772:	c2 fd       	sbrc	r28, 2
    1774:	15 c0       	rjmp	.+42     	; 0x17a0 <pwm_setDuty+0xba>
    1776:	2a c0       	rjmp	.+84     	; 0x17cc <pwm_setDuty+0xe6>
    1778:	82 ff       	sbrs	r24, 2
    177a:	28 c0       	rjmp	.+80     	; 0x17cc <pwm_setDuty+0xe6>
	{
		if (duty_percent == 100)
    177c:	64 36       	cpi	r22, 0x64	; 100
    177e:	81 f4       	brne	.+32     	; 0x17a0 <pwm_setDuty+0xba>
		{
			OCR1B = ((ICR1L) + ((uint16_t)ICR1H << 8)) - 1;
    1780:	26 b5       	in	r18, 0x26	; 38
    1782:	97 b5       	in	r25, 0x27	; 39
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	21 50       	subi	r18, 0x01	; 1
    1788:	31 09       	sbc	r19, r1
    178a:	89 2f       	mov	r24, r25
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	98 2f       	mov	r25, r24
    1790:	88 27       	eor	r24, r24
    1792:	82 0f       	add	r24, r18
    1794:	93 1f       	adc	r25, r19
    1796:	99 bd       	out	0x29, r25	; 41
    1798:	88 bd       	out	0x28, r24	; 40
			OCR1B =((uint32_t)((ICR1L) + ((uint16_t)ICR1H << 8))  * duty_percent) / 100;
		}
	}
	
	//[NOTE]: same as PWM0
	if (pwn_no & PWM3)
    179a:	c3 fd       	sbrc	r28, 3
    179c:	1b c0       	rjmp	.+54     	; 0x17d4 <pwm_setDuty+0xee>
    179e:	33 c0       	rjmp	.+102    	; 0x1806 <pwm_setDuty+0x120>
			OCR1B = ((ICR1L) + ((uint16_t)ICR1H << 8)) - 1;
		}
		else
		{
			//assign OCR1B(holds the compare value) to the duty cycle percentage 
			OCR1B =((uint32_t)((ICR1L) + ((uint16_t)ICR1H << 8))  * duty_percent) / 100;
    17a0:	86 b5       	in	r24, 0x26	; 38
    17a2:	27 b5       	in	r18, 0x27	; 39
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	32 2f       	mov	r19, r18
    17a8:	22 27       	eor	r18, r18
    17aa:	28 0f       	add	r18, r24
    17ac:	31 1d       	adc	r19, r1
    17ae:	ad 2f       	mov	r26, r29
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__umulhisi3>
    17b6:	24 e6       	ldi	r18, 0x64	; 100
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	50 e0       	ldi	r21, 0x00	; 0
    17be:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    17c2:	39 bd       	out	0x29, r19	; 41
    17c4:	28 bd       	out	0x28, r18	; 40
		}
	}
	
	//[NOTE]: same as PWM0
	if (pwn_no & PWM3)
    17c6:	c3 fd       	sbrc	r28, 3
    17c8:	08 c0       	rjmp	.+16     	; 0x17da <pwm_setDuty+0xf4>
    17ca:	1d c0       	rjmp	.+58     	; 0x1806 <pwm_setDuty+0x120>
    17cc:	c3 ff       	sbrs	r28, 3
    17ce:	1b c0       	rjmp	.+54     	; 0x1806 <pwm_setDuty+0x120>
	{
		if (duty_percent == 100) 
    17d0:	d4 36       	cpi	r29, 0x64	; 100
    17d2:	19 f4       	brne	.+6      	; 0x17da <pwm_setDuty+0xf4>
		{
			OCR2 = 255;
    17d4:	8f ef       	ldi	r24, 0xFF	; 255
    17d6:	83 bd       	out	0x23, r24	; 35
    17d8:	16 c0       	rjmp	.+44     	; 0x1806 <pwm_setDuty+0x120>
		}
		else
		{
			//assign OCR2(holds the compare value) to the duty cycle percentage
			OCR2 = (255 * (uint16_t)duty_percent) / 100;
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	d8 9f       	mul	r29, r24
    17de:	90 01       	movw	r18, r0
    17e0:	11 24       	eor	r1, r1
    17e2:	36 95       	lsr	r19
    17e4:	27 95       	ror	r18
    17e6:	36 95       	lsr	r19
    17e8:	27 95       	ror	r18
    17ea:	ab e7       	ldi	r26, 0x7B	; 123
    17ec:	b4 e1       	ldi	r27, 0x14	; 20
    17ee:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__umulhisi3>
    17f2:	96 95       	lsr	r25
    17f4:	87 95       	ror	r24
    17f6:	83 bd       	out	0x23, r24	; 35
    17f8:	06 c0       	rjmp	.+12     	; 0x1806 <pwm_setDuty+0x120>
		}
			
	}
	
	//[NOTE]: same as PWM1
	if (pwn_no & PWM2)    
    17fa:	c2 fd       	sbrc	r28, 2
    17fc:	c1 cf       	rjmp	.-126    	; 0x1780 <pwm_setDuty+0x9a>
    17fe:	e6 cf       	rjmp	.-52     	; 0x17cc <pwm_setDuty+0xe6>
    1800:	c2 fd       	sbrc	r28, 2
    1802:	ce cf       	rjmp	.-100    	; 0x17a0 <pwm_setDuty+0xba>
    1804:	e3 cf       	rjmp	.-58     	; 0x17cc <pwm_setDuty+0xe6>
			OCR2 = (255 * (uint16_t)duty_percent) / 100;
		}
			
	}

}
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <q_create_list>:
//1- create liap_list: a_size and a pointer to null
// the dynamic allocation happens inside this file not in the application file
q_list_t * q_create_list()
{
	//allocate a place for the start node
	q_list_t * ap_list =  malloc(sizeof(q_list_t));
    180c:	86 e0       	ldi	r24, 0x06	; 6
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <malloc>
	
	//initializing the elements of it
	ap_list->front = NULL;
    1814:	fc 01       	movw	r30, r24
    1816:	11 82       	std	Z+1, r1	; 0x01
    1818:	10 82       	st	Z, r1
	ap_list->rear = NULL;
    181a:	13 82       	std	Z+3, r1	; 0x03
    181c:	12 82       	std	Z+2, r1	; 0x02
	ap_list->size = 0;
    181e:	15 82       	std	Z+5, r1	; 0x05
    1820:	14 82       	std	Z+4, r1	; 0x04
	
	return ap_list;
}
    1822:	08 95       	ret

00001824 <q_push>:
{
    return ap_list->size;
}

void q_push(q_list_t *ap_list, void * element, uint8_t a_el_size)
{
    1824:	cf 92       	push	r12
    1826:	df 92       	push	r13
    1828:	ef 92       	push	r14
    182a:	ff 92       	push	r15
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	ec 01       	movw	r28, r24
    1836:	6b 01       	movw	r12, r22
    1838:	04 2f       	mov	r16, r20
}

static void * create_node(void * entry, uint8_t a_size)
{
	//allocate a node to be added to the list
	linked_node_t * tmp_node = malloc(sizeof(linked_node_t));//allocate a node to be added to the list
    183a:	84 e0       	ldi	r24, 0x04	; 4
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <malloc>
    1842:	7c 01       	movw	r14, r24
	
	//allocate an element that will contain the entry data
	tmp_node->p_element = malloc(a_size);
    1844:	10 e0       	ldi	r17, 0x00	; 0
    1846:	c8 01       	movw	r24, r16
    1848:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <malloc>
    184c:	f7 01       	movw	r30, r14
    184e:	91 83       	std	Z+1, r25	; 0x01
    1850:	80 83       	st	Z, r24
	//copy the data in *entry to the element side
	memcpy(tmp_node->p_element, entry, a_size);//(destination, source, a_el_size)
    1852:	a8 01       	movw	r20, r16
    1854:	b6 01       	movw	r22, r12
    1856:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <memcpy>

	tmp_node->next = NULL;
    185a:	f7 01       	movw	r30, r14
    185c:	13 82       	std	Z+3, r1	; 0x03
    185e:	12 82       	std	Z+2, r1	; 0x02
{
	//create a node that'll be contain the element and pushed to the list
    linked_node_t * p_new_node = create_node(element, a_el_size);

	//if its empty ..make the front and the rear point at the added node
    if (ap_list->size == 0) 
    1860:	8c 81       	ldd	r24, Y+4	; 0x04
    1862:	9d 81       	ldd	r25, Y+5	; 0x05
    1864:	89 2b       	or	r24, r25
    1866:	29 f4       	brne	.+10     	; 0x1872 <q_push+0x4e>
    {
        ap_list->front = p_new_node;
    1868:	f9 82       	std	Y+1, r15	; 0x01
    186a:	e8 82       	st	Y, r14
        ap_list->rear = p_new_node;
    186c:	fb 82       	std	Y+3, r15	; 0x03
    186e:	ea 82       	std	Y+2, r14	; 0x02
    1870:	0a c0       	rjmp	.+20     	; 0x1886 <q_push+0x62>
    }//if it's not empty ... add it at the rear side(make the rear point at it)
    else 
    {
        ap_list->rear->next = p_new_node;
    1872:	ea 81       	ldd	r30, Y+2	; 0x02
    1874:	fb 81       	ldd	r31, Y+3	; 0x03
    1876:	f3 82       	std	Z+3, r15	; 0x03
    1878:	e2 82       	std	Z+2, r14	; 0x02
        ap_list->rear = ap_list->rear->next;
    187a:	ea 81       	ldd	r30, Y+2	; 0x02
    187c:	fb 81       	ldd	r31, Y+3	; 0x03
    187e:	82 81       	ldd	r24, Z+2	; 0x02
    1880:	93 81       	ldd	r25, Z+3	; 0x03
    1882:	9b 83       	std	Y+3, r25	; 0x03
    1884:	8a 83       	std	Y+2, r24	; 0x02
    }
	
	//increment the size of the list by one
    ap_list->size += 1;
    1886:	8c 81       	ldd	r24, Y+4	; 0x04
    1888:	9d 81       	ldd	r25, Y+5	; 0x05
    188a:	01 96       	adiw	r24, 0x01	; 1
    188c:	9d 83       	std	Y+5, r25	; 0x05
    188e:	8c 83       	std	Y+4, r24	; 0x04
}
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	1f 91       	pop	r17
    1896:	0f 91       	pop	r16
    1898:	ff 90       	pop	r15
    189a:	ef 90       	pop	r14
    189c:	df 90       	pop	r13
    189e:	cf 90       	pop	r12
    18a0:	08 95       	ret

000018a2 <q_pop>:

uint8_t q_pop(q_list_t * ap_list, void * popped_e, uint16_t a_el_size)
{
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    //if it's empty .. return error
    if (ap_list->size == 0)
    18aa:	fc 01       	movw	r30, r24
    18ac:	24 81       	ldd	r18, Z+4	; 0x04
    18ae:	35 81       	ldd	r19, Z+5	; 0x05
    18b0:	23 2b       	or	r18, r19
    18b2:	f9 f0       	breq	.+62     	; 0x18f2 <q_pop+0x50>
    18b4:	9b 01       	movw	r18, r22
    18b6:	ec 01       	movw	r28, r24
    }
    else
    {
		/*copy the front node's element to the popped_e because we are going to 
		 free the front node after pop operation finishes*/
		memcpy(popped_e, ap_list->front->p_element, a_el_size);
    18b8:	01 90       	ld	r0, Z+
    18ba:	f0 81       	ld	r31, Z
    18bc:	e0 2d       	mov	r30, r0
    18be:	60 81       	ld	r22, Z
    18c0:	71 81       	ldd	r23, Z+1	; 0x01
    18c2:	c9 01       	movw	r24, r18
    18c4:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <memcpy>
		
		//define a pointer that points to the front node
		linked_node_t * tmp_node = ap_list->front;
    18c8:	08 81       	ld	r16, Y
    18ca:	19 81       	ldd	r17, Y+1	; 0x01
		
        //make the front pointer points to the next node
        ap_list->front = ap_list->front->next;
    18cc:	f8 01       	movw	r30, r16
    18ce:	82 81       	ldd	r24, Z+2	; 0x02
    18d0:	93 81       	ldd	r25, Z+3	; 0x03
    18d2:	99 83       	std	Y+1, r25	; 0x01
    18d4:	88 83       	st	Y, r24
		
		//free the node that was popped
		free(tmp_node->p_element);
    18d6:	80 81       	ld	r24, Z
    18d8:	91 81       	ldd	r25, Z+1	; 0x01
    18da:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <free>
		free(tmp_node);
    18de:	c8 01       	movw	r24, r16
    18e0:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <free>
		
		//decrement the list size
        ap_list->size -= 1;
    18e4:	8c 81       	ldd	r24, Y+4	; 0x04
    18e6:	9d 81       	ldd	r25, Y+5	; 0x05
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	9d 83       	std	Y+5, r25	; 0x05
    18ec:	8c 83       	std	Y+4, r24	; 0x04

        return TRUE;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <q_pop+0x52>
uint8_t q_pop(q_list_t * ap_list, void * popped_e, uint16_t a_el_size)
{
    //if it's empty .. return error
    if (ap_list->size == 0)
    {
        return ERROR;
    18f2:	8f ef       	ldi	r24, 0xFF	; 255
        ap_list->size -= 1;

        return TRUE;
    }

}
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	1f 91       	pop	r17
    18fa:	0f 91       	pop	r16
    18fc:	08 95       	ret

000018fe <__vector_12>:

#if defined(ATMEGA8) || defined(ATMEGA16) || defined(ATMEGA32)
static void ( * gp_spi_isr)(void) = NULL;

void CONFIG_SPI_ISR() // finished
{
    18fe:	1f 92       	push	r1
    1900:	0f 92       	push	r0
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	0f 92       	push	r0
    1906:	11 24       	eor	r1, r1
    1908:	2f 93       	push	r18
    190a:	3f 93       	push	r19
    190c:	4f 93       	push	r20
    190e:	5f 93       	push	r21
    1910:	6f 93       	push	r22
    1912:	7f 93       	push	r23
    1914:	8f 93       	push	r24
    1916:	9f 93       	push	r25
    1918:	af 93       	push	r26
    191a:	bf 93       	push	r27
    191c:	ef 93       	push	r30
    191e:	ff 93       	push	r31
	//-----------------------------------------------------------------------
	// we need to Global interrupt to prevent nested interrupt .
	cli();
    1920:	f8 94       	cli
	//-----------------------------------------------------------------------
	
	if (gp_spi_isr != NULL)
    1922:	e0 91 13 01 	lds	r30, 0x0113
    1926:	f0 91 14 01 	lds	r31, 0x0114
    192a:	30 97       	sbiw	r30, 0x00	; 0
    192c:	09 f0       	breq	.+2      	; 0x1930 <__vector_12+0x32>
	{
		gp_spi_isr();
    192e:	09 95       	icall
	}
	

	sei();
    1930:	78 94       	sei
}
    1932:	ff 91       	pop	r31
    1934:	ef 91       	pop	r30
    1936:	bf 91       	pop	r27
    1938:	af 91       	pop	r26
    193a:	9f 91       	pop	r25
    193c:	8f 91       	pop	r24
    193e:	7f 91       	pop	r23
    1940:	6f 91       	pop	r22
    1942:	5f 91       	pop	r21
    1944:	4f 91       	pop	r20
    1946:	3f 91       	pop	r19
    1948:	2f 91       	pop	r18
    194a:	0f 90       	pop	r0
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	0f 90       	pop	r0
    1950:	1f 90       	pop	r1
    1952:	18 95       	reti

00001954 <spi_init>:
void spi_init()
{	
	//if it's master set the SPI pins according to that 
#if (SPI_NODE_TYPE == SPI_MASTER)

	DIO_SET_DIR(MOSI, DIO_OUTPUT);
    1954:	61 e0       	ldi	r22, 0x01	; 1
    1956:	8d e0       	ldi	r24, 0x0D	; 13
    1958:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(SS, DIO_OUTPUT);
    195c:	61 e0       	ldi	r22, 0x01	; 1
    195e:	8c e0       	ldi	r24, 0x0C	; 12
    1960:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(SCK, DIO_OUTPUT);
    1964:	61 e0       	ldi	r22, 0x01	; 1
    1966:	8f e0       	ldi	r24, 0x0F	; 15
    1968:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	DIO_SET_DIR(MISO, DIO_INPUT);
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	8e e0       	ldi	r24, 0x0E	; 14
    1970:	0e 94 49 00 	call	0x92	; 0x92 <dio_set_pin_dir>
	SPCR = (1 << SPE) | (DATA_ORDER << DORD) | (1 << MSTR) | (POLARITY << CPOL)
    1974:	80 e5       	ldi	r24, 0x50	; 80
    1976:	8d b9       	out	0x0d, r24	; 13
	        | (PHASE << CPHA) | (SPR0_1 << SPR0);
	SPSR = (SPI2X << SPI2X);
    1978:	1e b8       	out	0x0e, r1	; 14
    197a:	08 95       	ret

0000197c <spi_send>:
}


void spi_send(unint8_t data)
{
	SPDR = data; //send data by SPI
    197c:	8f b9       	out	0x0f, r24	; 15

[Return] :returns true if data received, false if not
------------------------------------------------------------------------------*/
inline bool spi_int_stat()
{
    return ((BIT_IS_SET(SREG, I)) && (BIT_IS_SET(SPCR, SPIE)));
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	07 fe       	sbrs	r0, 7
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <spi_send+0xc>
    1984:	6f 99       	sbic	0x0d, 7	; 13
    1986:	02 c0       	rjmp	.+4      	; 0x198c <spi_send+0x10>
	exchanged so you have to check that the operation(exchange) completed before 
	reading the byte*/ 
	if (false == spi_int_stat())
	{
		
		while(BIT_IS_CLEAR(SPSR, SPIF))
    1988:	77 9b       	sbis	0x0e, 7	; 14
    198a:	fe cf       	rjmp	.-4      	; 0x1988 <spi_send+0xc>
    198c:	08 95       	ret

0000198e <spi_read>:
the user have to make his own method in the application layer*/
unint8_t spi_read(void)      
{
	//here in the master mode it sends a byte to the slave
#if (SPI_NODE_TYPE == SPI_MASTER)
	spi_send('1');
    198e:	81 e3       	ldi	r24, 0x31	; 49
    1990:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
		
	}
	
#endif

	return SPDR;
    1994:	8f b1       	in	r24, 0x0f	; 15
}
    1996:	08 95       	ret

00001998 <spi_send_str_size>:
	}
	
}

void spi_send_str_size(const unint8_t * ap_str, unint8_t a_size)
{
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
	//used for accessing string elements one by one
	unint8_t count = 0;
	
	//while the loop counter didn't reach the a_size of the ap_string
	while (count < a_size)
    19a0:	66 23       	and	r22, r22
    19a2:	71 f0       	breq	.+28     	; 0x19c0 <spi_send_str_size+0x28>
    19a4:	ec 01       	movw	r28, r24
    19a6:	61 50       	subi	r22, 0x01	; 1
    19a8:	06 2f       	mov	r16, r22
    19aa:	10 e0       	ldi	r17, 0x00	; 0
    19ac:	0f 5f       	subi	r16, 0xFF	; 255
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	08 0f       	add	r16, r24
    19b2:	19 1f       	adc	r17, r25
	{
		spi_send(ap_str[count]);
    19b4:	89 91       	ld	r24, Y+
    19b6:	0e 94 be 0c 	call	0x197c	; 0x197c <spi_send>
{
	//used for accessing string elements one by one
	unint8_t count = 0;
	
	//while the loop counter didn't reach the a_size of the ap_string
	while (count < a_size)
    19ba:	c0 17       	cp	r28, r16
    19bc:	d1 07       	cpc	r29, r17
    19be:	d1 f7       	brne	.-12     	; 0x19b4 <spi_send_str_size+0x1c>
	{
		spi_send(ap_str[count]);
		 count++;
	}
}
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	08 95       	ret

000019ca <spi_read_str_size>:
	//ap_str[count] = '\0';
}


void spi_read_str_size(unint8_t * ap_str, unint8_t a_size)
{
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
	//used for accessing ap_string elements one by one 
	unint8_t count = 0;
	
	//while the loop counter didn't reach the a_size of the ap_string
	while (count < a_size)
    19d2:	66 23       	and	r22, r22
    19d4:	71 f0       	breq	.+28     	; 0x19f2 <spi_read_str_size+0x28>
    19d6:	ec 01       	movw	r28, r24
    19d8:	61 50       	subi	r22, 0x01	; 1
    19da:	06 2f       	mov	r16, r22
    19dc:	10 e0       	ldi	r17, 0x00	; 0
    19de:	0f 5f       	subi	r16, 0xFF	; 255
    19e0:	1f 4f       	sbci	r17, 0xFF	; 255
    19e2:	08 0f       	add	r16, r24
    19e4:	19 1f       	adc	r17, r25
	{
		ap_str[count] = spi_read();
    19e6:	0e 94 c7 0c 	call	0x198e	; 0x198e <spi_read>
    19ea:	89 93       	st	Y+, r24
{
	//used for accessing ap_string elements one by one 
	unint8_t count = 0;
	
	//while the loop counter didn't reach the a_size of the ap_string
	while (count < a_size)
    19ec:	c0 17       	cp	r28, r16
    19ee:	d1 07       	cpc	r29, r17
    19f0:	d1 f7       	brne	.-12     	; 0x19e6 <spi_read_str_size+0x1c>
	{
		ap_str[count] = spi_read();
		count++;
	}
	
}
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	1f 91       	pop	r17
    19f8:	0f 91       	pop	r16
    19fa:	08 95       	ret

000019fc <usart_write_str_mark>:
                controls and issue uart operations.
-----------------------------------------------------------------------------*/
#include "uart_api.h"

void usart_write_str_mark(unint8_t a_usart_no, const unint8_t * ap_str, unint8_t a_mark)
{
    19fc:	ff 92       	push	r15
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	fb 01       	movw	r30, r22
	//used for accessing string elements one by one 
	unint8_t count = 0;
	
	//while we didn't reach end of ap_str character
	while(ap_str[count] != a_mark)
    1a08:	60 81       	ld	r22, Z
    1a0a:	64 17       	cp	r22, r20
    1a0c:	71 f0       	breq	.+28     	; 0x1a2a <usart_write_str_mark+0x2e>
    1a0e:	d4 2f       	mov	r29, r20
    1a10:	8f 01       	movw	r16, r30
    1a12:	f8 2e       	mov	r15, r24
    1a14:	c0 e0       	ldi	r28, 0x00	; 0
	{
		usart_write(a_usart_no, ap_str[count]);
    1a16:	8f 2d       	mov	r24, r15
    1a18:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <usart_write>
		count++;
    1a1c:	cf 5f       	subi	r28, 0xFF	; 255
{
	//used for accessing string elements one by one 
	unint8_t count = 0;
	
	//while we didn't reach end of ap_str character
	while(ap_str[count] != a_mark)
    1a1e:	f8 01       	movw	r30, r16
    1a20:	ec 0f       	add	r30, r28
    1a22:	f1 1d       	adc	r31, r1
    1a24:	60 81       	ld	r22, Z
    1a26:	6d 13       	cpse	r22, r29
    1a28:	f6 cf       	rjmp	.-20     	; 0x1a16 <usart_write_str_mark+0x1a>
	{
		usart_write(a_usart_no, ap_str[count]);
		count++;
	}
}
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	1f 91       	pop	r17
    1a30:	0f 91       	pop	r16
    1a32:	ff 90       	pop	r15
    1a34:	08 95       	ret

00001a36 <is_str_reached>:
{
	//determines if the specified word is reached
	bool b_found = false; 
	
	//if it matches the corresponding char in the str buffer
	if (a_tmp1 == ap_str[*ap_tmp])
    1a36:	fa 01       	movw	r30, r20
    1a38:	20 81       	ld	r18, Z
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	e2 0f       	add	r30, r18
    1a3e:	f1 1d       	adc	r31, r1
    1a40:	30 81       	ld	r19, Z
    1a42:	36 13       	cpse	r19, r22
    1a44:	0c c0       	rjmp	.+24     	; 0x1a5e <is_str_reached+0x28>
	{
		*ap_tmp = *ap_tmp + 1; //move to the next position
    1a46:	2f 5f       	subi	r18, 0xFF	; 255
    1a48:	fa 01       	movw	r30, r20
    1a4a:	20 83       	st	Z, r18
		
		if (ap_str[*ap_tmp] == 0) // if the null is reached(the word is found)
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	e2 0f       	add	r30, r18
    1a50:	f1 1d       	adc	r31, r1
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 81       	ld	r25, Z
    1a56:	99 23       	and	r25, r25
    1a58:	71 f0       	breq	.+28     	; 0x1a76 <is_str_reached+0x40>
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	08 95       	ret
	else 
	{
		/*check if the char in the tmp in tmp_str position is the same as
		  the first character in str if so then store it in the first 
		  position and then make tmp = 1*/
		if (a_tmp1 == ap_str[0])
    1a5e:	fc 01       	movw	r30, r24
    1a60:	80 81       	ld	r24, Z
    1a62:	86 13       	cpse	r24, r22
    1a64:	05 c0       	rjmp	.+10     	; 0x1a70 <is_str_reached+0x3a>
		{
			*ap_tmp = 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	fa 01       	movw	r30, r20
    1a6a:	80 83       	st	Z, r24


bool is_str_reached(char * ap_str, unint8_t a_tmp1, unint8_t * ap_tmp)
{
	//determines if the specified word is reached
	bool b_found = false; 
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	08 95       	ret
			*ap_tmp = 1;
		}//if not the same as the first char in str position then omit it
		else 
		{
			//start saving again from the beginning
			*ap_tmp = 0;
    1a70:	fa 01       	movw	r30, r20
    1a72:	10 82       	st	Z, r1


bool is_str_reached(char * ap_str, unint8_t a_tmp1, unint8_t * ap_tmp)
{
	//determines if the specified word is reached
	bool b_found = false; 
    1a74:	80 e0       	ldi	r24, 0x00	; 0
		}

	}
	
	return b_found;
}
    1a76:	08 95       	ret

00001a78 <check_strings>:
}



uint8_t check_strings(unint16_t millis_time, int16_t str_count, ...)
{
    1a78:	2f 92       	push	r2
    1a7a:	3f 92       	push	r3
    1a7c:	4f 92       	push	r4
    1a7e:	5f 92       	push	r5
    1a80:	6f 92       	push	r6
    1a82:	7f 92       	push	r7
    1a84:	8f 92       	push	r8
    1a86:	9f 92       	push	r9
    1a88:	af 92       	push	r10
    1a8a:	bf 92       	push	r11
    1a8c:	cf 92       	push	r12
    1a8e:	df 92       	push	r13
    1a90:	ef 92       	push	r14
    1a92:	ff 92       	push	r15
    1a94:	0f 93       	push	r16
    1a96:	1f 93       	push	r17
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	ed 88       	ldd	r14, Y+21	; 0x15
    1aa2:	fe 88       	ldd	r15, Y+22	; 0x16
    1aa4:	0f 89       	ldd	r16, Y+23	; 0x17
    1aa6:	18 8d       	ldd	r17, Y+24	; 0x18
	}
	
	millis_disable_tmr();
	
	return b_found;
}
    1aa8:	8d b6       	in	r8, 0x3d	; 61
    1aaa:	9e b6       	in	r9, 0x3e	; 62


uint8_t check_strings(unint16_t millis_time, int16_t str_count, ...)
{
	//the list of strings to be checked
	char * str_list[str_count];
    1aac:	c8 01       	movw	r24, r16
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	2d b7       	in	r18, 0x3d	; 61
    1ab4:	3e b7       	in	r19, 0x3e	; 62
    1ab6:	28 1b       	sub	r18, r24
    1ab8:	39 0b       	sbc	r19, r25
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	3e bf       	out	0x3e, r19	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	2d bf       	out	0x3d, r18	; 61
    1ac4:	8d b7       	in	r24, 0x3d	; 61
    1ac6:	9e b7       	in	r25, 0x3e	; 62
    1ac8:	01 96       	adiw	r24, 0x01	; 1
    1aca:	6c 01       	movw	r12, r24
	//holds counters  of the strings .. needed for is_str_reached function 
	uint8_t str_counters[str_count];
    1acc:	20 1b       	sub	r18, r16
    1ace:	31 0b       	sbc	r19, r17
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	3e bf       	out	0x3e, r19	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	2d bf       	out	0x3d, r18	; 61
    1ada:	8d b7       	in	r24, 0x3d	; 61
    1adc:	9e b7       	in	r25, 0x3e	; 62
    1ade:	01 96       	adiw	r24, 0x01	; 1
    1ae0:	5c 01       	movw	r10, r24
	//it's like a token identifying a specific variable parameters list 
	va_list ap;
	//assigning str_count to be the variable parameter counter of ap
	va_start(ap, str_count);
	
	for (uint8_t i = 0; i < str_count; i++ )
    1ae2:	10 16       	cp	r1, r16
    1ae4:	11 06       	cpc	r1, r17
    1ae6:	b4 f4       	brge	.+44     	; 0x1b14 <check_strings+0x9c>
    1ae8:	de 01       	movw	r26, r28
    1aea:	59 96       	adiw	r26, 0x19	; 25
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	20 e0       	ldi	r18, 0x00	; 0
	{
		//putting each string parameter in the str_list string by it's order
		str_list[i] = va_arg(ap, char *);
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	f6 01       	movw	r30, r12
    1af8:	e8 0f       	add	r30, r24
    1afa:	f9 1f       	adc	r31, r25
    1afc:	8d 91       	ld	r24, X+
    1afe:	9c 91       	ld	r25, X
    1b00:	11 97       	sbiw	r26, 0x01	; 1
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	80 83       	st	Z, r24
	//it's like a token identifying a specific variable parameters list 
	va_list ap;
	//assigning str_count to be the variable parameter counter of ap
	va_start(ap, str_count);
	
	for (uint8_t i = 0; i < str_count; i++ )
    1b06:	2f 5f       	subi	r18, 0xFF	; 255
    1b08:	82 2f       	mov	r24, r18
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
	{
		//putting each string parameter in the str_list string by it's order
		str_list[i] = va_arg(ap, char *);
    1b0c:	12 96       	adiw	r26, 0x02	; 2
	//it's like a token identifying a specific variable parameters list 
	va_list ap;
	//assigning str_count to be the variable parameter counter of ap
	va_start(ap, str_count);
	
	for (uint8_t i = 0; i < str_count; i++ )
    1b0e:	80 17       	cp	r24, r16
    1b10:	91 07       	cpc	r25, r17
    1b12:	7c f3       	brlt	.-34     	; 0x1af2 <check_strings+0x7a>
		//there is data to receive
		if (BIT_IS_SET(UCSRA, RXC)) 
		{
			tmp = UDR;          
			
			for (uint8_t i = 0; i < str_count; i++ )
    1b14:	71 2c       	mov	r7, r1
    1b16:	21 2c       	mov	r2, r1
    1b18:	31 2c       	mov	r3, r1
    1b1a:	41 2c       	mov	r4, r1
    1b1c:	22 c0       	rjmp	.+68     	; 0x1b62 <check_strings+0xea>
	
	//keep looping until either timeout or word found
	while ((millis(millis_time)) && (!b_found)) 
	{
		//there is data to receive
		if (BIT_IS_SET(UCSRA, RXC)) 
    1b1e:	5f 9b       	sbis	0x0b, 7	; 11
    1b20:	20 c0       	rjmp	.+64     	; 0x1b62 <check_strings+0xea>
		{
			tmp = UDR;          
    1b22:	5c b0       	in	r5, 0x0c	; 12
			
			for (uint8_t i = 0; i < str_count; i++ )
    1b24:	10 16       	cp	r1, r16
    1b26:	11 06       	cpc	r1, r17
    1b28:	e4 f4       	brge	.+56     	; 0x1b62 <check_strings+0xea>
    1b2a:	82 2d       	mov	r24, r2
    1b2c:	93 2d       	mov	r25, r3
    1b2e:	64 2c       	mov	r6, r4
			{
				// check if the received char is the last char in str
				if (is_str_reached(str_list[i], tmp, &str_counters[i])) 
    1b30:	a5 01       	movw	r20, r10
    1b32:	48 0f       	add	r20, r24
    1b34:	59 1f       	adc	r21, r25
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	f6 01       	movw	r30, r12
    1b3c:	e8 0f       	add	r30, r24
    1b3e:	f9 1f       	adc	r31, r25
    1b40:	65 2d       	mov	r22, r5
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <is_str_reached>
    1b4a:	88 23       	and	r24, r24
    1b4c:	21 f0       	breq	.+8      	; 0x1b56 <check_strings+0xde>
				{
					b_found = i + 1;
    1b4e:	77 24       	eor	r7, r7
    1b50:	73 94       	inc	r7
    1b52:	76 0c       	add	r7, r6
					
					break;
    1b54:	06 c0       	rjmp	.+12     	; 0x1b62 <check_strings+0xea>
		//there is data to receive
		if (BIT_IS_SET(UCSRA, RXC)) 
		{
			tmp = UDR;          
			
			for (uint8_t i = 0; i < str_count; i++ )
    1b56:	63 94       	inc	r6
    1b58:	86 2d       	mov	r24, r6
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	80 17       	cp	r24, r16
    1b5e:	91 07       	cpc	r25, r17
    1b60:	3c f3       	brlt	.-50     	; 0x1b30 <check_strings+0xb8>
	/*used for deciding the next position in the tmp_str for storing the 
	  received char from UART*/ 
	unint8_t tmp = 0;       
	
	//keep looping until either timeout or word found
	while ((millis(millis_time)) && (!b_found)) 
    1b62:	c7 01       	movw	r24, r14
    1b64:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <millis>
    1b68:	88 23       	and	r24, r24
    1b6a:	11 f0       	breq	.+4      	; 0x1b70 <check_strings+0xf8>
    1b6c:	77 20       	and	r7, r7
    1b6e:	b9 f2       	breq	.-82     	; 0x1b1e <check_strings+0xa6>
			
		}
		
	}
	
	millis_disable_tmr();
    1b70:	0e 94 c0 08 	call	0x1180	; 0x1180 <millis_disable_tmr>
	
	return b_found;
}
    1b74:	87 2d       	mov	r24, r7
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	f8 94       	cli
    1b7a:	9e be       	out	0x3e, r9	; 62
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	8d be       	out	0x3d, r8	; 61
    1b80:	df 91       	pop	r29
    1b82:	cf 91       	pop	r28
    1b84:	1f 91       	pop	r17
    1b86:	0f 91       	pop	r16
    1b88:	ff 90       	pop	r15
    1b8a:	ef 90       	pop	r14
    1b8c:	df 90       	pop	r13
    1b8e:	cf 90       	pop	r12
    1b90:	bf 90       	pop	r11
    1b92:	af 90       	pop	r10
    1b94:	9f 90       	pop	r9
    1b96:	8f 90       	pop	r8
    1b98:	7f 90       	pop	r7
    1b9a:	6f 90       	pop	r6
    1b9c:	5f 90       	pop	r5
    1b9e:	4f 90       	pop	r4
    1ba0:	3f 90       	pop	r3
    1ba2:	2f 90       	pop	r2
    1ba4:	08 95       	ret

00001ba6 <__vector_15>:
static void ( * gp_usart_txc_isr)(void)  = NULL;
static void ( * gp_usart_rxc_isr)(void)  = NULL;
static void ( * gp_usart_udre_isr)(void) = NULL;

void CONFIG_TXC_ISR() // finished
{
    1ba6:	1f 92       	push	r1
    1ba8:	0f 92       	push	r0
    1baa:	0f b6       	in	r0, 0x3f	; 63
    1bac:	0f 92       	push	r0
    1bae:	11 24       	eor	r1, r1
    1bb0:	2f 93       	push	r18
    1bb2:	3f 93       	push	r19
    1bb4:	4f 93       	push	r20
    1bb6:	5f 93       	push	r21
    1bb8:	6f 93       	push	r22
    1bba:	7f 93       	push	r23
    1bbc:	8f 93       	push	r24
    1bbe:	9f 93       	push	r25
    1bc0:	af 93       	push	r26
    1bc2:	bf 93       	push	r27
    1bc4:	ef 93       	push	r30
    1bc6:	ff 93       	push	r31
	//-----------------------------------------------------------------------
	// we need to Global interrupt to prevent nested interrupt .
	cli();
    1bc8:	f8 94       	cli
	//-----------------------------------------------------------------------
	
	if (gp_usart_txc_isr != NULL)
    1bca:	e0 91 19 01 	lds	r30, 0x0119
    1bce:	f0 91 1a 01 	lds	r31, 0x011A
    1bd2:	30 97       	sbiw	r30, 0x00	; 0
    1bd4:	09 f0       	breq	.+2      	; 0x1bd8 <__vector_15+0x32>
	{
		gp_usart_txc_isr();
    1bd6:	09 95       	icall
	}

	sei();
    1bd8:	78 94       	sei
}
    1bda:	ff 91       	pop	r31
    1bdc:	ef 91       	pop	r30
    1bde:	bf 91       	pop	r27
    1be0:	af 91       	pop	r26
    1be2:	9f 91       	pop	r25
    1be4:	8f 91       	pop	r24
    1be6:	7f 91       	pop	r23
    1be8:	6f 91       	pop	r22
    1bea:	5f 91       	pop	r21
    1bec:	4f 91       	pop	r20
    1bee:	3f 91       	pop	r19
    1bf0:	2f 91       	pop	r18
    1bf2:	0f 90       	pop	r0
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	0f 90       	pop	r0
    1bf8:	1f 90       	pop	r1
    1bfa:	18 95       	reti

00001bfc <__vector_13>:
//=============================================================================
void CONFIG_RXC_ISR()
{
    1bfc:	1f 92       	push	r1
    1bfe:	0f 92       	push	r0
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	0f 92       	push	r0
    1c04:	11 24       	eor	r1, r1
    1c06:	2f 93       	push	r18
    1c08:	3f 93       	push	r19
    1c0a:	4f 93       	push	r20
    1c0c:	5f 93       	push	r21
    1c0e:	6f 93       	push	r22
    1c10:	7f 93       	push	r23
    1c12:	8f 93       	push	r24
    1c14:	9f 93       	push	r25
    1c16:	af 93       	push	r26
    1c18:	bf 93       	push	r27
    1c1a:	ef 93       	push	r30
    1c1c:	ff 93       	push	r31
	
	//-------------------------------------------------------------------
	// we need to Global interrupt to prevent nested interrupt .
	cli();
    1c1e:	f8 94       	cli
	//-------------------------------------------------------------------
	
	if (gp_usart_rxc_isr != NULL)
    1c20:	e0 91 17 01 	lds	r30, 0x0117
    1c24:	f0 91 18 01 	lds	r31, 0x0118
    1c28:	30 97       	sbiw	r30, 0x00	; 0
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <__vector_13+0x32>
	{
		gp_usart_rxc_isr();
    1c2c:	09 95       	icall
	}
	
	sei();
    1c2e:	78 94       	sei

}
    1c30:	ff 91       	pop	r31
    1c32:	ef 91       	pop	r30
    1c34:	bf 91       	pop	r27
    1c36:	af 91       	pop	r26
    1c38:	9f 91       	pop	r25
    1c3a:	8f 91       	pop	r24
    1c3c:	7f 91       	pop	r23
    1c3e:	6f 91       	pop	r22
    1c40:	5f 91       	pop	r21
    1c42:	4f 91       	pop	r20
    1c44:	3f 91       	pop	r19
    1c46:	2f 91       	pop	r18
    1c48:	0f 90       	pop	r0
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	0f 90       	pop	r0
    1c4e:	1f 90       	pop	r1
    1c50:	18 95       	reti

00001c52 <__vector_14>:
*/
void CONFIG_UDRE_ISR() // finished
{
	//---------------------------------------------------------
	// we need to Global interrupt to prevent nested interrupt .
	cli();
    1c52:	f8 94       	cli
	//---------------------------------------------------------
	//thus we clear it before each transmission that when the transmission
	//completes UDRE = 1, we clear it before each reception
	SET_BIT(UCSRA, UDRE); 
    1c54:	5d 9a       	sbi	0x0b, 5	; 11
	//------------------------------------------------------------
	// API ISR:
	//------------------------------------------------------------
	
	if (gp_usart_udre_isr != NULL)
    1c56:	e0 91 15 01 	lds	r30, 0x0115
    1c5a:	f0 91 16 01 	lds	r31, 0x0116
    1c5e:	30 97       	sbiw	r30, 0x00	; 0
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <__vector_14+0x12>
	{
		gp_usart_udre_isr();
    1c62:	09 95       	icall
	}
	

	sei();
    1c64:	78 94       	sei
    1c66:	08 95       	ret

00001c68 <usart_init>:

/***************************************************/
void usart_init (uint8_t a_usart_no, uint32_t a_baud_rate, uint8_t a_data_size,
                      uint8_t a_tx_or_rx, uint8_t a_parity, uint8_t a_stop_bits, 
					         uint8_t a_sample_phase)
{
    1c68:	af 92       	push	r10
    1c6a:	cf 92       	push	r12
    1c6c:	ef 92       	push	r14
    1c6e:	ff 92       	push	r15
    1c70:	0f 93       	push	r16
    1c72:	cf 93       	push	r28
    1c74:	c2 2f       	mov	r28, r18
    if (USART0 == a_usart_no)
    1c76:	81 11       	cpse	r24, r1
    1c78:	42 c0       	rjmp	.+132    	; 0x1cfe <usart_init+0x96>
	{
		/*calculate UBBR value the formula is 
		(CPU_FREQUENCY / (16_OR_8 * BAUD RATE))-1 
		*/
		unint16_t UBBR_value = FIXP_DIV(FIXP_FREQ, FIXP_MUL(FIXP_8_16, FIXP_BAUD, 
    1c7a:	db 01       	movw	r26, r22
    1c7c:	ca 01       	movw	r24, r20
    1c7e:	88 0f       	add	r24, r24
    1c80:	99 1f       	adc	r25, r25
    1c82:	aa 1f       	adc	r26, r26
    1c84:	bb 1f       	adc	r27, r27
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	aa 1f       	adc	r26, r26
    1c8c:	bb 1f       	adc	r27, r27
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	aa 1f       	adc	r26, r26
    1c94:	bb 1f       	adc	r27, r27
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	aa 1f       	adc	r26, r26
    1c9c:	bb 1f       	adc	r27, r27
    1c9e:	9c 01       	movw	r18, r24
    1ca0:	ad 01       	movw	r20, r26
    1ca2:	20 7f       	andi	r18, 0xF0	; 240
    1ca4:	5f 77       	andi	r21, 0x7F	; 127
    1ca6:	60 e0       	ldi	r22, 0x00	; 0
    1ca8:	78 e4       	ldi	r23, 0x48	; 72
    1caa:	88 ee       	ldi	r24, 0xE8	; 232
    1cac:	91 e0       	ldi	r25, 0x01	; 1
    1cae:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <__udivmodsi4>
    1cb2:	22 50       	subi	r18, 0x02	; 2
    1cb4:	31 09       	sbc	r19, r1
							   - (1 << UART_PRECISION_BITS);
											
		/*if the precision bit is 0.1 in binary meaning 0.5 in decimal we 
		  should round up
		*/									
		if ((UBBR_value & 1)) 
    1cb6:	20 ff       	sbrs	r18, 0
    1cb8:	05 c0       	rjmp	.+10     	; 0x1cc4 <usart_init+0x5c>
		{
			//remove the precision bit and round up
			UBBR_value = (UBBR_value >> 1) + 1;
    1cba:	36 95       	lsr	r19
    1cbc:	27 95       	ror	r18
    1cbe:	2f 5f       	subi	r18, 0xFF	; 255
    1cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <usart_init+0x60>
		}  //else if the precision bit is not 0.1 in binary meaning less than 0.5 
		else //in decimal we should round down
		    
		{
			/*round down by just removing the precision bit*/
			UBBR_value >>= UART_PRECISION_BITS; 
    1cc4:	36 95       	lsr	r19
    1cc6:	27 95       	ror	r18
		}                                        
	
		//PORTB = UBBR_value; just for testing
		//setting the U2X bit to 1 for double speed asynchronous
		UCSRA = (DOUBLE_SPEED << U2X);	
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	8b b9       	out	0x0b, r24	; 11
			* RXEN  = 1/0 Receiver En/Disable
			* TXEN  = 1/0 Transmitter En/DisEnable
			* UCSZ2 = 0   For 8-bit data mode
			* RXB8 & TXB8 not used for 8-bit data mode
			*******************************************************************/ 
		UCSRB = (a_tx_or_rx << RXEN_TXEN) | (a_data_size & (1 << 2));
    1ccc:	00 0f       	add	r16, r16
    1cce:	00 0f       	add	r16, r16
    1cd0:	00 0f       	add	r16, r16
    1cd2:	8c 2f       	mov	r24, r28
    1cd4:	84 70       	andi	r24, 0x04	; 4
    1cd6:	08 2b       	or	r16, r24
    1cd8:	0a b9       	out	0x0a, r16	; 10
    1cda:	8a 2d       	mov	r24, r10
    1cdc:	80 68       	ori	r24, 0x80	; 128
			* UPM1:0  = 0 Disable parity bit
			* USBS    = 0 One stop bit
			* UCSZ1:0 = 11 For 8-bit data mode
			* UCPOL   = 0 Used with the Synchronous operation only
			***********************************************************************/ 
		UCSRC = (1 << URSEL) | (a_parity << UPM_0_1) | (a_stop_bits << USBS) | 
    1cde:	cc 0c       	add	r12, r12
    1ce0:	cc 0c       	add	r12, r12
    1ce2:	cc 0c       	add	r12, r12
    1ce4:	ac 2c       	mov	r10, r12
    1ce6:	a8 2a       	or	r10, r24
    1ce8:	80 e1       	ldi	r24, 0x10	; 16
    1cea:	e8 9e       	mul	r14, r24
    1cec:	70 01       	movw	r14, r0
    1cee:	11 24       	eor	r1, r1
    1cf0:	ea 28       	or	r14, r10
		             ((a_data_size & 0x03) << UCSZ_0_1) | (a_sample_phase << UCPOL);
    1cf2:	c3 70       	andi	r28, 0x03	; 3
    1cf4:	cc 0f       	add	r28, r28
			* UPM1:0  = 0 Disable parity bit
			* USBS    = 0 One stop bit
			* UCSZ1:0 = 11 For 8-bit data mode
			* UCPOL   = 0 Used with the Synchronous operation only
			***********************************************************************/ 
		UCSRC = (1 << URSEL) | (a_parity << UPM_0_1) | (a_stop_bits << USBS) | 
    1cf6:	ec 2a       	or	r14, r28
    1cf8:	e0 bc       	out	0x20, r14	; 32
		             ((a_data_size & 0x03) << UCSZ_0_1) | (a_sample_phase << UCPOL);
 	
		//Put the upper part of the UBBR value here (bits 8 to 11)
		UBRRH = (unint8_t)(UBBR_value >> 8);
    1cfa:	30 bd       	out	0x20, r19	; 32
		//Put the remaining part of the UBBR value here
		UBRRL = (unint8_t)UBBR_value;
    1cfc:	29 b9       	out	0x09, r18	; 9
	}

}
    1cfe:	cf 91       	pop	r28
    1d00:	0f 91       	pop	r16
    1d02:	ff 90       	pop	r15
    1d04:	ef 90       	pop	r14
    1d06:	cf 90       	pop	r12
    1d08:	af 90       	pop	r10
    1d0a:	08 95       	ret

00001d0c <usart_write>:
	/* UDRE flag is set when the TX buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one 
	 */
	//#if(DATA_REGISTER_EMPTY_INTERRUP==0)
	//if the send interrupt is not activated keep the flag polling
	if (BIT_IS_CLEAR(UCSRB, UDRIE))
    1d0c:	55 99       	sbic	0x0a, 5	; 10
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <usart_write+0x8>
	{
		while (BIT_IS_CLEAR(UCSRA,UDRE))
    1d10:	5d 9b       	sbis	0x0b, 5	; 11
    1d12:	fe cf       	rjmp	.-4      	; 0x1d10 <usart_write+0x4>
	}

	
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	
	UDR = data;
    1d14:	6c b9       	out	0x0c, r22	; 12
    1d16:	08 95       	ret

00001d18 <usart_set_rx_int>:
}

void usart_set_rx_int (unint8_t a_usart_no, bool b_state)
{
	
	if (USART0 == a_usart_no)
    1d18:	81 11       	cpse	r24, r1
    1d1a:	08 c0       	rjmp	.+16     	; 0x1d2c <usart_set_rx_int+0x14>
	{
		//if b_state was true then set the bit otherwise clear it
		UCSRB = ((b_state) ? UCSRB | (1 << RXCIE) : UCSRB & ~(1 << RXCIE));
    1d1c:	66 23       	and	r22, r22
    1d1e:	19 f0       	breq	.+6      	; 0x1d26 <usart_set_rx_int+0xe>
    1d20:	8a b1       	in	r24, 0x0a	; 10
    1d22:	80 68       	ori	r24, 0x80	; 128
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <usart_set_rx_int+0x12>
    1d26:	8a b1       	in	r24, 0x0a	; 10
    1d28:	8f 77       	andi	r24, 0x7F	; 127
    1d2a:	8a b9       	out	0x0a, r24	; 10
    1d2c:	08 95       	ret

00001d2e <usart_set_rx_isr>:
{
	/*
	  assign the function that the user wrote to be the RX ISR to the function
	  that will be actually called when the interrupt occurs.
	*/
	gp_usart_rxc_isr = ap_usart_rx_function;
    1d2e:	70 93 18 01 	sts	0x0118, r23
    1d32:	60 93 17 01 	sts	0x0117, r22
    1d36:	08 95       	ret

00001d38 <__udivmodsi4>:
    1d38:	a1 e2       	ldi	r26, 0x21	; 33
    1d3a:	1a 2e       	mov	r1, r26
    1d3c:	aa 1b       	sub	r26, r26
    1d3e:	bb 1b       	sub	r27, r27
    1d40:	fd 01       	movw	r30, r26
    1d42:	0d c0       	rjmp	.+26     	; 0x1d5e <__udivmodsi4_ep>

00001d44 <__udivmodsi4_loop>:
    1d44:	aa 1f       	adc	r26, r26
    1d46:	bb 1f       	adc	r27, r27
    1d48:	ee 1f       	adc	r30, r30
    1d4a:	ff 1f       	adc	r31, r31
    1d4c:	a2 17       	cp	r26, r18
    1d4e:	b3 07       	cpc	r27, r19
    1d50:	e4 07       	cpc	r30, r20
    1d52:	f5 07       	cpc	r31, r21
    1d54:	20 f0       	brcs	.+8      	; 0x1d5e <__udivmodsi4_ep>
    1d56:	a2 1b       	sub	r26, r18
    1d58:	b3 0b       	sbc	r27, r19
    1d5a:	e4 0b       	sbc	r30, r20
    1d5c:	f5 0b       	sbc	r31, r21

00001d5e <__udivmodsi4_ep>:
    1d5e:	66 1f       	adc	r22, r22
    1d60:	77 1f       	adc	r23, r23
    1d62:	88 1f       	adc	r24, r24
    1d64:	99 1f       	adc	r25, r25
    1d66:	1a 94       	dec	r1
    1d68:	69 f7       	brne	.-38     	; 0x1d44 <__udivmodsi4_loop>
    1d6a:	60 95       	com	r22
    1d6c:	70 95       	com	r23
    1d6e:	80 95       	com	r24
    1d70:	90 95       	com	r25
    1d72:	9b 01       	movw	r18, r22
    1d74:	ac 01       	movw	r20, r24
    1d76:	bd 01       	movw	r22, r26
    1d78:	cf 01       	movw	r24, r30
    1d7a:	08 95       	ret

00001d7c <__umulhisi3>:
    1d7c:	a2 9f       	mul	r26, r18
    1d7e:	b0 01       	movw	r22, r0
    1d80:	b3 9f       	mul	r27, r19
    1d82:	c0 01       	movw	r24, r0
    1d84:	a3 9f       	mul	r26, r19
    1d86:	70 0d       	add	r23, r0
    1d88:	81 1d       	adc	r24, r1
    1d8a:	11 24       	eor	r1, r1
    1d8c:	91 1d       	adc	r25, r1
    1d8e:	b2 9f       	mul	r27, r18
    1d90:	70 0d       	add	r23, r0
    1d92:	81 1d       	adc	r24, r1
    1d94:	11 24       	eor	r1, r1
    1d96:	91 1d       	adc	r25, r1
    1d98:	08 95       	ret

00001d9a <malloc>:
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	82 30       	cpi	r24, 0x02	; 2
    1da0:	91 05       	cpc	r25, r1
    1da2:	10 f4       	brcc	.+4      	; 0x1da8 <malloc+0xe>
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	e0 91 2c 01 	lds	r30, 0x012C
    1dac:	f0 91 2d 01 	lds	r31, 0x012D
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	c0 e0       	ldi	r28, 0x00	; 0
    1db6:	d0 e0       	ldi	r29, 0x00	; 0
    1db8:	30 97       	sbiw	r30, 0x00	; 0
    1dba:	11 f1       	breq	.+68     	; 0x1e00 <malloc+0x66>
    1dbc:	40 81       	ld	r20, Z
    1dbe:	51 81       	ldd	r21, Z+1	; 0x01
    1dc0:	48 17       	cp	r20, r24
    1dc2:	59 07       	cpc	r21, r25
    1dc4:	c0 f0       	brcs	.+48     	; 0x1df6 <malloc+0x5c>
    1dc6:	48 17       	cp	r20, r24
    1dc8:	59 07       	cpc	r21, r25
    1dca:	61 f4       	brne	.+24     	; 0x1de4 <malloc+0x4a>
    1dcc:	82 81       	ldd	r24, Z+2	; 0x02
    1dce:	93 81       	ldd	r25, Z+3	; 0x03
    1dd0:	20 97       	sbiw	r28, 0x00	; 0
    1dd2:	19 f0       	breq	.+6      	; 0x1dda <malloc+0x40>
    1dd4:	9b 83       	std	Y+3, r25	; 0x03
    1dd6:	8a 83       	std	Y+2, r24	; 0x02
    1dd8:	2b c0       	rjmp	.+86     	; 0x1e30 <malloc+0x96>
    1dda:	90 93 2d 01 	sts	0x012D, r25
    1dde:	80 93 2c 01 	sts	0x012C, r24
    1de2:	26 c0       	rjmp	.+76     	; 0x1e30 <malloc+0x96>
    1de4:	21 15       	cp	r18, r1
    1de6:	31 05       	cpc	r19, r1
    1de8:	19 f0       	breq	.+6      	; 0x1df0 <malloc+0x56>
    1dea:	42 17       	cp	r20, r18
    1dec:	53 07       	cpc	r21, r19
    1dee:	18 f4       	brcc	.+6      	; 0x1df6 <malloc+0x5c>
    1df0:	9a 01       	movw	r18, r20
    1df2:	be 01       	movw	r22, r28
    1df4:	df 01       	movw	r26, r30
    1df6:	ef 01       	movw	r28, r30
    1df8:	02 80       	ldd	r0, Z+2	; 0x02
    1dfa:	f3 81       	ldd	r31, Z+3	; 0x03
    1dfc:	e0 2d       	mov	r30, r0
    1dfe:	dc cf       	rjmp	.-72     	; 0x1db8 <malloc+0x1e>
    1e00:	21 15       	cp	r18, r1
    1e02:	31 05       	cpc	r19, r1
    1e04:	09 f1       	breq	.+66     	; 0x1e48 <malloc+0xae>
    1e06:	28 1b       	sub	r18, r24
    1e08:	39 0b       	sbc	r19, r25
    1e0a:	24 30       	cpi	r18, 0x04	; 4
    1e0c:	31 05       	cpc	r19, r1
    1e0e:	90 f4       	brcc	.+36     	; 0x1e34 <malloc+0x9a>
    1e10:	12 96       	adiw	r26, 0x02	; 2
    1e12:	8d 91       	ld	r24, X+
    1e14:	9c 91       	ld	r25, X
    1e16:	13 97       	sbiw	r26, 0x03	; 3
    1e18:	61 15       	cp	r22, r1
    1e1a:	71 05       	cpc	r23, r1
    1e1c:	21 f0       	breq	.+8      	; 0x1e26 <malloc+0x8c>
    1e1e:	fb 01       	movw	r30, r22
    1e20:	93 83       	std	Z+3, r25	; 0x03
    1e22:	82 83       	std	Z+2, r24	; 0x02
    1e24:	04 c0       	rjmp	.+8      	; 0x1e2e <malloc+0x94>
    1e26:	90 93 2d 01 	sts	0x012D, r25
    1e2a:	80 93 2c 01 	sts	0x012C, r24
    1e2e:	fd 01       	movw	r30, r26
    1e30:	32 96       	adiw	r30, 0x02	; 2
    1e32:	44 c0       	rjmp	.+136    	; 0x1ebc <malloc+0x122>
    1e34:	fd 01       	movw	r30, r26
    1e36:	e2 0f       	add	r30, r18
    1e38:	f3 1f       	adc	r31, r19
    1e3a:	81 93       	st	Z+, r24
    1e3c:	91 93       	st	Z+, r25
    1e3e:	22 50       	subi	r18, 0x02	; 2
    1e40:	31 09       	sbc	r19, r1
    1e42:	2d 93       	st	X+, r18
    1e44:	3c 93       	st	X, r19
    1e46:	3a c0       	rjmp	.+116    	; 0x1ebc <malloc+0x122>
    1e48:	20 91 2a 01 	lds	r18, 0x012A
    1e4c:	30 91 2b 01 	lds	r19, 0x012B
    1e50:	23 2b       	or	r18, r19
    1e52:	41 f4       	brne	.+16     	; 0x1e64 <malloc+0xca>
    1e54:	20 91 62 00 	lds	r18, 0x0062
    1e58:	30 91 63 00 	lds	r19, 0x0063
    1e5c:	30 93 2b 01 	sts	0x012B, r19
    1e60:	20 93 2a 01 	sts	0x012A, r18
    1e64:	20 91 60 00 	lds	r18, 0x0060
    1e68:	30 91 61 00 	lds	r19, 0x0061
    1e6c:	21 15       	cp	r18, r1
    1e6e:	31 05       	cpc	r19, r1
    1e70:	41 f4       	brne	.+16     	; 0x1e82 <malloc+0xe8>
    1e72:	2d b7       	in	r18, 0x3d	; 61
    1e74:	3e b7       	in	r19, 0x3e	; 62
    1e76:	40 91 64 00 	lds	r20, 0x0064
    1e7a:	50 91 65 00 	lds	r21, 0x0065
    1e7e:	24 1b       	sub	r18, r20
    1e80:	35 0b       	sbc	r19, r21
    1e82:	e0 91 2a 01 	lds	r30, 0x012A
    1e86:	f0 91 2b 01 	lds	r31, 0x012B
    1e8a:	e2 17       	cp	r30, r18
    1e8c:	f3 07       	cpc	r31, r19
    1e8e:	a0 f4       	brcc	.+40     	; 0x1eb8 <malloc+0x11e>
    1e90:	2e 1b       	sub	r18, r30
    1e92:	3f 0b       	sbc	r19, r31
    1e94:	28 17       	cp	r18, r24
    1e96:	39 07       	cpc	r19, r25
    1e98:	78 f0       	brcs	.+30     	; 0x1eb8 <malloc+0x11e>
    1e9a:	ac 01       	movw	r20, r24
    1e9c:	4e 5f       	subi	r20, 0xFE	; 254
    1e9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1ea0:	24 17       	cp	r18, r20
    1ea2:	35 07       	cpc	r19, r21
    1ea4:	48 f0       	brcs	.+18     	; 0x1eb8 <malloc+0x11e>
    1ea6:	4e 0f       	add	r20, r30
    1ea8:	5f 1f       	adc	r21, r31
    1eaa:	50 93 2b 01 	sts	0x012B, r21
    1eae:	40 93 2a 01 	sts	0x012A, r20
    1eb2:	81 93       	st	Z+, r24
    1eb4:	91 93       	st	Z+, r25
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <malloc+0x122>
    1eb8:	e0 e0       	ldi	r30, 0x00	; 0
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	cf 01       	movw	r24, r30
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	08 95       	ret

00001ec4 <free>:
    1ec4:	0f 93       	push	r16
    1ec6:	1f 93       	push	r17
    1ec8:	cf 93       	push	r28
    1eca:	df 93       	push	r29
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <free+0xe>
    1ed0:	8c c0       	rjmp	.+280    	; 0x1fea <free+0x126>
    1ed2:	fc 01       	movw	r30, r24
    1ed4:	32 97       	sbiw	r30, 0x02	; 2
    1ed6:	13 82       	std	Z+3, r1	; 0x03
    1ed8:	12 82       	std	Z+2, r1	; 0x02
    1eda:	00 91 2c 01 	lds	r16, 0x012C
    1ede:	10 91 2d 01 	lds	r17, 0x012D
    1ee2:	01 15       	cp	r16, r1
    1ee4:	11 05       	cpc	r17, r1
    1ee6:	81 f4       	brne	.+32     	; 0x1f08 <free+0x44>
    1ee8:	20 81       	ld	r18, Z
    1eea:	31 81       	ldd	r19, Z+1	; 0x01
    1eec:	82 0f       	add	r24, r18
    1eee:	93 1f       	adc	r25, r19
    1ef0:	20 91 2a 01 	lds	r18, 0x012A
    1ef4:	30 91 2b 01 	lds	r19, 0x012B
    1ef8:	28 17       	cp	r18, r24
    1efa:	39 07       	cpc	r19, r25
    1efc:	79 f5       	brne	.+94     	; 0x1f5c <free+0x98>
    1efe:	f0 93 2b 01 	sts	0x012B, r31
    1f02:	e0 93 2a 01 	sts	0x012A, r30
    1f06:	71 c0       	rjmp	.+226    	; 0x1fea <free+0x126>
    1f08:	d8 01       	movw	r26, r16
    1f0a:	40 e0       	ldi	r20, 0x00	; 0
    1f0c:	50 e0       	ldi	r21, 0x00	; 0
    1f0e:	ae 17       	cp	r26, r30
    1f10:	bf 07       	cpc	r27, r31
    1f12:	50 f4       	brcc	.+20     	; 0x1f28 <free+0x64>
    1f14:	12 96       	adiw	r26, 0x02	; 2
    1f16:	2d 91       	ld	r18, X+
    1f18:	3c 91       	ld	r19, X
    1f1a:	13 97       	sbiw	r26, 0x03	; 3
    1f1c:	ad 01       	movw	r20, r26
    1f1e:	21 15       	cp	r18, r1
    1f20:	31 05       	cpc	r19, r1
    1f22:	09 f1       	breq	.+66     	; 0x1f66 <free+0xa2>
    1f24:	d9 01       	movw	r26, r18
    1f26:	f3 cf       	rjmp	.-26     	; 0x1f0e <free+0x4a>
    1f28:	9d 01       	movw	r18, r26
    1f2a:	da 01       	movw	r26, r20
    1f2c:	33 83       	std	Z+3, r19	; 0x03
    1f2e:	22 83       	std	Z+2, r18	; 0x02
    1f30:	60 81       	ld	r22, Z
    1f32:	71 81       	ldd	r23, Z+1	; 0x01
    1f34:	86 0f       	add	r24, r22
    1f36:	97 1f       	adc	r25, r23
    1f38:	82 17       	cp	r24, r18
    1f3a:	93 07       	cpc	r25, r19
    1f3c:	69 f4       	brne	.+26     	; 0x1f58 <free+0x94>
    1f3e:	ec 01       	movw	r28, r24
    1f40:	28 81       	ld	r18, Y
    1f42:	39 81       	ldd	r19, Y+1	; 0x01
    1f44:	26 0f       	add	r18, r22
    1f46:	37 1f       	adc	r19, r23
    1f48:	2e 5f       	subi	r18, 0xFE	; 254
    1f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f4c:	31 83       	std	Z+1, r19	; 0x01
    1f4e:	20 83       	st	Z, r18
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	9b 81       	ldd	r25, Y+3	; 0x03
    1f54:	93 83       	std	Z+3, r25	; 0x03
    1f56:	82 83       	std	Z+2, r24	; 0x02
    1f58:	45 2b       	or	r20, r21
    1f5a:	29 f4       	brne	.+10     	; 0x1f66 <free+0xa2>
    1f5c:	f0 93 2d 01 	sts	0x012D, r31
    1f60:	e0 93 2c 01 	sts	0x012C, r30
    1f64:	42 c0       	rjmp	.+132    	; 0x1fea <free+0x126>
    1f66:	13 96       	adiw	r26, 0x03	; 3
    1f68:	fc 93       	st	X, r31
    1f6a:	ee 93       	st	-X, r30
    1f6c:	12 97       	sbiw	r26, 0x02	; 2
    1f6e:	ed 01       	movw	r28, r26
    1f70:	49 91       	ld	r20, Y+
    1f72:	59 91       	ld	r21, Y+
    1f74:	9e 01       	movw	r18, r28
    1f76:	24 0f       	add	r18, r20
    1f78:	35 1f       	adc	r19, r21
    1f7a:	e2 17       	cp	r30, r18
    1f7c:	f3 07       	cpc	r31, r19
    1f7e:	71 f4       	brne	.+28     	; 0x1f9c <free+0xd8>
    1f80:	80 81       	ld	r24, Z
    1f82:	91 81       	ldd	r25, Z+1	; 0x01
    1f84:	84 0f       	add	r24, r20
    1f86:	95 1f       	adc	r25, r21
    1f88:	02 96       	adiw	r24, 0x02	; 2
    1f8a:	11 96       	adiw	r26, 0x01	; 1
    1f8c:	9c 93       	st	X, r25
    1f8e:	8e 93       	st	-X, r24
    1f90:	82 81       	ldd	r24, Z+2	; 0x02
    1f92:	93 81       	ldd	r25, Z+3	; 0x03
    1f94:	13 96       	adiw	r26, 0x03	; 3
    1f96:	9c 93       	st	X, r25
    1f98:	8e 93       	st	-X, r24
    1f9a:	12 97       	sbiw	r26, 0x02	; 2
    1f9c:	e0 e0       	ldi	r30, 0x00	; 0
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	d8 01       	movw	r26, r16
    1fa2:	12 96       	adiw	r26, 0x02	; 2
    1fa4:	8d 91       	ld	r24, X+
    1fa6:	9c 91       	ld	r25, X
    1fa8:	13 97       	sbiw	r26, 0x03	; 3
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	19 f0       	breq	.+6      	; 0x1fb4 <free+0xf0>
    1fae:	f8 01       	movw	r30, r16
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	f6 cf       	rjmp	.-20     	; 0x1fa0 <free+0xdc>
    1fb4:	8d 91       	ld	r24, X+
    1fb6:	9c 91       	ld	r25, X
    1fb8:	98 01       	movw	r18, r16
    1fba:	2e 5f       	subi	r18, 0xFE	; 254
    1fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbe:	82 0f       	add	r24, r18
    1fc0:	93 1f       	adc	r25, r19
    1fc2:	20 91 2a 01 	lds	r18, 0x012A
    1fc6:	30 91 2b 01 	lds	r19, 0x012B
    1fca:	28 17       	cp	r18, r24
    1fcc:	39 07       	cpc	r19, r25
    1fce:	69 f4       	brne	.+26     	; 0x1fea <free+0x126>
    1fd0:	30 97       	sbiw	r30, 0x00	; 0
    1fd2:	29 f4       	brne	.+10     	; 0x1fde <free+0x11a>
    1fd4:	10 92 2d 01 	sts	0x012D, r1
    1fd8:	10 92 2c 01 	sts	0x012C, r1
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <free+0x11e>
    1fde:	13 82       	std	Z+3, r1	; 0x03
    1fe0:	12 82       	std	Z+2, r1	; 0x02
    1fe2:	10 93 2b 01 	sts	0x012B, r17
    1fe6:	00 93 2a 01 	sts	0x012A, r16
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	08 95       	ret

00001ff4 <memcpy>:
    1ff4:	fb 01       	movw	r30, r22
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <memcpy+0xa>
    1ffa:	01 90       	ld	r0, Z+
    1ffc:	0d 92       	st	X+, r0
    1ffe:	41 50       	subi	r20, 0x01	; 1
    2000:	50 40       	sbci	r21, 0x00	; 0
    2002:	d8 f7       	brcc	.-10     	; 0x1ffa <memcpy+0x6>
    2004:	08 95       	ret

00002006 <__itoa_ncheck>:
    2006:	bb 27       	eor	r27, r27
    2008:	4a 30       	cpi	r20, 0x0A	; 10
    200a:	31 f4       	brne	.+12     	; 0x2018 <__itoa_ncheck+0x12>
    200c:	99 23       	and	r25, r25
    200e:	22 f4       	brpl	.+8      	; 0x2018 <__itoa_ncheck+0x12>
    2010:	bd e2       	ldi	r27, 0x2D	; 45
    2012:	90 95       	com	r25
    2014:	81 95       	neg	r24
    2016:	9f 4f       	sbci	r25, 0xFF	; 255
    2018:	0c 94 0f 10 	jmp	0x201e	; 0x201e <__utoa_common>

0000201c <__utoa_ncheck>:
    201c:	bb 27       	eor	r27, r27

0000201e <__utoa_common>:
    201e:	fb 01       	movw	r30, r22
    2020:	55 27       	eor	r21, r21
    2022:	aa 27       	eor	r26, r26
    2024:	88 0f       	add	r24, r24
    2026:	99 1f       	adc	r25, r25
    2028:	aa 1f       	adc	r26, r26
    202a:	a4 17       	cp	r26, r20
    202c:	10 f0       	brcs	.+4      	; 0x2032 <__utoa_common+0x14>
    202e:	a4 1b       	sub	r26, r20
    2030:	83 95       	inc	r24
    2032:	50 51       	subi	r21, 0x10	; 16
    2034:	b9 f7       	brne	.-18     	; 0x2024 <__utoa_common+0x6>
    2036:	a0 5d       	subi	r26, 0xD0	; 208
    2038:	aa 33       	cpi	r26, 0x3A	; 58
    203a:	08 f0       	brcs	.+2      	; 0x203e <__utoa_common+0x20>
    203c:	a9 5d       	subi	r26, 0xD9	; 217
    203e:	a1 93       	st	Z+, r26
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	79 f7       	brne	.-34     	; 0x2022 <__utoa_common+0x4>
    2044:	b1 11       	cpse	r27, r1
    2046:	b1 93       	st	Z+, r27
    2048:	11 92       	st	Z+, r1
    204a:	cb 01       	movw	r24, r22
    204c:	0c 94 28 10 	jmp	0x2050	; 0x2050 <strrev>

00002050 <strrev>:
    2050:	dc 01       	movw	r26, r24
    2052:	fc 01       	movw	r30, r24
    2054:	67 2f       	mov	r22, r23
    2056:	71 91       	ld	r23, Z+
    2058:	77 23       	and	r23, r23
    205a:	e1 f7       	brne	.-8      	; 0x2054 <strrev+0x4>
    205c:	32 97       	sbiw	r30, 0x02	; 2
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <strrev+0x18>
    2060:	7c 91       	ld	r23, X
    2062:	6d 93       	st	X+, r22
    2064:	70 83       	st	Z, r23
    2066:	62 91       	ld	r22, -Z
    2068:	ae 17       	cp	r26, r30
    206a:	bf 07       	cpc	r27, r31
    206c:	c8 f3       	brcs	.-14     	; 0x2060 <strrev+0x10>
    206e:	08 95       	ret

00002070 <_exit>:
    2070:	f8 94       	cli

00002072 <__stop_program>:
    2072:	ff cf       	rjmp	.-2      	; 0x2072 <__stop_program>
