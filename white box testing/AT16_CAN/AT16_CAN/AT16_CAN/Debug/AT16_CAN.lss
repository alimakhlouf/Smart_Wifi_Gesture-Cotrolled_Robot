
AT16_CAN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000844  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00000844  000008b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000008e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000001e8  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ebe  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068c  00000000  00000000  000029fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e60  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000628  00000000  00000000  00003ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000665  00000000  00000000  00004510  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ccb  00000000  00000000  00004b75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a8  00000000  00000000  00006840  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e8       	ldi	r26, 0x8E	; 142
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 20 04 	jmp	0x840	; 0x840 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:



int main(void)
{
	DDRA = 0xff;
  92:	8f ef       	ldi	r24, 0xFF	; 255
  94:	8a bb       	out	0x1a, r24	; 26
	SPI_init();
  96:	0e 94 ab 03 	call	0x756	; 0x756 <SPI_init>
	UART_init();
  9a:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <UART_init>
	uint8_t d;
	uint8_t bit_rep[16];
	uint8_t receive_buff[9];
	uint8_t state;

	mcp_init();
  9e:	0e 94 ed 01 	call	0x3da	; 0x3da <mcp_init>
	
	mcp_tx_id(MCP_TX(0), 0, 0x058f); //000 1111 0111 001 10 00110101 10001111
  a2:	2f e8       	ldi	r18, 0x8F	; 143
  a4:	35 e0       	ldi	r19, 0x05	; 5
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 49 01 	call	0x292	; 0x292 <mcp_tx_id>
	mcp_tx_data(MCP_TX(0), DATA_FRAME, "ALIBEAST", 8);
  b2:	28 e0       	ldi	r18, 0x08	; 8
  b4:	40 e6       	ldi	r20, 0x60	; 96
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 a1 01 	call	0x342	; 0x342 <mcp_tx_data>
	
	mcp_tx_id(MCP_TX(1), 0, 0x057f); //000 1111 0111 001 10 00110101 10001111
  c0:	2f e7       	ldi	r18, 0x7F	; 127
  c2:	35 e0       	ldi	r19, 0x05	; 5
  c4:	40 e0       	ldi	r20, 0x00	; 0
  c6:	50 e0       	ldi	r21, 0x00	; 0
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	0e 94 49 01 	call	0x292	; 0x292 <mcp_tx_id>
	mcp_tx_data(MCP_TX(1), DATA_FRAME, "ALISTARK", 8);
  d0:	28 e0       	ldi	r18, 0x08	; 8
  d2:	49 e6       	ldi	r20, 0x69	; 105
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	0e 94 a1 01 	call	0x342	; 0x342 <mcp_tx_data>
	
	mcp_tx_id(MCP_TX(2), 0, 0x056f); //000 1111 0111 001 10 00110101 10001111
  de:	2f e6       	ldi	r18, 0x6F	; 111
  e0:	35 e0       	ldi	r19, 0x05	; 5
  e2:	40 e0       	ldi	r20, 0x00	; 0
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	0e 94 49 01 	call	0x292	; 0x292 <mcp_tx_id>
	mcp_tx_data(MCP_TX(2), DATA_FRAME, "ALI MAKH", 8);
  ee:	28 e0       	ldi	r18, 0x08	; 8
  f0:	42 e7       	ldi	r20, 0x72	; 114
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	84 e0       	ldi	r24, 0x04	; 4
  f8:	0e 94 a1 01 	call	0x342	; 0x342 <mcp_tx_data>


	while (1)
	{
		state = mcp_status();
  fc:	0e 94 55 02 	call	0x4aa	; 0x4aa <mcp_status>
 100:	c8 2f       	mov	r28, r24
		
		if (mcp_status_rx(state, MCP_STAT_NO_RX) == 0)
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	0e 94 97 03 	call	0x72e	; 0x72e <mcp_status_rx>
 108:	81 11       	cpse	r24, r1
 10a:	21 c0       	rjmp	.+66     	; 0x14e <main+0xbc>
		{
				uint8_t rx_status = mcp_rx_status();
 10c:	0e 94 89 03 	call	0x712	; 0x712 <mcp_rx_status>
				
				if (mcp_rx_status_frame(rx_status, RX_STATUS_SREMOTE))
 110:	68 e0       	ldi	r22, 0x08	; 8
 112:	0e 94 91 03 	call	0x722	; 0x722 <mcp_rx_status_frame>
 116:	88 23       	and	r24, r24
 118:	d1 f0       	breq	.+52     	; 0x14e <main+0xbc>
				{
					
					if (mcp_status_rx(state, MCP_STAT_RX0))
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	8c 2f       	mov	r24, r28
 11e:	0e 94 97 03 	call	0x72e	; 0x72e <mcp_status_rx>
 122:	88 23       	and	r24, r24
 124:	41 f0       	breq	.+16     	; 0x136 <main+0xa4>
					{
						
						//here it should send ALIBEAST
						mcp_remote_handler(MCP_RX(0), SID);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 0c 03 	call	0x618	; 0x618 <mcp_remote_handler>
// 						{
// 							PORTA ^= 2;
// 							_delay_ms(500);
// 						}
// 						
						mcp_clear_flag(RX0IF_BIT);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 d7 02 	call	0x5ae	; 0x5ae <mcp_clear_flag>
 134:	0c c0       	rjmp	.+24     	; 0x14e <main+0xbc>
						
					}
					else if (mcp_check_flag(RX1IF_BIT))//mcp_status_rx(state, MCP_STAT_RX1)
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 5d 02 	call	0x4ba	; 0x4ba <mcp_check_flag>
 13c:	88 23       	and	r24, r24
 13e:	39 f0       	breq	.+14     	; 0x14e <main+0xbc>
					{
						
						//here it should send ALISTARK
						mcp_remote_handler(MCP_RX(1), SID);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 0c 03 	call	0x618	; 0x618 <mcp_remote_handler>
// 						{
// 							PORTA ^= 2;
// 							_delay_ms(200);
// 						}
// 						
						mcp_clear_flag(RX1IF_BIT);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <mcp_clear_flag>
					
				}	
				
		}
		
		if (mcp_status_tx(state, MCP_STAT_NO_TX) == 0)
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	8c 2f       	mov	r24, r28
 152:	0e 94 a1 03 	call	0x742	; 0x742 <mcp_status_tx>
 156:	81 11       	cpse	r24, r1
 158:	d1 cf       	rjmp	.-94     	; 0xfc <main+0x6a>
		{
			
			UART_sendStrByMark("entered\r\n", 0);
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	8b e7       	ldi	r24, 0x7B	; 123
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 07 04 	call	0x80e	; 0x80e <UART_sendStrByMark>
			if (mcp_status_tx(state, MCP_STAT_TX0))
 164:	68 e0       	ldi	r22, 0x08	; 8
 166:	8c 2f       	mov	r24, r28
 168:	0e 94 a1 03 	call	0x742	; 0x742 <mcp_status_tx>
 16c:	88 23       	and	r24, r24
 16e:	41 f0       	breq	.+16     	; 0x180 <main+0xee>
			{
				UART_sendStrByMark("sent0\r\n", 0);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	85 e8       	ldi	r24, 0x85	; 133
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 07 04 	call	0x80e	; 0x80e <UART_sendStrByMark>
/*				_delay_ms(1000);*/
				mcp_clear_flag(TX0IF_BIT);
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	0e 94 d7 02 	call	0x5ae	; 0x5ae <mcp_clear_flag>
			}
			
			if (mcp_status_tx(state, MCP_STAT_TX1))
 180:	60 e2       	ldi	r22, 0x20	; 32
 182:	8c 2f       	mov	r24, r28
 184:	0e 94 a1 03 	call	0x742	; 0x742 <mcp_status_tx>
 188:	88 23       	and	r24, r24
 18a:	19 f0       	breq	.+6      	; 0x192 <main+0x100>
			{
// 				UART_sendStrByMark("sent1\r\n", 0);
// 				_delay_ms(1000);
				mcp_clear_flag(TX1IF_BIT);
 18c:	85 e0       	ldi	r24, 0x05	; 5
 18e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <mcp_clear_flag>
			}
			
			if (mcp_status_tx(state, MCP_STAT_TX2))
 192:	60 e8       	ldi	r22, 0x80	; 128
 194:	8c 2f       	mov	r24, r28
 196:	0e 94 a1 03 	call	0x742	; 0x742 <mcp_status_tx>
 19a:	88 23       	and	r24, r24
 19c:	09 f4       	brne	.+2      	; 0x1a0 <main+0x10e>
 19e:	ae cf       	rjmp	.-164    	; 0xfc <main+0x6a>
			{
// 				UART_sendStrByMark("sent2\r\n", 0);
// 				_delay_ms(1000);
				mcp_clear_flag(TX2IF_BIT);
 1a0:	87 e0       	ldi	r24, 0x07	; 7
 1a2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <mcp_clear_flag>
 1a6:	aa cf       	rjmp	.-172    	; 0xfc <main+0x6a>

000001a8 <mcp_reset>:
}

uint8_t mcp_rx_status_filter(uint8_t rx_status_reg, uint8_t specific_bits) // volatile
{
	return ((rx_status_reg & RX_STATUS_RXF_BITS) == specific_bits);
}
 1a8:	c4 98       	cbi	0x18, 4	; 24
 1aa:	80 ec       	ldi	r24, 0xC0	; 192
 1ac:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 1b0:	c4 9a       	sbi	0x18, 4	; 24
 1b2:	08 95       	ret

000001b4 <mcp_read>:
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	d8 2f       	mov	r29, r24
 1be:	8b 01       	movw	r16, r22
 1c0:	c4 2f       	mov	r28, r20
 1c2:	c4 98       	cbi	0x18, 4	; 24
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 1ca:	8d 2f       	mov	r24, r29
 1cc:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 1d0:	c1 30       	cpi	r28, 0x01	; 1
 1d2:	29 f4       	brne	.+10     	; 0x1de <mcp_read+0x2a>
 1d4:	0e 94 cf 03 	call	0x79e	; 0x79e <SPI_receiveChr>
 1d8:	f8 01       	movw	r30, r16
 1da:	80 83       	st	Z, r24
 1dc:	04 c0       	rjmp	.+8      	; 0x1e6 <mcp_read+0x32>
 1de:	6c 2f       	mov	r22, r28
 1e0:	c8 01       	movw	r24, r16
 1e2:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <SPI_receiveStrBySize>
 1e6:	c4 9a       	sbi	0x18, 4	; 24
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	08 95       	ret

000001f2 <mcp_set_mask_filter>:
 1f2:	cf 92       	push	r12
 1f4:	df 92       	push	r13
 1f6:	ef 92       	push	r14
 1f8:	ff 92       	push	r15
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	d8 2f       	mov	r29, r24
 200:	c6 2f       	mov	r28, r22
 202:	69 01       	movw	r12, r18
 204:	7a 01       	movw	r14, r20
 206:	c4 98       	cbi	0x18, 4	; 24
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 20e:	8d 2f       	mov	r24, r29
 210:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 214:	c1 30       	cpi	r28, 0x01	; 1
 216:	31 f5       	brne	.+76     	; 0x264 <mcp_set_mask_filter+0x72>
 218:	d7 01       	movw	r26, r14
 21a:	c6 01       	movw	r24, r12
 21c:	07 2e       	mov	r0, r23
 21e:	75 e1       	ldi	r23, 0x15	; 21
 220:	b6 95       	lsr	r27
 222:	a7 95       	ror	r26
 224:	97 95       	ror	r25
 226:	87 95       	ror	r24
 228:	7a 95       	dec	r23
 22a:	d1 f7       	brne	.-12     	; 0x220 <mcp_set_mask_filter+0x2e>
 22c:	70 2d       	mov	r23, r0
 22e:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 232:	d7 01       	movw	r26, r14
 234:	c6 01       	movw	r24, r12
 236:	07 2e       	mov	r0, r23
 238:	7d e0       	ldi	r23, 0x0D	; 13
 23a:	b6 95       	lsr	r27
 23c:	a7 95       	ror	r26
 23e:	97 95       	ror	r25
 240:	87 95       	ror	r24
 242:	7a 95       	dec	r23
 244:	d1 f7       	brne	.-12     	; 0x23a <mcp_set_mask_filter+0x48>
 246:	70 2d       	mov	r23, r0
 248:	80 7e       	andi	r24, 0xE0	; 224
 24a:	9e 2d       	mov	r25, r14
 24c:	93 70       	andi	r25, 0x03	; 3
 24e:	89 2b       	or	r24, r25
 250:	88 60       	ori	r24, 0x08	; 8
 252:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 256:	8d 2d       	mov	r24, r13
 258:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 25c:	8c 2d       	mov	r24, r12
 25e:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 262:	0f c0       	rjmp	.+30     	; 0x282 <mcp_set_mask_filter+0x90>
 264:	c6 01       	movw	r24, r12
 266:	96 95       	lsr	r25
 268:	87 95       	ror	r24
 26a:	96 95       	lsr	r25
 26c:	87 95       	ror	r24
 26e:	96 95       	lsr	r25
 270:	87 95       	ror	r24
 272:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 276:	8c 2d       	mov	r24, r12
 278:	82 95       	swap	r24
 27a:	88 0f       	add	r24, r24
 27c:	80 7e       	andi	r24, 0xE0	; 224
 27e:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 282:	c4 9a       	sbi	0x18, 4	; 24
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	df 90       	pop	r13
 28e:	cf 90       	pop	r12
 290:	08 95       	ret

00000292 <mcp_tx_id>:
 292:	cf 92       	push	r12
 294:	df 92       	push	r13
 296:	ef 92       	push	r14
 298:	ff 92       	push	r15
 29a:	cf 93       	push	r28
 29c:	c8 2f       	mov	r28, r24
 29e:	69 01       	movw	r12, r18
 2a0:	7a 01       	movw	r14, r20
 2a2:	c4 98       	cbi	0x18, 4	; 24
 2a4:	61 30       	cpi	r22, 0x01	; 1
 2a6:	81 f5       	brne	.+96     	; 0x308 <mcp_tx_id+0x76>
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 2ae:	8c 2f       	mov	r24, r28
 2b0:	86 95       	lsr	r24
 2b2:	82 95       	swap	r24
 2b4:	80 7f       	andi	r24, 0xF0	; 240
 2b6:	8f 5c       	subi	r24, 0xCF	; 207
 2b8:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 2bc:	d7 01       	movw	r26, r14
 2be:	c6 01       	movw	r24, r12
 2c0:	07 2e       	mov	r0, r23
 2c2:	75 e1       	ldi	r23, 0x15	; 21
 2c4:	b6 95       	lsr	r27
 2c6:	a7 95       	ror	r26
 2c8:	97 95       	ror	r25
 2ca:	87 95       	ror	r24
 2cc:	7a 95       	dec	r23
 2ce:	d1 f7       	brne	.-12     	; 0x2c4 <mcp_tx_id+0x32>
 2d0:	70 2d       	mov	r23, r0
 2d2:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 2d6:	d7 01       	movw	r26, r14
 2d8:	c6 01       	movw	r24, r12
 2da:	07 2e       	mov	r0, r23
 2dc:	7d e0       	ldi	r23, 0x0D	; 13
 2de:	b6 95       	lsr	r27
 2e0:	a7 95       	ror	r26
 2e2:	97 95       	ror	r25
 2e4:	87 95       	ror	r24
 2e6:	7a 95       	dec	r23
 2e8:	d1 f7       	brne	.-12     	; 0x2de <mcp_tx_id+0x4c>
 2ea:	70 2d       	mov	r23, r0
 2ec:	80 7e       	andi	r24, 0xE0	; 224
 2ee:	9e 2d       	mov	r25, r14
 2f0:	93 70       	andi	r25, 0x03	; 3
 2f2:	89 2b       	or	r24, r25
 2f4:	88 60       	ori	r24, 0x08	; 8
 2f6:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 2fa:	8d 2d       	mov	r24, r13
 2fc:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 300:	8c 2d       	mov	r24, r12
 302:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 306:	16 c0       	rjmp	.+44     	; 0x334 <mcp_tx_id+0xa2>
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	09 f4       	brne	.+2      	; 0x30e <mcp_tx_id+0x7c>
 30c:	c0 e0       	ldi	r28, 0x00	; 0
 30e:	8c 2f       	mov	r24, r28
 310:	80 64       	ori	r24, 0x40	; 64
 312:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 316:	c6 01       	movw	r24, r12
 318:	96 95       	lsr	r25
 31a:	87 95       	ror	r24
 31c:	96 95       	lsr	r25
 31e:	87 95       	ror	r24
 320:	96 95       	lsr	r25
 322:	87 95       	ror	r24
 324:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 328:	8c 2d       	mov	r24, r12
 32a:	82 95       	swap	r24
 32c:	88 0f       	add	r24, r24
 32e:	80 7e       	andi	r24, 0xE0	; 224
 330:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 334:	c4 9a       	sbi	0x18, 4	; 24
 336:	cf 91       	pop	r28
 338:	ff 90       	pop	r15
 33a:	ef 90       	pop	r14
 33c:	df 90       	pop	r13
 33e:	cf 90       	pop	r12
 340:	08 95       	ret

00000342 <mcp_tx_data>:
 342:	ef 92       	push	r14
 344:	ff 92       	push	r15
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	c8 2f       	mov	r28, r24
 34e:	d6 2f       	mov	r29, r22
 350:	7a 01       	movw	r14, r20
 352:	12 2f       	mov	r17, r18
 354:	c4 98       	cbi	0x18, 4	; 24
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 35c:	8c 2f       	mov	r24, r28
 35e:	86 95       	lsr	r24
 360:	82 95       	swap	r24
 362:	80 7f       	andi	r24, 0xF0	; 240
 364:	8b 5c       	subi	r24, 0xCB	; 203
 366:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 36a:	20 e4       	ldi	r18, 0x40	; 64
 36c:	d2 9f       	mul	r29, r18
 36e:	c0 01       	movw	r24, r0
 370:	11 24       	eor	r1, r1
 372:	81 2b       	or	r24, r17
 374:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 378:	d1 11       	cpse	r29, r1
 37a:	04 c0       	rjmp	.+8      	; 0x384 <mcp_tx_data+0x42>
 37c:	61 2f       	mov	r22, r17
 37e:	c7 01       	movw	r24, r14
 380:	0e 94 b6 03 	call	0x76c	; 0x76c <SPI_sendStrBySize>
 384:	c4 9a       	sbi	0x18, 4	; 24
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	ff 90       	pop	r15
 38e:	ef 90       	pop	r14
 390:	08 95       	ret

00000392 <mcp_tx_trigger>:
 392:	c4 98       	cbi	0x18, 4	; 24
 394:	80 68       	ori	r24, 0x80	; 128
 396:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 39a:	c4 9a       	sbi	0x18, 4	; 24
 39c:	8f e0       	ldi	r24, 0x0F	; 15
 39e:	97 e2       	ldi	r25, 0x27	; 39
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <mcp_tx_trigger+0xe>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <mcp_tx_trigger+0x14>
 3a6:	00 00       	nop
 3a8:	08 95       	ret

000003aa <mcp_bit_modify>:
 3aa:	1f 93       	push	r17
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	18 2f       	mov	r17, r24
 3b2:	d6 2f       	mov	r29, r22
 3b4:	c4 2f       	mov	r28, r20
 3b6:	c4 98       	cbi	0x18, 4	; 24
 3b8:	85 e0       	ldi	r24, 0x05	; 5
 3ba:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 3be:	81 2f       	mov	r24, r17
 3c0:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 3c4:	8d 2f       	mov	r24, r29
 3c6:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 3ca:	8c 2f       	mov	r24, r28
 3cc:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 3d0:	c4 9a       	sbi	0x18, 4	; 24
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	08 95       	ret

000003da <mcp_init>:
 3da:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <mcp_reset>
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	6f e0       	ldi	r22, 0x0F	; 15
 3e2:	8c e0       	ldi	r24, 0x0C	; 12
 3e4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <mcp_bit_modify>
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	67 e0       	ldi	r22, 0x07	; 7
 3ec:	8d e0       	ldi	r24, 0x0D	; 13
 3ee:	0e 94 d5 01 	call	0x3aa	; 0x3aa <mcp_bit_modify>
 3f2:	40 e0       	ldi	r20, 0x00	; 0
 3f4:	60 e6       	ldi	r22, 0x60	; 96
 3f6:	80 e6       	ldi	r24, 0x60	; 96
 3f8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <mcp_bit_modify>
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	60 e6       	ldi	r22, 0x60	; 96
 400:	80 e7       	ldi	r24, 0x70	; 112
 402:	0e 94 d5 01 	call	0x3aa	; 0x3aa <mcp_bit_modify>
 406:	4f e1       	ldi	r20, 0x1F	; 31
 408:	6f ef       	ldi	r22, 0xFF	; 255
 40a:	8b e2       	ldi	r24, 0x2B	; 43
 40c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <mcp_bit_modify>
 410:	41 e4       	ldi	r20, 0x41	; 65
 412:	6f ef       	ldi	r22, 0xFF	; 255
 414:	8a e2       	ldi	r24, 0x2A	; 42
 416:	0e 94 d5 01 	call	0x3aa	; 0x3aa <mcp_bit_modify>
 41a:	41 eb       	ldi	r20, 0xB1	; 177
 41c:	6f ef       	ldi	r22, 0xFF	; 255
 41e:	89 e2       	ldi	r24, 0x29	; 41
 420:	0e 94 d5 01 	call	0x3aa	; 0x3aa <mcp_bit_modify>
 424:	45 e0       	ldi	r20, 0x05	; 5
 426:	67 e4       	ldi	r22, 0x47	; 71
 428:	88 e2       	ldi	r24, 0x28	; 40
 42a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <mcp_bit_modify>
 42e:	2f ef       	ldi	r18, 0xFF	; 255
 430:	3f e0       	ldi	r19, 0x0F	; 15
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	80 e2       	ldi	r24, 0x20	; 32
 43a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <mcp_set_mask_filter>
 43e:	2f ef       	ldi	r18, 0xFF	; 255
 440:	3f e0       	ldi	r19, 0x0F	; 15
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	84 e2       	ldi	r24, 0x24	; 36
 44a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <mcp_set_mask_filter>
 44e:	2f e8       	ldi	r18, 0x8F	; 143
 450:	35 e0       	ldi	r19, 0x05	; 5
 452:	40 e0       	ldi	r20, 0x00	; 0
 454:	50 e0       	ldi	r21, 0x00	; 0
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <mcp_set_mask_filter>
 45e:	2f e7       	ldi	r18, 0x7F	; 127
 460:	35 e0       	ldi	r19, 0x05	; 5
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	88 e0       	ldi	r24, 0x08	; 8
 46a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <mcp_set_mask_filter>
 46e:	2f e6       	ldi	r18, 0x6F	; 111
 470:	35 e0       	ldi	r19, 0x05	; 5
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	50 e0       	ldi	r21, 0x00	; 0
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	80 e1       	ldi	r24, 0x10	; 16
 47a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <mcp_set_mask_filter>
 47e:	2f e5       	ldi	r18, 0x5F	; 95
 480:	35 e0       	ldi	r19, 0x05	; 5
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	84 e1       	ldi	r24, 0x14	; 20
 48a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <mcp_set_mask_filter>
 48e:	2f e4       	ldi	r18, 0x4F	; 79
 490:	35 e0       	ldi	r19, 0x05	; 5
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	50 e0       	ldi	r21, 0x00	; 0
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	88 e1       	ldi	r24, 0x18	; 24
 49a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <mcp_set_mask_filter>
 49e:	48 e0       	ldi	r20, 0x08	; 8
 4a0:	6f ef       	ldi	r22, 0xFF	; 255
 4a2:	8f e2       	ldi	r24, 0x2F	; 47
 4a4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <mcp_bit_modify>
 4a8:	08 95       	ret

000004aa <mcp_status>:
 4aa:	c4 98       	cbi	0x18, 4	; 24
 4ac:	80 ea       	ldi	r24, 0xA0	; 160
 4ae:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 4b2:	0e 94 cf 03 	call	0x79e	; 0x79e <SPI_receiveChr>
 4b6:	c4 9a       	sbi	0x18, 4	; 24
 4b8:	08 95       	ret

000004ba <mcp_check_flag>:
 4ba:	1f 93       	push	r17
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	1f 92       	push	r1
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
 4c6:	18 2f       	mov	r17, r24
 4c8:	88 30       	cpi	r24, 0x08	; 8
 4ca:	58 f4       	brcc	.+22     	; 0x4e2 <mcp_check_flag+0x28>
 4cc:	0e 94 55 02 	call	0x4aa	; 0x4aa <mcp_status>
 4d0:	21 e0       	ldi	r18, 0x01	; 1
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <mcp_check_flag+0x20>
 4d6:	22 0f       	add	r18, r18
 4d8:	33 1f       	adc	r19, r19
 4da:	1a 95       	dec	r17
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <mcp_check_flag+0x1c>
 4de:	82 23       	and	r24, r18
 4e0:	61 c0       	rjmp	.+194    	; 0x5a4 <mcp_check_flag+0xea>
 4e2:	80 31       	cpi	r24, 0x10	; 16
 4e4:	90 f4       	brcc	.+36     	; 0x50a <mcp_check_flag+0x50>
 4e6:	41 e0       	ldi	r20, 0x01	; 1
 4e8:	be 01       	movw	r22, r28
 4ea:	6f 5f       	subi	r22, 0xFF	; 255
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255
 4ee:	8c e2       	ldi	r24, 0x2C	; 44
 4f0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <mcp_read>
 4f4:	18 50       	subi	r17, 0x08	; 8
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <mcp_check_flag+0x46>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	1a 95       	dec	r17
 502:	e2 f7       	brpl	.-8      	; 0x4fc <mcp_check_flag+0x42>
 504:	29 81       	ldd	r18, Y+1	; 0x01
 506:	82 23       	and	r24, r18
 508:	4d c0       	rjmp	.+154    	; 0x5a4 <mcp_check_flag+0xea>
 50a:	88 31       	cpi	r24, 0x18	; 24
 50c:	90 f4       	brcc	.+36     	; 0x532 <mcp_check_flag+0x78>
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	be 01       	movw	r22, r28
 512:	6f 5f       	subi	r22, 0xFF	; 255
 514:	7f 4f       	sbci	r23, 0xFF	; 255
 516:	80 e3       	ldi	r24, 0x30	; 48
 518:	0e 94 da 00 	call	0x1b4	; 0x1b4 <mcp_read>
 51c:	10 51       	subi	r17, 0x10	; 16
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <mcp_check_flag+0x6e>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	1a 95       	dec	r17
 52a:	e2 f7       	brpl	.-8      	; 0x524 <mcp_check_flag+0x6a>
 52c:	29 81       	ldd	r18, Y+1	; 0x01
 52e:	82 23       	and	r24, r18
 530:	39 c0       	rjmp	.+114    	; 0x5a4 <mcp_check_flag+0xea>
 532:	80 32       	cpi	r24, 0x20	; 32
 534:	90 f4       	brcc	.+36     	; 0x55a <mcp_check_flag+0xa0>
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	be 01       	movw	r22, r28
 53a:	6f 5f       	subi	r22, 0xFF	; 255
 53c:	7f 4f       	sbci	r23, 0xFF	; 255
 53e:	80 e4       	ldi	r24, 0x40	; 64
 540:	0e 94 da 00 	call	0x1b4	; 0x1b4 <mcp_read>
 544:	18 51       	subi	r17, 0x18	; 24
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <mcp_check_flag+0x96>
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	1a 95       	dec	r17
 552:	e2 f7       	brpl	.-8      	; 0x54c <mcp_check_flag+0x92>
 554:	29 81       	ldd	r18, Y+1	; 0x01
 556:	82 23       	and	r24, r18
 558:	25 c0       	rjmp	.+74     	; 0x5a4 <mcp_check_flag+0xea>
 55a:	88 32       	cpi	r24, 0x28	; 40
 55c:	90 f4       	brcc	.+36     	; 0x582 <mcp_check_flag+0xc8>
 55e:	41 e0       	ldi	r20, 0x01	; 1
 560:	be 01       	movw	r22, r28
 562:	6f 5f       	subi	r22, 0xFF	; 255
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	80 e5       	ldi	r24, 0x50	; 80
 568:	0e 94 da 00 	call	0x1b4	; 0x1b4 <mcp_read>
 56c:	10 52       	subi	r17, 0x20	; 32
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	02 c0       	rjmp	.+4      	; 0x578 <mcp_check_flag+0xbe>
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	1a 95       	dec	r17
 57a:	e2 f7       	brpl	.-8      	; 0x574 <mcp_check_flag+0xba>
 57c:	29 81       	ldd	r18, Y+1	; 0x01
 57e:	82 23       	and	r24, r18
 580:	11 c0       	rjmp	.+34     	; 0x5a4 <mcp_check_flag+0xea>
 582:	41 e0       	ldi	r20, 0x01	; 1
 584:	be 01       	movw	r22, r28
 586:	6f 5f       	subi	r22, 0xFF	; 255
 588:	7f 4f       	sbci	r23, 0xFF	; 255
 58a:	8d e2       	ldi	r24, 0x2D	; 45
 58c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <mcp_read>
 590:	18 52       	subi	r17, 0x28	; 40
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	02 c0       	rjmp	.+4      	; 0x59c <mcp_check_flag+0xe2>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	1a 95       	dec	r17
 59e:	e2 f7       	brpl	.-8      	; 0x598 <mcp_check_flag+0xde>
 5a0:	29 81       	ldd	r18, Y+1	; 0x01
 5a2:	82 23       	and	r24, r18
 5a4:	0f 90       	pop	r0
 5a6:	df 91       	pop	r29
 5a8:	cf 91       	pop	r28
 5aa:	1f 91       	pop	r17
 5ac:	08 95       	ret

000005ae <mcp_clear_flag>:
 5ae:	88 30       	cpi	r24, 0x08	; 8
 5b0:	b8 f4       	brcc	.+46     	; 0x5e0 <mcp_clear_flag+0x32>
 5b2:	83 30       	cpi	r24, 0x03	; 3
 5b4:	31 f0       	breq	.+12     	; 0x5c2 <mcp_clear_flag+0x14>
 5b6:	85 30       	cpi	r24, 0x05	; 5
 5b8:	31 f0       	breq	.+12     	; 0x5c6 <mcp_clear_flag+0x18>
 5ba:	87 30       	cpi	r24, 0x07	; 7
 5bc:	29 f4       	brne	.+10     	; 0x5c8 <mcp_clear_flag+0x1a>
 5be:	84 e0       	ldi	r24, 0x04	; 4
 5c0:	03 c0       	rjmp	.+6      	; 0x5c8 <mcp_clear_flag+0x1a>
 5c2:	82 e0       	ldi	r24, 0x02	; 2
 5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <mcp_clear_flag+0x1a>
 5c6:	83 e0       	ldi	r24, 0x03	; 3
 5c8:	61 e0       	ldi	r22, 0x01	; 1
 5ca:	70 e0       	ldi	r23, 0x00	; 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <mcp_clear_flag+0x24>
 5ce:	66 0f       	add	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	8a 95       	dec	r24
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <mcp_clear_flag+0x20>
 5d6:	40 e0       	ldi	r20, 0x00	; 0
 5d8:	8c e2       	ldi	r24, 0x2C	; 44
 5da:	0e 94 d5 01 	call	0x3aa	; 0x3aa <mcp_bit_modify>
 5de:	08 95       	ret
 5e0:	80 31       	cpi	r24, 0x10	; 16
 5e2:	68 f4       	brcc	.+26     	; 0x5fe <mcp_clear_flag+0x50>
 5e4:	88 50       	subi	r24, 0x08	; 8
 5e6:	61 e0       	ldi	r22, 0x01	; 1
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <mcp_clear_flag+0x42>
 5ec:	66 0f       	add	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	8a 95       	dec	r24
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <mcp_clear_flag+0x3e>
 5f4:	40 e0       	ldi	r20, 0x00	; 0
 5f6:	8c e2       	ldi	r24, 0x2C	; 44
 5f8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <mcp_bit_modify>
 5fc:	08 95       	ret
 5fe:	88 52       	subi	r24, 0x28	; 40
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <mcp_clear_flag+0x5c>
 606:	66 0f       	add	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	8a 95       	dec	r24
 60c:	e2 f7       	brpl	.-8      	; 0x606 <mcp_clear_flag+0x58>
 60e:	40 e0       	ldi	r20, 0x00	; 0
 610:	8c e2       	ldi	r24, 0x2C	; 44
 612:	0e 94 d5 01 	call	0x3aa	; 0x3aa <mcp_bit_modify>
 616:	08 95       	ret

00000618 <mcp_remote_handler>:
 618:	bf 92       	push	r11
 61a:	cf 92       	push	r12
 61c:	df 92       	push	r13
 61e:	ef 92       	push	r14
 620:	ff 92       	push	r15
 622:	0f 93       	push	r16
 624:	1f 93       	push	r17
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
 62e:	2a 97       	sbiw	r28, 0x0a	; 10
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	f8 94       	cli
 634:	de bf       	out	0x3e, r29	; 62
 636:	0f be       	out	0x3f, r0	; 63
 638:	cd bf       	out	0x3d, r28	; 61
 63a:	02 e0       	ldi	r16, 0x02	; 2
 63c:	10 e0       	ldi	r17, 0x00	; 0
 63e:	02 c0       	rjmp	.+4      	; 0x644 <mcp_remote_handler+0x2c>
 640:	00 0f       	add	r16, r16
 642:	11 1f       	adc	r17, r17
 644:	6a 95       	dec	r22
 646:	e2 f7       	brpl	.-8      	; 0x640 <mcp_remote_handler+0x28>
 648:	d0 2e       	mov	r13, r16
 64a:	82 95       	swap	r24
 64c:	80 7f       	andi	r24, 0xF0	; 240
 64e:	40 2f       	mov	r20, r16
 650:	be 01       	movw	r22, r28
 652:	6f 5f       	subi	r22, 0xFF	; 255
 654:	7f 4f       	sbci	r23, 0xFF	; 255
 656:	8f 59       	subi	r24, 0x9F	; 159
 658:	0e 94 da 00 	call	0x1b4	; 0x1b4 <mcp_read>
 65c:	8a 81       	ldd	r24, Y+2	; 0x02
 65e:	8f 7e       	andi	r24, 0xEF	; 239
 660:	8a 83       	std	Y+2, r24	; 0x02
 662:	f1 2c       	mov	r15, r1
 664:	b1 2c       	mov	r11, r1
 666:	c1 2c       	mov	r12, r1
 668:	ef 2c       	mov	r14, r15
 66a:	4d 2d       	mov	r20, r13
 66c:	be 01       	movw	r22, r28
 66e:	6a 5f       	subi	r22, 0xFA	; 250
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	8f 2d       	mov	r24, r15
 674:	82 95       	swap	r24
 676:	80 7f       	andi	r24, 0xF0	; 240
 678:	8f 5c       	subi	r24, 0xCF	; 207
 67a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <mcp_read>
 67e:	10 16       	cp	r1, r16
 680:	11 06       	cpc	r1, r17
 682:	fc f4       	brge	.+62     	; 0x6c2 <mcp_remote_handler+0xaa>
 684:	9e 81       	ldd	r25, Y+6	; 0x06
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	98 13       	cpse	r25, r24
 68a:	1e c0       	rjmp	.+60     	; 0x6c8 <mcp_remote_handler+0xb0>
 68c:	20 e0       	ldi	r18, 0x00	; 0
 68e:	10 c0       	rjmp	.+32     	; 0x6b0 <mcp_remote_handler+0x98>
 690:	e6 e0       	ldi	r30, 0x06	; 6
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	ec 0f       	add	r30, r28
 696:	fd 1f       	adc	r31, r29
 698:	e8 0f       	add	r30, r24
 69a:	f9 1f       	adc	r31, r25
 69c:	40 81       	ld	r20, Z
 69e:	e1 e0       	ldi	r30, 0x01	; 1
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	ec 0f       	add	r30, r28
 6a4:	fd 1f       	adc	r31, r29
 6a6:	e8 0f       	add	r30, r24
 6a8:	f9 1f       	adc	r31, r25
 6aa:	30 81       	ld	r19, Z
 6ac:	43 13       	cpse	r20, r19
 6ae:	0e c0       	rjmp	.+28     	; 0x6cc <mcp_remote_handler+0xb4>
 6b0:	2f 5f       	subi	r18, 0xFF	; 255
 6b2:	82 2f       	mov	r24, r18
 6b4:	02 2e       	mov	r0, r18
 6b6:	00 0c       	add	r0, r0
 6b8:	99 0b       	sbc	r25, r25
 6ba:	80 17       	cp	r24, r16
 6bc:	91 07       	cpc	r25, r17
 6be:	44 f3       	brlt	.-48     	; 0x690 <mcp_remote_handler+0x78>
 6c0:	05 c0       	rjmp	.+10     	; 0x6cc <mcp_remote_handler+0xb4>
 6c2:	8b 2d       	mov	r24, r11
 6c4:	9c 2d       	mov	r25, r12
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <mcp_remote_handler+0xb4>
 6c8:	8b 2d       	mov	r24, r11
 6ca:	9c 2d       	mov	r25, r12
 6cc:	08 17       	cp	r16, r24
 6ce:	19 07       	cpc	r17, r25
 6d0:	49 f4       	brne	.+18     	; 0x6e4 <mcp_remote_handler+0xcc>
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <mcp_remote_handler+0xc0>
 6d6:	88 0f       	add	r24, r24
 6d8:	fa 94       	dec	r15
 6da:	ea f7       	brpl	.-6      	; 0x6d6 <mcp_remote_handler+0xbe>
 6dc:	0e 94 c9 01 	call	0x392	; 0x392 <mcp_tx_trigger>
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	07 c0       	rjmp	.+14     	; 0x6f2 <mcp_remote_handler+0xda>
 6e4:	ff 24       	eor	r15, r15
 6e6:	f3 94       	inc	r15
 6e8:	fe 0c       	add	r15, r14
 6ea:	83 e0       	ldi	r24, 0x03	; 3
 6ec:	f8 12       	cpse	r15, r24
 6ee:	bc cf       	rjmp	.-136    	; 0x668 <mcp_remote_handler+0x50>
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	2a 96       	adiw	r28, 0x0a	; 10
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	f8 94       	cli
 6f8:	de bf       	out	0x3e, r29	; 62
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	cd bf       	out	0x3d, r28	; 61
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	1f 91       	pop	r17
 704:	0f 91       	pop	r16
 706:	ff 90       	pop	r15
 708:	ef 90       	pop	r14
 70a:	df 90       	pop	r13
 70c:	cf 90       	pop	r12
 70e:	bf 90       	pop	r11
 710:	08 95       	ret

00000712 <mcp_rx_status>:
 712:	c4 98       	cbi	0x18, 4	; 24
 714:	80 eb       	ldi	r24, 0xB0	; 176
 716:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 71a:	0e 94 cf 03 	call	0x79e	; 0x79e <SPI_receiveChr>
 71e:	c4 9a       	sbi	0x18, 4	; 24
 720:	08 95       	ret

00000722 <mcp_rx_status_frame>:
 722:	98 2f       	mov	r25, r24
 724:	98 71       	andi	r25, 0x18	; 24
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	96 13       	cpse	r25, r22
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	08 95       	ret

0000072e <mcp_status_rx>:

uint8_t mcp_status_rx(uint8_t stat_reg, uint8_t specific_bits) //volatile
{
	uint8_t temp = stat_reg & ((specific_bits == MCP_STAT_NO_RX)? MCP_STAT_BOTH_RX : specific_bits);
 72e:	66 23       	and	r22, r22
 730:	11 f0       	breq	.+4      	; 0x736 <mcp_status_rx+0x8>
 732:	96 2f       	mov	r25, r22
 734:	01 c0       	rjmp	.+2      	; 0x738 <mcp_status_rx+0xa>
 736:	93 e0       	ldi	r25, 0x03	; 3
	return temp == specific_bits;
 738:	98 23       	and	r25, r24
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	96 13       	cpse	r25, r22
 73e:	80 e0       	ldi	r24, 0x00	; 0
}
 740:	08 95       	ret

00000742 <mcp_status_tx>:

uint8_t mcp_status_tx(uint8_t stat_reg, uint8_t specific_bits) // volatile
{
	uint8_t temp = stat_reg & ((specific_bits == MCP_STAT_NO_TX)? MCP_STAT_BOTH_TX : specific_bits);
 742:	66 23       	and	r22, r22
 744:	11 f0       	breq	.+4      	; 0x74a <mcp_status_tx+0x8>
 746:	96 2f       	mov	r25, r22
 748:	01 c0       	rjmp	.+2      	; 0x74c <mcp_status_tx+0xa>
 74a:	98 ea       	ldi	r25, 0xA8	; 168
	return temp == specific_bits;	
 74c:	98 23       	and	r25, r24
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	96 13       	cpse	r25, r22
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	08 95       	ret

00000756 <SPI_init>:
	}
	while (Str[i++] != mark);
	
	i--;  /*return back one step to the last cell where we put null*/
	Str[i] = '\0';
}
 756:	80 eb       	ldi	r24, 0xB0	; 176
 758:	87 bb       	out	0x17, r24	; 23
 75a:	be 98       	cbi	0x17, 6	; 23
 75c:	80 e5       	ldi	r24, 0x50	; 80
 75e:	8d b9       	out	0x0d, r24	; 13
 760:	1e b8       	out	0x0e, r1	; 14
 762:	08 95       	ret

00000764 <SPI_sendChr>:
 764:	8f b9       	out	0x0f, r24	; 15
 766:	77 9b       	sbis	0x0e, 7	; 14
 768:	fe cf       	rjmp	.-4      	; 0x766 <SPI_sendChr+0x2>
 76a:	08 95       	ret

0000076c <SPI_sendStrBySize>:
 76c:	0f 93       	push	r16
 76e:	1f 93       	push	r17
 770:	cf 93       	push	r28
 772:	df 93       	push	r29
 774:	66 23       	and	r22, r22
 776:	71 f0       	breq	.+28     	; 0x794 <SPI_sendStrBySize+0x28>
 778:	ec 01       	movw	r28, r24
 77a:	61 50       	subi	r22, 0x01	; 1
 77c:	06 2f       	mov	r16, r22
 77e:	10 e0       	ldi	r17, 0x00	; 0
 780:	0f 5f       	subi	r16, 0xFF	; 255
 782:	1f 4f       	sbci	r17, 0xFF	; 255
 784:	08 0f       	add	r16, r24
 786:	19 1f       	adc	r17, r25
 788:	89 91       	ld	r24, Y+
 78a:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 78e:	c0 17       	cp	r28, r16
 790:	d1 07       	cpc	r29, r17
 792:	d1 f7       	brne	.-12     	; 0x788 <SPI_sendStrBySize+0x1c>
 794:	df 91       	pop	r29
 796:	cf 91       	pop	r28
 798:	1f 91       	pop	r17
 79a:	0f 91       	pop	r16
 79c:	08 95       	ret

0000079e <SPI_receiveChr>:
 79e:	81 e3       	ldi	r24, 0x31	; 49
 7a0:	0e 94 b2 03 	call	0x764	; 0x764 <SPI_sendChr>
 7a4:	8f b1       	in	r24, 0x0f	; 15
 7a6:	08 95       	ret

000007a8 <SPI_receiveStrBySize>:


void SPI_receiveStrBySize(unint8_t *Str, unint8_t size)
{
 7a8:	df 92       	push	r13
 7aa:	ef 92       	push	r14
 7ac:	ff 92       	push	r15
 7ae:	0f 93       	push	r16
 7b0:	1f 93       	push	r17
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	7c 01       	movw	r14, r24
 7b8:	d6 2e       	mov	r13, r22
	unsigned char i = 0;
	
	while (i < size)
 7ba:	66 23       	and	r22, r22
 7bc:	71 f0       	breq	.+28     	; 0x7da <SPI_receiveStrBySize+0x32>
 7be:	ec 01       	movw	r28, r24
 7c0:	0f ef       	ldi	r16, 0xFF	; 255
 7c2:	06 0f       	add	r16, r22
 7c4:	10 e0       	ldi	r17, 0x00	; 0
 7c6:	0f 5f       	subi	r16, 0xFF	; 255
 7c8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ca:	08 0f       	add	r16, r24
 7cc:	19 1f       	adc	r17, r25
	{
		Str[i] = SPI_receiveChr();
 7ce:	0e 94 cf 03 	call	0x79e	; 0x79e <SPI_receiveChr>
 7d2:	89 93       	st	Y+, r24

void SPI_receiveStrBySize(unint8_t *Str, unint8_t size)
{
	unsigned char i = 0;
	
	while (i < size)
 7d4:	c0 17       	cp	r28, r16
 7d6:	d1 07       	cpc	r29, r17
 7d8:	d1 f7       	brne	.-12     	; 0x7ce <SPI_receiveStrBySize+0x26>
	{
		Str[i] = SPI_receiveChr();
		i++;
	}
	
	Str[i] = '\0';
 7da:	f7 01       	movw	r30, r14
 7dc:	ed 0d       	add	r30, r13
 7de:	f1 1d       	adc	r31, r1
 7e0:	10 82       	st	Z, r1
}
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	1f 91       	pop	r17
 7e8:	0f 91       	pop	r16
 7ea:	ff 90       	pop	r15
 7ec:	ef 90       	pop	r14
 7ee:	df 90       	pop	r13
 7f0:	08 95       	ret

000007f2 <UART_init>:
		}
	#endif
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
}
 7f2:	82 e0       	ldi	r24, 0x02	; 2
 7f4:	8b b9       	out	0x0b, r24	; 11
 7f6:	88 e0       	ldi	r24, 0x08	; 8
 7f8:	8a b9       	out	0x0a, r24	; 10
 7fa:	86 e8       	ldi	r24, 0x86	; 134
 7fc:	80 bd       	out	0x20, r24	; 32
 7fe:	10 bc       	out	0x20, r1	; 32
 800:	87 e6       	ldi	r24, 0x67	; 103
 802:	89 b9       	out	0x09, r24	; 9
 804:	08 95       	ret

00000806 <UART_sendChr>:
 806:	5d 9b       	sbis	0x0b, 5	; 11
 808:	fe cf       	rjmp	.-4      	; 0x806 <UART_sendChr>
 80a:	8c b9       	out	0x0c, r24	; 12
 80c:	08 95       	ret

0000080e <UART_sendStrByMark>:

/*notice that this function send the string except the null char */
void UART_sendStrByMark(const unint8_t * str , unint8_t mark)
{
 80e:	0f 93       	push	r16
 810:	1f 93       	push	r17
 812:	cf 93       	push	r28
 814:	df 93       	push	r29
 816:	fc 01       	movw	r30, r24
	unint8_t i = 0;
	while(str[i] != mark)
 818:	80 81       	ld	r24, Z
 81a:	68 17       	cp	r22, r24
 81c:	61 f0       	breq	.+24     	; 0x836 <UART_sendStrByMark+0x28>
 81e:	d6 2f       	mov	r29, r22
 820:	8f 01       	movw	r16, r30
 822:	c0 e0       	ldi	r28, 0x00	; 0
	{
		UART_sendChr(str[i]);
 824:	0e 94 03 04 	call	0x806	; 0x806 <UART_sendChr>
		i++;
 828:	cf 5f       	subi	r28, 0xFF	; 255

/*notice that this function send the string except the null char */
void UART_sendStrByMark(const unint8_t * str , unint8_t mark)
{
	unint8_t i = 0;
	while(str[i] != mark)
 82a:	f8 01       	movw	r30, r16
 82c:	ec 0f       	add	r30, r28
 82e:	f1 1d       	adc	r31, r1
 830:	80 81       	ld	r24, Z
 832:	8d 13       	cpse	r24, r29
 834:	f7 cf       	rjmp	.-18     	; 0x824 <UART_sendStrByMark+0x16>
	{
		UART_sendChr(str[i]);
		i++;
	}	
}
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	1f 91       	pop	r17
 83c:	0f 91       	pop	r16
 83e:	08 95       	ret

00000840 <_exit>:
 840:	f8 94       	cli

00000842 <__stop_program>:
 842:	ff cf       	rjmp	.-2      	; 0x842 <__stop_program>
