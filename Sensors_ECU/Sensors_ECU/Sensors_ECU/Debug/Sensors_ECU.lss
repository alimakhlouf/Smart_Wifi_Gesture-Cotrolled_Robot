
Sensors_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b92  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  00001b92  00001c26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800094  00800094  00001c5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001c8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000047d3  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014d2  00000000  00000000  00006863  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002054  00000000  00000000  00007d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b6c  00000000  00000000  00009d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d35  00000000  00000000  0000a8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000034bd  00000000  00000000  0000b62d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000480  00000000  00000000  0000eaea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__vector_5>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_8>
      24:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__vector_9>
      28:	0c 94 14 08 	jmp	0x1028	; 0x1028 <__vector_10>
      2c:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__vector_11>
      30:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__vector_12>
      34:	0c 94 bb 08 	jmp	0x1176	; 0x1176 <__vector_13>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_14>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <mcp_set_mask_or_filter>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	07 63       	ori	r16, 0x37	; 55
      b0:	42 36       	cpi	r20, 0x62	; 98
      b2:	b7 9b       	sbis	0x16, 7	; 22
      b4:	d8 a7       	std	Y+40, r29	; 0x28
      b6:	1a 39       	cpi	r17, 0x9A	; 154
      b8:	68 56       	subi	r22, 0x68	; 104
      ba:	18 ae       	std	Y+56, r1	; 0x38
      bc:	ba ab       	std	Y+50, r27	; 0x32
      be:	55 8c       	ldd	r5, Z+29	; 0x1d
      c0:	1d 3c       	cpi	r17, 0xCD	; 205
      c2:	b7 cc       	rjmp	.-1682   	; 0xfffffa32 <__eeprom_end+0xff7efa32>
      c4:	57 63       	ori	r21, 0x37	; 55
      c6:	bd 6d       	ori	r27, 0xDD	; 221
      c8:	ed fd       	.word	0xfded	; ????
      ca:	75 3e       	cpi	r23, 0xE5	; 229
      cc:	f6 17       	cp	r31, r22
      ce:	72 31       	cpi	r23, 0x12	; 18
      d0:	bf 00       	.word	0x00bf	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d4 e0       	ldi	r29, 0x04	; 4
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e2 e9       	ldi	r30, 0x92	; 146
      ea:	fb e1       	ldi	r31, 0x1B	; 27
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	a4 39       	cpi	r26, 0x94	; 148
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	a4 e9       	ldi	r26, 0x94	; 148
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	aa 3a       	cpi	r26, 0xAA	; 170
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 3f 03 	call	0x67e	; 0x67e <main>
     10c:	0c 94 c7 0d 	jmp	0x1b8e	; 0x1b8e <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <__vector_14>:
#include "ADC_lib.h"

static void( * adc_isr)(void) = {NULL}; 

void CONFIG_ADC_ISR()
{
     114:	1f 92       	push	r1
     116:	0f 92       	push	r0
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	0f 92       	push	r0
     11c:	11 24       	eor	r1, r1
     11e:	2f 93       	push	r18
     120:	3f 93       	push	r19
     122:	4f 93       	push	r20
     124:	5f 93       	push	r21
     126:	6f 93       	push	r22
     128:	7f 93       	push	r23
     12a:	8f 93       	push	r24
     12c:	9f 93       	push	r25
     12e:	af 93       	push	r26
     130:	bf 93       	push	r27
     132:	ef 93       	push	r30
     134:	ff 93       	push	r31
	cli();
     136:	f8 94       	cli
	
	if (adc_isr != NULL)
     138:	e0 91 94 00 	lds	r30, 0x0094	; 0x800094 <__data_end>
     13c:	f0 91 95 00 	lds	r31, 0x0095	; 0x800095 <__data_end+0x1>
     140:	30 97       	sbiw	r30, 0x00	; 0
     142:	09 f0       	breq	.+2      	; 0x146 <__vector_14+0x32>
	{
		adc_isr();
     144:	09 95       	icall
	}
	
	sei();
     146:	78 94       	sei
}
     148:	ff 91       	pop	r31
     14a:	ef 91       	pop	r30
     14c:	bf 91       	pop	r27
     14e:	af 91       	pop	r26
     150:	9f 91       	pop	r25
     152:	8f 91       	pop	r24
     154:	7f 91       	pop	r23
     156:	6f 91       	pop	r22
     158:	5f 91       	pop	r21
     15a:	4f 91       	pop	r20
     15c:	3f 91       	pop	r19
     15e:	2f 91       	pop	r18
     160:	0f 90       	pop	r0
     162:	0f be       	out	0x3f, r0	; 63
     164:	0f 90       	pop	r0
     166:	1f 90       	pop	r1
     168:	18 95       	reti

0000016a <ADC_init>:
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX =(UPPER_LIMIT_SOURCE << REFS0) | (ADJUST_RESULT_BITS << ADLAR);
     16a:	80 e4       	ldi	r24, 0x40	; 64
     16c:	87 b9       	out	0x07, r24	; 7
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1 << ADEN) | (FREQ_PRESCALER << ADPS0);
     16e:	86 e8       	ldi	r24, 0x86	; 134
     170:	86 b9       	out	0x06, r24	; 6
     172:	08 95       	ret

00000174 <ADC_read>:
void CONFIG_ADC_ISR(void) __attribute__((signal,__INTR_ATTRS));
#endif

inline bool adc_int_state()
{
	return ((BIT_IS_SET(SREG, I)) && (BIT_IS_SET(ADCSRA, ADIE)));
     174:	0f b6       	in	r0, 0x3f	; 63
     176:	07 fe       	sbrs	r0, 7
     178:	11 c0       	rjmp	.+34     	; 0x19c <ADC_read+0x28>
     17a:	33 99       	sbic	0x06, 3	; 6
     17c:	04 c0       	rjmp	.+8      	; 0x186 <ADC_read+0x12>
     17e:	0e c0       	rjmp	.+28     	; 0x19c <ADC_read+0x28>
		ADMUX &= 0xE0;
		ADMUX |= channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
		SET_BIT(ADCSRA,ADSC); /* start conversion process by writing '1' to ADSC */
	
	
		while (BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
     180:	34 9b       	sbis	0x06, 4	; 6
     182:	fe cf       	rjmp	.-4      	; 0x180 <ADC_read+0xc>
		SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
     184:	34 9a       	sbi	0x06, 4	; 6
	}
	
	
	ADMUX &= 0xE0; //unchoose the channel again
     186:	87 b1       	in	r24, 0x07	; 7
     188:	80 7e       	andi	r24, 0xE0	; 224
     18a:	87 b9       	out	0x07, r24	; 7
	return GET_ADC_RESULT; /* return the data register */
     18c:	24 b1       	in	r18, 0x04	; 4
     18e:	85 b1       	in	r24, 0x05	; 5
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	98 2f       	mov	r25, r24
     194:	88 27       	eor	r24, r24
     196:	82 0f       	add	r24, r18
     198:	91 1d       	adc	r25, r1
     19a:	08 95       	ret

unint16_t ADC_read(unint8_t channel_num)
{
	if (adc_int_state() == false)
	{
		DDRA &= ~(1 << channel_num); // assign the pin as input
     19c:	9a b3       	in	r25, 0x1a	; 26
     19e:	21 e0       	ldi	r18, 0x01	; 1
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	08 2e       	mov	r0, r24
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <ADC_read+0x36>
     1a6:	22 0f       	add	r18, r18
     1a8:	33 1f       	adc	r19, r19
     1aa:	0a 94       	dec	r0
     1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <ADC_read+0x32>
     1ae:	20 95       	com	r18
     1b0:	29 23       	and	r18, r25
     1b2:	2a bb       	out	0x1a, r18	; 26
		channel_num &= 0x07; /* channel number must be from 0 --> 7 */
		/*clear first 5 bits in the ADMUX (unchoose any previously chosen channel)
		 * (channel number MUX4:0 bits) before setting the required channel
		 * */
		ADMUX &= 0xE0;
     1b4:	97 b1       	in	r25, 0x07	; 7
     1b6:	90 7e       	andi	r25, 0xE0	; 224
     1b8:	97 b9       	out	0x07, r25	; 7
		ADMUX |= channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
     1ba:	97 b1       	in	r25, 0x07	; 7
     1bc:	87 70       	andi	r24, 0x07	; 7
     1be:	89 2b       	or	r24, r25
     1c0:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADCSRA,ADSC); /* start conversion process by writing '1' to ADSC */
     1c2:	36 9a       	sbi	0x06, 6	; 6
	
	
		while (BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
     1c4:	dd cf       	rjmp	.-70     	; 0x180 <ADC_read+0xc>

000001c6 <DHT_init>:

//NOTE:all the statement comments below are extra that are used for checking the work of the module by debugging it oscilliscope

void DHT_init()
{
	DIO_SET_DIR(DHT_PIN, DIO_OUTPUT);
     1c6:	61 e0       	ldi	r22, 0x01	; 1
     1c8:	88 e0       	ldi	r24, 0x08	; 8
     1ca:	0e 94 a3 01 	call	0x346	; 0x346 <dio_set_pin_dir>
	DIO_SET_VAL(DHT_PIN, DIO_HIGH);
     1ce:	61 e0       	ldi	r22, 0x01	; 1
     1d0:	88 e0       	ldi	r24, 0x08	; 8
     1d2:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     1d6:	08 95       	ret

000001d8 <DHT11_read>:

}


uint8_t DHT11_read(char *arr)
{
     1d8:	7f 92       	push	r7
     1da:	8f 92       	push	r8
     1dc:	9f 92       	push	r9
     1de:	af 92       	push	r10
     1e0:	bf 92       	push	r11
     1e2:	cf 92       	push	r12
     1e4:	df 92       	push	r13
     1e6:	ef 92       	push	r14
     1e8:	ff 92       	push	r15
     1ea:	0f 93       	push	r16
     1ec:	1f 93       	push	r17
     1ee:	cf 93       	push	r28
     1f0:	df 93       	push	r29
     1f2:	6c 01       	movw	r12, r24
	DIO_SET_DIR(DHT_PIN, DIO_OUTPUT);
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	88 e0       	ldi	r24, 0x08	; 8
     1f8:	0e 94 a3 01 	call	0x346	; 0x346 <dio_set_pin_dir>
	DIO_SET_VAL(DHT_PIN, DIO_LOW);   //first send start signal(low signal for 18 ms)
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	88 e0       	ldi	r24, 0x08	; 8
     200:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
	);
}

void _delay_ms_loop(uint16_t __count)
{
	__asm__ volatile (
     204:	80 ea       	ldi	r24, 0xA0	; 160
     206:	9c e8       	ldi	r25, 0x8C	; 140
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	f1 f7       	brne	.-4      	; 0x208 <DHT11_read+0x30>
	 
	int8_t sw_timer = 6; 
	delay_msec(18);
	
	DIO_SET_DIR(DHT_PIN, DIO_PULLUP);//turn to PU and wait for DHT 11 response
     20c:	62 e0       	ldi	r22, 0x02	; 2
     20e:	88 e0       	ldi	r24, 0x08	; 8
     210:	0e 94 a3 01 	call	0x346	; 0x346 <dio_set_pin_dir>
     214:	c5 e0       	ldi	r28, 0x05	; 5
static inline void _delay_ms_loop(uint16_t __count) __attribute__((always_inline));


void _delay_us_loop(uint8_t __count)
{
	__asm__ volatile (
     216:	de e1       	ldi	r29, 0x1E	; 30
     218:	06 c0       	rjmp	.+12     	; 0x226 <DHT11_read+0x4e>
     21a:	8d 2f       	mov	r24, r29
     21c:	8a 95       	dec	r24
     21e:	f1 f7       	brne	.-4      	; 0x21c <DHT11_read+0x44>
     220:	c1 50       	subi	r28, 0x01	; 1
	
	//wait 75 us for response (module outputting low signal) (high signal between 20-40 usec) 
	while ((--sw_timer) && (DIO_READ(DHT_PIN)))
     222:	09 f4       	brne	.+2      	; 0x226 <DHT11_read+0x4e>
     224:	6d c0       	rjmp	.+218    	; 0x300 <DHT11_read+0x128>
     226:	88 e0       	ldi	r24, 0x08	; 8
     228:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <dio_get_pin>
     22c:	81 11       	cpse	r24, r1
     22e:	f5 cf       	rjmp	.-22     	; 0x21a <DHT11_read+0x42>
     230:	77 c0       	rjmp	.+238    	; 0x320 <DHT11_read+0x148>
     232:	8d 2f       	mov	r24, r29
     234:	8a 95       	dec	r24
     236:	f1 f7       	brne	.-4      	; 0x234 <DHT11_read+0x5c>
     238:	c1 50       	subi	r28, 0x01	; 1
		return DHT11_NO_LOW_80US_RESPONSE;
	}
	
	//wait 120 usec for response -DHT outputting high signal- (low signal lasts for 80usec) 
	sw_timer = 7;
	while ((--sw_timer) && !(DIO_READ(DHT_PIN)))
     23a:	09 f4       	brne	.+2      	; 0x23e <DHT11_read+0x66>
     23c:	63 c0       	rjmp	.+198    	; 0x304 <DHT11_read+0x12c>
     23e:	88 e0       	ldi	r24, 0x08	; 8
     240:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <dio_get_pin>
     244:	88 23       	and	r24, r24
     246:	a9 f3       	breq	.-22     	; 0x232 <DHT11_read+0x5a>
	{
		delay_usec(20);
	}
	
	if (!sw_timer)
     248:	cc 23       	and	r28, r28
     24a:	09 f4       	brne	.+2      	; 0x24e <DHT11_read+0x76>
     24c:	5d c0       	rjmp	.+186    	; 0x308 <DHT11_read+0x130>
     24e:	ce e1       	ldi	r28, 0x1E	; 30
     250:	03 c0       	rjmp	.+6      	; 0x258 <DHT11_read+0x80>
     252:	8c 2f       	mov	r24, r28
     254:	8a 95       	dec	r24
     256:	f1 f7       	brne	.-4      	; 0x254 <DHT11_read+0x7c>
	{
		return DHT11_NO_HIGH_80US_RESPONSE;
	}
	
	sw_timer = 8;
	while (DIO_READ(DHT_PIN))
     258:	88 e0       	ldi	r24, 0x08	; 8
     25a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <dio_get_pin>
     25e:	81 11       	cpse	r24, r1
     260:	f8 cf       	rjmp	.-16     	; 0x252 <DHT11_read+0x7a>
     262:	56 01       	movw	r10, r12
     264:	85 e0       	ldi	r24, 0x05	; 5
     266:	c8 0e       	add	r12, r24
     268:	d1 1c       	adc	r13, r1
     26a:	d4 e0       	ldi	r29, 0x04	; 4
     26c:	0f 2e       	mov	r0, r31
     26e:	f0 e5       	ldi	r31, 0x50	; 80
     270:	7f 2e       	mov	r7, r31
     272:	f0 2d       	mov	r31, r0
			
			
			
			if(DIO_READ(DHT_PIN)) //DIO_READ(DHT_PIN)//if the high signal is more than 40us (means high bit) (70us)
			{	
				arr[cnt] |= (1 << (7 - j)); //put 1 to the 
     274:	88 24       	eor	r8, r8
     276:	83 94       	inc	r8
     278:	91 2c       	mov	r9, r1
     27a:	75 01       	movw	r14, r10
	}
	
		
	for (unint8_t cnt = 0; cnt < 5; cnt++ )		//5 times for each 8 bit of the 40-bit data
	{	
		arr[cnt] = 0;					//clear the bit from the previous reading
     27c:	f5 01       	movw	r30, r10
     27e:	10 82       	st	Z, r1
     280:	07 e0       	ldi	r16, 0x07	; 7
     282:	10 e0       	ldi	r17, 0x00	; 0
     284:	32 c0       	rjmp	.+100    	; 0x2ea <DHT11_read+0x112>
     286:	8d 2f       	mov	r24, r29
     288:	8a 95       	dec	r24
     28a:	f1 f7       	brne	.-4      	; 0x288 <DHT11_read+0xb0>
     28c:	c1 50       	subi	r28, 0x01	; 1
			/*if the module has reached this stated then it's assumed that it's working properly and there is no need
			to create a sw timer for any further polling routines*/
			
			//sw timer to wait 70 usec for action - low signal- (repsonse takes 50 usec)
			sw_timer = 35;
			while ((--sw_timer) && !(DIO_READ(DHT_PIN))) //wait until the high wave comes then start testing
     28e:	09 f4       	brne	.+2      	; 0x292 <DHT11_read+0xba>
     290:	3d c0       	rjmp	.+122    	; 0x30c <DHT11_read+0x134>
     292:	88 e0       	ldi	r24, 0x08	; 8
     294:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <dio_get_pin>
     298:	88 23       	and	r24, r24
     29a:	a9 f3       	breq	.-22     	; 0x286 <DHT11_read+0xae>
			{
				delay_usec(2);
			}
			
			if (!sw_timer)
     29c:	cc 23       	and	r28, r28
     29e:	09 f4       	brne	.+2      	; 0x2a2 <DHT11_read+0xca>
     2a0:	37 c0       	rjmp	.+110    	; 0x310 <DHT11_read+0x138>
     2a2:	87 2d       	mov	r24, r7
     2a4:	8a 95       	dec	r24
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <DHT11_read+0xcc>

			delay_usec(40); // go th the part of the signal where you check for the signal part 
			
			
			
			if(DIO_READ(DHT_PIN)) //DIO_READ(DHT_PIN)//if the high signal is more than 40us (means high bit) (70us)
     2a8:	88 e0       	ldi	r24, 0x08	; 8
     2aa:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <dio_get_pin>
     2ae:	88 23       	and	r24, r24
     2b0:	c9 f0       	breq	.+50     	; 0x2e4 <DHT11_read+0x10c>
			{	
				arr[cnt] |= (1 << (7 - j)); //put 1 to the 
     2b2:	f7 01       	movw	r30, r14
     2b4:	20 81       	ld	r18, Z
     2b6:	c4 01       	movw	r24, r8
     2b8:	00 2e       	mov	r0, r16
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DHT11_read+0xe8>
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	0a 94       	dec	r0
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DHT11_read+0xe4>
     2c4:	82 2b       	or	r24, r18
     2c6:	80 83       	st	Z, r24
     2c8:	c3 e1       	ldi	r28, 0x13	; 19
     2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <DHT11_read+0xfe>
     2cc:	8d 2f       	mov	r24, r29
     2ce:	8a 95       	dec	r24
     2d0:	f1 f7       	brne	.-4      	; 0x2ce <DHT11_read+0xf6>
     2d2:	c1 50       	subi	r28, 0x01	; 1
				
				//mostly there will be atmost 30 usec left until this high signal finishes 
				sw_timer = 20;
				while((--sw_timer) && (DIO_READ(DHT_PIN))) //DIO_READ(DHT_PIN)
     2d4:	f9 f0       	breq	.+62     	; 0x314 <DHT11_read+0x13c>
     2d6:	88 e0       	ldi	r24, 0x08	; 8
     2d8:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <dio_get_pin>
     2dc:	81 11       	cpse	r24, r1
     2de:	f6 cf       	rjmp	.-20     	; 0x2cc <DHT11_read+0xf4>
				{
					delay_usec(2);
				}
				
				if (!sw_timer)
     2e0:	cc 23       	and	r28, r28
     2e2:	d1 f0       	breq	.+52     	; 0x318 <DHT11_read+0x140>
     2e4:	01 50       	subi	r16, 0x01	; 1
     2e6:	11 09       	sbc	r17, r1
     2e8:	10 f0       	brcs	.+4      	; 0x2ee <DHT11_read+0x116>
	while ((--sw_timer) && (DIO_READ(DHT_PIN)))
	{
		delay_usec(15);
	}
	
	if (!sw_timer)
     2ea:	c2 e2       	ldi	r28, 0x22	; 34
     2ec:	d2 cf       	rjmp	.-92     	; 0x292 <DHT11_read+0xba>
     2ee:	8f ef       	ldi	r24, 0xFF	; 255
     2f0:	a8 1a       	sub	r10, r24
     2f2:	b8 0a       	sbc	r11, r24
	{
		return DHT11_NO_FIRST_DATA;
	}
	
		
	for (unint8_t cnt = 0; cnt < 5; cnt++ )		//5 times for each 8 bit of the 40-bit data
     2f4:	ac 14       	cp	r10, r12
     2f6:	bd 04       	cpc	r11, r13
     2f8:	09 f0       	breq	.+2      	; 0x2fc <DHT11_read+0x124>
     2fa:	bf cf       	rjmp	.-130    	; 0x27a <DHT11_read+0xa2>
			
		}// for (j = 0
				
	} //for (cnt = 0;
	
	return SUCCESS;
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	15 c0       	rjmp	.+42     	; 0x32a <DHT11_read+0x152>
		delay_usec(15);
	}
	
	if (!sw_timer)
	{
		return DHT11_NO_LOW_80US_RESPONSE;
     300:	8f ef       	ldi	r24, 0xFF	; 255
     302:	13 c0       	rjmp	.+38     	; 0x32a <DHT11_read+0x152>
		delay_usec(20);
	}
	
	if (!sw_timer)
	{
		return DHT11_NO_HIGH_80US_RESPONSE;
     304:	8e ef       	ldi	r24, 0xFE	; 254
     306:	11 c0       	rjmp	.+34     	; 0x32a <DHT11_read+0x152>
     308:	8e ef       	ldi	r24, 0xFE	; 254
     30a:	0f c0       	rjmp	.+30     	; 0x32a <DHT11_read+0x152>
				delay_usec(2);
			}
			
			if (!sw_timer)
			{
				return DHT11_DATA_LOW_ERROR;
     30c:	8c ef       	ldi	r24, 0xFC	; 252
     30e:	0d c0       	rjmp	.+26     	; 0x32a <DHT11_read+0x152>
     310:	8c ef       	ldi	r24, 0xFC	; 252
     312:	0b c0       	rjmp	.+22     	; 0x32a <DHT11_read+0x152>
					delay_usec(2);
				}
				
				if (!sw_timer)
				{
					return DHT11_DATA_HIGH_ERROR; 
     314:	8b ef       	ldi	r24, 0xFB	; 251
     316:	09 c0       	rjmp	.+18     	; 0x32a <DHT11_read+0x152>
     318:	8b ef       	ldi	r24, 0xFB	; 251
     31a:	07 c0       	rjmp	.+14     	; 0x32a <DHT11_read+0x152>
		delay_usec(15);
	}
	
	if (!sw_timer)
	{
		return DHT11_NO_LOW_80US_RESPONSE;
     31c:	8f ef       	ldi	r24, 0xFF	; 255
     31e:	05 c0       	rjmp	.+10     	; 0x32a <DHT11_read+0x152>
	while ((--sw_timer) && (DIO_READ(DHT_PIN)))
	{
		delay_usec(15);
	}
	
	if (!sw_timer)
     320:	cc 23       	and	r28, r28
     322:	e1 f3       	breq	.-8      	; 0x31c <DHT11_read+0x144>
     324:	c6 e0       	ldi	r28, 0x06	; 6
     326:	d8 e2       	ldi	r29, 0x28	; 40
     328:	8a cf       	rjmp	.-236    	; 0x23e <DHT11_read+0x66>
		}// for (j = 0
				
	} //for (cnt = 0;
	
	return SUCCESS;
} //void DHT
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	df 90       	pop	r13
     338:	cf 90       	pop	r12
     33a:	bf 90       	pop	r11
     33c:	af 90       	pop	r10
     33e:	9f 90       	pop	r9
     340:	8f 90       	pop	r8
     342:	7f 90       	pop	r7
     344:	08 95       	ret

00000346 <dio_set_pin_dir>:
void dio_set_pin_dir(uint8_t a_pin_no,uint8_t a_pin_dir)
{
	//determine the port that was addressed from the dio_pin number 
	uint8_t pin_port= a_pin_no / NUM_PIN_PER_PORT;
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
     346:	e8 2f       	mov	r30, r24
     348:	e6 95       	lsr	r30
     34a:	e6 95       	lsr	r30
     34c:	e6 95       	lsr	r30
     34e:	87 70       	andi	r24, 0x07	; 7
	
	//of the direction is either input or output configure it
	if (a_pin_dir != DIO_PULLUP)
     350:	62 30       	cpi	r22, 0x02	; 2
     352:	e1 f0       	breq	.+56     	; 0x38c <dio_set_pin_dir+0x46>
	{
		//put this direction in the specific pin_no in the specific port 
		ASSIGN_BIT(*(DDR_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, 
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	9f 01       	movw	r18, r30
     358:	22 0f       	add	r18, r18
     35a:	33 1f       	adc	r19, r19
     35c:	e2 0f       	add	r30, r18
     35e:	f3 1f       	adc	r31, r19
     360:	f1 95       	neg	r31
     362:	e1 95       	neg	r30
     364:	f1 09       	sbc	r31, r1
     366:	22 ad       	ldd	r18, Z+58	; 0x3a
     368:	41 e0       	ldi	r20, 0x01	; 1
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	08 2e       	mov	r0, r24
     36e:	02 c0       	rjmp	.+4      	; 0x374 <dio_set_pin_dir+0x2e>
     370:	44 0f       	add	r20, r20
     372:	55 1f       	adc	r21, r21
     374:	0a 94       	dec	r0
     376:	e2 f7       	brpl	.-8      	; 0x370 <dio_set_pin_dir+0x2a>
     378:	94 2f       	mov	r25, r20
     37a:	90 95       	com	r25
     37c:	92 23       	and	r25, r18
     37e:	01 c0       	rjmp	.+2      	; 0x382 <dio_set_pin_dir+0x3c>
     380:	66 0f       	add	r22, r22
     382:	8a 95       	dec	r24
     384:	ea f7       	brpl	.-6      	; 0x380 <dio_set_pin_dir+0x3a>
     386:	69 2b       	or	r22, r25
     388:	62 af       	std	Z+58, r22	; 0x3a
     38a:	08 95       	ret
		             a_pin_dir);
	}
	else //if pull up then make it input and put high to the PORT reg
	{ 
		// assign pin as input
		ASSIGN_BIT(*(DDR_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, 0); 
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	9f 01       	movw	r18, r30
     390:	22 0f       	add	r18, r18
     392:	33 1f       	adc	r19, r19
     394:	e2 0f       	add	r30, r18
     396:	f3 1f       	adc	r31, r19
     398:	f1 95       	neg	r31
     39a:	e1 95       	neg	r30
     39c:	f1 09       	sbc	r31, r1
     39e:	42 ad       	ldd	r20, Z+58	; 0x3a
     3a0:	21 e0       	ldi	r18, 0x01	; 1
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	b9 01       	movw	r22, r18
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <dio_set_pin_dir+0x66>
     3a8:	66 0f       	add	r22, r22
     3aa:	77 1f       	adc	r23, r23
     3ac:	8a 95       	dec	r24
     3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <dio_set_pin_dir+0x62>
     3b0:	cb 01       	movw	r24, r22
     3b2:	96 2f       	mov	r25, r22
     3b4:	90 95       	com	r25
     3b6:	94 23       	and	r25, r20
     3b8:	92 af       	std	Z+58, r25	; 0x3a
		// put 1 to port pin to make it pull up
		ASSIGN_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, 1); 
     3ba:	93 ad       	ldd	r25, Z+59	; 0x3b
     3bc:	89 2b       	or	r24, r25
     3be:	83 af       	std	Z+59, r24	; 0x3b
     3c0:	08 95       	ret

000003c2 <dio_get_pin>:
}

bool dio_get_pin(uint8_t a_pin_no)
{
	//determine the port that was addressed from the dio_pin number 
	uint8_t pin_port= a_pin_no / NUM_PIN_PER_PORT;
     3c2:	48 2f       	mov	r20, r24
     3c4:	46 95       	lsr	r20
     3c6:	46 95       	lsr	r20
     3c8:	46 95       	lsr	r20
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
	
	//return the state of the pin 	
	return (GET_BIT(*(PIN_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port));
     3ca:	24 2f       	mov	r18, r20
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	f9 01       	movw	r30, r18
     3d0:	ee 0f       	add	r30, r30
     3d2:	ff 1f       	adc	r31, r31
     3d4:	2e 0f       	add	r18, r30
     3d6:	3f 1f       	adc	r19, r31
     3d8:	ee 27       	eor	r30, r30
     3da:	ff 27       	eor	r31, r31
     3dc:	e2 1b       	sub	r30, r18
     3de:	f3 0b       	sbc	r31, r19
     3e0:	91 ad       	ldd	r25, Z+57	; 0x39
     3e2:	44 0f       	add	r20, r20
     3e4:	44 0f       	add	r20, r20
     3e6:	44 0f       	add	r20, r20
     3e8:	84 1b       	sub	r24, r20
     3ea:	21 e0       	ldi	r18, 0x01	; 1
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <dio_get_pin+0x32>
     3f0:	22 0f       	add	r18, r18
     3f2:	33 1f       	adc	r19, r19
     3f4:	8a 95       	dec	r24
     3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <dio_get_pin+0x2e>
     3f8:	89 2f       	mov	r24, r25
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	28 23       	and	r18, r24
     3fe:	39 23       	and	r19, r25
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	23 2b       	or	r18, r19
     404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	80 e0       	ldi	r24, 0x00	; 0
}
     408:	08 95       	ret

0000040a <dio_set_pin_val>:


void dio_set_pin_val(uint8_t a_pin_no, uint8_t PinVal)
{
     40a:	96 2f       	mov	r25, r22
	//determine the port that was addressed from the dio_pin number
	uint8_t pin_port = a_pin_no / NUM_PIN_PER_PORT;
     40c:	38 2f       	mov	r19, r24
     40e:	36 95       	lsr	r19
     410:	36 95       	lsr	r19
     412:	36 95       	lsr	r19
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
	
	//assign the value to the specific pin_no in the specific port 
	ASSIGN_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, PinVal);
     414:	e3 2f       	mov	r30, r19
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	af 01       	movw	r20, r30
     41a:	44 0f       	add	r20, r20
     41c:	55 1f       	adc	r21, r21
     41e:	e4 0f       	add	r30, r20
     420:	f5 1f       	adc	r31, r21
     422:	f1 95       	neg	r31
     424:	e1 95       	neg	r30
     426:	f1 09       	sbc	r31, r1
     428:	63 ad       	ldd	r22, Z+59	; 0x3b
     42a:	33 0f       	add	r19, r19
     42c:	33 0f       	add	r19, r19
     42e:	33 0f       	add	r19, r19
     430:	83 1b       	sub	r24, r19
     432:	21 e0       	ldi	r18, 0x01	; 1
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	08 2e       	mov	r0, r24
     438:	02 c0       	rjmp	.+4      	; 0x43e <dio_set_pin_val+0x34>
     43a:	22 0f       	add	r18, r18
     43c:	33 1f       	adc	r19, r19
     43e:	0a 94       	dec	r0
     440:	e2 f7       	brpl	.-8      	; 0x43a <dio_set_pin_val+0x30>
     442:	20 95       	com	r18
     444:	26 23       	and	r18, r22
     446:	69 2f       	mov	r22, r25
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	02 c0       	rjmp	.+4      	; 0x450 <dio_set_pin_val+0x46>
     44c:	66 0f       	add	r22, r22
     44e:	77 1f       	adc	r23, r23
     450:	8a 95       	dec	r24
     452:	e2 f7       	brpl	.-8      	; 0x44c <dio_set_pin_val+0x42>
     454:	62 2b       	or	r22, r18
     456:	63 af       	std	Z+59, r22	; 0x3b
     458:	08 95       	ret

0000045a <dio_togg_pin>:
}

void dio_togg_pin(uint8_t a_pin_no)
{
	//determine the port that was addressed from the dio_pin number
	uint8_t pin_port = a_pin_no / NUM_PIN_PER_PORT;
     45a:	28 2f       	mov	r18, r24
     45c:	26 95       	lsr	r18
     45e:	26 95       	lsr	r18
     460:	26 95       	lsr	r18
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
	
	//toggle the specific pin_no in the specific port 
	TOGGLE_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port);
     462:	e2 2f       	mov	r30, r18
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	af 01       	movw	r20, r30
     468:	44 0f       	add	r20, r20
     46a:	55 1f       	adc	r21, r21
     46c:	e4 0f       	add	r30, r20
     46e:	f5 1f       	adc	r31, r21
     470:	f1 95       	neg	r31
     472:	e1 95       	neg	r30
     474:	f1 09       	sbc	r31, r1
     476:	33 ad       	ldd	r19, Z+59	; 0x3b
     478:	22 0f       	add	r18, r18
     47a:	22 0f       	add	r18, r18
     47c:	22 0f       	add	r18, r18
     47e:	82 1b       	sub	r24, r18
     480:	28 2f       	mov	r18, r24
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	02 c0       	rjmp	.+4      	; 0x48c <__stack+0x2d>
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	2a 95       	dec	r18
     48e:	e2 f7       	brpl	.-8      	; 0x488 <__stack+0x29>
     490:	83 27       	eor	r24, r19
     492:	83 af       	std	Z+59, r24	; 0x3b
     494:	08 95       	ret

00000496 <__vector_8>:
#define ACTIVATE_ICP() TCCR1B |= (0x02)
#define DEACTIVATE_ICP() TCCR1B &= ~(0x07)


void CONFIG_TMR1_OVF_ISR()
{
     496:	1f 92       	push	r1
     498:	0f 92       	push	r0
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	0f 92       	push	r0
     49e:	11 24       	eor	r1, r1
     4a0:	8f 93       	push	r24
     4a2:	9f 93       	push	r25
	ovf_counter++ ;
     4a4:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <ovf_counter>
     4a8:	90 91 98 00 	lds	r25, 0x0098	; 0x800098 <ovf_counter+0x1>
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	90 93 98 00 	sts	0x0098, r25	; 0x800098 <ovf_counter+0x1>
     4b2:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <ovf_counter>
}
     4b6:	9f 91       	pop	r25
     4b8:	8f 91       	pop	r24
     4ba:	0f 90       	pop	r0
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <__vector_5>:

void CONFIG_TMR1_CAPT_ISR()
{
     4c4:	1f 92       	push	r1
     4c6:	0f 92       	push	r0
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	0f 92       	push	r0
     4cc:	11 24       	eor	r1, r1
     4ce:	8f 93       	push	r24
	TCNT1H = 0;
     4d0:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;
     4d2:	1c bc       	out	0x2c, r1	; 44
	
	if (echoing == 0) // if its the start of the signal .. meaning if the capture detected a rusing edge of the echo 
     4d4:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <echoing>
     4d8:	81 11       	cpse	r24, r1
     4da:	07 c0       	rjmp	.+14     	; 0x4ea <__vector_5+0x26>
	{
		TCCR1B &= ~(1 << ICES1); //make the capture at the falling edge to detect the end of the signal and start counting the time
     4dc:	8e b5       	in	r24, 0x2e	; 46
     4de:	8f 7b       	andi	r24, 0xBF	; 191
     4e0:	8e bd       	out	0x2e, r24	; 46
		echoing = 1; // meaning start of the echo signal and counting the time
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <echoing>
     4e8:	09 c0       	rjmp	.+18     	; 0x4fc <__vector_5+0x38>
	}
	else  //if its the end of the signal
	{
		DEACTIVATE_ICP(); //deactivate the timer .. we will activate it again when we send the trigger
     4ea:	8e b5       	in	r24, 0x2e	; 46
     4ec:	88 7f       	andi	r24, 0xF8	; 248
     4ee:	8e bd       	out	0x2e, r24	; 46
		
		TCCR1B |= (1 << ICES1);//make the edge rising again in order for when the next signal occur it captures its rising signal 
     4f0:	8e b5       	in	r24, 0x2e	; 46
     4f2:	80 64       	ori	r24, 0x40	; 64
     4f4:	8e bd       	out	0x2e, r24	; 46
		echoing = 2;
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <echoing>
	}

}
     4fc:	8f 91       	pop	r24
     4fe:	0f 90       	pop	r0
     500:	0f be       	out	0x3f, r0	; 63
     502:	0f 90       	pop	r0
     504:	1f 90       	pop	r1
     506:	18 95       	reti

00000508 <hcsr04_init>:

void hcsr04_init()
{
	DIO_SET_DIR(HCSR04_TR_PIN, DIO_OUTPUT);
     508:	61 e0       	ldi	r22, 0x01	; 1
     50a:	80 e1       	ldi	r24, 0x10	; 16
     50c:	0e 94 a3 01 	call	0x346	; 0x346 <dio_set_pin_dir>
	DIO_SET_VAL(HCSR04_TR_PIN, DIO_LOW);
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	80 e1       	ldi	r24, 0x10	; 16
     514:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
	
// 	HCSR04_TR_DIR |= (1 << HCSR04_TR_PIN);
// 	HCSR04_TR_PORT &= ~(1 << HCSR04_TR_PIN);
	TCNT1L = 0;
     518:	1c bc       	out	0x2c, r1	; 44
	TCNT1H = 0;
     51a:	1d bc       	out	0x2d, r1	; 45
	TIMSK  |=  (1 << TICIE1) | (1 << TOIE1);
     51c:	89 b7       	in	r24, 0x39	; 57
     51e:	84 62       	ori	r24, 0x24	; 36
     520:	89 bf       	out	0x39, r24	; 57
	TCCR1B |= (1 << ICES1); // pre scaler of 8 --- positive edge trigger  // do not start timer yet
     522:	8e b5       	in	r24, 0x2e	; 46
     524:	80 64       	ori	r24, 0x40	; 64
     526:	8e bd       	out	0x2e, r24	; 46
     528:	08 95       	ret

0000052a <hcsr04_trigger>:
}


void hcsr04_trigger()
{
	DIO_SET_VAL(HCSR04_TR_PIN, DIO_HIGH);
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	80 e1       	ldi	r24, 0x10	; 16
     52e:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     532:	8a e1       	ldi	r24, 0x1A	; 26
     534:	8a 95       	dec	r24
     536:	f1 f7       	brne	.-4      	; 0x534 <hcsr04_trigger+0xa>
     538:	00 c0       	rjmp	.+0      	; 0x53a <hcsr04_trigger+0x10>
	
	//HCSR04_TR_PORT |= (1 << HCSR04_TR_PIN);
	_delay_us(10);
	DIO_SET_VAL(HCSR04_TR_PIN, DIO_LOW);
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	80 e1       	ldi	r24, 0x10	; 16
     53e:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
	//HCSR04_TR_PORT &= ~(1 << HCSR04_TR_PIN);
	ACTIVATE_ICP();
     542:	8e b5       	in	r24, 0x2e	; 46
     544:	82 60       	ori	r24, 0x02	; 2
     546:	8e bd       	out	0x2e, r24	; 46
     548:	08 95       	ret

0000054a <hcsr04_cm>:
uint16_t hcsr04_cm()
{
	uint16_t icr_result;
	uint32_t hcs_cm;
	
	icr_result = ICR1L;
     54a:	26 b5       	in	r18, 0x26	; 38
	icr_result |= ((uint16_t)ICR1H << 8);
     54c:	87 b5       	in	r24, 0x27	; 39
	
	
	hcs_cm = (uint32_t)icr_result + ((uint32_t)ovf_counter << 16);
     54e:	60 91 97 00 	lds	r22, 0x0097	; 0x800097 <ovf_counter>
     552:	70 91 98 00 	lds	r23, 0x0098	; 0x800098 <ovf_counter+0x1>
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	38 2b       	or	r19, r24
     55a:	cb 01       	movw	r24, r22
     55c:	a0 e0       	ldi	r26, 0x00	; 0
     55e:	b0 e0       	ldi	r27, 0x00	; 0
     560:	dc 01       	movw	r26, r24
     562:	99 27       	eor	r25, r25
     564:	88 27       	eor	r24, r24
     566:	bc 01       	movw	r22, r24
     568:	cd 01       	movw	r24, r26
     56a:	62 0f       	add	r22, r18
     56c:	73 1f       	adc	r23, r19
     56e:	81 1d       	adc	r24, r1
     570:	91 1d       	adc	r25, r1
	hcs_cm /= 58;
	echoing = 0;
     572:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <echoing>
	ovf_counter = 0;
     576:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <ovf_counter+0x1>
     57a:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <ovf_counter>
	
	return (uint16_t)hcs_cm;
     57e:	2a e3       	ldi	r18, 0x3A	; 58
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	40 e0       	ldi	r20, 0x00	; 0
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__udivmodsi4>
}
     58a:	c9 01       	movw	r24, r18
     58c:	08 95       	ret

0000058e <hcsr04_data_ready>:



bool hcsr04_data_ready()
{
	return (echoing == 2);
     58e:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <echoing>
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	09 f0       	breq	.+2      	; 0x59a <hcsr04_data_ready+0xc>
     598:	80 e0       	ldi	r24, 0x00	; 0
}
     59a:	08 95       	ret

0000059c <store_dht>:
		 


#if MCP_ACTIVATED == 1
uint8_t store_dht() // stores dht information in the TX0 data
{
     59c:	1f 93       	push	r17
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
     5a6:	62 97       	sbiw	r28, 0x12	; 18
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
	char DHT11_data[5] = {0};
     5b2:	25 e0       	ldi	r18, 0x05	; 5
     5b4:	ce 01       	movw	r24, r28
     5b6:	01 96       	adiw	r24, 0x01	; 1
     5b8:	dc 01       	movw	r26, r24
     5ba:	e2 2f       	mov	r30, r18
     5bc:	1d 92       	st	X+, r1
     5be:	ea 95       	dec	r30
     5c0:	e9 f7       	brne	.-6      	; 0x5bc <store_dht+0x20>
	char t_h[5]  = {0};
     5c2:	fe 01       	movw	r30, r28
     5c4:	36 96       	adiw	r30, 0x06	; 6
     5c6:	df 01       	movw	r26, r30
     5c8:	1d 92       	st	X+, r1
     5ca:	2a 95       	dec	r18
     5cc:	e9 f7       	brne	.-6      	; 0x5c8 <store_dht+0x2c>
// 	{
// 		DIO_TOGGLE(1);
// 		delay_msec(500);
// 	}
	
	if (DHT11_read(DHT11_data) != SUCCESS) 
     5ce:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <DHT11_read>
     5d2:	18 2f       	mov	r17, r24
     5d4:	81 30       	cpi	r24, 0x01	; 1
     5d6:	21 f5       	brne	.+72     	; 0x620 <store_dht+0x84>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	4a e0       	ldi	r20, 0x0A	; 10
     5dc:	be 01       	movw	r22, r28
     5de:	6a 5f       	subi	r22, 0xFA	; 250
     5e0:	7f 4f       	sbci	r23, 0xFF	; 255
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__itoa_ncheck>
// 	}
	
	//the humidity data
	itoa(DHT11_data[0], t_h, 10);
	
	buff[0] = t_h[0];
     5e8:	8e 81       	ldd	r24, Y+6	; 0x06
     5ea:	8b 87       	std	Y+11, r24	; 0x0b
	buff[1] = t_h[1];
     5ec:	8f 81       	ldd	r24, Y+7	; 0x07
     5ee:	8c 87       	std	Y+12, r24	; 0x0c
     5f0:	8b 81       	ldd	r24, Y+3	; 0x03
     5f2:	4a e0       	ldi	r20, 0x0A	; 10
     5f4:	be 01       	movw	r22, r28
     5f6:	6a 5f       	subi	r22, 0xFA	; 250
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__itoa_ncheck>
	
	//the temp data
	itoa(DHT11_data[2], t_h, 10);
	buff[2] = t_h[0];
     600:	8e 81       	ldd	r24, Y+6	; 0x06
     602:	8d 87       	std	Y+13, r24	; 0x0d
	buff[3] = t_h[1];
     604:	8f 81       	ldd	r24, Y+7	; 0x07
     606:	8e 87       	std	Y+14, r24	; 0x0e
	buff[4] = t_h[2];
     608:	88 85       	ldd	r24, Y+8	; 0x08
     60a:	8f 87       	std	Y+15, r24	; 0x0f
	buff[5] = 0;
     60c:	18 8a       	std	Y+16, r1	; 0x10
	mcp_set_tx_data(MCP_TX(0), DATA_FRAME, buff, 6);
     60e:	26 e0       	ldi	r18, 0x06	; 6
     610:	ae 01       	movw	r20, r28
     612:	45 5f       	subi	r20, 0xF5	; 245
     614:	5f 4f       	sbci	r21, 0xFF	; 255
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	0e 94 24 05 	call	0xa48	; 0xa48 <mcp_set_tx_data>
	
	return SUCCESS;
     61e:	01 c0       	rjmp	.+2      	; 0x622 <store_dht+0x86>
// 		delay_msec(500);
// 	}
	
	if (DHT11_read(DHT11_data) != SUCCESS) 
	{
		return SENSOR_ERROR;
     620:	1f ef       	ldi	r17, 0xFF	; 255
	buff[4] = t_h[2];
	buff[5] = 0;
	mcp_set_tx_data(MCP_TX(0), DATA_FRAME, buff, 6);
	
	return SUCCESS;
}
     622:	81 2f       	mov	r24, r17
     624:	62 96       	adiw	r28, 0x12	; 18
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	08 95       	ret

00000638 <store_mq2>:

void store_mq2()
{
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	28 97       	sbiw	r28, 0x08	; 8
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
	uint16_t mq2_result = 0;
	uint8_t buff[8];
	mq2_result = MQ2_get_result();
     64c:	0e 94 c9 07 	call	0xf92	; 0xf92 <MQ2_get_result>
     650:	4a e0       	ldi	r20, 0x0A	; 10
     652:	be 01       	movw	r22, r28
     654:	6f 5f       	subi	r22, 0xFF	; 255
     656:	7f 4f       	sbci	r23, 0xFF	; 255
     658:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <__itoa_ncheck>
	itoa(mq2_result, buff, 10);
	//uart_write_str_mark(UART0, buff, 0);
	
	mcp_set_tx_data(MCP_TX(1), DATA_FRAME, buff, 8);
     65c:	28 e0       	ldi	r18, 0x08	; 8
     65e:	ae 01       	movw	r20, r28
     660:	4f 5f       	subi	r20, 0xFF	; 255
     662:	5f 4f       	sbci	r21, 0xFF	; 255
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	0e 94 24 05 	call	0xa48	; 0xa48 <mcp_set_tx_data>
}
     66c:	28 96       	adiw	r28, 0x08	; 8
     66e:	0f b6       	in	r0, 0x3f	; 63
     670:	f8 94       	cli
     672:	de bf       	out	0x3e, r29	; 62
     674:	0f be       	out	0x3f, r0	; 63
     676:	cd bf       	out	0x3d, r28	; 61
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <main>:

void store_mq2 ();
void send_all_readings();

int main(void)
{
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	27 97       	sbiw	r28, 0x07	; 7
     688:	0f b6       	in	r0, 0x3f	; 63
     68a:	f8 94       	cli
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	0f be       	out	0x3f, r0	; 63
     690:	cd bf       	out	0x3d, r28	; 61
	DIO_SET_DIR(1, DIO_OUTPUT);
     692:	61 e0       	ldi	r22, 0x01	; 1
     694:	89 e0       	ldi	r24, 0x09	; 9
     696:	0e 94 a3 01 	call	0x346	; 0x346 <dio_set_pin_dir>
	DIO_SET_DIR(2, DIO_OUTPUT);
     69a:	61 e0       	ldi	r22, 0x01	; 1
     69c:	8a e0       	ldi	r24, 0x0A	; 10
     69e:	0e 94 a3 01 	call	0x346	; 0x346 <dio_set_pin_dir>
	DIO_SET_DIR(13, DIO_PULLUP);
     6a2:	62 e0       	ldi	r22, 0x02	; 2
     6a4:	8d e1       	ldi	r24, 0x1D	; 29
     6a6:	0e 94 a3 01 	call	0x346	; 0x346 <dio_set_pin_dir>
	DIO_SET_DIR(30, DIO_OUTPUT);
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	0e 94 a3 01 	call	0x346	; 0x346 <dio_set_pin_dir>
	
	volatile uint16_t mq2_result = 0;
     6b2:	1a 82       	std	Y+2, r1	; 0x02
     6b4:	19 82       	std	Y+1, r1	; 0x01
	volatile uint16_t hcs_cm = 0;
     6b6:	1c 82       	std	Y+4, r1	; 0x04
     6b8:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t buff[5];

	
	volatile uint8_t state = 0;
     6ba:	1d 82       	std	Y+5, r1	; 0x05
	volatile uint8_t break_flag = 0;
     6bc:	1e 82       	std	Y+6, r1	; 0x06
	
	uart_init(UART0, 9600, DATA_BITS_8, TX_RX, PARITY_NO, STOP_BITS_1, TX_R_RX_F);
     6be:	a1 2c       	mov	r10, r1
     6c0:	c1 2c       	mov	r12, r1
     6c2:	e1 2c       	mov	r14, r1
     6c4:	03 e0       	ldi	r16, 0x03	; 3
     6c6:	23 e0       	ldi	r18, 0x03	; 3
     6c8:	40 e8       	ldi	r20, 0x80	; 128
     6ca:	55 e2       	ldi	r21, 0x25	; 37
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	0e 94 3d 09 	call	0x127a	; 0x127a <uart_init>
	
	DHT_init();
     6d6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DHT_init>
	
	MQ2_init();
     6da:	0e 94 6d 07 	call	0xeda	; 0xeda <MQ2_init>
#if  MCP_ACTIVATED == 1
	if (!mcp_init())
     6de:	0e 94 8d 05 	call	0xb1a	; 0xb1a <mcp_init>
     6e2:	81 11       	cpse	r24, r1
     6e4:	15 c0       	rjmp	.+42     	; 0x710 <main+0x92>
     6e6:	0f 2e       	mov	r0, r31
     6e8:	f4 e1       	ldi	r31, 0x14	; 20
     6ea:	ef 2e       	mov	r14, r31
     6ec:	f1 2c       	mov	r15, r1
     6ee:	f0 2d       	mov	r31, r0
	);
}

void _delay_ms_loop(uint16_t __count)
{
	__asm__ volatile (
     6f0:	08 ec       	ldi	r16, 0xC8	; 200
     6f2:	10 e0       	ldi	r17, 0x00	; 0
	{
		for (int j = 0; j < 20; j++)
		{
			DIO_TOGGLE(1);
     6f4:	89 e0       	ldi	r24, 0x09	; 9
     6f6:	0e 94 2d 02 	call	0x45a	; 0x45a <dio_togg_pin>
     6fa:	88 ee       	ldi	r24, 0xE8	; 232
     6fc:	93 e0       	ldi	r25, 0x03	; 3
     6fe:	f8 01       	movw	r30, r16
     700:	31 97       	sbiw	r30, 0x01	; 1
     702:	f1 f7       	brne	.-4      	; 0x700 <main+0x82>
     704:	01 97       	sbiw	r24, 0x01	; 1
	}
	else if (tmp > 65535)
	{
		ticks = (uint16_t)(ms_time * 10.0);
		
		while(ticks)
     706:	d9 f7       	brne	.-10     	; 0x6fe <main+0x80>
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	e8 1a       	sub	r14, r24
     70c:	f1 08       	sbc	r15, r1
	
	MQ2_init();
#if  MCP_ACTIVATED == 1
	if (!mcp_init())
	{
		for (int j = 0; j < 20; j++)
     70e:	91 f7       	brne	.-28     	; 0x6f4 <main+0x76>
			DIO_TOGGLE(1);
			delay_msec(100);
			
		}
	}
	mcp_set_tx_id(MCP_TX(0), 0, 0x058f); //000 1111 0111 001 10 00110101 10001111
     710:	2f e8       	ldi	r18, 0x8F	; 143
     712:	35 e0       	ldi	r19, 0x05	; 5
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	0e 94 b6 04 	call	0x96c	; 0x96c <mcp_set_tx_id>
	//mcp_tx_data(MCP_TX(0), DATA_FRAME, "ALIBE", 5);
	
	mcp_set_tx_id(MCP_TX(1), 0, 0x057f); //000 1111 0111 001 10 00110101 10001111
     720:	2f e7       	ldi	r18, 0x7F	; 127
     722:	35 e0       	ldi	r19, 0x05	; 5
     724:	40 e0       	ldi	r20, 0x00	; 0
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	0e 94 b6 04 	call	0x96c	; 0x96c <mcp_set_tx_id>
	//mcp_tx_data(MCP_TX(1), DATA_FRAME, "ALIST", 5);
	
	mcp_set_tx_id(MCP_TX(2), 0, 0x056f); //000 1111 0111 001 10 00110101 10001111
     730:	2f e6       	ldi	r18, 0x6F	; 111
     732:	35 e0       	ldi	r19, 0x05	; 5
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	50 e0       	ldi	r21, 0x00	; 0
     738:	60 e0       	ldi	r22, 0x00	; 0
     73a:	84 e0       	ldi	r24, 0x04	; 4
     73c:	0e 94 b6 04 	call	0x96c	; 0x96c <mcp_set_tx_id>
	//mcp_tx_data(MCP_TX(2), DATA_FRAME, "ALI MAKH", 8);
#endif
	
 	DIO_TOGGLE(1);
     740:	89 e0       	ldi	r24, 0x09	; 9
     742:	0e 94 2d 02 	call	0x45a	; 0x45a <dio_togg_pin>
	
	hcsr04_init();
     746:	0e 94 84 02 	call	0x508	; 0x508 <hcsr04_init>
	
	sei();
     74a:	78 94       	sei

	//uart_send_until(UART0, "Triggering", 0);
	hcsr04_trigger();
     74c:	0e 94 95 02 	call	0x52a	; 0x52a <hcsr04_trigger>

	
    while (1) 
    {
#if MCP_ACTIVATED == 1
		state = mcp_get_status();
     750:	0e 94 f7 05 	call	0xbee	; 0xbee <mcp_get_status>
     754:	8d 83       	std	Y+5, r24	; 0x05
		
		//if it has received a frame
		if (mcp_get_status_rx(state, MCP_STAT_NO_RX) == 0)
     756:	8d 81       	ldd	r24, Y+5	; 0x05
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <mcp_get_status_rx>
     75e:	81 11       	cpse	r24, r1
     760:	42 c0       	rjmp	.+132    	; 0x7e6 <main+0x168>
// 				DIO_TOGGLE(1);
// 				delay_msec(100);
// 				
// 			}
// 			
			volatile uint8_t rx_state = mcp_get_rx_status();
     762:	0e 94 4d 06 	call	0xc9a	; 0xc9a <mcp_get_rx_status>
     766:	8f 83       	std	Y+7, r24	; 0x07
			
			//if the received frame is a remote frame
			if (mcp_get_rx_status_frame(rx_state, RX_STATUS_SREMOTE))
     768:	8f 81       	ldd	r24, Y+7	; 0x07
     76a:	68 e0       	ldi	r22, 0x08	; 8
     76c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <mcp_get_rx_status_frame>
     770:	88 23       	and	r24, r24
     772:	c9 f1       	breq	.+114    	; 0x7e6 <main+0x168>
// 					delay_msec(500);
// 					
// 				}
				
				//if it's the first filter in the RXB0
				if (mcp_get_rx_status_filters(rx_state, RX_STATUS_RXF(0)))
     774:	8f 81       	ldd	r24, Y+7	; 0x07
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	0e 94 68 06 	call	0xcd0	; 0xcd0 <mcp_get_rx_status_filters>
     77c:	88 23       	and	r24, r24
     77e:	29 f1       	breq	.+74     	; 0x7ca <main+0x14c>
// 						DIO_TOGGLE(1);
// 						delay_msec(100);
// 						
// 					}
					
					if (store_dht() == SENSOR_ERROR)
     780:	0e 94 ce 02 	call	0x59c	; 0x59c <store_dht>
     784:	8f 3f       	cpi	r24, 0xFF	; 255
     786:	d9 f4       	brne	.+54     	; 0x7be <main+0x140>
					{
						uart_send_str(UART0, "\r\nw DHT SENSOR error\r\n");
     788:	60 e6       	ldi	r22, 0x60	; 96
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	0e 94 c2 09 	call	0x1384	; 0x1384 <uart_send_str>
     792:	0f 2e       	mov	r0, r31
     794:	f4 e1       	ldi	r31, 0x14	; 20
     796:	ef 2e       	mov	r14, r31
     798:	f1 2c       	mov	r15, r1
     79a:	f0 2d       	mov	r31, r0
	);
}

void _delay_ms_loop(uint16_t __count)
{
	__asm__ volatile (
     79c:	08 ec       	ldi	r16, 0xC8	; 200
     79e:	10 e0       	ldi	r17, 0x00	; 0
						for (int i = 0; i < 20; i++)
						{
							DIO_TOGGLE(30);
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	0e 94 2d 02 	call	0x45a	; 0x45a <dio_togg_pin>
     7a6:	88 ee       	ldi	r24, 0xE8	; 232
     7a8:	93 e0       	ldi	r25, 0x03	; 3
     7aa:	f8 01       	movw	r30, r16
     7ac:	31 97       	sbiw	r30, 0x01	; 1
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <main+0x12e>
     7b0:	01 97       	sbiw	r24, 0x01	; 1
	}
	else if (tmp > 65535)
	{
		ticks = (uint16_t)(ms_time * 10.0);
		
		while(ticks)
     7b2:	d9 f7       	brne	.-10     	; 0x7aa <main+0x12c>
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	e8 1a       	sub	r14, r24
     7b8:	f1 08       	sbc	r15, r1
// 					}
					
					if (store_dht() == SENSOR_ERROR)
					{
						uart_send_str(UART0, "\r\nw DHT SENSOR error\r\n");
						for (int i = 0; i < 20; i++)
     7ba:	91 f7       	brne	.-28     	; 0x7a0 <main+0x122>
     7bc:	ff cf       	rjmp	.-2      	; 0x7bc <main+0x13e>
// 					{
// 						DIO_TOGGLE(1);
// 						delay_msec(300);
// 					}
					
					mcp_tx_trigger(MCP_TX(0));
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	0e 94 56 05 	call	0xaac	; 0xaac <mcp_tx_trigger>
					mcp_clear_flag(RX0IF_BIT);
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0e 94 0c 06 	call	0xc18	; 0xc18 <mcp_clear_flag>
// 						delay_msec(500);
// 					}
				}
				
				//if it's the first filter in RXB1
				if (mcp_get_rx_status_filters(rx_state, RX_STATUS_RXF(2)))
     7ca:	8f 81       	ldd	r24, Y+7	; 0x07
     7cc:	62 e0       	ldi	r22, 0x02	; 2
     7ce:	0e 94 68 06 	call	0xcd0	; 0xcd0 <mcp_get_rx_status_filters>
     7d2:	88 23       	and	r24, r24
     7d4:	41 f0       	breq	.+16     	; 0x7e6 <main+0x168>
				{
					store_mq2();
     7d6:	0e 94 1c 03 	call	0x638	; 0x638 <store_mq2>
					mcp_tx_trigger(MCP_TX(1));
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	0e 94 56 05 	call	0xaac	; 0xaac <mcp_tx_trigger>
					mcp_clear_flag(RX1IF_BIT);
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	0e 94 0c 06 	call	0xc18	; 0xc18 <mcp_clear_flag>
				
			}
			
		}
		
		if (mcp_get_status_tx(state, MCP_STAT_TX0))
     7e6:	8d 81       	ldd	r24, Y+5	; 0x05
     7e8:	68 e0       	ldi	r22, 0x08	; 8
     7ea:	0e 94 78 06 	call	0xcf0	; 0xcf0 <mcp_get_status_tx>
     7ee:	88 23       	and	r24, r24
     7f0:	19 f0       	breq	.+6      	; 0x7f8 <main+0x17a>
		{
			mcp_clear_flag(TX0IF_BIT);
     7f2:	83 e0       	ldi	r24, 0x03	; 3
     7f4:	0e 94 0c 06 	call	0xc18	; 0xc18 <mcp_clear_flag>
		}
		
		if (mcp_get_status_tx(state, MCP_STAT_TX1))
     7f8:	8d 81       	ldd	r24, Y+5	; 0x05
     7fa:	60 e2       	ldi	r22, 0x20	; 32
     7fc:	0e 94 78 06 	call	0xcf0	; 0xcf0 <mcp_get_status_tx>
     800:	88 23       	and	r24, r24
     802:	19 f0       	breq	.+6      	; 0x80a <main+0x18c>
		{			
			mcp_clear_flag(TX1IF_BIT);
     804:	85 e0       	ldi	r24, 0x05	; 5
     806:	0e 94 0c 06 	call	0xc18	; 0xc18 <mcp_clear_flag>
		}
		
		if (mcp_get_status_tx(state, MCP_STAT_TX2))
     80a:	8d 81       	ldd	r24, Y+5	; 0x05
     80c:	60 e8       	ldi	r22, 0x80	; 128
     80e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <mcp_get_status_tx>
     812:	88 23       	and	r24, r24
     814:	19 f0       	breq	.+6      	; 0x81c <main+0x19e>
		{
			mcp_clear_flag(TX2IF_BIT);
     816:	87 e0       	ldi	r24, 0x07	; 7
     818:	0e 94 0c 06 	call	0xc18	; 0xc18 <mcp_clear_flag>
		}
		
#endif
		
		if (millis(500) == 0)
     81c:	84 ef       	ldi	r24, 0xF4	; 244
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	0e 94 c6 06 	call	0xd8c	; 0xd8c <millis>
     824:	89 2b       	or	r24, r25
     826:	09 f0       	breq	.+2      	; 0x82a <main+0x1ac>
     828:	93 cf       	rjmp	.-218    	; 0x750 <main+0xd2>
		{
			
			if ( hcsr04_data_ready())
     82a:	0e 94 c7 02 	call	0x58e	; 0x58e <hcsr04_data_ready>
     82e:	88 23       	and	r24, r24
     830:	41 f1       	breq	.+80     	; 0x882 <main+0x204>
			{
				//uart_write_str_mark(UART0, "data_ready", 0);
				//DIO_TOGGLE(2);
				hcs_cm = hcsr04_cm();
     832:	0e 94 a5 02 	call	0x54a	; 0x54a <hcsr04_cm>
     836:	9c 83       	std	Y+4, r25	; 0x04
     838:	8b 83       	std	Y+3, r24	; 0x03
// 				ltoa(hcs_cm , buff, 10);
// 				uart_write_str_mark(UART0, buff, 0);
// 				uart_write_str_mark(UART0, "\r\n", 0);


				if ((hcs_cm < 5) && (break_flag == 0))
     83a:	8b 81       	ldd	r24, Y+3	; 0x03
     83c:	9c 81       	ldd	r25, Y+4	; 0x04
     83e:	05 97       	sbiw	r24, 0x05	; 5
     840:	78 f4       	brcc	.+30     	; 0x860 <main+0x1e2>
     842:	8e 81       	ldd	r24, Y+6	; 0x06
     844:	81 11       	cpse	r24, r1
     846:	0c c0       	rjmp	.+24     	; 0x860 <main+0x1e2>
				{
					DIO_TOGGLE(1);
     848:	89 e0       	ldi	r24, 0x09	; 9
     84a:	0e 94 2d 02 	call	0x45a	; 0x45a <dio_togg_pin>
					//DIO_TOGGLE(2);
					
					#if MCP_ACTIVATED == 1
					mcp_send_dataframe(MCP_TX(2), "B1", 3);
     84e:	43 e0       	ldi	r20, 0x03	; 3
     850:	67 e7       	ldi	r22, 0x77	; 119
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	84 e0       	ldi	r24, 0x04	; 4
     856:	0e 94 41 06 	call	0xc82	; 0xc82 <mcp_send_dataframe>
					#endif
					
					break_flag = 1;
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	8e 83       	std	Y+6, r24	; 0x06
     85e:	11 c0       	rjmp	.+34     	; 0x882 <main+0x204>
				}
				else if ((hcs_cm >= 5) && (break_flag == 1))
     860:	8b 81       	ldd	r24, Y+3	; 0x03
     862:	9c 81       	ldd	r25, Y+4	; 0x04
     864:	05 97       	sbiw	r24, 0x05	; 5
     866:	68 f0       	brcs	.+26     	; 0x882 <main+0x204>
     868:	8e 81       	ldd	r24, Y+6	; 0x06
     86a:	81 30       	cpi	r24, 0x01	; 1
     86c:	51 f4       	brne	.+20     	; 0x882 <main+0x204>
				{
					DIO_TOGGLE(1);
     86e:	89 e0       	ldi	r24, 0x09	; 9
     870:	0e 94 2d 02 	call	0x45a	; 0x45a <dio_togg_pin>
					//DIO_TOGGLE(2);
					
					#if MCP_ACTIVATED == 1
					mcp_send_dataframe(MCP_TX(2), "B0", 3);
     874:	43 e0       	ldi	r20, 0x03	; 3
     876:	6a e7       	ldi	r22, 0x7A	; 122
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	84 e0       	ldi	r24, 0x04	; 4
     87c:	0e 94 41 06 	call	0xc82	; 0xc82 <mcp_send_dataframe>
					#endif
					
					break_flag = 0;
     880:	1e 82       	std	Y+6, r1	; 0x06
				}
				
			}
			//DIO_TOGGLE(1);
			DIO_TOGGLE(2);
     882:	8a e0       	ldi	r24, 0x0A	; 10
     884:	0e 94 2d 02 	call	0x45a	; 0x45a <dio_togg_pin>
// 			uart_write_str_mark(UART0, "cm: ", 0);
			hcsr04_trigger();
     888:	0e 94 95 02 	call	0x52a	; 0x52a <hcsr04_trigger>
     88c:	61 cf       	rjmp	.-318    	; 0x750 <main+0xd2>

0000088e <mcp_reset>:

uint8_t mcp_rx_status_rx(uint8_t rx_status_reg, uint8_t specific_bits) //volatile
{
	uint8_t temp = rx_status_reg & ((specific_bits == RX_STATUS_NO_RX)? RX_STATUS_BOTH_RX : specific_bits);
	return temp == specific_bits;
}
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	8c e0       	ldi	r24, 0x0C	; 12
     892:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     896:	60 ec       	ldi	r22, 0xC0	; 192
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     89e:	61 e0       	ldi	r22, 0x01	; 1
     8a0:	8c e0       	ldi	r24, 0x0C	; 12
     8a2:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     8a6:	08 95       	ret

000008a8 <mcp_set_mask_or_filter>:
     8a8:	cf 92       	push	r12
     8aa:	df 92       	push	r13
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	d8 2f       	mov	r29, r24
     8b6:	c6 2f       	mov	r28, r22
     8b8:	69 01       	movw	r12, r18
     8ba:	7a 01       	movw	r14, r20
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	8c e0       	ldi	r24, 0x0C	; 12
     8c0:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     8c4:	62 e0       	ldi	r22, 0x02	; 2
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     8cc:	6d 2f       	mov	r22, r29
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     8d4:	c1 30       	cpi	r28, 0x01	; 1
     8d6:	71 f5       	brne	.+92     	; 0x934 <mcp_set_mask_or_filter+0x8c>
     8d8:	c7 01       	movw	r24, r14
     8da:	b6 01       	movw	r22, r12
     8dc:	05 2e       	mov	r0, r21
     8de:	55 e1       	ldi	r21, 0x15	; 21
     8e0:	96 95       	lsr	r25
     8e2:	87 95       	ror	r24
     8e4:	77 95       	ror	r23
     8e6:	67 95       	ror	r22
     8e8:	5a 95       	dec	r21
     8ea:	d1 f7       	brne	.-12     	; 0x8e0 <mcp_set_mask_or_filter+0x38>
     8ec:	50 2d       	mov	r21, r0
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     8f4:	d7 01       	movw	r26, r14
     8f6:	c6 01       	movw	r24, r12
     8f8:	07 2e       	mov	r0, r23
     8fa:	7d e0       	ldi	r23, 0x0D	; 13
     8fc:	b6 95       	lsr	r27
     8fe:	a7 95       	ror	r26
     900:	97 95       	ror	r25
     902:	87 95       	ror	r24
     904:	7a 95       	dec	r23
     906:	d1 f7       	brne	.-12     	; 0x8fc <mcp_set_mask_or_filter+0x54>
     908:	70 2d       	mov	r23, r0
     90a:	68 2f       	mov	r22, r24
     90c:	60 7e       	andi	r22, 0xE0	; 224
     90e:	8e 2d       	mov	r24, r14
     910:	83 70       	andi	r24, 0x03	; 3
     912:	68 2b       	or	r22, r24
     914:	68 60       	ori	r22, 0x08	; 8
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     91c:	99 27       	eor	r25, r25
     91e:	8f 2d       	mov	r24, r15
     920:	7e 2d       	mov	r23, r14
     922:	6d 2d       	mov	r22, r13
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     92a:	6c 2d       	mov	r22, r12
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     932:	11 c0       	rjmp	.+34     	; 0x956 <mcp_set_mask_or_filter+0xae>
     934:	b6 01       	movw	r22, r12
     936:	76 95       	lsr	r23
     938:	67 95       	ror	r22
     93a:	76 95       	lsr	r23
     93c:	67 95       	ror	r22
     93e:	76 95       	lsr	r23
     940:	67 95       	ror	r22
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     948:	6c 2d       	mov	r22, r12
     94a:	62 95       	swap	r22
     94c:	66 0f       	add	r22, r22
     94e:	60 7e       	andi	r22, 0xE0	; 224
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	8c e0       	ldi	r24, 0x0C	; 12
     95a:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	df 90       	pop	r13
     968:	cf 90       	pop	r12
     96a:	08 95       	ret

0000096c <mcp_set_tx_id>:
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	c8 2f       	mov	r28, r24
     97a:	d6 2f       	mov	r29, r22
     97c:	69 01       	movw	r12, r18
     97e:	7a 01       	movw	r14, r20
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	8c e0       	ldi	r24, 0x0C	; 12
     984:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     988:	d1 30       	cpi	r29, 0x01	; 1
     98a:	d1 f5       	brne	.+116    	; 0xa00 <mcp_set_tx_id+0x94>
     98c:	62 e0       	ldi	r22, 0x02	; 2
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     994:	c6 95       	lsr	r28
     996:	c2 95       	swap	r28
     998:	c0 7f       	andi	r28, 0xF0	; 240
     99a:	61 e3       	ldi	r22, 0x31	; 49
     99c:	6c 0f       	add	r22, r28
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     9a4:	c7 01       	movw	r24, r14
     9a6:	b6 01       	movw	r22, r12
     9a8:	05 2e       	mov	r0, r21
     9aa:	55 e1       	ldi	r21, 0x15	; 21
     9ac:	96 95       	lsr	r25
     9ae:	87 95       	ror	r24
     9b0:	77 95       	ror	r23
     9b2:	67 95       	ror	r22
     9b4:	5a 95       	dec	r21
     9b6:	d1 f7       	brne	.-12     	; 0x9ac <mcp_set_tx_id+0x40>
     9b8:	50 2d       	mov	r21, r0
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     9c0:	d7 01       	movw	r26, r14
     9c2:	c6 01       	movw	r24, r12
     9c4:	07 2e       	mov	r0, r23
     9c6:	7d e0       	ldi	r23, 0x0D	; 13
     9c8:	b6 95       	lsr	r27
     9ca:	a7 95       	ror	r26
     9cc:	97 95       	ror	r25
     9ce:	87 95       	ror	r24
     9d0:	7a 95       	dec	r23
     9d2:	d1 f7       	brne	.-12     	; 0x9c8 <mcp_set_tx_id+0x5c>
     9d4:	70 2d       	mov	r23, r0
     9d6:	68 2f       	mov	r22, r24
     9d8:	60 7e       	andi	r22, 0xE0	; 224
     9da:	8e 2d       	mov	r24, r14
     9dc:	83 70       	andi	r24, 0x03	; 3
     9de:	68 2b       	or	r22, r24
     9e0:	68 60       	ori	r22, 0x08	; 8
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     9e8:	99 27       	eor	r25, r25
     9ea:	8f 2d       	mov	r24, r15
     9ec:	7e 2d       	mov	r23, r14
     9ee:	6d 2d       	mov	r22, r13
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     9f6:	6c 2d       	mov	r22, r12
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     9fe:	19 c0       	rjmp	.+50     	; 0xa32 <mcp_set_tx_id+0xc6>
     a00:	c1 30       	cpi	r28, 0x01	; 1
     a02:	09 f4       	brne	.+2      	; 0xa06 <mcp_set_tx_id+0x9a>
     a04:	c0 e0       	ldi	r28, 0x00	; 0
     a06:	6c 2f       	mov	r22, r28
     a08:	60 64       	ori	r22, 0x40	; 64
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     a10:	b6 01       	movw	r22, r12
     a12:	76 95       	lsr	r23
     a14:	67 95       	ror	r22
     a16:	76 95       	lsr	r23
     a18:	67 95       	ror	r22
     a1a:	76 95       	lsr	r23
     a1c:	67 95       	ror	r22
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     a24:	6c 2d       	mov	r22, r12
     a26:	62 95       	swap	r22
     a28:	66 0f       	add	r22, r22
     a2a:	60 7e       	andi	r22, 0xE0	; 224
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	8c e0       	ldi	r24, 0x0C	; 12
     a36:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	df 90       	pop	r13
     a44:	cf 90       	pop	r12
     a46:	08 95       	ret

00000a48 <mcp_set_tx_data>:
     a48:	ff 92       	push	r15
     a4a:	0f 93       	push	r16
     a4c:	1f 93       	push	r17
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	c8 2f       	mov	r28, r24
     a54:	d6 2f       	mov	r29, r22
     a56:	8a 01       	movw	r16, r20
     a58:	f2 2e       	mov	r15, r18
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	8c e0       	ldi	r24, 0x0C	; 12
     a5e:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     a62:	62 e0       	ldi	r22, 0x02	; 2
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     a6a:	6c 2f       	mov	r22, r28
     a6c:	66 95       	lsr	r22
     a6e:	62 95       	swap	r22
     a70:	60 7f       	andi	r22, 0xF0	; 240
     a72:	6b 5c       	subi	r22, 0xCB	; 203
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     a7a:	80 e4       	ldi	r24, 0x40	; 64
     a7c:	d8 9f       	mul	r29, r24
     a7e:	b0 01       	movw	r22, r0
     a80:	11 24       	eor	r1, r1
     a82:	6f 29       	or	r22, r15
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     a8a:	d1 11       	cpse	r29, r1
     a8c:	05 c0       	rjmp	.+10     	; 0xa98 <mcp_set_tx_data+0x50>
     a8e:	4f 2d       	mov	r20, r15
     a90:	b8 01       	movw	r22, r16
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	0e 94 f7 07 	call	0xfee	; 0xfee <spi_send>
     a98:	61 e0       	ldi	r22, 0x01	; 1
     a9a:	8c e0       	ldi	r24, 0x0C	; 12
     a9c:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	ff 90       	pop	r15
     aaa:	08 95       	ret

00000aac <mcp_tx_trigger>:
     aac:	cf 93       	push	r28
     aae:	c8 2f       	mov	r28, r24
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	8c e0       	ldi	r24, 0x0C	; 12
     ab4:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     ab8:	6c 2f       	mov	r22, r28
     aba:	60 68       	ori	r22, 0x80	; 128
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     ac2:	61 e0       	ldi	r22, 0x01	; 1
     ac4:	8c e0       	ldi	r24, 0x0C	; 12
     ac6:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     aca:	80 e1       	ldi	r24, 0x10	; 16
     acc:	97 e2       	ldi	r25, 0x27	; 39
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <mcp_tx_trigger+0x22>
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <mcp_bit_modify>:
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	18 2f       	mov	r17, r24
     ade:	d6 2f       	mov	r29, r22
     ae0:	c4 2f       	mov	r28, r20
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	8c e0       	ldi	r24, 0x0C	; 12
     ae6:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     aea:	65 e0       	ldi	r22, 0x05	; 5
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     af2:	61 2f       	mov	r22, r17
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     afa:	6d 2f       	mov	r22, r29
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     b02:	6c 2f       	mov	r22, r28
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	8c e0       	ldi	r24, 0x0C	; 12
     b0e:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	1f 91       	pop	r17
     b18:	08 95       	ret

00000b1a <mcp_init>:
     b1a:	ef 92       	push	r14
     b1c:	0f 93       	push	r16
     b1e:	e1 2c       	mov	r14, r1
     b20:	00 e0       	ldi	r16, 0x00	; 0
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	40 e8       	ldi	r20, 0x80	; 128
     b26:	54 e8       	ldi	r21, 0x84	; 132
     b28:	6e e1       	ldi	r22, 0x1E	; 30
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	0e 94 3f 08 	call	0x107e	; 0x107e <spi_init_master>
     b32:	88 23       	and	r24, r24
     b34:	09 f4       	brne	.+2      	; 0xb38 <mcp_init+0x1e>
     b36:	58 c0       	rjmp	.+176    	; 0xbe8 <mcp_init+0xce>
     b38:	0e 94 47 04 	call	0x88e	; 0x88e <mcp_reset>
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	6f e0       	ldi	r22, 0x0F	; 15
     b40:	8c e0       	ldi	r24, 0x0C	; 12
     b42:	0e 94 6b 05 	call	0xad6	; 0xad6 <mcp_bit_modify>
     b46:	40 e0       	ldi	r20, 0x00	; 0
     b48:	67 e0       	ldi	r22, 0x07	; 7
     b4a:	8d e0       	ldi	r24, 0x0D	; 13
     b4c:	0e 94 6b 05 	call	0xad6	; 0xad6 <mcp_bit_modify>
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	60 e6       	ldi	r22, 0x60	; 96
     b54:	80 e6       	ldi	r24, 0x60	; 96
     b56:	0e 94 6b 05 	call	0xad6	; 0xad6 <mcp_bit_modify>
     b5a:	40 e0       	ldi	r20, 0x00	; 0
     b5c:	60 e6       	ldi	r22, 0x60	; 96
     b5e:	80 e7       	ldi	r24, 0x70	; 112
     b60:	0e 94 6b 05 	call	0xad6	; 0xad6 <mcp_bit_modify>
     b64:	4f ef       	ldi	r20, 0xFF	; 255
     b66:	6f ef       	ldi	r22, 0xFF	; 255
     b68:	8b e2       	ldi	r24, 0x2B	; 43
     b6a:	0e 94 6b 05 	call	0xad6	; 0xad6 <mcp_bit_modify>
     b6e:	41 e4       	ldi	r20, 0x41	; 65
     b70:	6f ef       	ldi	r22, 0xFF	; 255
     b72:	8a e2       	ldi	r24, 0x2A	; 42
     b74:	0e 94 6b 05 	call	0xad6	; 0xad6 <mcp_bit_modify>
     b78:	41 eb       	ldi	r20, 0xB1	; 177
     b7a:	6f ef       	ldi	r22, 0xFF	; 255
     b7c:	89 e2       	ldi	r24, 0x29	; 41
     b7e:	0e 94 6b 05 	call	0xad6	; 0xad6 <mcp_bit_modify>
     b82:	45 e0       	ldi	r20, 0x05	; 5
     b84:	67 e4       	ldi	r22, 0x47	; 71
     b86:	88 e2       	ldi	r24, 0x28	; 40
     b88:	0e 94 6b 05 	call	0xad6	; 0xad6 <mcp_bit_modify>
     b8c:	2f ef       	ldi	r18, 0xFF	; 255
     b8e:	3f e0       	ldi	r19, 0x0F	; 15
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	80 e2       	ldi	r24, 0x20	; 32
     b98:	0e 94 54 04 	call	0x8a8	; 0x8a8 <mcp_set_mask_or_filter>
     b9c:	2f ef       	ldi	r18, 0xFF	; 255
     b9e:	3f e0       	ldi	r19, 0x0F	; 15
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	84 e2       	ldi	r24, 0x24	; 36
     ba8:	0e 94 54 04 	call	0x8a8	; 0x8a8 <mcp_set_mask_or_filter>
     bac:	2f e8       	ldi	r18, 0x8F	; 143
     bae:	35 e0       	ldi	r19, 0x05	; 5
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	50 e0       	ldi	r21, 0x00	; 0
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	0e 94 54 04 	call	0x8a8	; 0x8a8 <mcp_set_mask_or_filter>
     bbc:	2f e7       	ldi	r18, 0x7F	; 127
     bbe:	35 e0       	ldi	r19, 0x05	; 5
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	88 e0       	ldi	r24, 0x08	; 8
     bc8:	0e 94 54 04 	call	0x8a8	; 0x8a8 <mcp_set_mask_or_filter>
     bcc:	2f e6       	ldi	r18, 0x6F	; 111
     bce:	35 e0       	ldi	r19, 0x05	; 5
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	80 e1       	ldi	r24, 0x10	; 16
     bd8:	0e 94 54 04 	call	0x8a8	; 0x8a8 <mcp_set_mask_or_filter>
     bdc:	48 e0       	ldi	r20, 0x08	; 8
     bde:	6f ef       	ldi	r22, 0xFF	; 255
     be0:	8f e2       	ldi	r24, 0x2F	; 47
     be2:	0e 94 6b 05 	call	0xad6	; 0xad6 <mcp_bit_modify>
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	0f 91       	pop	r16
     bea:	ef 90       	pop	r14
     bec:	08 95       	ret

00000bee <mcp_get_status>:
     bee:	cf 93       	push	r28
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	8c e0       	ldi	r24, 0x0C	; 12
     bf4:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     bf8:	60 ea       	ldi	r22, 0xA0	; 160
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     c08:	c8 2f       	mov	r28, r24
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	8c e0       	ldi	r24, 0x0C	; 12
     c0e:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     c12:	8c 2f       	mov	r24, r28
     c14:	cf 91       	pop	r28
     c16:	08 95       	ret

00000c18 <mcp_clear_flag>:
     c18:	88 30       	cpi	r24, 0x08	; 8
     c1a:	b8 f4       	brcc	.+46     	; 0xc4a <mcp_clear_flag+0x32>
     c1c:	83 30       	cpi	r24, 0x03	; 3
     c1e:	31 f0       	breq	.+12     	; 0xc2c <mcp_clear_flag+0x14>
     c20:	85 30       	cpi	r24, 0x05	; 5
     c22:	31 f0       	breq	.+12     	; 0xc30 <mcp_clear_flag+0x18>
     c24:	87 30       	cpi	r24, 0x07	; 7
     c26:	29 f4       	brne	.+10     	; 0xc32 <mcp_clear_flag+0x1a>
     c28:	84 e0       	ldi	r24, 0x04	; 4
     c2a:	03 c0       	rjmp	.+6      	; 0xc32 <mcp_clear_flag+0x1a>
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <mcp_clear_flag+0x1a>
     c30:	83 e0       	ldi	r24, 0x03	; 3
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <mcp_clear_flag+0x24>
     c38:	66 0f       	add	r22, r22
     c3a:	77 1f       	adc	r23, r23
     c3c:	8a 95       	dec	r24
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <mcp_clear_flag+0x20>
     c40:	40 e0       	ldi	r20, 0x00	; 0
     c42:	8c e2       	ldi	r24, 0x2C	; 44
     c44:	0e 94 6b 05 	call	0xad6	; 0xad6 <mcp_bit_modify>
     c48:	08 95       	ret
     c4a:	80 31       	cpi	r24, 0x10	; 16
     c4c:	68 f4       	brcc	.+26     	; 0xc68 <mcp_clear_flag+0x50>
     c4e:	88 50       	subi	r24, 0x08	; 8
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <mcp_clear_flag+0x42>
     c56:	66 0f       	add	r22, r22
     c58:	77 1f       	adc	r23, r23
     c5a:	8a 95       	dec	r24
     c5c:	e2 f7       	brpl	.-8      	; 0xc56 <mcp_clear_flag+0x3e>
     c5e:	40 e0       	ldi	r20, 0x00	; 0
     c60:	8c e2       	ldi	r24, 0x2C	; 44
     c62:	0e 94 6b 05 	call	0xad6	; 0xad6 <mcp_bit_modify>
     c66:	08 95       	ret
     c68:	88 52       	subi	r24, 0x28	; 40
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <mcp_clear_flag+0x5c>
     c70:	66 0f       	add	r22, r22
     c72:	77 1f       	adc	r23, r23
     c74:	8a 95       	dec	r24
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <mcp_clear_flag+0x58>
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	8c e2       	ldi	r24, 0x2C	; 44
     c7c:	0e 94 6b 05 	call	0xad6	; 0xad6 <mcp_bit_modify>
     c80:	08 95       	ret

00000c82 <mcp_send_dataframe>:
     c82:	cf 93       	push	r28
     c84:	c8 2f       	mov	r28, r24
     c86:	24 2f       	mov	r18, r20
     c88:	ab 01       	movw	r20, r22
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	0e 94 24 05 	call	0xa48	; 0xa48 <mcp_set_tx_data>
     c90:	8c 2f       	mov	r24, r28
     c92:	0e 94 56 05 	call	0xaac	; 0xaac <mcp_tx_trigger>
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <mcp_get_rx_status>:
     c9a:	cf 93       	push	r28
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	8c e0       	ldi	r24, 0x0C	; 12
     ca0:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     ca4:	60 eb       	ldi	r22, 0xB0	; 176
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>
     cb4:	c8 2f       	mov	r28, r24
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	8c e0       	ldi	r24, 0x0C	; 12
     cba:	0e 94 05 02 	call	0x40a	; 0x40a <dio_set_pin_val>
     cbe:	8c 2f       	mov	r24, r28
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret

00000cc4 <mcp_get_rx_status_frame>:
     cc4:	98 2f       	mov	r25, r24
     cc6:	98 71       	andi	r25, 0x18	; 24
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	96 13       	cpse	r25, r22
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	08 95       	ret

00000cd0 <mcp_get_rx_status_filters>:

uint8_t mcp_get_rx_status_filters(uint8_t rx_status_reg, uint8_t specific_bits) // volatile
{
	return ((rx_status_reg & RX_STATUS_RXF_BITS) == specific_bits);
     cd0:	98 2f       	mov	r25, r24
     cd2:	97 70       	andi	r25, 0x07	; 7
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	96 13       	cpse	r25, r22
     cd8:	80 e0       	ldi	r24, 0x00	; 0
}
     cda:	08 95       	ret

00000cdc <mcp_get_status_rx>:

uint8_t mcp_get_status_rx(uint8_t stat_reg, uint8_t specific_bits) //volatile
{
	uint8_t temp = stat_reg & ((specific_bits == MCP_STAT_NO_RX)? MCP_STAT_BOTH_RX : specific_bits);
     cdc:	66 23       	and	r22, r22
     cde:	11 f0       	breq	.+4      	; 0xce4 <mcp_get_status_rx+0x8>
     ce0:	96 2f       	mov	r25, r22
     ce2:	01 c0       	rjmp	.+2      	; 0xce6 <mcp_get_status_rx+0xa>
     ce4:	93 e0       	ldi	r25, 0x03	; 3
	return temp == specific_bits;
     ce6:	98 23       	and	r25, r24
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	96 13       	cpse	r25, r22
     cec:	80 e0       	ldi	r24, 0x00	; 0
}
     cee:	08 95       	ret

00000cf0 <mcp_get_status_tx>:

uint8_t mcp_get_status_tx(uint8_t stat_reg, uint8_t specific_bits) // volatile
{
	uint8_t temp = stat_reg & ((specific_bits == MCP_STAT_NO_TX)? MCP_STAT_BOTH_TX : specific_bits);
     cf0:	66 23       	and	r22, r22
     cf2:	11 f0       	breq	.+4      	; 0xcf8 <mcp_get_status_tx+0x8>
     cf4:	96 2f       	mov	r25, r22
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <mcp_get_status_tx+0xa>
     cf8:	98 ea       	ldi	r25, 0xA8	; 168
	return temp == specific_bits;	
     cfa:	98 23       	and	r25, r24
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	96 13       	cpse	r25, r22
     d00:	80 e0       	ldi	r24, 0x00	; 0
}
     d02:	08 95       	ret

00000d04 <__vector_9>:
//the number of overflows needed to generate the needed ticks for making the
// delay time
static volatile unint16_t g_ovf_count;

void CONFIG_TMR0_OVF_ISR()
{
     d04:	1f 92       	push	r1
     d06:	0f 92       	push	r0
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	0f 92       	push	r0
     d0c:	11 24       	eor	r1, r1
     d0e:	2f 93       	push	r18
     d10:	3f 93       	push	r19
     d12:	4f 93       	push	r20
     d14:	5f 93       	push	r21
     d16:	6f 93       	push	r22
     d18:	7f 93       	push	r23
     d1a:	8f 93       	push	r24
     d1c:	9f 93       	push	r25
     d1e:	af 93       	push	r26
     d20:	bf 93       	push	r27
     d22:	ef 93       	push	r30
     d24:	ff 93       	push	r31
	cli();
     d26:	f8 94       	cli
	 a flag is that by decrementing the g_ovf_count in ISR then I don't have to 
	 guarantee that millis will be checked every 1024 cycles(because the program 
	 might be is too big so that I can't check this function every 1024 cycles
	 */
	//if there are remaining overflows yet
	if (g_ovf_count)
     d28:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <g_ovf_count>
     d2c:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <g_ovf_count+0x1>
     d30:	89 2b       	or	r24, r25
     d32:	99 f0       	breq	.+38     	; 0xd5a <__vector_9+0x56>
	{
		/* if (g_ovf_count == 1) then the n_of actual overflows has ended and
		   there are some remaining ticks which will be out in TCNT0 to get all
		   the ticks needed precisely*/
		if (g_ovf_count == 1)
     d34:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <g_ovf_count>
     d38:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <g_ovf_count+0x1>
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	21 f4       	brne	.+8      	; 0xd48 <__vector_9+0x44>
		{
			TCNT0 = 256 - g_last_ticks;
     d40:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <g_last_ticks>
     d44:	81 95       	neg	r24
     d46:	82 bf       	out	0x32, r24	; 50
		}
		
		g_ovf_count-- ;
     d48:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <g_ovf_count>
     d4c:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <g_ovf_count+0x1>
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	90 93 9a 00 	sts	0x009A, r25	; 0x80009a <g_ovf_count+0x1>
     d56:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <g_ovf_count>
	}
	
	if (gp_tmr0_ovf_isr != NULL)
     d5a:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <gp_tmr0_ovf_isr>
     d5e:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <gp_tmr0_ovf_isr+0x1>
     d62:	30 97       	sbiw	r30, 0x00	; 0
     d64:	09 f0       	breq	.+2      	; 0xd68 <__vector_9+0x64>
	{
		gp_tmr0_ovf_isr();
     d66:	09 95       	icall
	}
	
	sei();
     d68:	78 94       	sei
}
     d6a:	ff 91       	pop	r31
     d6c:	ef 91       	pop	r30
     d6e:	bf 91       	pop	r27
     d70:	af 91       	pop	r26
     d72:	9f 91       	pop	r25
     d74:	8f 91       	pop	r24
     d76:	7f 91       	pop	r23
     d78:	6f 91       	pop	r22
     d7a:	5f 91       	pop	r21
     d7c:	4f 91       	pop	r20
     d7e:	3f 91       	pop	r19
     d80:	2f 91       	pop	r18
     d82:	0f 90       	pop	r0
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	0f 90       	pop	r0
     d88:	1f 90       	pop	r1
     d8a:	18 95       	reti

00000d8c <millis>:


bool millis(unint16_t t)
{
     d8c:	0f 93       	push	r16
     d8e:	1f 93       	push	r17
	if ((g_ovf_count == 0) && (TCCR0 == 0)) //happens only at the beginning
     d90:	40 91 99 00 	lds	r20, 0x0099	; 0x800099 <g_ovf_count>
     d94:	50 91 9a 00 	lds	r21, 0x009A	; 0x80009a <g_ovf_count+0x1>
     d98:	45 2b       	or	r20, r21
     d9a:	09 f0       	breq	.+2      	; 0xd9e <millis+0x12>
     d9c:	43 c0       	rjmp	.+134    	; 0xe24 <millis+0x98>
     d9e:	23 b7       	in	r18, 0x33	; 51
     da0:	21 11       	cpse	r18, r1
     da2:	40 c0       	rjmp	.+128    	; 0xe24 <millis+0x98>
		//every overflow occur until this number reaches zero then the timer will recognize that it's timeout
		//in the .h file we can have the number of overflows and the number of remaining ticks(calculated automatically from the time
		//parameter
		//we put the number of overflows plus one(because the required number of ticks are not exactly multiples of 256 so there will be
        //some ticks less that 256 remaining at the end ticks in a static variable plus one for the remaining ticks.*/
		g_ovf_count= NUMBER_OF_OVFLOWS + 1;
     da4:	9c 01       	movw	r18, r24
     da6:	a8 ee       	ldi	r26, 0xE8	; 232
     da8:	b3 e0       	ldi	r27, 0x03	; 3
     daa:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__umulhisi3>
     dae:	8b 01       	movw	r16, r22
     db0:	9c 01       	movw	r18, r24
     db2:	0f 2e       	mov	r0, r31
     db4:	ff e0       	ldi	r31, 0x0F	; 15
     db6:	36 95       	lsr	r19
     db8:	27 95       	ror	r18
     dba:	17 95       	ror	r17
     dbc:	07 95       	ror	r16
     dbe:	fa 95       	dec	r31
     dc0:	d1 f7       	brne	.-12     	; 0xdb6 <millis+0x2a>
     dc2:	f0 2d       	mov	r31, r0
     dc4:	0f 5f       	subi	r16, 0xFF	; 255
     dc6:	1f 4f       	sbci	r17, 0xFF	; 255
     dc8:	10 93 9a 00 	sts	0x009A, r17	; 0x80009a <g_ovf_count+0x1>
     dcc:	00 93 99 00 	sts	0x0099, r16	; 0x800099 <g_ovf_count>

		//initialize timer0 with 1024 pre_scaler and activate the timer mode
		TCCR0 = 0x05;
     dd0:	25 e0       	ldi	r18, 0x05	; 5
     dd2:	23 bf       	out	0x33, r18	; 51
		#if (MILLIS_INTERRUPT == 1)
		TIMSK |= (1 << 0); //enable timer0 interrupt
     dd4:	29 b7       	in	r18, 0x39	; 57
     dd6:	21 60       	ori	r18, 0x01	; 1
     dd8:	29 bf       	out	0x39, r18	; 57
		//if the number of ovf is 1 meaning there is just the remaining ticks
		//make TCNT0=265-REMAINING_TICKS;
		//else TCNT=0
		g_last_ticks = REMAINING_TICKS;
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	88 7f       	andi	r24, 0xF8	; 248
     de0:	9f 77       	andi	r25, 0x7F	; 127
     de2:	aa 27       	eor	r26, r26
     de4:	bb 27       	eor	r27, r27
     de6:	68 94       	set
     de8:	16 f8       	bld	r1, 6
     dea:	b6 95       	lsr	r27
     dec:	a7 95       	ror	r26
     dee:	97 95       	ror	r25
     df0:	87 95       	ror	r24
     df2:	16 94       	lsr	r1
     df4:	d1 f7       	brne	.-12     	; 0xdea <millis+0x5e>
     df6:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <g_last_ticks>
		#endif
		
		
		if(g_ovf_count == 1)
     dfa:	20 91 99 00 	lds	r18, 0x0099	; 0x800099 <g_ovf_count>
     dfe:	30 91 9a 00 	lds	r19, 0x009A	; 0x80009a <g_ovf_count+0x1>
     e02:	21 30       	cpi	r18, 0x01	; 1
     e04:	31 05       	cpc	r19, r1
     e06:	29 f4       	brne	.+10     	; 0xe12 <millis+0x86>
			TCNT0 = 256 - REMAINING_TICKS;
     e08:	68 2f       	mov	r22, r24
     e0a:	61 95       	neg	r22
     e0c:	62 bf       	out	0x32, r22	; 50
		}

	}
	#endif
	
	return true;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	19 c0       	rjmp	.+50     	; 0xe44 <millis+0xb8>
		#endif
		
		
		if(g_ovf_count == 1)
			TCNT0 = 256 - REMAINING_TICKS;
		else if ( g_ovf_count > 1) 
     e12:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <g_ovf_count>
     e16:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <g_ovf_count+0x1>
     e1a:	02 97       	sbiw	r24, 0x02	; 2
     e1c:	80 f0       	brcs	.+32     	; 0xe3e <millis+0xb2>
			TCNT0 = 0;
     e1e:	12 be       	out	0x32, r1	; 50
		}

	}
	#endif
	
	return true;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	10 c0       	rjmp	.+32     	; 0xe44 <millis+0xb8>
			TCNT0 = 0;


	}// the below part is different between interrupt millis and polling millis   
	#if (MILLIS_INTERRUPT == 1)
	else if (g_ovf_count == 0) // we only check for the timeout state(g_ovf_count reaches 0) other states are handled in the OVF ISR
     e24:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <g_ovf_count>
     e28:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <g_ovf_count+0x1>
     e2c:	89 2b       	or	r24, r25
     e2e:	49 f4       	brne	.+18     	; 0xe42 <millis+0xb6>
	{
		TCCR0 = 0;//disable the timer and return false
     e30:	13 be       	out	0x33, r1	; 51
		TCNT0 = 0;
     e32:	12 be       	out	0x32, r1	; 50
		TIMSK &= ~(1<<0);
     e34:	89 b7       	in	r24, 0x39	; 57
     e36:	8e 7f       	andi	r24, 0xFE	; 254
     e38:	89 bf       	out	0x39, r24	; 57
		return false;
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <millis+0xb8>
		}

	}
	#endif
	
	return true;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	01 c0       	rjmp	.+2      	; 0xe44 <millis+0xb8>
     e42:	81 e0       	ldi	r24, 0x01	; 1
}
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	08 95       	ret

00000e4a <MQ2_get_res>:
}

//-----------------------------------------------------
//reads the analog value then derives the Resistance value value
static float MQ2_get_res()
{
     e4a:	8f 92       	push	r8
     e4c:	9f 92       	push	r9
     e4e:	af 92       	push	r10
     e50:	bf 92       	push	r11
     e52:	cf 92       	push	r12
     e54:	df 92       	push	r13
     e56:	ef 92       	push	r14
     e58:	ff 92       	push	r15
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	c2 e3       	ldi	r28, 0x32	; 50
	char arr[10];
	unsigned char i;
	float rs = 0;
     e62:	c1 2c       	mov	r12, r1
     e64:	d1 2c       	mov	r13, r1
     e66:	76 01       	movw	r14, r12
	);
}

void _delay_ms_loop(uint16_t __count)
{
	__asm__ volatile (
     e68:	00 e2       	ldi	r16, 0x20	; 32
     e6a:	1e e4       	ldi	r17, 0x4E	; 78
	//rs = MQ2_CALC_R_VALUE(adc_result);
	
	
	for (i = 0; i < READ_SAMPLE_TIMES; i++ )
	{
		adc_result = ADC_read(MQ2_PIN);
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	0e 94 ba 00 	call	0x174	; 0x174 <ADC_read>
		rs += MQ2_CALC_R_VALUE(adc_result);
     e72:	bc 01       	movw	r22, r24
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__floatunsisf>
     e7c:	4b 01       	movw	r8, r22
     e7e:	5c 01       	movw	r10, r24
     e80:	9b 01       	movw	r18, r22
     e82:	ac 01       	movw	r20, r24
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 ec       	ldi	r23, 0xC0	; 192
     e88:	8f e7       	ldi	r24, 0x7F	; 127
     e8a:	94 e4       	ldi	r25, 0x44	; 68
     e8c:	0e 94 cb 09 	call	0x1396	; 0x1396 <__subsf3>
     e90:	a5 01       	movw	r20, r10
     e92:	94 01       	movw	r18, r8
     e94:	0e 94 38 0a 	call	0x1470	; 0x1470 <__divsf3>
     e98:	9b 01       	movw	r18, r22
     e9a:	ac 01       	movw	r20, r24
     e9c:	c7 01       	movw	r24, r14
     e9e:	b6 01       	movw	r22, r12
     ea0:	0e 94 cc 09 	call	0x1398	; 0x1398 <__addsf3>
     ea4:	6b 01       	movw	r12, r22
     ea6:	7c 01       	movw	r14, r24
     ea8:	c8 01       	movw	r24, r16
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <MQ2_get_res+0x60>
     eae:	c1 50       	subi	r28, 0x01	; 1
	
	//adc_result = ADC_read(MQ2_PIN);
	//rs = MQ2_CALC_R_VALUE(adc_result);
	
	
	for (i = 0; i < READ_SAMPLE_TIMES; i++ )
     eb0:	e9 f6       	brne	.-70     	; 0xe6c <MQ2_get_res+0x22>
	UART_sendStrByMark(arr, 0);
	UART_sendChr(13);
	UART_sendChr(10);
*/
	
	return rs;
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	48 e4       	ldi	r20, 0x48	; 72
     eb8:	52 e4       	ldi	r21, 0x42	; 66
     eba:	c7 01       	movw	r24, r14
     ebc:	b6 01       	movw	r22, r12
     ebe:	0e 94 38 0a 	call	0x1470	; 0x1470 <__divsf3>
}
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	bf 90       	pop	r11
     ed2:	af 90       	pop	r10
     ed4:	9f 90       	pop	r9
     ed6:	8f 90       	pop	r8
     ed8:	08 95       	ret

00000eda <MQ2_init>:


void MQ2_init()
{
     eda:	8f 92       	push	r8
     edc:	9f 92       	push	r9
     ede:	af 92       	push	r10
     ee0:	bf 92       	push	r11
     ee2:	cf 92       	push	r12
     ee4:	df 92       	push	r13
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	1f 93       	push	r17
     eec:	cf 93       	push	r28
     eee:	df 93       	push	r29
	ADC_init();
     ef0:	0e 94 b5 00 	call	0x16a	; 0x16a <ADC_init>
     ef4:	1a e0       	ldi	r17, 0x0A	; 10
static float MQ2_Calibration()
{
	char arr[10];
	
	unsigned char i;
	float val = 0;
     ef6:	c1 2c       	mov	r12, r1
     ef8:	d1 2c       	mov	r13, r1
     efa:	76 01       	movw	r14, r12
     efc:	c8 ec       	ldi	r28, 0xC8	; 200
     efe:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i < CALIBARAION_SAMPLE_TIMES; i++ ) 
	{   
		//take multiple samples
		//it derives the resistance Rs from the analog read
		//applying the voltage divider formula to get the result
		adc_result = ADC_read(MQ2_PIN);
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	0e 94 ba 00 	call	0x174	; 0x174 <ADC_read>
		val += MQ2_CALC_R_VALUE(adc_result);
     f06:	bc 01       	movw	r22, r24
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <__floatunsisf>
     f10:	4b 01       	movw	r8, r22
     f12:	5c 01       	movw	r10, r24
     f14:	9b 01       	movw	r18, r22
     f16:	ac 01       	movw	r20, r24
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	70 ec       	ldi	r23, 0xC0	; 192
     f1c:	8f e7       	ldi	r24, 0x7F	; 127
     f1e:	94 e4       	ldi	r25, 0x44	; 68
     f20:	0e 94 cb 09 	call	0x1396	; 0x1396 <__subsf3>
     f24:	a5 01       	movw	r20, r10
     f26:	94 01       	movw	r18, r8
     f28:	0e 94 38 0a 	call	0x1470	; 0x1470 <__divsf3>
     f2c:	9b 01       	movw	r18, r22
     f2e:	ac 01       	movw	r20, r24
     f30:	c7 01       	movw	r24, r14
     f32:	b6 01       	movw	r22, r12
     f34:	0e 94 cc 09 	call	0x1398	; 0x1398 <__addsf3>
     f38:	6b 01       	movw	r12, r22
     f3a:	7c 01       	movw	r14, r24
     f3c:	88 e8       	ldi	r24, 0x88	; 136
     f3e:	93 e1       	ldi	r25, 0x13	; 19
     f40:	fe 01       	movw	r30, r28
     f42:	31 97       	sbiw	r30, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <MQ2_init+0x68>
     f46:	01 97       	sbiw	r24, 0x01	; 1
	}
	else if (tmp > 65535)
	{
		ticks = (uint16_t)(ms_time * 10.0);
		
		while(ticks)
     f48:	d9 f7       	brne	.-10     	; 0xf40 <MQ2_init+0x66>
     f4a:	11 50       	subi	r17, 0x01	; 1
	unint16_t adc_result;
	
	//adc_result = ADC_read(MQ2_PIN);
	//val = MQ2_CALC_R_VALUE(adc_result);
	
	for (i = 0; i < CALIBARAION_SAMPLE_TIMES; i++ ) 
     f4c:	c9 f6       	brne	.-78     	; 0xf00 <MQ2_init+0x26>
		adc_result = ADC_read(MQ2_PIN);
		val += MQ2_CALC_R_VALUE(adc_result);
		delay_msec(CALIBRATION_SAMPLE_INTERVAL);
	}
	//calculate the average value
	val = val / CALIBARAION_SAMPLE_TIMES;
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e2       	ldi	r20, 0x20	; 32
     f54:	51 e4       	ldi	r21, 0x41	; 65
     f56:	c7 01       	movw	r24, r14
     f58:	b6 01       	movw	r22, r12
     f5a:	0e 94 38 0a 	call	0x1470	; 0x1470 <__divsf3>


void MQ2_init()
{
	ADC_init();
	MQ2_R0 = MQ2_Calibration();
     f5e:	2e ea       	ldi	r18, 0xAE	; 174
     f60:	37 e4       	ldi	r19, 0x47	; 71
     f62:	4d e1       	ldi	r20, 0x1D	; 29
     f64:	51 e4       	ldi	r21, 0x41	; 65
     f66:	0e 94 38 0a 	call	0x1470	; 0x1470 <__divsf3>
     f6a:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <MQ2_R0>
     f6e:	70 93 9f 00 	sts	0x009F, r23	; 0x80009f <MQ2_R0+0x1>
     f72:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <MQ2_R0+0x2>
     f76:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <MQ2_R0+0x3>
}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	ff 90       	pop	r15
     f82:	ef 90       	pop	r14
     f84:	df 90       	pop	r13
     f86:	cf 90       	pop	r12
     f88:	bf 90       	pop	r11
     f8a:	af 90       	pop	r10
     f8c:	9f 90       	pop	r9
     f8e:	8f 90       	pop	r8
     f90:	08 95       	ret

00000f92 <MQ2_get_result>:

}*/

unint16_t MQ2_get_result()
{
	unint16_t ppm_result = MQ2_GetPercentage((MQ2_get_res(MQ2_PIN) / MQ2_R0), SMOKE_SLOPE, SMOKE_Y, SMOKE_X); 
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 25 07 	call	0xe4a	; 0xe4a <MQ2_get_res>

static unsigned int MQ2_GetPercentage(float ratio, float m, float y, float x)
{
	char arr[10];
	double temp;
	temp = log10(ratio);
     f9a:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <MQ2_R0>
     f9e:	30 91 9f 00 	lds	r19, 0x009F	; 0x80009f <MQ2_R0+0x1>
     fa2:	40 91 a0 00 	lds	r20, 0x00A0	; 0x8000a0 <MQ2_R0+0x2>
     fa6:	50 91 a1 00 	lds	r21, 0x00A1	; 0x8000a1 <MQ2_R0+0x3>
     faa:	0e 94 38 0a 	call	0x1470	; 0x1470 <__divsf3>
     fae:	0e 94 67 0b 	call	0x16ce	; 0x16ce <log10>
		UART_sendStrByMark("log10 value is", 0);
		UART_sendStrByMark(arr, 0);
		UART_sendChr(13);
		UART_sendChr(10);*/
		
	temp = (((temp - y) / m) + x);
     fb2:	24 e1       	ldi	r18, 0x14	; 20
     fb4:	3e ea       	ldi	r19, 0xAE	; 174
     fb6:	47 e0       	ldi	r20, 0x07	; 7
     fb8:	5f e3       	ldi	r21, 0x3F	; 63
     fba:	0e 94 cb 09 	call	0x1396	; 0x1396 <__subsf3>
     fbe:	29 ea       	ldi	r18, 0xA9	; 169
     fc0:	35 e0       	ldi	r19, 0x05	; 5
     fc2:	43 ee       	ldi	r20, 0xE3	; 227
     fc4:	5e eb       	ldi	r21, 0xBE	; 190
     fc6:	0e 94 38 0a 	call	0x1470	; 0x1470 <__divsf3>
		UART_sendStrByMark(arr, 0);
		UART_sendChr(13);
		UART_sendChr(10);*/
				
		
	return (unint16_t)(pow(10,( ((log10(ratio) - y) / m) + x)));
     fca:	23 e3       	ldi	r18, 0x33	; 51
     fcc:	33 e3       	ldi	r19, 0x33	; 51
     fce:	43 e1       	ldi	r20, 0x13	; 19
     fd0:	50 e4       	ldi	r21, 0x40	; 64
     fd2:	0e 94 cc 09 	call	0x1398	; 0x1398 <__addsf3>
     fd6:	9b 01       	movw	r18, r22
     fd8:	ac 01       	movw	r20, r24
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	80 e2       	ldi	r24, 0x20	; 32
     fe0:	91 e4       	ldi	r25, 0x41	; 65
     fe2:	0e 94 2c 0c 	call	0x1858	; 0x1858 <pow>

unint16_t MQ2_get_result()
{
	unint16_t ppm_result = MQ2_GetPercentage((MQ2_get_res(MQ2_PIN) / MQ2_R0), SMOKE_SLOPE, SMOKE_Y, SMOKE_X); 
	
	return ppm_result;	
     fe6:	0e 94 aa 0a 	call	0x1554	; 0x1554 <__fixunssfsi>
     fea:	cb 01       	movw	r24, r22
     fec:	08 95       	ret

00000fee <spi_send>:
 */ 

#include "spi_api.h"

void spi_send(const uint8_t spi_num, const unint8_t *Str, const unint8_t size)
{
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
	unint8_t i = 0;
	
	while (i < size)
     ff8:	44 23       	and	r20, r20
     ffa:	81 f0       	breq	.+32     	; 0x101c <spi_send+0x2e>
     ffc:	f8 2e       	mov	r15, r24
     ffe:	eb 01       	movw	r28, r22
    1000:	41 50       	subi	r20, 0x01	; 1
    1002:	04 2f       	mov	r16, r20
    1004:	10 e0       	ldi	r17, 0x00	; 0
    1006:	0f 5f       	subi	r16, 0xFF	; 255
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
    100a:	06 0f       	add	r16, r22
    100c:	17 1f       	adc	r17, r23
	{
		spi_exchange(spi_num, Str[i]);
    100e:	69 91       	ld	r22, Y+
    1010:	8f 2d       	mov	r24, r15
    1012:	0e 94 af 08 	call	0x115e	; 0x115e <spi_exchange>

void spi_send(const uint8_t spi_num, const unint8_t *Str, const unint8_t size)
{
	unint8_t i = 0;
	
	while (i < size)
    1016:	c0 17       	cp	r28, r16
    1018:	d1 07       	cpc	r29, r17
    101a:	c9 f7       	brne	.-14     	; 0x100e <spi_send+0x20>
	{
		spi_exchange(spi_num, Str[i]);
		i++;
	}
}
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	08 95       	ret

00001028 <__vector_10>:
	DIO_SET_DIR(SS, DIO_INPUT);
	DIO_SET_DIR(SCK, DIO_INPUT);
	DIO_SET_DIR(MISO, DIO_OUTPUT);
	
	SPCR = (1 << SPE) | (data_order << DORD) | (polarity << CPOL) | (phase << CPHA);
}
    1028:	1f 92       	push	r1
    102a:	0f 92       	push	r0
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	0f 92       	push	r0
    1030:	11 24       	eor	r1, r1
    1032:	2f 93       	push	r18
    1034:	3f 93       	push	r19
    1036:	4f 93       	push	r20
    1038:	5f 93       	push	r21
    103a:	6f 93       	push	r22
    103c:	7f 93       	push	r23
    103e:	8f 93       	push	r24
    1040:	9f 93       	push	r25
    1042:	af 93       	push	r26
    1044:	bf 93       	push	r27
    1046:	ef 93       	push	r30
    1048:	ff 93       	push	r31
    104a:	f8 94       	cli
    104c:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <gp_spi_isr>
    1050:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <gp_spi_isr+0x1>
    1054:	30 97       	sbiw	r30, 0x00	; 0
    1056:	09 f0       	breq	.+2      	; 0x105a <__vector_10+0x32>
    1058:	09 95       	icall
    105a:	78 94       	sei
    105c:	ff 91       	pop	r31
    105e:	ef 91       	pop	r30
    1060:	bf 91       	pop	r27
    1062:	af 91       	pop	r26
    1064:	9f 91       	pop	r25
    1066:	8f 91       	pop	r24
    1068:	7f 91       	pop	r23
    106a:	6f 91       	pop	r22
    106c:	5f 91       	pop	r21
    106e:	4f 91       	pop	r20
    1070:	3f 91       	pop	r19
    1072:	2f 91       	pop	r18
    1074:	0f 90       	pop	r0
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	0f 90       	pop	r0
    107a:	1f 90       	pop	r1
    107c:	18 95       	reti

0000107e <spi_init_master>:
    107e:	ef 92       	push	r14
    1080:	ff 92       	push	r15
    1082:	0f 93       	push	r16
    1084:	cf 93       	push	r28
    1086:	81 11       	cpse	r24, r1
    1088:	62 c0       	rjmp	.+196    	; 0x114e <spi_init_master+0xd0>
    108a:	41 15       	cp	r20, r1
    108c:	89 e0       	ldi	r24, 0x09	; 9
    108e:	58 07       	cpc	r21, r24
    1090:	8d e3       	ldi	r24, 0x3D	; 61
    1092:	68 07       	cpc	r22, r24
    1094:	71 05       	cpc	r23, r1
    1096:	29 f4       	brne	.+10     	; 0x10a2 <spi_init_master+0x24>
    1098:	8d b1       	in	r24, 0x0d	; 13
    109a:	8c 7f       	andi	r24, 0xFC	; 252
    109c:	8d b9       	out	0x0d, r24	; 13
    109e:	70 9a       	sbi	0x0e, 0	; 14
    10a0:	35 c0       	rjmp	.+106    	; 0x110c <spi_init_master+0x8e>
    10a2:	40 38       	cpi	r20, 0x80	; 128
    10a4:	84 e8       	ldi	r24, 0x84	; 132
    10a6:	58 07       	cpc	r21, r24
    10a8:	8e e1       	ldi	r24, 0x1E	; 30
    10aa:	68 07       	cpc	r22, r24
    10ac:	71 05       	cpc	r23, r1
    10ae:	29 f4       	brne	.+10     	; 0x10ba <spi_init_master+0x3c>
    10b0:	8d b1       	in	r24, 0x0d	; 13
    10b2:	8c 7f       	andi	r24, 0xFC	; 252
    10b4:	8d b9       	out	0x0d, r24	; 13
    10b6:	70 98       	cbi	0x0e, 0	; 14
    10b8:	29 c0       	rjmp	.+82     	; 0x110c <spi_init_master+0x8e>
    10ba:	40 34       	cpi	r20, 0x40	; 64
    10bc:	82 e4       	ldi	r24, 0x42	; 66
    10be:	58 07       	cpc	r21, r24
    10c0:	8f e0       	ldi	r24, 0x0F	; 15
    10c2:	68 07       	cpc	r22, r24
    10c4:	71 05       	cpc	r23, r1
    10c6:	21 f4       	brne	.+8      	; 0x10d0 <spi_init_master+0x52>
    10c8:	69 98       	cbi	0x0d, 1	; 13
    10ca:	68 9a       	sbi	0x0d, 0	; 13
    10cc:	70 9a       	sbi	0x0e, 0	; 14
    10ce:	1e c0       	rjmp	.+60     	; 0x110c <spi_init_master+0x8e>
    10d0:	40 32       	cpi	r20, 0x20	; 32
    10d2:	81 ea       	ldi	r24, 0xA1	; 161
    10d4:	58 07       	cpc	r21, r24
    10d6:	87 e0       	ldi	r24, 0x07	; 7
    10d8:	68 07       	cpc	r22, r24
    10da:	71 05       	cpc	r23, r1
    10dc:	21 f4       	brne	.+8      	; 0x10e6 <spi_init_master+0x68>
    10de:	69 98       	cbi	0x0d, 1	; 13
    10e0:	68 9a       	sbi	0x0d, 0	; 13
    10e2:	70 98       	cbi	0x0e, 0	; 14
    10e4:	13 c0       	rjmp	.+38     	; 0x110c <spi_init_master+0x8e>
    10e6:	40 39       	cpi	r20, 0x90	; 144
    10e8:	80 ed       	ldi	r24, 0xD0	; 208
    10ea:	58 07       	cpc	r21, r24
    10ec:	83 e0       	ldi	r24, 0x03	; 3
    10ee:	68 07       	cpc	r22, r24
    10f0:	71 05       	cpc	r23, r1
    10f2:	21 f4       	brne	.+8      	; 0x10fc <spi_init_master+0x7e>
    10f4:	68 98       	cbi	0x0d, 0	; 13
    10f6:	69 9a       	sbi	0x0d, 1	; 13
    10f8:	70 9a       	sbi	0x0e, 0	; 14
    10fa:	08 c0       	rjmp	.+16     	; 0x110c <spi_init_master+0x8e>
    10fc:	48 34       	cpi	r20, 0x48	; 72
    10fe:	58 4e       	sbci	r21, 0xE8	; 232
    1100:	61 40       	sbci	r22, 0x01	; 1
    1102:	71 05       	cpc	r23, r1
    1104:	31 f5       	brne	.+76     	; 0x1152 <spi_init_master+0xd4>
    1106:	68 98       	cbi	0x0d, 0	; 13
    1108:	69 9a       	sbi	0x0d, 1	; 13
    110a:	70 98       	cbi	0x0e, 0	; 14
    110c:	c2 2f       	mov	r28, r18
    110e:	61 e0       	ldi	r22, 0x01	; 1
    1110:	8d e0       	ldi	r24, 0x0D	; 13
    1112:	0e 94 a3 01 	call	0x346	; 0x346 <dio_set_pin_dir>
    1116:	61 e0       	ldi	r22, 0x01	; 1
    1118:	8c e0       	ldi	r24, 0x0C	; 12
    111a:	0e 94 a3 01 	call	0x346	; 0x346 <dio_set_pin_dir>
    111e:	61 e0       	ldi	r22, 0x01	; 1
    1120:	8f e0       	ldi	r24, 0x0F	; 15
    1122:	0e 94 a3 01 	call	0x346	; 0x346 <dio_set_pin_dir>
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	8e e0       	ldi	r24, 0x0E	; 14
    112a:	0e 94 a3 01 	call	0x346	; 0x346 <dio_set_pin_dir>
    112e:	2c 2f       	mov	r18, r28
    1130:	22 0f       	add	r18, r18
    1132:	22 0f       	add	r18, r18
    1134:	20 65       	ori	r18, 0x50	; 80
    1136:	00 0f       	add	r16, r16
    1138:	00 0f       	add	r16, r16
    113a:	00 0f       	add	r16, r16
    113c:	20 2b       	or	r18, r16
    113e:	80 e2       	ldi	r24, 0x20	; 32
    1140:	e8 9e       	mul	r14, r24
    1142:	70 01       	movw	r14, r0
    1144:	11 24       	eor	r1, r1
    1146:	2e 29       	or	r18, r14
    1148:	2d b9       	out	0x0d, r18	; 13
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <spi_init_master+0xd6>
    114e:	80 e0       	ldi	r24, 0x00	; 0
    1150:	01 c0       	rjmp	.+2      	; 0x1154 <spi_init_master+0xd6>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	cf 91       	pop	r28
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	08 95       	ret

0000115e <spi_exchange>:

uint8_t spi_exchange(uint8_t spi_num, uint8_t sent_byte)
{
	SPDR = sent_byte; //send datA by SPI
    115e:	6f b9       	out	0x0f, r22	; 15

inline bool spi_int_stat(uint8_t spi_num)
{
	if (spi_num == SPI0)
	{
		return ((BIT_IS_SET(SREG, I)) && (BIT_IS_SET(SPCR, SPIE)));
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	07 fe       	sbrs	r0, 7
    1164:	02 c0       	rjmp	.+4      	; 0x116a <spi_exchange+0xc>
    1166:	6f 99       	sbic	0x0d, 7	; 13
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <spi_exchange+0x14>
	
	if (spi_int_stat(SPI0) == false)
	{
		while(BIT_IS_CLEAR(SPSR,SPIF))
    116a:	77 9b       	sbis	0x0e, 7	; 14
    116c:	fe cf       	rjmp	.-4      	; 0x116a <spi_exchange+0xc>
		{
			
		} //wait until SPI flag becomes 1 (data is sent correctly)
		
		return SPDR;
    116e:	8f b1       	in	r24, 0x0f	; 15
    1170:	08 95       	ret
	}
	
	return SUCCESS;
    1172:	81 e0       	ldi	r24, 0x01	; 1
}
    1174:	08 95       	ret

00001176 <__vector_13>:
{
	//used for accessing string elements one by one 
	unint8_t count = 0;
	
	//while the loop counter didn't reach the a_size of the ap_string
	while(count < a_size)
    1176:	1f 92       	push	r1
    1178:	0f 92       	push	r0
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	0f 92       	push	r0
    117e:	11 24       	eor	r1, r1
    1180:	2f 93       	push	r18
    1182:	3f 93       	push	r19
    1184:	4f 93       	push	r20
    1186:	5f 93       	push	r21
    1188:	6f 93       	push	r22
    118a:	7f 93       	push	r23
    118c:	8f 93       	push	r24
    118e:	9f 93       	push	r25
    1190:	af 93       	push	r26
    1192:	bf 93       	push	r27
    1194:	ef 93       	push	r30
    1196:	ff 93       	push	r31
    1198:	f8 94       	cli
    119a:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <gp_uart_txc_isr>
    119e:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <gp_uart_txc_isr+0x1>
    11a2:	30 97       	sbiw	r30, 0x00	; 0
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <__vector_13+0x32>
    11a6:	09 95       	icall
    11a8:	78 94       	sei
    11aa:	ff 91       	pop	r31
    11ac:	ef 91       	pop	r30
    11ae:	bf 91       	pop	r27
    11b0:	af 91       	pop	r26
    11b2:	9f 91       	pop	r25
    11b4:	8f 91       	pop	r24
    11b6:	7f 91       	pop	r23
    11b8:	6f 91       	pop	r22
    11ba:	5f 91       	pop	r21
    11bc:	4f 91       	pop	r20
    11be:	3f 91       	pop	r19
    11c0:	2f 91       	pop	r18
    11c2:	0f 90       	pop	r0
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	0f 90       	pop	r0
    11c8:	1f 90       	pop	r1
    11ca:	18 95       	reti

000011cc <__vector_11>:
    11cc:	1f 92       	push	r1
    11ce:	0f 92       	push	r0
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	0f 92       	push	r0
    11d4:	11 24       	eor	r1, r1
    11d6:	2f 93       	push	r18
    11d8:	3f 93       	push	r19
    11da:	4f 93       	push	r20
    11dc:	5f 93       	push	r21
    11de:	6f 93       	push	r22
    11e0:	7f 93       	push	r23
    11e2:	8f 93       	push	r24
    11e4:	9f 93       	push	r25
    11e6:	af 93       	push	r26
    11e8:	bf 93       	push	r27
    11ea:	ef 93       	push	r30
    11ec:	ff 93       	push	r31
    11ee:	f8 94       	cli
    11f0:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <gp_uart_rxc_isr>
    11f4:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <gp_uart_rxc_isr+0x1>
    11f8:	30 97       	sbiw	r30, 0x00	; 0
    11fa:	09 f0       	breq	.+2      	; 0x11fe <__vector_11+0x32>
    11fc:	09 95       	icall
    11fe:	78 94       	sei
    1200:	ff 91       	pop	r31
    1202:	ef 91       	pop	r30
    1204:	bf 91       	pop	r27
    1206:	af 91       	pop	r26
    1208:	9f 91       	pop	r25
    120a:	8f 91       	pop	r24
    120c:	7f 91       	pop	r23
    120e:	6f 91       	pop	r22
    1210:	5f 91       	pop	r21
    1212:	4f 91       	pop	r20
    1214:	3f 91       	pop	r19
    1216:	2f 91       	pop	r18
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	0f 90       	pop	r0
    121e:	1f 90       	pop	r1
    1220:	18 95       	reti

00001222 <__vector_12>:
    1222:	1f 92       	push	r1
    1224:	0f 92       	push	r0
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	0f 92       	push	r0
    122a:	11 24       	eor	r1, r1
    122c:	2f 93       	push	r18
    122e:	3f 93       	push	r19
    1230:	4f 93       	push	r20
    1232:	5f 93       	push	r21
    1234:	6f 93       	push	r22
    1236:	7f 93       	push	r23
    1238:	8f 93       	push	r24
    123a:	9f 93       	push	r25
    123c:	af 93       	push	r26
    123e:	bf 93       	push	r27
    1240:	ef 93       	push	r30
    1242:	ff 93       	push	r31
    1244:	f8 94       	cli
    1246:	5d 9a       	sbi	0x0b, 5	; 11
    1248:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <gp_uart_udre_isr>
    124c:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <gp_uart_udre_isr+0x1>
    1250:	30 97       	sbiw	r30, 0x00	; 0
    1252:	09 f0       	breq	.+2      	; 0x1256 <__vector_12+0x34>
    1254:	09 95       	icall
    1256:	78 94       	sei
    1258:	ff 91       	pop	r31
    125a:	ef 91       	pop	r30
    125c:	bf 91       	pop	r27
    125e:	af 91       	pop	r26
    1260:	9f 91       	pop	r25
    1262:	8f 91       	pop	r24
    1264:	7f 91       	pop	r23
    1266:	6f 91       	pop	r22
    1268:	5f 91       	pop	r21
    126a:	4f 91       	pop	r20
    126c:	3f 91       	pop	r19
    126e:	2f 91       	pop	r18
    1270:	0f 90       	pop	r0
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	0f 90       	pop	r0
    1276:	1f 90       	pop	r1
    1278:	18 95       	reti

0000127a <uart_init>:
    127a:	af 92       	push	r10
    127c:	cf 92       	push	r12
    127e:	ef 92       	push	r14
    1280:	ff 92       	push	r15
    1282:	0f 93       	push	r16
    1284:	cf 93       	push	r28
    1286:	c2 2f       	mov	r28, r18
    1288:	81 11       	cpse	r24, r1
    128a:	42 c0       	rjmp	.+132    	; 0x1310 <uart_init+0x96>
    128c:	db 01       	movw	r26, r22
    128e:	ca 01       	movw	r24, r20
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	aa 1f       	adc	r26, r26
    1296:	bb 1f       	adc	r27, r27
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	aa 1f       	adc	r26, r26
    129e:	bb 1f       	adc	r27, r27
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	aa 1f       	adc	r26, r26
    12a6:	bb 1f       	adc	r27, r27
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	aa 1f       	adc	r26, r26
    12ae:	bb 1f       	adc	r27, r27
    12b0:	9c 01       	movw	r18, r24
    12b2:	ad 01       	movw	r20, r26
    12b4:	20 7f       	andi	r18, 0xF0	; 240
    12b6:	5f 77       	andi	r21, 0x7F	; 127
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	78 e4       	ldi	r23, 0x48	; 72
    12bc:	88 ee       	ldi	r24, 0xE8	; 232
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <__udivmodsi4>
    12c4:	22 50       	subi	r18, 0x02	; 2
    12c6:	31 09       	sbc	r19, r1
    12c8:	20 ff       	sbrs	r18, 0
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <uart_init+0x5c>
    12cc:	36 95       	lsr	r19
    12ce:	27 95       	ror	r18
    12d0:	2f 5f       	subi	r18, 0xFF	; 255
    12d2:	3f 4f       	sbci	r19, 0xFF	; 255
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <uart_init+0x60>
    12d6:	36 95       	lsr	r19
    12d8:	27 95       	ror	r18
    12da:	82 e0       	ldi	r24, 0x02	; 2
    12dc:	8b b9       	out	0x0b, r24	; 11
    12de:	00 0f       	add	r16, r16
    12e0:	00 0f       	add	r16, r16
    12e2:	00 0f       	add	r16, r16
    12e4:	8c 2f       	mov	r24, r28
    12e6:	84 70       	andi	r24, 0x04	; 4
    12e8:	08 2b       	or	r16, r24
    12ea:	0a b9       	out	0x0a, r16	; 10
    12ec:	cc 0c       	add	r12, r12
    12ee:	cc 0c       	add	r12, r12
    12f0:	cc 0c       	add	r12, r12
    12f2:	8a 2d       	mov	r24, r10
    12f4:	80 68       	ori	r24, 0x80	; 128
    12f6:	ac 2c       	mov	r10, r12
    12f8:	a8 2a       	or	r10, r24
    12fa:	80 e1       	ldi	r24, 0x10	; 16
    12fc:	e8 9e       	mul	r14, r24
    12fe:	70 01       	movw	r14, r0
    1300:	11 24       	eor	r1, r1
    1302:	ea 28       	or	r14, r10
    1304:	c3 70       	andi	r28, 0x03	; 3
    1306:	cc 0f       	add	r28, r28
    1308:	ec 2a       	or	r14, r28
    130a:	e0 bc       	out	0x20, r14	; 32
    130c:	30 bd       	out	0x20, r19	; 32
    130e:	29 b9       	out	0x09, r18	; 9
    1310:	cf 91       	pop	r28
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	ef 90       	pop	r14
    1318:	cf 90       	pop	r12
    131a:	af 90       	pop	r10
    131c:	08 95       	ret

0000131e <uart_send_until>:
																	 
			UDR = ( *((uint16_t *)ap_str + count) & 0xff);
			
		}
	
		
    131e:	80 e0       	ldi	r24, 0x00	; 0
		//UDR = ap_str[count];
		
		count++;
	}
    1320:	1d c0       	rjmp	.+58     	; 0x135c <uart_send_until+0x3e>

//this function sends a stream of data except the marked symbol
//NOTE: this function does not work in interrupt mode 
uint8_t uart_send_until(unint8_t a_uart_no, const void * ap_str, unint16_t a_mark)
{
	//used for accessing string elements one by one 
    1322:	5d 9b       	sbis	0x0b, 5	; 11
    1324:	fe cf       	rjmp	.-4      	; 0x1322 <uart_send_until+0x4>
	unint8_t count = 0;
	
	//while we didn't reach end of ap_str character
	//	while( *((uint8_t *)ap_str + count) != a_mark)
	while(CURRENT_SYMBOL_IN_STR(count) != a_mark)
	{
    1326:	52 99       	sbic	0x0a, 2	; 10
    1328:	06 c0       	rjmp	.+12     	; 0x1336 <uart_send_until+0x18>
		
		int16_t timer = 1000;
    132a:	fb 01       	movw	r30, r22
    132c:	e8 0f       	add	r30, r24
    132e:	f1 1d       	adc	r31, r1
    1330:	90 81       	ld	r25, Z
    1332:	9c b9       	out	0x0c, r25	; 12
    1334:	12 c0       	rjmp	.+36     	; 0x135a <uart_send_until+0x3c>
		/* UDRE flag is set when the TX buffer (UDR) is empty and ready for 
		 * transmitting a new byte so wait until this flag is set to one 
		 */
		//if transmit interrupt is disabled activate polling
		//we check the interrupt on the TXC flag .. but poll the UDR flag because
    1336:	e8 2f       	mov	r30, r24
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	ee 0f       	add	r30, r30
    133c:	ff 1f       	adc	r31, r31
    133e:	e6 0f       	add	r30, r22
    1340:	f7 1f       	adc	r31, r23
    1342:	20 81       	ld	r18, Z
    1344:	31 81       	ldd	r19, Z+1	; 0x01
    1346:	30 ff       	sbrs	r19, 0
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <uart_send_until+0x32>
    134a:	9a b1       	in	r25, 0x0a	; 10
    134c:	91 60       	ori	r25, 0x01	; 1
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <uart_send_until+0x36>
		//the UDR is more efficient than TXC
    1350:	9a b1       	in	r25, 0x0a	; 10
		int16_t timer = 1000;
		/* UDRE flag is set when the TX buffer (UDR) is empty and ready for 
		 * transmitting a new byte so wait until this flag is set to one 
		 */
		//if transmit interrupt is disabled activate polling
		//we check the interrupt on the TXC flag .. but poll the UDR flag because
    1352:	9e 7f       	andi	r25, 0xFE	; 254
    1354:	9a b9       	out	0x0a, r25	; 10
		//the UDR is more efficient than TXC
		while (BIT_IS_CLEAR(UCSRA,UDRE) && --timer)
    1356:	90 81       	ld	r25, Z
    1358:	9c b9       	out	0x0c, r25	; 12
		{
			delay_usec(500);
		}
    135a:	8f 5f       	subi	r24, 0xFF	; 255
	
		
		//UDR = ap_str[count];
		
		count++;
	}
    135c:	52 99       	sbic	0x0a, 2	; 10
    135e:	06 c0       	rjmp	.+12     	; 0x136c <uart_send_until+0x4e>
    1360:	fb 01       	movw	r30, r22
    1362:	e8 0f       	add	r30, r24
    1364:	f1 1d       	adc	r31, r1
    1366:	20 81       	ld	r18, Z
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	08 c0       	rjmp	.+16     	; 0x137c <uart_send_until+0x5e>
    136c:	e8 2f       	mov	r30, r24
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	ee 0f       	add	r30, r30
    1372:	ff 1f       	adc	r31, r31
    1374:	e6 0f       	add	r30, r22
    1376:	f7 1f       	adc	r31, r23
    1378:	20 81       	ld	r18, Z
    137a:	31 81       	ldd	r19, Z+1	; 0x01
    137c:	24 17       	cp	r18, r20
    137e:	35 07       	cpc	r19, r21
    1380:	81 f6       	brne	.-96     	; 0x1322 <uart_send_until+0x4>
		{
			delay_usec(500);
		}
		
		if (!timer)
		{
    1382:	08 95       	ret

00001384 <uart_send_str>:
			return ERROR;
		}
		
		//if the ninth bit is not used
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	50 e0       	ldi	r21, 0x00	; 0
    1388:	0e 94 8f 09 	call	0x131e	; 0x131e <uart_send_until>
		if (BIT_IS_CLEAR(UCSRB, UCSZ2))
		{
    138c:	5d 9b       	sbis	0x0b, 5	; 11
    138e:	fe cf       	rjmp	.-4      	; 0x138c <uart_send_str+0x8>
			UDR = *((uint8_t *)ap_str + count);			
		}
		else // if the ninth bit is used
		{
			//put the ninth bit value in its specified bit in UCSRB register
    1390:	50 98       	cbi	0x0a, 0	; 10
			UCSRB = (( *((uint16_t *)ap_str + count) & (1 << 8)) ? UCSRB | (1 << TXB8) :
    1392:	1c b8       	out	0x0c, r1	; 12
    1394:	08 95       	ret

00001396 <__subsf3>:
    1396:	50 58       	subi	r21, 0x80	; 128

00001398 <__addsf3>:
    1398:	bb 27       	eor	r27, r27
    139a:	aa 27       	eor	r26, r26
    139c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__addsf3x>
    13a0:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__fp_round>
    13a4:	0e 94 1f 0b 	call	0x163e	; 0x163e <__fp_pscA>
    13a8:	38 f0       	brcs	.+14     	; 0x13b8 <__addsf3+0x20>
    13aa:	0e 94 26 0b 	call	0x164c	; 0x164c <__fp_pscB>
    13ae:	20 f0       	brcs	.+8      	; 0x13b8 <__addsf3+0x20>
    13b0:	39 f4       	brne	.+14     	; 0x13c0 <__addsf3+0x28>
    13b2:	9f 3f       	cpi	r25, 0xFF	; 255
    13b4:	19 f4       	brne	.+6      	; 0x13bc <__addsf3+0x24>
    13b6:	26 f4       	brtc	.+8      	; 0x13c0 <__addsf3+0x28>
    13b8:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__fp_nan>
    13bc:	0e f4       	brtc	.+2      	; 0x13c0 <__addsf3+0x28>
    13be:	e0 95       	com	r30
    13c0:	e7 fb       	bst	r30, 7
    13c2:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_inf>

000013c6 <__addsf3x>:
    13c6:	e9 2f       	mov	r30, r25
    13c8:	0e 94 3e 0b 	call	0x167c	; 0x167c <__fp_split3>
    13cc:	58 f3       	brcs	.-42     	; 0x13a4 <__addsf3+0xc>
    13ce:	ba 17       	cp	r27, r26
    13d0:	62 07       	cpc	r22, r18
    13d2:	73 07       	cpc	r23, r19
    13d4:	84 07       	cpc	r24, r20
    13d6:	95 07       	cpc	r25, r21
    13d8:	20 f0       	brcs	.+8      	; 0x13e2 <__addsf3x+0x1c>
    13da:	79 f4       	brne	.+30     	; 0x13fa <__addsf3x+0x34>
    13dc:	a6 f5       	brtc	.+104    	; 0x1446 <__addsf3x+0x80>
    13de:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__fp_zero>
    13e2:	0e f4       	brtc	.+2      	; 0x13e6 <__addsf3x+0x20>
    13e4:	e0 95       	com	r30
    13e6:	0b 2e       	mov	r0, r27
    13e8:	ba 2f       	mov	r27, r26
    13ea:	a0 2d       	mov	r26, r0
    13ec:	0b 01       	movw	r0, r22
    13ee:	b9 01       	movw	r22, r18
    13f0:	90 01       	movw	r18, r0
    13f2:	0c 01       	movw	r0, r24
    13f4:	ca 01       	movw	r24, r20
    13f6:	a0 01       	movw	r20, r0
    13f8:	11 24       	eor	r1, r1
    13fa:	ff 27       	eor	r31, r31
    13fc:	59 1b       	sub	r21, r25
    13fe:	99 f0       	breq	.+38     	; 0x1426 <__addsf3x+0x60>
    1400:	59 3f       	cpi	r21, 0xF9	; 249
    1402:	50 f4       	brcc	.+20     	; 0x1418 <__addsf3x+0x52>
    1404:	50 3e       	cpi	r21, 0xE0	; 224
    1406:	68 f1       	brcs	.+90     	; 0x1462 <__addsf3x+0x9c>
    1408:	1a 16       	cp	r1, r26
    140a:	f0 40       	sbci	r31, 0x00	; 0
    140c:	a2 2f       	mov	r26, r18
    140e:	23 2f       	mov	r18, r19
    1410:	34 2f       	mov	r19, r20
    1412:	44 27       	eor	r20, r20
    1414:	58 5f       	subi	r21, 0xF8	; 248
    1416:	f3 cf       	rjmp	.-26     	; 0x13fe <__addsf3x+0x38>
    1418:	46 95       	lsr	r20
    141a:	37 95       	ror	r19
    141c:	27 95       	ror	r18
    141e:	a7 95       	ror	r26
    1420:	f0 40       	sbci	r31, 0x00	; 0
    1422:	53 95       	inc	r21
    1424:	c9 f7       	brne	.-14     	; 0x1418 <__addsf3x+0x52>
    1426:	7e f4       	brtc	.+30     	; 0x1446 <__addsf3x+0x80>
    1428:	1f 16       	cp	r1, r31
    142a:	ba 0b       	sbc	r27, r26
    142c:	62 0b       	sbc	r22, r18
    142e:	73 0b       	sbc	r23, r19
    1430:	84 0b       	sbc	r24, r20
    1432:	ba f0       	brmi	.+46     	; 0x1462 <__addsf3x+0x9c>
    1434:	91 50       	subi	r25, 0x01	; 1
    1436:	a1 f0       	breq	.+40     	; 0x1460 <__addsf3x+0x9a>
    1438:	ff 0f       	add	r31, r31
    143a:	bb 1f       	adc	r27, r27
    143c:	66 1f       	adc	r22, r22
    143e:	77 1f       	adc	r23, r23
    1440:	88 1f       	adc	r24, r24
    1442:	c2 f7       	brpl	.-16     	; 0x1434 <__addsf3x+0x6e>
    1444:	0e c0       	rjmp	.+28     	; 0x1462 <__addsf3x+0x9c>
    1446:	ba 0f       	add	r27, r26
    1448:	62 1f       	adc	r22, r18
    144a:	73 1f       	adc	r23, r19
    144c:	84 1f       	adc	r24, r20
    144e:	48 f4       	brcc	.+18     	; 0x1462 <__addsf3x+0x9c>
    1450:	87 95       	ror	r24
    1452:	77 95       	ror	r23
    1454:	67 95       	ror	r22
    1456:	b7 95       	ror	r27
    1458:	f7 95       	ror	r31
    145a:	9e 3f       	cpi	r25, 0xFE	; 254
    145c:	08 f0       	brcs	.+2      	; 0x1460 <__addsf3x+0x9a>
    145e:	b0 cf       	rjmp	.-160    	; 0x13c0 <__addsf3+0x28>
    1460:	93 95       	inc	r25
    1462:	88 0f       	add	r24, r24
    1464:	08 f0       	brcs	.+2      	; 0x1468 <__addsf3x+0xa2>
    1466:	99 27       	eor	r25, r25
    1468:	ee 0f       	add	r30, r30
    146a:	97 95       	ror	r25
    146c:	87 95       	ror	r24
    146e:	08 95       	ret

00001470 <__divsf3>:
    1470:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__divsf3x>
    1474:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__fp_round>
    1478:	0e 94 26 0b 	call	0x164c	; 0x164c <__fp_pscB>
    147c:	58 f0       	brcs	.+22     	; 0x1494 <__divsf3+0x24>
    147e:	0e 94 1f 0b 	call	0x163e	; 0x163e <__fp_pscA>
    1482:	40 f0       	brcs	.+16     	; 0x1494 <__divsf3+0x24>
    1484:	29 f4       	brne	.+10     	; 0x1490 <__divsf3+0x20>
    1486:	5f 3f       	cpi	r21, 0xFF	; 255
    1488:	29 f0       	breq	.+10     	; 0x1494 <__divsf3+0x24>
    148a:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_inf>
    148e:	51 11       	cpse	r21, r1
    1490:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__fp_szero>
    1494:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__fp_nan>

00001498 <__divsf3x>:
    1498:	0e 94 3e 0b 	call	0x167c	; 0x167c <__fp_split3>
    149c:	68 f3       	brcs	.-38     	; 0x1478 <__divsf3+0x8>

0000149e <__divsf3_pse>:
    149e:	99 23       	and	r25, r25
    14a0:	b1 f3       	breq	.-20     	; 0x148e <__divsf3+0x1e>
    14a2:	55 23       	and	r21, r21
    14a4:	91 f3       	breq	.-28     	; 0x148a <__divsf3+0x1a>
    14a6:	95 1b       	sub	r25, r21
    14a8:	55 0b       	sbc	r21, r21
    14aa:	bb 27       	eor	r27, r27
    14ac:	aa 27       	eor	r26, r26
    14ae:	62 17       	cp	r22, r18
    14b0:	73 07       	cpc	r23, r19
    14b2:	84 07       	cpc	r24, r20
    14b4:	38 f0       	brcs	.+14     	; 0x14c4 <__divsf3_pse+0x26>
    14b6:	9f 5f       	subi	r25, 0xFF	; 255
    14b8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ba:	22 0f       	add	r18, r18
    14bc:	33 1f       	adc	r19, r19
    14be:	44 1f       	adc	r20, r20
    14c0:	aa 1f       	adc	r26, r26
    14c2:	a9 f3       	breq	.-22     	; 0x14ae <__divsf3_pse+0x10>
    14c4:	35 d0       	rcall	.+106    	; 0x1530 <__divsf3_pse+0x92>
    14c6:	0e 2e       	mov	r0, r30
    14c8:	3a f0       	brmi	.+14     	; 0x14d8 <__divsf3_pse+0x3a>
    14ca:	e0 e8       	ldi	r30, 0x80	; 128
    14cc:	32 d0       	rcall	.+100    	; 0x1532 <__divsf3_pse+0x94>
    14ce:	91 50       	subi	r25, 0x01	; 1
    14d0:	50 40       	sbci	r21, 0x00	; 0
    14d2:	e6 95       	lsr	r30
    14d4:	00 1c       	adc	r0, r0
    14d6:	ca f7       	brpl	.-14     	; 0x14ca <__divsf3_pse+0x2c>
    14d8:	2b d0       	rcall	.+86     	; 0x1530 <__divsf3_pse+0x92>
    14da:	fe 2f       	mov	r31, r30
    14dc:	29 d0       	rcall	.+82     	; 0x1530 <__divsf3_pse+0x92>
    14de:	66 0f       	add	r22, r22
    14e0:	77 1f       	adc	r23, r23
    14e2:	88 1f       	adc	r24, r24
    14e4:	bb 1f       	adc	r27, r27
    14e6:	26 17       	cp	r18, r22
    14e8:	37 07       	cpc	r19, r23
    14ea:	48 07       	cpc	r20, r24
    14ec:	ab 07       	cpc	r26, r27
    14ee:	b0 e8       	ldi	r27, 0x80	; 128
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <__divsf3_pse+0x56>
    14f2:	bb 0b       	sbc	r27, r27
    14f4:	80 2d       	mov	r24, r0
    14f6:	bf 01       	movw	r22, r30
    14f8:	ff 27       	eor	r31, r31
    14fa:	93 58       	subi	r25, 0x83	; 131
    14fc:	5f 4f       	sbci	r21, 0xFF	; 255
    14fe:	3a f0       	brmi	.+14     	; 0x150e <__divsf3_pse+0x70>
    1500:	9e 3f       	cpi	r25, 0xFE	; 254
    1502:	51 05       	cpc	r21, r1
    1504:	78 f0       	brcs	.+30     	; 0x1524 <__divsf3_pse+0x86>
    1506:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_inf>
    150a:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__fp_szero>
    150e:	5f 3f       	cpi	r21, 0xFF	; 255
    1510:	e4 f3       	brlt	.-8      	; 0x150a <__divsf3_pse+0x6c>
    1512:	98 3e       	cpi	r25, 0xE8	; 232
    1514:	d4 f3       	brlt	.-12     	; 0x150a <__divsf3_pse+0x6c>
    1516:	86 95       	lsr	r24
    1518:	77 95       	ror	r23
    151a:	67 95       	ror	r22
    151c:	b7 95       	ror	r27
    151e:	f7 95       	ror	r31
    1520:	9f 5f       	subi	r25, 0xFF	; 255
    1522:	c9 f7       	brne	.-14     	; 0x1516 <__divsf3_pse+0x78>
    1524:	88 0f       	add	r24, r24
    1526:	91 1d       	adc	r25, r1
    1528:	96 95       	lsr	r25
    152a:	87 95       	ror	r24
    152c:	97 f9       	bld	r25, 7
    152e:	08 95       	ret
    1530:	e1 e0       	ldi	r30, 0x01	; 1
    1532:	66 0f       	add	r22, r22
    1534:	77 1f       	adc	r23, r23
    1536:	88 1f       	adc	r24, r24
    1538:	bb 1f       	adc	r27, r27
    153a:	62 17       	cp	r22, r18
    153c:	73 07       	cpc	r23, r19
    153e:	84 07       	cpc	r24, r20
    1540:	ba 07       	cpc	r27, r26
    1542:	20 f0       	brcs	.+8      	; 0x154c <__divsf3_pse+0xae>
    1544:	62 1b       	sub	r22, r18
    1546:	73 0b       	sbc	r23, r19
    1548:	84 0b       	sbc	r24, r20
    154a:	ba 0b       	sbc	r27, r26
    154c:	ee 1f       	adc	r30, r30
    154e:	88 f7       	brcc	.-30     	; 0x1532 <__divsf3_pse+0x94>
    1550:	e0 95       	com	r30
    1552:	08 95       	ret

00001554 <__fixunssfsi>:
    1554:	0e 94 46 0b 	call	0x168c	; 0x168c <__fp_splitA>
    1558:	88 f0       	brcs	.+34     	; 0x157c <__fixunssfsi+0x28>
    155a:	9f 57       	subi	r25, 0x7F	; 127
    155c:	98 f0       	brcs	.+38     	; 0x1584 <__fixunssfsi+0x30>
    155e:	b9 2f       	mov	r27, r25
    1560:	99 27       	eor	r25, r25
    1562:	b7 51       	subi	r27, 0x17	; 23
    1564:	b0 f0       	brcs	.+44     	; 0x1592 <__fixunssfsi+0x3e>
    1566:	e1 f0       	breq	.+56     	; 0x15a0 <__fixunssfsi+0x4c>
    1568:	66 0f       	add	r22, r22
    156a:	77 1f       	adc	r23, r23
    156c:	88 1f       	adc	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	1a f0       	brmi	.+6      	; 0x1578 <__fixunssfsi+0x24>
    1572:	ba 95       	dec	r27
    1574:	c9 f7       	brne	.-14     	; 0x1568 <__fixunssfsi+0x14>
    1576:	14 c0       	rjmp	.+40     	; 0x15a0 <__fixunssfsi+0x4c>
    1578:	b1 30       	cpi	r27, 0x01	; 1
    157a:	91 f0       	breq	.+36     	; 0x15a0 <__fixunssfsi+0x4c>
    157c:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__fp_zero>
    1580:	b1 e0       	ldi	r27, 0x01	; 1
    1582:	08 95       	ret
    1584:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__fp_zero>
    1588:	67 2f       	mov	r22, r23
    158a:	78 2f       	mov	r23, r24
    158c:	88 27       	eor	r24, r24
    158e:	b8 5f       	subi	r27, 0xF8	; 248
    1590:	39 f0       	breq	.+14     	; 0x15a0 <__fixunssfsi+0x4c>
    1592:	b9 3f       	cpi	r27, 0xF9	; 249
    1594:	cc f3       	brlt	.-14     	; 0x1588 <__fixunssfsi+0x34>
    1596:	86 95       	lsr	r24
    1598:	77 95       	ror	r23
    159a:	67 95       	ror	r22
    159c:	b3 95       	inc	r27
    159e:	d9 f7       	brne	.-10     	; 0x1596 <__fixunssfsi+0x42>
    15a0:	3e f4       	brtc	.+14     	; 0x15b0 <__fixunssfsi+0x5c>
    15a2:	90 95       	com	r25
    15a4:	80 95       	com	r24
    15a6:	70 95       	com	r23
    15a8:	61 95       	neg	r22
    15aa:	7f 4f       	sbci	r23, 0xFF	; 255
    15ac:	8f 4f       	sbci	r24, 0xFF	; 255
    15ae:	9f 4f       	sbci	r25, 0xFF	; 255
    15b0:	08 95       	ret

000015b2 <__floatunsisf>:
    15b2:	e8 94       	clt
    15b4:	09 c0       	rjmp	.+18     	; 0x15c8 <__floatsisf+0x12>

000015b6 <__floatsisf>:
    15b6:	97 fb       	bst	r25, 7
    15b8:	3e f4       	brtc	.+14     	; 0x15c8 <__floatsisf+0x12>
    15ba:	90 95       	com	r25
    15bc:	80 95       	com	r24
    15be:	70 95       	com	r23
    15c0:	61 95       	neg	r22
    15c2:	7f 4f       	sbci	r23, 0xFF	; 255
    15c4:	8f 4f       	sbci	r24, 0xFF	; 255
    15c6:	9f 4f       	sbci	r25, 0xFF	; 255
    15c8:	99 23       	and	r25, r25
    15ca:	a9 f0       	breq	.+42     	; 0x15f6 <__floatsisf+0x40>
    15cc:	f9 2f       	mov	r31, r25
    15ce:	96 e9       	ldi	r25, 0x96	; 150
    15d0:	bb 27       	eor	r27, r27
    15d2:	93 95       	inc	r25
    15d4:	f6 95       	lsr	r31
    15d6:	87 95       	ror	r24
    15d8:	77 95       	ror	r23
    15da:	67 95       	ror	r22
    15dc:	b7 95       	ror	r27
    15de:	f1 11       	cpse	r31, r1
    15e0:	f8 cf       	rjmp	.-16     	; 0x15d2 <__floatsisf+0x1c>
    15e2:	fa f4       	brpl	.+62     	; 0x1622 <__floatsisf+0x6c>
    15e4:	bb 0f       	add	r27, r27
    15e6:	11 f4       	brne	.+4      	; 0x15ec <__floatsisf+0x36>
    15e8:	60 ff       	sbrs	r22, 0
    15ea:	1b c0       	rjmp	.+54     	; 0x1622 <__floatsisf+0x6c>
    15ec:	6f 5f       	subi	r22, 0xFF	; 255
    15ee:	7f 4f       	sbci	r23, 0xFF	; 255
    15f0:	8f 4f       	sbci	r24, 0xFF	; 255
    15f2:	9f 4f       	sbci	r25, 0xFF	; 255
    15f4:	16 c0       	rjmp	.+44     	; 0x1622 <__floatsisf+0x6c>
    15f6:	88 23       	and	r24, r24
    15f8:	11 f0       	breq	.+4      	; 0x15fe <__floatsisf+0x48>
    15fa:	96 e9       	ldi	r25, 0x96	; 150
    15fc:	11 c0       	rjmp	.+34     	; 0x1620 <__floatsisf+0x6a>
    15fe:	77 23       	and	r23, r23
    1600:	21 f0       	breq	.+8      	; 0x160a <__floatsisf+0x54>
    1602:	9e e8       	ldi	r25, 0x8E	; 142
    1604:	87 2f       	mov	r24, r23
    1606:	76 2f       	mov	r23, r22
    1608:	05 c0       	rjmp	.+10     	; 0x1614 <__floatsisf+0x5e>
    160a:	66 23       	and	r22, r22
    160c:	71 f0       	breq	.+28     	; 0x162a <__floatsisf+0x74>
    160e:	96 e8       	ldi	r25, 0x86	; 134
    1610:	86 2f       	mov	r24, r22
    1612:	70 e0       	ldi	r23, 0x00	; 0
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	2a f0       	brmi	.+10     	; 0x1622 <__floatsisf+0x6c>
    1618:	9a 95       	dec	r25
    161a:	66 0f       	add	r22, r22
    161c:	77 1f       	adc	r23, r23
    161e:	88 1f       	adc	r24, r24
    1620:	da f7       	brpl	.-10     	; 0x1618 <__floatsisf+0x62>
    1622:	88 0f       	add	r24, r24
    1624:	96 95       	lsr	r25
    1626:	87 95       	ror	r24
    1628:	97 f9       	bld	r25, 7
    162a:	08 95       	ret

0000162c <__fp_inf>:
    162c:	97 f9       	bld	r25, 7
    162e:	9f 67       	ori	r25, 0x7F	; 127
    1630:	80 e8       	ldi	r24, 0x80	; 128
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	08 95       	ret

00001638 <__fp_nan>:
    1638:	9f ef       	ldi	r25, 0xFF	; 255
    163a:	80 ec       	ldi	r24, 0xC0	; 192
    163c:	08 95       	ret

0000163e <__fp_pscA>:
    163e:	00 24       	eor	r0, r0
    1640:	0a 94       	dec	r0
    1642:	16 16       	cp	r1, r22
    1644:	17 06       	cpc	r1, r23
    1646:	18 06       	cpc	r1, r24
    1648:	09 06       	cpc	r0, r25
    164a:	08 95       	ret

0000164c <__fp_pscB>:
    164c:	00 24       	eor	r0, r0
    164e:	0a 94       	dec	r0
    1650:	12 16       	cp	r1, r18
    1652:	13 06       	cpc	r1, r19
    1654:	14 06       	cpc	r1, r20
    1656:	05 06       	cpc	r0, r21
    1658:	08 95       	ret

0000165a <__fp_round>:
    165a:	09 2e       	mov	r0, r25
    165c:	03 94       	inc	r0
    165e:	00 0c       	add	r0, r0
    1660:	11 f4       	brne	.+4      	; 0x1666 <__fp_round+0xc>
    1662:	88 23       	and	r24, r24
    1664:	52 f0       	brmi	.+20     	; 0x167a <__fp_round+0x20>
    1666:	bb 0f       	add	r27, r27
    1668:	40 f4       	brcc	.+16     	; 0x167a <__fp_round+0x20>
    166a:	bf 2b       	or	r27, r31
    166c:	11 f4       	brne	.+4      	; 0x1672 <__fp_round+0x18>
    166e:	60 ff       	sbrs	r22, 0
    1670:	04 c0       	rjmp	.+8      	; 0x167a <__fp_round+0x20>
    1672:	6f 5f       	subi	r22, 0xFF	; 255
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	8f 4f       	sbci	r24, 0xFF	; 255
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	08 95       	ret

0000167c <__fp_split3>:
    167c:	57 fd       	sbrc	r21, 7
    167e:	90 58       	subi	r25, 0x80	; 128
    1680:	44 0f       	add	r20, r20
    1682:	55 1f       	adc	r21, r21
    1684:	59 f0       	breq	.+22     	; 0x169c <__fp_splitA+0x10>
    1686:	5f 3f       	cpi	r21, 0xFF	; 255
    1688:	71 f0       	breq	.+28     	; 0x16a6 <__fp_splitA+0x1a>
    168a:	47 95       	ror	r20

0000168c <__fp_splitA>:
    168c:	88 0f       	add	r24, r24
    168e:	97 fb       	bst	r25, 7
    1690:	99 1f       	adc	r25, r25
    1692:	61 f0       	breq	.+24     	; 0x16ac <__fp_splitA+0x20>
    1694:	9f 3f       	cpi	r25, 0xFF	; 255
    1696:	79 f0       	breq	.+30     	; 0x16b6 <__fp_splitA+0x2a>
    1698:	87 95       	ror	r24
    169a:	08 95       	ret
    169c:	12 16       	cp	r1, r18
    169e:	13 06       	cpc	r1, r19
    16a0:	14 06       	cpc	r1, r20
    16a2:	55 1f       	adc	r21, r21
    16a4:	f2 cf       	rjmp	.-28     	; 0x168a <__fp_split3+0xe>
    16a6:	46 95       	lsr	r20
    16a8:	f1 df       	rcall	.-30     	; 0x168c <__fp_splitA>
    16aa:	08 c0       	rjmp	.+16     	; 0x16bc <__fp_splitA+0x30>
    16ac:	16 16       	cp	r1, r22
    16ae:	17 06       	cpc	r1, r23
    16b0:	18 06       	cpc	r1, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	f1 cf       	rjmp	.-30     	; 0x1698 <__fp_splitA+0xc>
    16b6:	86 95       	lsr	r24
    16b8:	71 05       	cpc	r23, r1
    16ba:	61 05       	cpc	r22, r1
    16bc:	08 94       	sec
    16be:	08 95       	ret

000016c0 <__fp_zero>:
    16c0:	e8 94       	clt

000016c2 <__fp_szero>:
    16c2:	bb 27       	eor	r27, r27
    16c4:	66 27       	eor	r22, r22
    16c6:	77 27       	eor	r23, r23
    16c8:	cb 01       	movw	r24, r22
    16ca:	97 f9       	bld	r25, 7
    16cc:	08 95       	ret

000016ce <log10>:
    16ce:	0e 94 77 0b 	call	0x16ee	; 0x16ee <log>
    16d2:	29 ed       	ldi	r18, 0xD9	; 217
    16d4:	3b e5       	ldi	r19, 0x5B	; 91
    16d6:	4e ed       	ldi	r20, 0xDE	; 222
    16d8:	5e e3       	ldi	r21, 0x3E	; 62
    16da:	0c 94 bf 0b 	jmp	0x177e	; 0x177e <__mulsf3>
    16de:	16 f0       	brts	.+4      	; 0x16e4 <log10+0x16>
    16e0:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__fp_mpack>
    16e4:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__fp_nan>
    16e8:	68 94       	set
    16ea:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_inf>

000016ee <log>:
    16ee:	0e 94 46 0b 	call	0x168c	; 0x168c <__fp_splitA>
    16f2:	a8 f3       	brcs	.-22     	; 0x16de <log10+0x10>
    16f4:	99 23       	and	r25, r25
    16f6:	c1 f3       	breq	.-16     	; 0x16e8 <log10+0x1a>
    16f8:	ae f3       	brts	.-22     	; 0x16e4 <log10+0x16>
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	1f 93       	push	r17
    1700:	0f 93       	push	r16
    1702:	ff 92       	push	r15
    1704:	c9 2f       	mov	r28, r25
    1706:	dd 27       	eor	r29, r29
    1708:	88 23       	and	r24, r24
    170a:	2a f0       	brmi	.+10     	; 0x1716 <log+0x28>
    170c:	21 97       	sbiw	r28, 0x01	; 1
    170e:	66 0f       	add	r22, r22
    1710:	77 1f       	adc	r23, r23
    1712:	88 1f       	adc	r24, r24
    1714:	da f7       	brpl	.-10     	; 0x170c <log+0x1e>
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e8       	ldi	r20, 0x80	; 128
    171c:	5f eb       	ldi	r21, 0xBF	; 191
    171e:	9f e3       	ldi	r25, 0x3F	; 63
    1720:	88 39       	cpi	r24, 0x98	; 152
    1722:	20 f0       	brcs	.+8      	; 0x172c <log+0x3e>
    1724:	80 3e       	cpi	r24, 0xE0	; 224
    1726:	38 f0       	brcs	.+14     	; 0x1736 <log+0x48>
    1728:	21 96       	adiw	r28, 0x01	; 1
    172a:	8f 77       	andi	r24, 0x7F	; 127
    172c:	0e 94 cc 09 	call	0x1398	; 0x1398 <__addsf3>
    1730:	e4 e5       	ldi	r30, 0x54	; 84
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	04 c0       	rjmp	.+8      	; 0x173e <log+0x50>
    1736:	0e 94 cc 09 	call	0x1398	; 0x1398 <__addsf3>
    173a:	e1 e8       	ldi	r30, 0x81	; 129
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fp_powser>
    1742:	8b 01       	movw	r16, r22
    1744:	be 01       	movw	r22, r28
    1746:	ec 01       	movw	r28, r24
    1748:	fb 2e       	mov	r15, r27
    174a:	6f 57       	subi	r22, 0x7F	; 127
    174c:	71 09       	sbc	r23, r1
    174e:	75 95       	asr	r23
    1750:	77 1f       	adc	r23, r23
    1752:	88 0b       	sbc	r24, r24
    1754:	99 0b       	sbc	r25, r25
    1756:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__floatsisf>
    175a:	28 e1       	ldi	r18, 0x18	; 24
    175c:	32 e7       	ldi	r19, 0x72	; 114
    175e:	41 e3       	ldi	r20, 0x31	; 49
    1760:	5f e3       	ldi	r21, 0x3F	; 63
    1762:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__mulsf3x>
    1766:	af 2d       	mov	r26, r15
    1768:	98 01       	movw	r18, r16
    176a:	ae 01       	movw	r20, r28
    176c:	ff 90       	pop	r15
    176e:	0f 91       	pop	r16
    1770:	1f 91       	pop	r17
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__addsf3x>
    177a:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__fp_round>

0000177e <__mulsf3>:
    177e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__mulsf3x>
    1782:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__fp_round>
    1786:	0e 94 1f 0b 	call	0x163e	; 0x163e <__fp_pscA>
    178a:	38 f0       	brcs	.+14     	; 0x179a <__mulsf3+0x1c>
    178c:	0e 94 26 0b 	call	0x164c	; 0x164c <__fp_pscB>
    1790:	20 f0       	brcs	.+8      	; 0x179a <__mulsf3+0x1c>
    1792:	95 23       	and	r25, r21
    1794:	11 f0       	breq	.+4      	; 0x179a <__mulsf3+0x1c>
    1796:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_inf>
    179a:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__fp_nan>
    179e:	11 24       	eor	r1, r1
    17a0:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__fp_szero>

000017a4 <__mulsf3x>:
    17a4:	0e 94 3e 0b 	call	0x167c	; 0x167c <__fp_split3>
    17a8:	70 f3       	brcs	.-36     	; 0x1786 <__mulsf3+0x8>

000017aa <__mulsf3_pse>:
    17aa:	95 9f       	mul	r25, r21
    17ac:	c1 f3       	breq	.-16     	; 0x179e <__mulsf3+0x20>
    17ae:	95 0f       	add	r25, r21
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	55 1f       	adc	r21, r21
    17b4:	62 9f       	mul	r22, r18
    17b6:	f0 01       	movw	r30, r0
    17b8:	72 9f       	mul	r23, r18
    17ba:	bb 27       	eor	r27, r27
    17bc:	f0 0d       	add	r31, r0
    17be:	b1 1d       	adc	r27, r1
    17c0:	63 9f       	mul	r22, r19
    17c2:	aa 27       	eor	r26, r26
    17c4:	f0 0d       	add	r31, r0
    17c6:	b1 1d       	adc	r27, r1
    17c8:	aa 1f       	adc	r26, r26
    17ca:	64 9f       	mul	r22, r20
    17cc:	66 27       	eor	r22, r22
    17ce:	b0 0d       	add	r27, r0
    17d0:	a1 1d       	adc	r26, r1
    17d2:	66 1f       	adc	r22, r22
    17d4:	82 9f       	mul	r24, r18
    17d6:	22 27       	eor	r18, r18
    17d8:	b0 0d       	add	r27, r0
    17da:	a1 1d       	adc	r26, r1
    17dc:	62 1f       	adc	r22, r18
    17de:	73 9f       	mul	r23, r19
    17e0:	b0 0d       	add	r27, r0
    17e2:	a1 1d       	adc	r26, r1
    17e4:	62 1f       	adc	r22, r18
    17e6:	83 9f       	mul	r24, r19
    17e8:	a0 0d       	add	r26, r0
    17ea:	61 1d       	adc	r22, r1
    17ec:	22 1f       	adc	r18, r18
    17ee:	74 9f       	mul	r23, r20
    17f0:	33 27       	eor	r19, r19
    17f2:	a0 0d       	add	r26, r0
    17f4:	61 1d       	adc	r22, r1
    17f6:	23 1f       	adc	r18, r19
    17f8:	84 9f       	mul	r24, r20
    17fa:	60 0d       	add	r22, r0
    17fc:	21 1d       	adc	r18, r1
    17fe:	82 2f       	mov	r24, r18
    1800:	76 2f       	mov	r23, r22
    1802:	6a 2f       	mov	r22, r26
    1804:	11 24       	eor	r1, r1
    1806:	9f 57       	subi	r25, 0x7F	; 127
    1808:	50 40       	sbci	r21, 0x00	; 0
    180a:	9a f0       	brmi	.+38     	; 0x1832 <__mulsf3_pse+0x88>
    180c:	f1 f0       	breq	.+60     	; 0x184a <__mulsf3_pse+0xa0>
    180e:	88 23       	and	r24, r24
    1810:	4a f0       	brmi	.+18     	; 0x1824 <__mulsf3_pse+0x7a>
    1812:	ee 0f       	add	r30, r30
    1814:	ff 1f       	adc	r31, r31
    1816:	bb 1f       	adc	r27, r27
    1818:	66 1f       	adc	r22, r22
    181a:	77 1f       	adc	r23, r23
    181c:	88 1f       	adc	r24, r24
    181e:	91 50       	subi	r25, 0x01	; 1
    1820:	50 40       	sbci	r21, 0x00	; 0
    1822:	a9 f7       	brne	.-22     	; 0x180e <__mulsf3_pse+0x64>
    1824:	9e 3f       	cpi	r25, 0xFE	; 254
    1826:	51 05       	cpc	r21, r1
    1828:	80 f0       	brcs	.+32     	; 0x184a <__mulsf3_pse+0xa0>
    182a:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_inf>
    182e:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__fp_szero>
    1832:	5f 3f       	cpi	r21, 0xFF	; 255
    1834:	e4 f3       	brlt	.-8      	; 0x182e <__mulsf3_pse+0x84>
    1836:	98 3e       	cpi	r25, 0xE8	; 232
    1838:	d4 f3       	brlt	.-12     	; 0x182e <__mulsf3_pse+0x84>
    183a:	86 95       	lsr	r24
    183c:	77 95       	ror	r23
    183e:	67 95       	ror	r22
    1840:	b7 95       	ror	r27
    1842:	f7 95       	ror	r31
    1844:	e7 95       	ror	r30
    1846:	9f 5f       	subi	r25, 0xFF	; 255
    1848:	c1 f7       	brne	.-16     	; 0x183a <__mulsf3_pse+0x90>
    184a:	fe 2b       	or	r31, r30
    184c:	88 0f       	add	r24, r24
    184e:	91 1d       	adc	r25, r1
    1850:	96 95       	lsr	r25
    1852:	87 95       	ror	r24
    1854:	97 f9       	bld	r25, 7
    1856:	08 95       	ret

00001858 <pow>:
    1858:	fa 01       	movw	r30, r20
    185a:	ee 0f       	add	r30, r30
    185c:	ff 1f       	adc	r31, r31
    185e:	30 96       	adiw	r30, 0x00	; 0
    1860:	21 05       	cpc	r18, r1
    1862:	31 05       	cpc	r19, r1
    1864:	a1 f1       	breq	.+104    	; 0x18ce <pow+0x76>
    1866:	61 15       	cp	r22, r1
    1868:	71 05       	cpc	r23, r1
    186a:	61 f4       	brne	.+24     	; 0x1884 <pow+0x2c>
    186c:	80 38       	cpi	r24, 0x80	; 128
    186e:	bf e3       	ldi	r27, 0x3F	; 63
    1870:	9b 07       	cpc	r25, r27
    1872:	49 f1       	breq	.+82     	; 0x18c6 <pow+0x6e>
    1874:	68 94       	set
    1876:	90 38       	cpi	r25, 0x80	; 128
    1878:	81 05       	cpc	r24, r1
    187a:	61 f0       	breq	.+24     	; 0x1894 <pow+0x3c>
    187c:	80 38       	cpi	r24, 0x80	; 128
    187e:	bf ef       	ldi	r27, 0xFF	; 255
    1880:	9b 07       	cpc	r25, r27
    1882:	41 f0       	breq	.+16     	; 0x1894 <pow+0x3c>
    1884:	99 23       	and	r25, r25
    1886:	4a f5       	brpl	.+82     	; 0x18da <pow+0x82>
    1888:	ff 3f       	cpi	r31, 0xFF	; 255
    188a:	e1 05       	cpc	r30, r1
    188c:	31 05       	cpc	r19, r1
    188e:	21 05       	cpc	r18, r1
    1890:	19 f1       	breq	.+70     	; 0x18d8 <pow+0x80>
    1892:	e8 94       	clt
    1894:	08 94       	sec
    1896:	e7 95       	ror	r30
    1898:	d9 01       	movw	r26, r18
    189a:	aa 23       	and	r26, r26
    189c:	29 f4       	brne	.+10     	; 0x18a8 <pow+0x50>
    189e:	ab 2f       	mov	r26, r27
    18a0:	be 2f       	mov	r27, r30
    18a2:	f8 5f       	subi	r31, 0xF8	; 248
    18a4:	d0 f3       	brcs	.-12     	; 0x189a <pow+0x42>
    18a6:	10 c0       	rjmp	.+32     	; 0x18c8 <pow+0x70>
    18a8:	ff 5f       	subi	r31, 0xFF	; 255
    18aa:	70 f4       	brcc	.+28     	; 0x18c8 <pow+0x70>
    18ac:	a6 95       	lsr	r26
    18ae:	e0 f7       	brcc	.-8      	; 0x18a8 <pow+0x50>
    18b0:	f7 39       	cpi	r31, 0x97	; 151
    18b2:	50 f0       	brcs	.+20     	; 0x18c8 <pow+0x70>
    18b4:	19 f0       	breq	.+6      	; 0x18bc <pow+0x64>
    18b6:	ff 3a       	cpi	r31, 0xAF	; 175
    18b8:	38 f4       	brcc	.+14     	; 0x18c8 <pow+0x70>
    18ba:	9f 77       	andi	r25, 0x7F	; 127
    18bc:	9f 93       	push	r25
    18be:	0d d0       	rcall	.+26     	; 0x18da <pow+0x82>
    18c0:	0f 90       	pop	r0
    18c2:	07 fc       	sbrc	r0, 7
    18c4:	90 58       	subi	r25, 0x80	; 128
    18c6:	08 95       	ret
    18c8:	46 f0       	brts	.+16     	; 0x18da <pow+0x82>
    18ca:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__fp_nan>
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	80 e8       	ldi	r24, 0x80	; 128
    18d4:	9f e3       	ldi	r25, 0x3F	; 63
    18d6:	08 95       	ret
    18d8:	4f e7       	ldi	r20, 0x7F	; 127
    18da:	9f 77       	andi	r25, 0x7F	; 127
    18dc:	5f 93       	push	r21
    18de:	4f 93       	push	r20
    18e0:	3f 93       	push	r19
    18e2:	2f 93       	push	r18
    18e4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <log>
    18e8:	2f 91       	pop	r18
    18ea:	3f 91       	pop	r19
    18ec:	4f 91       	pop	r20
    18ee:	5f 91       	pop	r21
    18f0:	0e 94 bf 0b 	call	0x177e	; 0x177e <__mulsf3>
    18f4:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <exp>
    18f8:	29 f4       	brne	.+10     	; 0x1904 <pow+0xac>
    18fa:	16 f0       	brts	.+4      	; 0x1900 <pow+0xa8>
    18fc:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_inf>
    1900:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__fp_zero>
    1904:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__fp_nan>

00001908 <exp>:
    1908:	0e 94 46 0b 	call	0x168c	; 0x168c <__fp_splitA>
    190c:	a8 f3       	brcs	.-22     	; 0x18f8 <pow+0xa0>
    190e:	96 38       	cpi	r25, 0x86	; 134
    1910:	a0 f7       	brcc	.-24     	; 0x18fa <pow+0xa2>
    1912:	07 f8       	bld	r0, 7
    1914:	0f 92       	push	r0
    1916:	e8 94       	clt
    1918:	2b e3       	ldi	r18, 0x3B	; 59
    191a:	3a ea       	ldi	r19, 0xAA	; 170
    191c:	48 eb       	ldi	r20, 0xB8	; 184
    191e:	5f e7       	ldi	r21, 0x7F	; 127
    1920:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <__mulsf3_pse>
    1924:	0f 92       	push	r0
    1926:	0f 92       	push	r0
    1928:	0f 92       	push	r0
    192a:	4d b7       	in	r20, 0x3d	; 61
    192c:	5e b7       	in	r21, 0x3e	; 62
    192e:	0f 92       	push	r0
    1930:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <modf>
    1934:	ee ea       	ldi	r30, 0xAE	; 174
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	0e 94 c4 0c 	call	0x1988	; 0x1988 <__fp_powser>
    193c:	4f 91       	pop	r20
    193e:	5f 91       	pop	r21
    1940:	ef 91       	pop	r30
    1942:	ff 91       	pop	r31
    1944:	e5 95       	asr	r30
    1946:	ee 1f       	adc	r30, r30
    1948:	ff 1f       	adc	r31, r31
    194a:	49 f0       	breq	.+18     	; 0x195e <exp+0x56>
    194c:	fe 57       	subi	r31, 0x7E	; 126
    194e:	e0 68       	ori	r30, 0x80	; 128
    1950:	44 27       	eor	r20, r20
    1952:	ee 0f       	add	r30, r30
    1954:	44 1f       	adc	r20, r20
    1956:	fa 95       	dec	r31
    1958:	e1 f7       	brne	.-8      	; 0x1952 <exp+0x4a>
    195a:	41 95       	neg	r20
    195c:	55 0b       	sbc	r21, r21
    195e:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <ldexp>
    1962:	0f 90       	pop	r0
    1964:	07 fe       	sbrs	r0, 7
    1966:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <inverse>
    196a:	08 95       	ret

0000196c <__fp_mpack>:
    196c:	9f 3f       	cpi	r25, 0xFF	; 255
    196e:	31 f0       	breq	.+12     	; 0x197c <__fp_mpack_finite+0xc>

00001970 <__fp_mpack_finite>:
    1970:	91 50       	subi	r25, 0x01	; 1
    1972:	20 f4       	brcc	.+8      	; 0x197c <__fp_mpack_finite+0xc>
    1974:	87 95       	ror	r24
    1976:	77 95       	ror	r23
    1978:	67 95       	ror	r22
    197a:	b7 95       	ror	r27
    197c:	88 0f       	add	r24, r24
    197e:	91 1d       	adc	r25, r1
    1980:	96 95       	lsr	r25
    1982:	87 95       	ror	r24
    1984:	97 f9       	bld	r25, 7
    1986:	08 95       	ret

00001988 <__fp_powser>:
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	1f 93       	push	r17
    198e:	0f 93       	push	r16
    1990:	ff 92       	push	r15
    1992:	ef 92       	push	r14
    1994:	df 92       	push	r13
    1996:	7b 01       	movw	r14, r22
    1998:	8c 01       	movw	r16, r24
    199a:	68 94       	set
    199c:	06 c0       	rjmp	.+12     	; 0x19aa <__fp_powser+0x22>
    199e:	da 2e       	mov	r13, r26
    19a0:	ef 01       	movw	r28, r30
    19a2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__mulsf3x>
    19a6:	fe 01       	movw	r30, r28
    19a8:	e8 94       	clt
    19aa:	a5 91       	lpm	r26, Z+
    19ac:	25 91       	lpm	r18, Z+
    19ae:	35 91       	lpm	r19, Z+
    19b0:	45 91       	lpm	r20, Z+
    19b2:	55 91       	lpm	r21, Z+
    19b4:	a6 f3       	brts	.-24     	; 0x199e <__fp_powser+0x16>
    19b6:	ef 01       	movw	r28, r30
    19b8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__addsf3x>
    19bc:	fe 01       	movw	r30, r28
    19be:	97 01       	movw	r18, r14
    19c0:	a8 01       	movw	r20, r16
    19c2:	da 94       	dec	r13
    19c4:	69 f7       	brne	.-38     	; 0x19a0 <__fp_powser+0x18>
    19c6:	df 90       	pop	r13
    19c8:	ef 90       	pop	r14
    19ca:	ff 90       	pop	r15
    19cc:	0f 91       	pop	r16
    19ce:	1f 91       	pop	r17
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <inverse>:
    19d6:	9b 01       	movw	r18, r22
    19d8:	ac 01       	movw	r20, r24
    19da:	60 e0       	ldi	r22, 0x00	; 0
    19dc:	70 e0       	ldi	r23, 0x00	; 0
    19de:	80 e8       	ldi	r24, 0x80	; 128
    19e0:	9f e3       	ldi	r25, 0x3F	; 63
    19e2:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__divsf3>
    19e6:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_inf>
    19ea:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__fp_mpack>

000019ee <ldexp>:
    19ee:	0e 94 46 0b 	call	0x168c	; 0x168c <__fp_splitA>
    19f2:	d8 f3       	brcs	.-10     	; 0x19ea <inverse+0x14>
    19f4:	99 23       	and	r25, r25
    19f6:	c9 f3       	breq	.-14     	; 0x19ea <inverse+0x14>
    19f8:	94 0f       	add	r25, r20
    19fa:	51 1d       	adc	r21, r1
    19fc:	a3 f3       	brvs	.-24     	; 0x19e6 <inverse+0x10>
    19fe:	91 50       	subi	r25, 0x01	; 1
    1a00:	50 40       	sbci	r21, 0x00	; 0
    1a02:	94 f0       	brlt	.+36     	; 0x1a28 <ldexp+0x3a>
    1a04:	59 f0       	breq	.+22     	; 0x1a1c <ldexp+0x2e>
    1a06:	88 23       	and	r24, r24
    1a08:	32 f0       	brmi	.+12     	; 0x1a16 <ldexp+0x28>
    1a0a:	66 0f       	add	r22, r22
    1a0c:	77 1f       	adc	r23, r23
    1a0e:	88 1f       	adc	r24, r24
    1a10:	91 50       	subi	r25, 0x01	; 1
    1a12:	50 40       	sbci	r21, 0x00	; 0
    1a14:	c1 f7       	brne	.-16     	; 0x1a06 <ldexp+0x18>
    1a16:	9e 3f       	cpi	r25, 0xFE	; 254
    1a18:	51 05       	cpc	r21, r1
    1a1a:	2c f7       	brge	.-54     	; 0x19e6 <inverse+0x10>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	91 1d       	adc	r25, r1
    1a20:	96 95       	lsr	r25
    1a22:	87 95       	ror	r24
    1a24:	97 f9       	bld	r25, 7
    1a26:	08 95       	ret
    1a28:	5f 3f       	cpi	r21, 0xFF	; 255
    1a2a:	ac f0       	brlt	.+42     	; 0x1a56 <ldexp+0x68>
    1a2c:	98 3e       	cpi	r25, 0xE8	; 232
    1a2e:	9c f0       	brlt	.+38     	; 0x1a56 <ldexp+0x68>
    1a30:	bb 27       	eor	r27, r27
    1a32:	86 95       	lsr	r24
    1a34:	77 95       	ror	r23
    1a36:	67 95       	ror	r22
    1a38:	b7 95       	ror	r27
    1a3a:	08 f4       	brcc	.+2      	; 0x1a3e <ldexp+0x50>
    1a3c:	b1 60       	ori	r27, 0x01	; 1
    1a3e:	93 95       	inc	r25
    1a40:	c1 f7       	brne	.-16     	; 0x1a32 <ldexp+0x44>
    1a42:	bb 0f       	add	r27, r27
    1a44:	58 f7       	brcc	.-42     	; 0x1a1c <ldexp+0x2e>
    1a46:	11 f4       	brne	.+4      	; 0x1a4c <ldexp+0x5e>
    1a48:	60 ff       	sbrs	r22, 0
    1a4a:	e8 cf       	rjmp	.-48     	; 0x1a1c <ldexp+0x2e>
    1a4c:	6f 5f       	subi	r22, 0xFF	; 255
    1a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a50:	8f 4f       	sbci	r24, 0xFF	; 255
    1a52:	9f 4f       	sbci	r25, 0xFF	; 255
    1a54:	e3 cf       	rjmp	.-58     	; 0x1a1c <ldexp+0x2e>
    1a56:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__fp_szero>

00001a5a <modf>:
    1a5a:	fa 01       	movw	r30, r20
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	aa 0f       	add	r26, r26
    1a60:	bb 1f       	adc	r27, r27
    1a62:	9b 01       	movw	r18, r22
    1a64:	ac 01       	movw	r20, r24
    1a66:	bf 57       	subi	r27, 0x7F	; 127
    1a68:	28 f4       	brcc	.+10     	; 0x1a74 <modf+0x1a>
    1a6a:	22 27       	eor	r18, r18
    1a6c:	33 27       	eor	r19, r19
    1a6e:	44 27       	eor	r20, r20
    1a70:	50 78       	andi	r21, 0x80	; 128
    1a72:	20 c0       	rjmp	.+64     	; 0x1ab4 <modf+0x5a>
    1a74:	b7 51       	subi	r27, 0x17	; 23
    1a76:	90 f4       	brcc	.+36     	; 0x1a9c <modf+0x42>
    1a78:	ab 2f       	mov	r26, r27
    1a7a:	00 24       	eor	r0, r0
    1a7c:	46 95       	lsr	r20
    1a7e:	37 95       	ror	r19
    1a80:	27 95       	ror	r18
    1a82:	01 1c       	adc	r0, r1
    1a84:	a3 95       	inc	r26
    1a86:	d2 f3       	brmi	.-12     	; 0x1a7c <modf+0x22>
    1a88:	00 20       	and	r0, r0
    1a8a:	71 f0       	breq	.+28     	; 0x1aa8 <modf+0x4e>
    1a8c:	22 0f       	add	r18, r18
    1a8e:	33 1f       	adc	r19, r19
    1a90:	44 1f       	adc	r20, r20
    1a92:	b3 95       	inc	r27
    1a94:	da f3       	brmi	.-10     	; 0x1a8c <modf+0x32>
    1a96:	0e d0       	rcall	.+28     	; 0x1ab4 <modf+0x5a>
    1a98:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__subsf3>
    1a9c:	61 30       	cpi	r22, 0x01	; 1
    1a9e:	71 05       	cpc	r23, r1
    1aa0:	a0 e8       	ldi	r26, 0x80	; 128
    1aa2:	8a 07       	cpc	r24, r26
    1aa4:	b9 46       	sbci	r27, 0x69	; 105
    1aa6:	30 f4       	brcc	.+12     	; 0x1ab4 <modf+0x5a>
    1aa8:	9b 01       	movw	r18, r22
    1aaa:	ac 01       	movw	r20, r24
    1aac:	66 27       	eor	r22, r22
    1aae:	77 27       	eor	r23, r23
    1ab0:	88 27       	eor	r24, r24
    1ab2:	90 78       	andi	r25, 0x80	; 128
    1ab4:	30 96       	adiw	r30, 0x00	; 0
    1ab6:	21 f0       	breq	.+8      	; 0x1ac0 <modf+0x66>
    1ab8:	20 83       	st	Z, r18
    1aba:	31 83       	std	Z+1, r19	; 0x01
    1abc:	42 83       	std	Z+2, r20	; 0x02
    1abe:	53 83       	std	Z+3, r21	; 0x03
    1ac0:	08 95       	ret

00001ac2 <__udivmodsi4>:
    1ac2:	a1 e2       	ldi	r26, 0x21	; 33
    1ac4:	1a 2e       	mov	r1, r26
    1ac6:	aa 1b       	sub	r26, r26
    1ac8:	bb 1b       	sub	r27, r27
    1aca:	fd 01       	movw	r30, r26
    1acc:	0d c0       	rjmp	.+26     	; 0x1ae8 <__udivmodsi4_ep>

00001ace <__udivmodsi4_loop>:
    1ace:	aa 1f       	adc	r26, r26
    1ad0:	bb 1f       	adc	r27, r27
    1ad2:	ee 1f       	adc	r30, r30
    1ad4:	ff 1f       	adc	r31, r31
    1ad6:	a2 17       	cp	r26, r18
    1ad8:	b3 07       	cpc	r27, r19
    1ada:	e4 07       	cpc	r30, r20
    1adc:	f5 07       	cpc	r31, r21
    1ade:	20 f0       	brcs	.+8      	; 0x1ae8 <__udivmodsi4_ep>
    1ae0:	a2 1b       	sub	r26, r18
    1ae2:	b3 0b       	sbc	r27, r19
    1ae4:	e4 0b       	sbc	r30, r20
    1ae6:	f5 0b       	sbc	r31, r21

00001ae8 <__udivmodsi4_ep>:
    1ae8:	66 1f       	adc	r22, r22
    1aea:	77 1f       	adc	r23, r23
    1aec:	88 1f       	adc	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	1a 94       	dec	r1
    1af2:	69 f7       	brne	.-38     	; 0x1ace <__udivmodsi4_loop>
    1af4:	60 95       	com	r22
    1af6:	70 95       	com	r23
    1af8:	80 95       	com	r24
    1afa:	90 95       	com	r25
    1afc:	9b 01       	movw	r18, r22
    1afe:	ac 01       	movw	r20, r24
    1b00:	bd 01       	movw	r22, r26
    1b02:	cf 01       	movw	r24, r30
    1b04:	08 95       	ret

00001b06 <__umulhisi3>:
    1b06:	a2 9f       	mul	r26, r18
    1b08:	b0 01       	movw	r22, r0
    1b0a:	b3 9f       	mul	r27, r19
    1b0c:	c0 01       	movw	r24, r0
    1b0e:	a3 9f       	mul	r26, r19
    1b10:	70 0d       	add	r23, r0
    1b12:	81 1d       	adc	r24, r1
    1b14:	11 24       	eor	r1, r1
    1b16:	91 1d       	adc	r25, r1
    1b18:	b2 9f       	mul	r27, r18
    1b1a:	70 0d       	add	r23, r0
    1b1c:	81 1d       	adc	r24, r1
    1b1e:	11 24       	eor	r1, r1
    1b20:	91 1d       	adc	r25, r1
    1b22:	08 95       	ret

00001b24 <__itoa_ncheck>:
    1b24:	bb 27       	eor	r27, r27
    1b26:	4a 30       	cpi	r20, 0x0A	; 10
    1b28:	31 f4       	brne	.+12     	; 0x1b36 <__itoa_ncheck+0x12>
    1b2a:	99 23       	and	r25, r25
    1b2c:	22 f4       	brpl	.+8      	; 0x1b36 <__itoa_ncheck+0x12>
    1b2e:	bd e2       	ldi	r27, 0x2D	; 45
    1b30:	90 95       	com	r25
    1b32:	81 95       	neg	r24
    1b34:	9f 4f       	sbci	r25, 0xFF	; 255
    1b36:	0c 94 9e 0d 	jmp	0x1b3c	; 0x1b3c <__utoa_common>

00001b3a <__utoa_ncheck>:
    1b3a:	bb 27       	eor	r27, r27

00001b3c <__utoa_common>:
    1b3c:	fb 01       	movw	r30, r22
    1b3e:	55 27       	eor	r21, r21
    1b40:	aa 27       	eor	r26, r26
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	aa 1f       	adc	r26, r26
    1b48:	a4 17       	cp	r26, r20
    1b4a:	10 f0       	brcs	.+4      	; 0x1b50 <__utoa_common+0x14>
    1b4c:	a4 1b       	sub	r26, r20
    1b4e:	83 95       	inc	r24
    1b50:	50 51       	subi	r21, 0x10	; 16
    1b52:	b9 f7       	brne	.-18     	; 0x1b42 <__utoa_common+0x6>
    1b54:	a0 5d       	subi	r26, 0xD0	; 208
    1b56:	aa 33       	cpi	r26, 0x3A	; 58
    1b58:	08 f0       	brcs	.+2      	; 0x1b5c <__utoa_common+0x20>
    1b5a:	a9 5d       	subi	r26, 0xD9	; 217
    1b5c:	a1 93       	st	Z+, r26
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	79 f7       	brne	.-34     	; 0x1b40 <__utoa_common+0x4>
    1b62:	b1 11       	cpse	r27, r1
    1b64:	b1 93       	st	Z+, r27
    1b66:	11 92       	st	Z+, r1
    1b68:	cb 01       	movw	r24, r22
    1b6a:	0c 94 b7 0d 	jmp	0x1b6e	; 0x1b6e <strrev>

00001b6e <strrev>:
    1b6e:	dc 01       	movw	r26, r24
    1b70:	fc 01       	movw	r30, r24
    1b72:	67 2f       	mov	r22, r23
    1b74:	71 91       	ld	r23, Z+
    1b76:	77 23       	and	r23, r23
    1b78:	e1 f7       	brne	.-8      	; 0x1b72 <strrev+0x4>
    1b7a:	32 97       	sbiw	r30, 0x02	; 2
    1b7c:	04 c0       	rjmp	.+8      	; 0x1b86 <strrev+0x18>
    1b7e:	7c 91       	ld	r23, X
    1b80:	6d 93       	st	X+, r22
    1b82:	70 83       	st	Z, r23
    1b84:	62 91       	ld	r22, -Z
    1b86:	ae 17       	cp	r26, r30
    1b88:	bf 07       	cpc	r27, r31
    1b8a:	c8 f3       	brcs	.-14     	; 0x1b7e <strrev+0x10>
    1b8c:	08 95       	ret

00001b8e <_exit>:
    1b8e:	f8 94       	cli

00001b90 <__stop_program>:
    1b90:	ff cf       	rjmp	.-2      	; 0x1b90 <__stop_program>
