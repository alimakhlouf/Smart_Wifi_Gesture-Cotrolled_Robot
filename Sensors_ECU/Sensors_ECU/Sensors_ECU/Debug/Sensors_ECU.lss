
Sensors_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001866  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00001866  000018fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080007c  0080007c  00001916  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001916  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001948  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  00001984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003c9b  00000000  00000000  00001d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013fa  00000000  00000000  000059e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c69  00000000  00000000  00006de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ac4  00000000  00000000  00008a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c51  00000000  00000000  00009510  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c57  00000000  00000000  0000a161  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  0000cdb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_6>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_9>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <__vector_11>
      30:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__vector_12>
      34:	0c 94 b2 07 	jmp	0xf64	; 0xf64 <__vector_13>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 87 07 	jmp	0xf0e	; 0xf0e <__vector_15>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <mcp_tx_data+0x1c>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	07 63       	ori	r16, 0x37	; 55
      b0:	42 36       	cpi	r20, 0x62	; 98
      b2:	b7 9b       	sbis	0x16, 7	; 22
      b4:	d8 a7       	std	Y+40, r29	; 0x28
      b6:	1a 39       	cpi	r17, 0x9A	; 154
      b8:	68 56       	subi	r22, 0x68	; 104
      ba:	18 ae       	std	Y+56, r1	; 0x38
      bc:	ba ab       	std	Y+50, r27	; 0x32
      be:	55 8c       	ldd	r5, Z+29	; 0x1d
      c0:	1d 3c       	cpi	r17, 0xCD	; 205
      c2:	b7 cc       	rjmp	.-1682   	; 0xfffffa32 <__eeprom_end+0xff7efa32>
      c4:	57 63       	ori	r21, 0x37	; 55
      c6:	bd 6d       	ori	r27, 0xDD	; 221
      c8:	ed fd       	.word	0xfded	; ????
      ca:	75 3e       	cpi	r23, 0xE5	; 229
      cc:	f6 17       	cp	r31, r22
      ce:	72 31       	cpi	r23, 0x12	; 18
      d0:	bf 00       	.word	0x00bf	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	10 e0       	ldi	r17, 0x00	; 0
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e6 e6       	ldi	r30, 0x66	; 102
      ea:	f8 e1       	ldi	r31, 0x18	; 24
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <__do_copy_data+0x10>
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0
      f2:	ac 37       	cpi	r26, 0x7C	; 124
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <__do_copy_data+0xc>

000000f8 <__do_clear_bss>:
      f8:	20 e0       	ldi	r18, 0x00	; 0
      fa:	ac e7       	ldi	r26, 0x7C	; 124
      fc:	b0 e0       	ldi	r27, 0x00	; 0
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	ae 38       	cpi	r26, 0x8E	; 142
     104:	b2 07       	cpc	r27, r18
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 c3 02 	call	0x586	; 0x586 <main>
     10c:	0c 94 31 0c 	jmp	0x1862	; 0x1862 <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <ADC_init>:
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX =(UPPER_LIMIT_SOURCE << REFS0) | (ADJUST_RESULT_BITS << ADLAR);
     114:	80 e4       	ldi	r24, 0x40	; 64
     116:	87 b9       	out	0x07, r24	; 7
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1 << ADEN) | (FREQ_PRESCALER << ADPS0);
     118:	86 e8       	ldi	r24, 0x86	; 134
     11a:	86 b9       	out	0x06, r24	; 6
     11c:	08 95       	ret

0000011e <ADC_read>:
void CONFIG_ADC_ISR(void) __attribute__((signal,__INTR_ATTRS));
#endif

inline bool adc_int_state()
{
	return ((BIT_IS_SET(SREG, I)) && (BIT_IS_SET(ADCSRA, ADIE)));
     11e:	0f b6       	in	r0, 0x3f	; 63
     120:	07 fe       	sbrs	r0, 7
     122:	11 c0       	rjmp	.+34     	; 0x146 <ADC_read+0x28>
     124:	33 99       	sbic	0x06, 3	; 6
     126:	04 c0       	rjmp	.+8      	; 0x130 <ADC_read+0x12>
     128:	0e c0       	rjmp	.+28     	; 0x146 <ADC_read+0x28>
		ADMUX &= 0xE0;
		ADMUX |= channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
		SET_BIT(ADCSRA,ADSC); /* start conversion process by writing '1' to ADSC */
	
	
		while (BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
     12a:	34 9b       	sbis	0x06, 4	; 6
     12c:	fe cf       	rjmp	.-4      	; 0x12a <ADC_read+0xc>
		SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
     12e:	34 9a       	sbi	0x06, 4	; 6
	}
	
	
	ADMUX &= 0xE0; //unchoose the channel again
     130:	87 b1       	in	r24, 0x07	; 7
     132:	80 7e       	andi	r24, 0xE0	; 224
     134:	87 b9       	out	0x07, r24	; 7
	return GET_ADC_RESULT; /* return the data register */
     136:	24 b1       	in	r18, 0x04	; 4
     138:	85 b1       	in	r24, 0x05	; 5
     13a:	90 e0       	ldi	r25, 0x00	; 0
     13c:	98 2f       	mov	r25, r24
     13e:	88 27       	eor	r24, r24
     140:	82 0f       	add	r24, r18
     142:	91 1d       	adc	r25, r1
     144:	08 95       	ret

unint16_t ADC_read(unint8_t channel_num)
{
	if (adc_int_state() == false)
	{
		DDRA &= ~(1 << channel_num); // assign the pin as input
     146:	9a b3       	in	r25, 0x1a	; 26
     148:	21 e0       	ldi	r18, 0x01	; 1
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	08 2e       	mov	r0, r24
     14e:	02 c0       	rjmp	.+4      	; 0x154 <ADC_read+0x36>
     150:	22 0f       	add	r18, r18
     152:	33 1f       	adc	r19, r19
     154:	0a 94       	dec	r0
     156:	e2 f7       	brpl	.-8      	; 0x150 <ADC_read+0x32>
     158:	20 95       	com	r18
     15a:	29 23       	and	r18, r25
     15c:	2a bb       	out	0x1a, r18	; 26
		channel_num &= 0x07; /* channel number must be from 0 --> 7 */
		/*clear first 5 bits in the ADMUX (unchoose any previously chosen channel)
		 * (channel number MUX4:0 bits) before setting the required channel
		 * */
		ADMUX &= 0xE0;
     15e:	97 b1       	in	r25, 0x07	; 7
     160:	90 7e       	andi	r25, 0xE0	; 224
     162:	97 b9       	out	0x07, r25	; 7
		ADMUX |= channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
     164:	97 b1       	in	r25, 0x07	; 7
     166:	87 70       	andi	r24, 0x07	; 7
     168:	89 2b       	or	r24, r25
     16a:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADCSRA,ADSC); /* start conversion process by writing '1' to ADSC */
     16c:	36 9a       	sbi	0x06, 6	; 6
	
	
		while (BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
     16e:	dd cf       	rjmp	.-70     	; 0x12a <ADC_read+0xc>

00000170 <DHT_init>:

//NOTE:all the statement comments below are extra that are used for checking the work of the module by debugging it oscilliscope

void DHT_init()
{
	DIO_SET_DIR(DHT_PIN, DIO_OUTPUT);
     170:	61 e0       	ldi	r22, 0x01	; 1
     172:	88 e0       	ldi	r24, 0x08	; 8
     174:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_set_pin_dir>
	DIO_SET_VAL(DHT_PIN, DIO_HIGH);
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	88 e0       	ldi	r24, 0x08	; 8
     17c:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     180:	08 95       	ret

00000182 <DHT11_read>:

}


void DHT11_read(char *arr)
{
     182:	9f 92       	push	r9
     184:	af 92       	push	r10
     186:	bf 92       	push	r11
     188:	cf 92       	push	r12
     18a:	df 92       	push	r13
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	5c 01       	movw	r10, r24
	DIO_SET_DIR(DHT_PIN, DIO_OUTPUT);
     19a:	61 e0       	ldi	r22, 0x01	; 1
     19c:	88 e0       	ldi	r24, 0x08	; 8
     19e:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_set_pin_dir>
	DIO_SET_VAL(DHT_PIN, DIO_LOW);
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	88 e0       	ldi	r24, 0x08	; 8
     1a6:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
	);
}

void _delay_ms_loop(uint16_t __count)
{
	__asm__ volatile (
     1aa:	80 ea       	ldi	r24, 0xA0	; 160
     1ac:	9c e8       	ldi	r25, 0x8C	; 140
     1ae:	01 97       	sbiw	r24, 0x01	; 1
     1b0:	f1 f7       	brne	.-4      	; 0x1ae <DHT11_read+0x2c>
	
// 	DHTDIR |= (1 << DHT_PIN);
// 	DHTPORT &= ~(1 << DHT_PIN);      //first send start signal(low signal for 18 ms)
	delay_msec(18);
	
	DIO_SET_DIR(DHT_PIN, DIO_PULLUP);
     1b2:	62 e0       	ldi	r22, 0x02	; 2
     1b4:	88 e0       	ldi	r24, 0x08	; 8
     1b6:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_set_pin_dir>
// 	DHTPORT |= (1 << DHT_PIN);       //pull up
// 	DHTDIR &= ~(1 << DHT_PIN);	    //turn to input and wait for DHT 11 response
	
	while (DIO_READ(DHT_PIN));
     1ba:	88 e0       	ldi	r24, 0x08	; 8
     1bc:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <dio_get_pin>
     1c0:	81 11       	cpse	r24, r1
     1c2:	fb cf       	rjmp	.-10     	; 0x1ba <DHT11_read+0x38>
	
	while (!(DIO_READ(DHT_PIN)));
     1c4:	88 e0       	ldi	r24, 0x08	; 8
     1c6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <dio_get_pin>
     1ca:	88 23       	and	r24, r24
     1cc:	d9 f3       	breq	.-10     	; 0x1c4 <DHT11_read+0x42>
	
	while (DIO_READ(DHT_PIN));
     1ce:	88 e0       	ldi	r24, 0x08	; 8
     1d0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <dio_get_pin>
     1d4:	81 11       	cpse	r24, r1
     1d6:	fb cf       	rjmp	.-10     	; 0x1ce <DHT11_read+0x4c>
     1d8:	75 01       	movw	r14, r10
     1da:	35 e0       	ldi	r19, 0x05	; 5
     1dc:	a3 0e       	add	r10, r19
     1de:	b1 1c       	adc	r11, r1
static inline void _delay_ms_loop(uint16_t __count) __attribute__((always_inline));


void _delay_us_loop(uint8_t __count)
{
	__asm__ volatile (
     1e0:	0f 2e       	mov	r0, r31
     1e2:	f0 e5       	ldi	r31, 0x50	; 80
     1e4:	9f 2e       	mov	r9, r31
     1e6:	f0 2d       	mov	r31, r0
			
			
			
			if(DIO_READ(DHT_PIN)) //DIO_READ(DHT_PIN)//if the high signal is more than 40us (means high bit) (70us)
			{	
				arr[cnt] |= (1 << (7 - j)); //put 1 to the 
     1e8:	cc 24       	eor	r12, r12
     1ea:	c3 94       	inc	r12
     1ec:	d1 2c       	mov	r13, r1
     1ee:	87 01       	movw	r16, r14
	//while (DHT_PIN_STATUS & (1 << DHT_PIN));//wait until the end of a high signal from DHT(80 us)

	
	for (unint8_t cnt = 0; cnt < 5; cnt++ )		//5 times for each 8 bit of the 40-bit data
	{	
		arr[cnt] = 0;					//clear the bit from the previous reading
     1f0:	f7 01       	movw	r30, r14
     1f2:	10 82       	st	Z, r1
     1f4:	c7 e0       	ldi	r28, 0x07	; 7
     1f6:	d0 e0       	ldi	r29, 0x00	; 0
		
		for (int8_t j = 0; j < 8; j++ )			//8 times to save the the bits of each byte of data
		{
			while (!(DIO_READ(DHT_PIN))); // !(DIO_READ(DIO_OUTPUT))
     1f8:	88 e0       	ldi	r24, 0x08	; 8
     1fa:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <dio_get_pin>
     1fe:	88 23       	and	r24, r24
     200:	d9 f3       	breq	.-10     	; 0x1f8 <DHT11_read+0x76>
     202:	89 2d       	mov	r24, r9
     204:	8a 95       	dec	r24
     206:	f1 f7       	brne	.-4      	; 0x204 <DHT11_read+0x82>

			delay_usec(40); // go th the part of the signal where you check for the signal part 
			
			
			
			if(DIO_READ(DHT_PIN)) //DIO_READ(DHT_PIN)//if the high signal is more than 40us (means high bit) (70us)
     208:	88 e0       	ldi	r24, 0x08	; 8
     20a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <dio_get_pin>
     20e:	88 23       	and	r24, r24
     210:	89 f0       	breq	.+34     	; 0x234 <DHT11_read+0xb2>
			{	
				arr[cnt] |= (1 << (7 - j)); //put 1 to the 
     212:	f8 01       	movw	r30, r16
     214:	20 81       	ld	r18, Z
     216:	c6 01       	movw	r24, r12
     218:	0c 2e       	mov	r0, r28
     21a:	02 c0       	rjmp	.+4      	; 0x220 <DHT11_read+0x9e>
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	0a 94       	dec	r0
     222:	e2 f7       	brpl	.-8      	; 0x21c <DHT11_read+0x9a>
     224:	82 2b       	or	r24, r18
     226:	f8 01       	movw	r30, r16
     228:	80 83       	st	Z, r24
				
				while(DIO_READ(DHT_PIN)); //DIO_READ(DHT_PIN)
     22a:	88 e0       	ldi	r24, 0x08	; 8
     22c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <dio_get_pin>
     230:	81 11       	cpse	r24, r1
     232:	fb cf       	rjmp	.-10     	; 0x22a <DHT11_read+0xa8>
     234:	21 97       	sbiw	r28, 0x01	; 1
     236:	00 f7       	brcc	.-64     	; 0x1f8 <DHT11_read+0x76>
     238:	3f ef       	ldi	r19, 0xFF	; 255
     23a:	e3 1a       	sub	r14, r19
     23c:	f3 0a       	sbc	r15, r19


	//while (DHT_PIN_STATUS & (1 << DHT_PIN));//wait until the end of a high signal from DHT(80 us)

	
	for (unint8_t cnt = 0; cnt < 5; cnt++ )		//5 times for each 8 bit of the 40-bit data
     23e:	ea 14       	cp	r14, r10
     240:	fb 04       	cpc	r15, r11
     242:	a9 f6       	brne	.-86     	; 0x1ee <DHT11_read+0x6c>
			
		}// for (j = 0
				
	} //for (cnt = 0;
	
} //void DHT
     244:	df 91       	pop	r29
     246:	cf 91       	pop	r28
     248:	1f 91       	pop	r17
     24a:	0f 91       	pop	r16
     24c:	ff 90       	pop	r15
     24e:	ef 90       	pop	r14
     250:	df 90       	pop	r13
     252:	cf 90       	pop	r12
     254:	bf 90       	pop	r11
     256:	af 90       	pop	r10
     258:	9f 90       	pop	r9
     25a:	08 95       	ret

0000025c <dio_set_pin_dir>:
void dio_set_pin_dir(uint8_t a_pin_no,uint8_t a_pin_dir)
{
	//determine the port that was addressed from the dio_pin number 
	uint8_t pin_port= a_pin_no / NUM_PIN_PER_PORT;
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
     25c:	e8 2f       	mov	r30, r24
     25e:	e6 95       	lsr	r30
     260:	e6 95       	lsr	r30
     262:	e6 95       	lsr	r30
     264:	87 70       	andi	r24, 0x07	; 7
	
	//of the direction is either input or output configure it
	if (a_pin_dir != DIO_PULLUP)
     266:	62 30       	cpi	r22, 0x02	; 2
     268:	e1 f0       	breq	.+56     	; 0x2a2 <dio_set_pin_dir+0x46>
	{
		//put this direction in the specific pin_no in the specific port 
		ASSIGN_BIT(*(DDR_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, 
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	9f 01       	movw	r18, r30
     26e:	22 0f       	add	r18, r18
     270:	33 1f       	adc	r19, r19
     272:	e2 0f       	add	r30, r18
     274:	f3 1f       	adc	r31, r19
     276:	f1 95       	neg	r31
     278:	e1 95       	neg	r30
     27a:	f1 09       	sbc	r31, r1
     27c:	22 ad       	ldd	r18, Z+58	; 0x3a
     27e:	41 e0       	ldi	r20, 0x01	; 1
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	08 2e       	mov	r0, r24
     284:	02 c0       	rjmp	.+4      	; 0x28a <dio_set_pin_dir+0x2e>
     286:	44 0f       	add	r20, r20
     288:	55 1f       	adc	r21, r21
     28a:	0a 94       	dec	r0
     28c:	e2 f7       	brpl	.-8      	; 0x286 <dio_set_pin_dir+0x2a>
     28e:	94 2f       	mov	r25, r20
     290:	90 95       	com	r25
     292:	92 23       	and	r25, r18
     294:	01 c0       	rjmp	.+2      	; 0x298 <dio_set_pin_dir+0x3c>
     296:	66 0f       	add	r22, r22
     298:	8a 95       	dec	r24
     29a:	ea f7       	brpl	.-6      	; 0x296 <dio_set_pin_dir+0x3a>
     29c:	69 2b       	or	r22, r25
     29e:	62 af       	std	Z+58, r22	; 0x3a
     2a0:	08 95       	ret
		             a_pin_dir);
	}
	else //if pull up then make it input and put high to the PORT reg
	{ 
		// assign pin as input
		ASSIGN_BIT(*(DDR_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, 0); 
     2a2:	f0 e0       	ldi	r31, 0x00	; 0
     2a4:	9f 01       	movw	r18, r30
     2a6:	22 0f       	add	r18, r18
     2a8:	33 1f       	adc	r19, r19
     2aa:	e2 0f       	add	r30, r18
     2ac:	f3 1f       	adc	r31, r19
     2ae:	f1 95       	neg	r31
     2b0:	e1 95       	neg	r30
     2b2:	f1 09       	sbc	r31, r1
     2b4:	42 ad       	ldd	r20, Z+58	; 0x3a
     2b6:	21 e0       	ldi	r18, 0x01	; 1
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	b9 01       	movw	r22, r18
     2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <dio_set_pin_dir+0x66>
     2be:	66 0f       	add	r22, r22
     2c0:	77 1f       	adc	r23, r23
     2c2:	8a 95       	dec	r24
     2c4:	e2 f7       	brpl	.-8      	; 0x2be <dio_set_pin_dir+0x62>
     2c6:	cb 01       	movw	r24, r22
     2c8:	96 2f       	mov	r25, r22
     2ca:	90 95       	com	r25
     2cc:	94 23       	and	r25, r20
     2ce:	92 af       	std	Z+58, r25	; 0x3a
		// put 1 to port pin to make it pull up
		ASSIGN_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, 1); 
     2d0:	93 ad       	ldd	r25, Z+59	; 0x3b
     2d2:	89 2b       	or	r24, r25
     2d4:	83 af       	std	Z+59, r24	; 0x3b
     2d6:	08 95       	ret

000002d8 <dio_get_pin>:
}

bool dio_get_pin(uint8_t a_pin_no)
{
	//determine the port that was addressed from the dio_pin number 
	uint8_t pin_port= a_pin_no / NUM_PIN_PER_PORT;
     2d8:	48 2f       	mov	r20, r24
     2da:	46 95       	lsr	r20
     2dc:	46 95       	lsr	r20
     2de:	46 95       	lsr	r20
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
	
	//return the state of the pin 	
	return (GET_BIT(*(PIN_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port));
     2e0:	24 2f       	mov	r18, r20
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	f9 01       	movw	r30, r18
     2e6:	ee 0f       	add	r30, r30
     2e8:	ff 1f       	adc	r31, r31
     2ea:	2e 0f       	add	r18, r30
     2ec:	3f 1f       	adc	r19, r31
     2ee:	ee 27       	eor	r30, r30
     2f0:	ff 27       	eor	r31, r31
     2f2:	e2 1b       	sub	r30, r18
     2f4:	f3 0b       	sbc	r31, r19
     2f6:	91 ad       	ldd	r25, Z+57	; 0x39
     2f8:	44 0f       	add	r20, r20
     2fa:	44 0f       	add	r20, r20
     2fc:	44 0f       	add	r20, r20
     2fe:	84 1b       	sub	r24, r20
     300:	21 e0       	ldi	r18, 0x01	; 1
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	02 c0       	rjmp	.+4      	; 0x30a <dio_get_pin+0x32>
     306:	22 0f       	add	r18, r18
     308:	33 1f       	adc	r19, r19
     30a:	8a 95       	dec	r24
     30c:	e2 f7       	brpl	.-8      	; 0x306 <dio_get_pin+0x2e>
     30e:	89 2f       	mov	r24, r25
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	28 23       	and	r18, r24
     314:	39 23       	and	r19, r25
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	23 2b       	or	r18, r19
     31a:	09 f4       	brne	.+2      	; 0x31e <dio_get_pin+0x46>
     31c:	80 e0       	ldi	r24, 0x00	; 0
}
     31e:	08 95       	ret

00000320 <dio_set_pin_val>:


void dio_set_pin_val(uint8_t a_pin_no, uint8_t PinVal)
{
     320:	96 2f       	mov	r25, r22
	//determine the port that was addressed from the dio_pin number
	uint8_t pin_port = a_pin_no / NUM_PIN_PER_PORT;
     322:	38 2f       	mov	r19, r24
     324:	36 95       	lsr	r19
     326:	36 95       	lsr	r19
     328:	36 95       	lsr	r19
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
	
	//assign the value to the specific pin_no in the specific port 
	ASSIGN_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port, PinVal);
     32a:	e3 2f       	mov	r30, r19
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	af 01       	movw	r20, r30
     330:	44 0f       	add	r20, r20
     332:	55 1f       	adc	r21, r21
     334:	e4 0f       	add	r30, r20
     336:	f5 1f       	adc	r31, r21
     338:	f1 95       	neg	r31
     33a:	e1 95       	neg	r30
     33c:	f1 09       	sbc	r31, r1
     33e:	63 ad       	ldd	r22, Z+59	; 0x3b
     340:	33 0f       	add	r19, r19
     342:	33 0f       	add	r19, r19
     344:	33 0f       	add	r19, r19
     346:	83 1b       	sub	r24, r19
     348:	21 e0       	ldi	r18, 0x01	; 1
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	08 2e       	mov	r0, r24
     34e:	02 c0       	rjmp	.+4      	; 0x354 <dio_set_pin_val+0x34>
     350:	22 0f       	add	r18, r18
     352:	33 1f       	adc	r19, r19
     354:	0a 94       	dec	r0
     356:	e2 f7       	brpl	.-8      	; 0x350 <dio_set_pin_val+0x30>
     358:	20 95       	com	r18
     35a:	26 23       	and	r18, r22
     35c:	69 2f       	mov	r22, r25
     35e:	70 e0       	ldi	r23, 0x00	; 0
     360:	02 c0       	rjmp	.+4      	; 0x366 <dio_set_pin_val+0x46>
     362:	66 0f       	add	r22, r22
     364:	77 1f       	adc	r23, r23
     366:	8a 95       	dec	r24
     368:	e2 f7       	brpl	.-8      	; 0x362 <dio_set_pin_val+0x42>
     36a:	62 2b       	or	r22, r18
     36c:	63 af       	std	Z+59, r22	; 0x3b
     36e:	08 95       	ret

00000370 <dio_togg_pin>:
}

void dio_togg_pin(uint8_t a_pin_no)
{
	//determine the port that was addressed from the dio_pin number
	uint8_t pin_port = a_pin_no / NUM_PIN_PER_PORT;
     370:	28 2f       	mov	r18, r24
     372:	26 95       	lsr	r18
     374:	26 95       	lsr	r18
     376:	26 95       	lsr	r18
	//determine which the port that was addressed from the dio_pin number
	uint8_t Pin_no_in_port = MODULO(a_pin_no, NUM_PIN_PER_PORT);
	
	//toggle the specific pin_no in the specific port 
	TOGGLE_BIT(*(PORT_REG_BASE + PORT_OFFSET(pin_port)), Pin_no_in_port);
     378:	e2 2f       	mov	r30, r18
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	af 01       	movw	r20, r30
     37e:	44 0f       	add	r20, r20
     380:	55 1f       	adc	r21, r21
     382:	e4 0f       	add	r30, r20
     384:	f5 1f       	adc	r31, r21
     386:	f1 95       	neg	r31
     388:	e1 95       	neg	r30
     38a:	f1 09       	sbc	r31, r1
     38c:	33 ad       	ldd	r19, Z+59	; 0x3b
     38e:	22 0f       	add	r18, r18
     390:	22 0f       	add	r18, r18
     392:	22 0f       	add	r18, r18
     394:	82 1b       	sub	r24, r18
     396:	28 2f       	mov	r18, r24
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <dio_togg_pin+0x32>
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	2a 95       	dec	r18
     3a4:	e2 f7       	brpl	.-8      	; 0x39e <dio_togg_pin+0x2e>
     3a6:	83 27       	eor	r24, r19
     3a8:	83 af       	std	Z+59, r24	; 0x3b
     3aa:	08 95       	ret

000003ac <__vector_9>:
#define ACTIVATE_ICP() TCCR1B |= (0x02)
#define DEACTIVATE_ICP() TCCR1B &= ~(0x07)


void CONFIG_TMR1_OVF_ISR()
{
     3ac:	1f 92       	push	r1
     3ae:	0f 92       	push	r0
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	0f 92       	push	r0
     3b4:	11 24       	eor	r1, r1
     3b6:	8f 93       	push	r24
     3b8:	9f 93       	push	r25
	ovf_counter++ ;
     3ba:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <ovf_counter>
     3be:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <ovf_counter+0x1>
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <ovf_counter+0x1>
     3c8:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <ovf_counter>
}
     3cc:	9f 91       	pop	r25
     3ce:	8f 91       	pop	r24
     3d0:	0f 90       	pop	r0
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	0f 90       	pop	r0
     3d6:	1f 90       	pop	r1
     3d8:	18 95       	reti

000003da <__vector_6>:

void CONFIG_TMR1_CAPT_ISR()
{
     3da:	1f 92       	push	r1
     3dc:	0f 92       	push	r0
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	0f 92       	push	r0
     3e2:	11 24       	eor	r1, r1
     3e4:	8f 93       	push	r24
	TCNT1H = 0;
     3e6:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = 0;
     3e8:	1c bc       	out	0x2c, r1	; 44
	
	if (echoing == 0) // if its the start of the signal .. meaning if the capture detected a rusing edge of the echo 
     3ea:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__data_end>
     3ee:	81 11       	cpse	r24, r1
     3f0:	07 c0       	rjmp	.+14     	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		TCCR1B &= ~(1 << ICES1); //make the capture at the falling edge to detect the end of the signal and start counting the time
     3f2:	8e b5       	in	r24, 0x2e	; 46
     3f4:	8f 7b       	andi	r24, 0xBF	; 191
     3f6:	8e bd       	out	0x2e, r24	; 46
		echoing = 1; // meaning start of the echo signal and counting the time
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
     3fe:	09 c0       	rjmp	.+18     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	}
	else  //if its the end of the signal
	{
		DEACTIVATE_ICP(); //deactivate the timer .. we will activate it again when we send the trigger
     400:	8e b5       	in	r24, 0x2e	; 46
     402:	88 7f       	andi	r24, 0xF8	; 248
     404:	8e bd       	out	0x2e, r24	; 46
		
		TCCR1B |= (1 << ICES1);//make the edge rising again in order for when the next signal occur it captures its rising signal 
     406:	8e b5       	in	r24, 0x2e	; 46
     408:	80 64       	ori	r24, 0x40	; 64
     40a:	8e bd       	out	0x2e, r24	; 46
		echoing = 2;
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
	}

}
     412:	8f 91       	pop	r24
     414:	0f 90       	pop	r0
     416:	0f be       	out	0x3f, r0	; 63
     418:	0f 90       	pop	r0
     41a:	1f 90       	pop	r1
     41c:	18 95       	reti

0000041e <hcsr04_init>:

void hcsr04_init()
{
	DIO_SET_DIR(HCSR04_TR_PIN, DIO_OUTPUT);
     41e:	61 e0       	ldi	r22, 0x01	; 1
     420:	80 e1       	ldi	r24, 0x10	; 16
     422:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_set_pin_dir>
	DIO_SET_VAL(HCSR04_TR_PIN, DIO_LOW);
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	80 e1       	ldi	r24, 0x10	; 16
     42a:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
	
// 	HCSR04_TR_DIR |= (1 << HCSR04_TR_PIN);
// 	HCSR04_TR_PORT &= ~(1 << HCSR04_TR_PIN);
	TCNT1L = 0;
     42e:	1c bc       	out	0x2c, r1	; 44
	TCNT1H = 0;
     430:	1d bc       	out	0x2d, r1	; 45
	TIMSK  |=  (1 << TICIE1) | (1 << TOIE1);
     432:	89 b7       	in	r24, 0x39	; 57
     434:	84 62       	ori	r24, 0x24	; 36
     436:	89 bf       	out	0x39, r24	; 57
	TCCR1B |= (1 << ICES1); // pre scaler of 8 --- positive edge trigger  // do not start timer yet
     438:	8e b5       	in	r24, 0x2e	; 46
     43a:	80 64       	ori	r24, 0x40	; 64
     43c:	8e bd       	out	0x2e, r24	; 46
     43e:	08 95       	ret

00000440 <hcsr04_trigger>:
}


void hcsr04_trigger()
{
	DIO_SET_VAL(HCSR04_TR_PIN, DIO_HIGH);
     440:	61 e0       	ldi	r22, 0x01	; 1
     442:	80 e1       	ldi	r24, 0x10	; 16
     444:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     448:	8a e1       	ldi	r24, 0x1A	; 26
     44a:	8a 95       	dec	r24
     44c:	f1 f7       	brne	.-4      	; 0x44a <hcsr04_trigger+0xa>
     44e:	00 c0       	rjmp	.+0      	; 0x450 <hcsr04_trigger+0x10>
	
	//HCSR04_TR_PORT |= (1 << HCSR04_TR_PIN);
	_delay_us(10);
	DIO_SET_VAL(HCSR04_TR_PIN, DIO_LOW);
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	80 e1       	ldi	r24, 0x10	; 16
     454:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
	//HCSR04_TR_PORT &= ~(1 << HCSR04_TR_PIN);
	ACTIVATE_ICP();
     458:	8e b5       	in	r24, 0x2e	; 46
     45a:	82 60       	ori	r24, 0x02	; 2
     45c:	8e bd       	out	0x2e, r24	; 46
     45e:	08 95       	ret

00000460 <hcsr04_cm>:
uint16_t hcsr04_cm()
{
	uint16_t icr_result;
	uint32_t hcs_cm;
	
	icr_result = ICR1L;
     460:	26 b5       	in	r18, 0x26	; 38
	icr_result |= ((uint16_t)ICR1H << 8);
     462:	87 b5       	in	r24, 0x27	; 39
	
	
	hcs_cm = (uint32_t)icr_result + ((uint32_t)ovf_counter << 16);
     464:	60 91 7d 00 	lds	r22, 0x007D	; 0x80007d <ovf_counter>
     468:	70 91 7e 00 	lds	r23, 0x007E	; 0x80007e <ovf_counter+0x1>
     46c:	30 e0       	ldi	r19, 0x00	; 0
     46e:	38 2b       	or	r19, r24
     470:	cb 01       	movw	r24, r22
     472:	a0 e0       	ldi	r26, 0x00	; 0
     474:	b0 e0       	ldi	r27, 0x00	; 0
     476:	dc 01       	movw	r26, r24
     478:	99 27       	eor	r25, r25
     47a:	88 27       	eor	r24, r24
     47c:	bc 01       	movw	r22, r24
     47e:	cd 01       	movw	r24, r26
     480:	62 0f       	add	r22, r18
     482:	73 1f       	adc	r23, r19
     484:	81 1d       	adc	r24, r1
     486:	91 1d       	adc	r25, r1
	hcs_cm /= 58;
	echoing = 0;
     488:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
	ovf_counter = 0;
     48c:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <ovf_counter+0x1>
     490:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <ovf_counter>
	
	return (uint16_t)hcs_cm;
     494:	2a e3       	ldi	r18, 0x3A	; 58
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e0       	ldi	r20, 0x00	; 0
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__udivmodsi4>
}
     4a0:	c9 01       	movw	r24, r18
     4a2:	08 95       	ret

000004a4 <hcsr04_data_ready>:



bool hcsr04_data_ready()
{
	return (echoing == 2);
     4a4:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__data_end>
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	92 30       	cpi	r25, 0x02	; 2
     4ac:	09 f0       	breq	.+2      	; 0x4b0 <hcsr04_data_ready+0xc>
     4ae:	80 e0       	ldi	r24, 0x00	; 0
}
     4b0:	08 95       	ret

000004b2 <store_dht>:
		 


#if MCP_ACTIVATED == 1
void store_dht() // stores dht information in the TX0 data
{
     4b2:	0f 93       	push	r16
     4b4:	1f 93       	push	r17
     4b6:	cf 93       	push	r28
     4b8:	df 93       	push	r29
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
     4be:	62 97       	sbiw	r28, 0x12	; 18
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
	char DHT11_data[5] = {0};
     4ca:	25 e0       	ldi	r18, 0x05	; 5
     4cc:	ce 01       	movw	r24, r28
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	fc 01       	movw	r30, r24
     4d2:	32 2f       	mov	r19, r18
     4d4:	11 92       	st	Z+, r1
     4d6:	3a 95       	dec	r19
     4d8:	e9 f7       	brne	.-6      	; 0x4d4 <store_dht+0x22>
	char t_h[5]  = {0};
     4da:	8e 01       	movw	r16, r28
     4dc:	0a 5f       	subi	r16, 0xFA	; 250
     4de:	1f 4f       	sbci	r17, 0xFF	; 255
     4e0:	f8 01       	movw	r30, r16
     4e2:	11 92       	st	Z+, r1
     4e4:	2a 95       	dec	r18
     4e6:	e9 f7       	brne	.-6      	; 0x4e2 <store_dht+0x30>
	uint8_t buff[8];
	
	DHT11_read(DHT11_data);
     4e8:	0e 94 c1 00 	call	0x182	; 0x182 <DHT11_read>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	4a e0       	ldi	r20, 0x0A	; 10
     4f0:	b8 01       	movw	r22, r16
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__itoa_ncheck>
	
	itoa(DHT11_data[0], t_h, 10);
	
	buff[0] = t_h[0];
     4f8:	8e 81       	ldd	r24, Y+6	; 0x06
     4fa:	8b 87       	std	Y+11, r24	; 0x0b
	buff[1] = t_h[1];
     4fc:	8f 81       	ldd	r24, Y+7	; 0x07
     4fe:	8c 87       	std	Y+12, r24	; 0x0c
     500:	8b 81       	ldd	r24, Y+3	; 0x03
     502:	4a e0       	ldi	r20, 0x0A	; 10
     504:	b8 01       	movw	r22, r16
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__itoa_ncheck>

	itoa(DHT11_data[2], t_h, 10);
	buff[2] = t_h[0];
     50c:	8e 81       	ldd	r24, Y+6	; 0x06
     50e:	8d 87       	std	Y+13, r24	; 0x0d
	buff[3] = t_h[1];
     510:	8f 81       	ldd	r24, Y+7	; 0x07
     512:	8e 87       	std	Y+14, r24	; 0x0e
	buff[4] = t_h[2];
     514:	88 85       	ldd	r24, Y+8	; 0x08
     516:	8f 87       	std	Y+15, r24	; 0x0f
	buff[5] = 0;
     518:	18 8a       	std	Y+16, r1	; 0x10
	mcp_tx_data(MCP_TX(0), DATA_FRAME, buff, 5);
     51a:	25 e0       	ldi	r18, 0x05	; 5
     51c:	ae 01       	movw	r20, r28
     51e:	45 5f       	subi	r20, 0xF5	; 245
     520:	5f 4f       	sbci	r21, 0xFF	; 255
     522:	60 e0       	ldi	r22, 0x00	; 0
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	0e 94 46 04 	call	0x88c	; 0x88c <mcp_tx_data>
	//mcp_send_dataframe(MCP_TX(0), buff, 8);
}
     52a:	62 96       	adiw	r28, 0x12	; 18
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	f8 94       	cli
     530:	de bf       	out	0x3e, r29	; 62
     532:	0f be       	out	0x3f, r0	; 63
     534:	cd bf       	out	0x3d, r28	; 61
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	08 95       	ret

00000540 <store_mq2>:

void store_mq2()
{
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
     548:	28 97       	sbiw	r28, 0x08	; 8
     54a:	0f b6       	in	r0, 0x3f	; 63
     54c:	f8 94       	cli
     54e:	de bf       	out	0x3e, r29	; 62
     550:	0f be       	out	0x3f, r0	; 63
     552:	cd bf       	out	0x3d, r28	; 61
	uint16_t mq2_result = 0;
	uint8_t buff[8];
	mq2_result = MQ2_get_result();
     554:	0e 94 dd 06 	call	0xdba	; 0xdba <MQ2_get_result>
     558:	4a e0       	ldi	r20, 0x0A	; 10
     55a:	be 01       	movw	r22, r28
     55c:	6f 5f       	subi	r22, 0xFF	; 255
     55e:	7f 4f       	sbci	r23, 0xFF	; 255
     560:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__itoa_ncheck>
	itoa(mq2_result, buff, 10);
	//usart_write_str_mark(USART0, buff, 0);
	
	mcp_tx_data(MCP_TX(1), DATA_FRAME, buff, 8);
     564:	28 e0       	ldi	r18, 0x08	; 8
     566:	ae 01       	movw	r20, r28
     568:	4f 5f       	subi	r20, 0xFF	; 255
     56a:	5f 4f       	sbci	r21, 0xFF	; 255
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	82 e0       	ldi	r24, 0x02	; 2
     570:	0e 94 46 04 	call	0x88c	; 0x88c <mcp_tx_data>
}
     574:	28 96       	adiw	r28, 0x08	; 8
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	f8 94       	cli
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	cd bf       	out	0x3d, r28	; 61
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <main>:

void store_mq2 ();

int main(void)
{
	DIO_SET_DIR(1, DIO_OUTPUT);
     586:	61 e0       	ldi	r22, 0x01	; 1
     588:	89 e0       	ldi	r24, 0x09	; 9
     58a:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_set_pin_dir>
	DIO_SET_DIR(2, DIO_OUTPUT);
     58e:	61 e0       	ldi	r22, 0x01	; 1
     590:	8a e0       	ldi	r24, 0x0A	; 10
     592:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_set_pin_dir>
	DIO_SET_DIR(13, DIO_PULLUP);
     596:	62 e0       	ldi	r22, 0x02	; 2
     598:	8d e1       	ldi	r24, 0x1D	; 29
     59a:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_set_pin_dir>
	char t_h[5]  = {0};
	uint16_t mq2_result = 0;
	uint8_t state = 0;
	uint8_t break_flag = 0;
	
	usart_init(USART0, 9600, DATA_SIZE_8, TX_RX, NO_PARITY, ONE_STOP_BIT, TX_RISE);
     59e:	a1 2c       	mov	r10, r1
     5a0:	c1 2c       	mov	r12, r1
     5a2:	e1 2c       	mov	r14, r1
     5a4:	03 e0       	ldi	r16, 0x03	; 3
     5a6:	23 e0       	ldi	r18, 0x03	; 3
     5a8:	40 e8       	ldi	r20, 0x80	; 128
     5aa:	55 e2       	ldi	r21, 0x25	; 37
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	80 e0       	ldi	r24, 0x00	; 0
     5b2:	0e 94 dd 07 	call	0xfba	; 0xfba <usart_init>
	
	DHT_init();
     5b6:	0e 94 b8 00 	call	0x170	; 0x170 <DHT_init>
	
	MQ2_init();
     5ba:	0e 94 81 06 	call	0xd02	; 0xd02 <MQ2_init>
#if  MCP_ACTIVATED == 1
	mcp_init();
     5be:	0e 94 a8 04 	call	0x950	; 0x950 <mcp_init>
	mcp_tx_id(MCP_TX(0), 0, 0x058f); //000 1111 0111 001 10 00110101 10001111
     5c2:	2f e8       	ldi	r18, 0x8F	; 143
     5c4:	35 e0       	ldi	r19, 0x05	; 5
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	0e 94 e5 03 	call	0x7ca	; 0x7ca <mcp_tx_id>
	//mcp_tx_data(MCP_TX(0), DATA_FRAME, "ALIBE", 5);
	
	mcp_tx_id(MCP_TX(1), 0, 0x057f); //000 1111 0111 001 10 00110101 10001111
     5d2:	2f e7       	ldi	r18, 0x7F	; 127
     5d4:	35 e0       	ldi	r19, 0x05	; 5
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	50 e0       	ldi	r21, 0x00	; 0
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	82 e0       	ldi	r24, 0x02	; 2
     5de:	0e 94 e5 03 	call	0x7ca	; 0x7ca <mcp_tx_id>
	//mcp_tx_data(MCP_TX(1), DATA_FRAME, "ALIST", 5);
	
	mcp_tx_id(MCP_TX(2), 0, 0x056f); //000 1111 0111 001 10 00110101 10001111
     5e2:	2f e6       	ldi	r18, 0x6F	; 111
     5e4:	35 e0       	ldi	r19, 0x05	; 5
     5e6:	40 e0       	ldi	r20, 0x00	; 0
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	60 e0       	ldi	r22, 0x00	; 0
     5ec:	84 e0       	ldi	r24, 0x04	; 4
     5ee:	0e 94 e5 03 	call	0x7ca	; 0x7ca <mcp_tx_id>
	//mcp_tx_data(MCP_TX(2), DATA_FRAME, "ALI MAKH", 8);
#endif
	
 	DIO_TOGGLE(1);
     5f2:	89 e0       	ldi	r24, 0x09	; 9
     5f4:	0e 94 b8 01 	call	0x370	; 0x370 <dio_togg_pin>
	
	hcsr04_init();
     5f8:	0e 94 0f 02 	call	0x41e	; 0x41e <hcsr04_init>
	
	sei();
     5fc:	78 94       	sei

	usart_write_str_mark(USART0, "Triggering", 0);
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	60 e6       	ldi	r22, 0x60	; 96
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	0e 94 6a 07 	call	0xed4	; 0xed4 <usart_write_str_mark>
	hcsr04_trigger();
     60a:	0e 94 20 02 	call	0x440	; 0x440 <hcsr04_trigger>
	char DHT11_data[5] = {0};
	char smoke[10]  = {0};
	char t_h[5]  = {0};
	uint16_t mq2_result = 0;
	uint8_t state = 0;
	uint8_t break_flag = 0;
     60e:	10 e0       	ldi	r17, 0x00	; 0
    {
#if MCP_ACTIVATED == 1

		
		
		state = mcp_status();
     610:	0e 94 12 05 	call	0xa24	; 0xa24 <mcp_status>
     614:	c8 2f       	mov	r28, r24
		
		if (mcp_status_rx(state, MCP_STAT_NO_RX) == 0)
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	0e 94 83 05 	call	0xb06	; 0xb06 <mcp_status_rx>
     61c:	81 11       	cpse	r24, r1
     61e:	24 c0       	rjmp	.+72     	; 0x668 <main+0xe2>
		{
			uint8_t rx_state = mcp_rx_status();
     620:	0e 94 65 05 	call	0xaca	; 0xaca <mcp_rx_status>
     624:	d8 2f       	mov	r29, r24
			
			if (mcp_rx_status_frame(rx_state, RX_STATUS_SREMOTE))
     626:	68 e0       	ldi	r22, 0x08	; 8
     628:	0e 94 77 05 	call	0xaee	; 0xaee <mcp_rx_status_frame>
     62c:	88 23       	and	r24, r24
     62e:	e1 f0       	breq	.+56     	; 0x668 <main+0xe2>
			{
				
				if (mcp_rx_status_filter(rx_state, RX_STATUS_RXF(0)))
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	8d 2f       	mov	r24, r29
     634:	0e 94 7d 05 	call	0xafa	; 0xafa <mcp_rx_status_filter>
     638:	88 23       	and	r24, r24
     63a:	41 f0       	breq	.+16     	; 0x64c <main+0xc6>
				{
					store_dht();
     63c:	0e 94 59 02 	call	0x4b2	; 0x4b2 <store_dht>
					mcp_tx_trigger(MCP_TX(0));
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	0e 94 74 04 	call	0x8e8	; 0x8e8 <mcp_tx_trigger>
					
					mcp_clear_flag(RX0IF_BIT);
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	0e 94 24 05 	call	0xa48	; 0xa48 <mcp_clear_flag>
					
				}
				
				if (mcp_rx_status_filter(rx_state, RX_STATUS_RXF(2)))
     64c:	62 e0       	ldi	r22, 0x02	; 2
     64e:	8d 2f       	mov	r24, r29
     650:	0e 94 7d 05 	call	0xafa	; 0xafa <mcp_rx_status_filter>
     654:	88 23       	and	r24, r24
     656:	41 f0       	breq	.+16     	; 0x668 <main+0xe2>
				{
					store_mq2();
     658:	0e 94 a0 02 	call	0x540	; 0x540 <store_mq2>
					mcp_tx_trigger(MCP_TX(1));
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <mcp_tx_trigger>
					
					mcp_clear_flag(RX1IF_BIT);
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	0e 94 24 05 	call	0xa48	; 0xa48 <mcp_clear_flag>
				
			}
			
		}
		
		if (mcp_status_tx(state, MCP_STAT_TX0))
     668:	68 e0       	ldi	r22, 0x08	; 8
     66a:	8c 2f       	mov	r24, r28
     66c:	0e 94 8d 05 	call	0xb1a	; 0xb1a <mcp_status_tx>
     670:	88 23       	and	r24, r24
     672:	19 f0       	breq	.+6      	; 0x67a <main+0xf4>
		{
			mcp_clear_flag(TX0IF_BIT);
     674:	83 e0       	ldi	r24, 0x03	; 3
     676:	0e 94 24 05 	call	0xa48	; 0xa48 <mcp_clear_flag>
		}
		
		if (mcp_status_tx(state, MCP_STAT_TX1))
     67a:	60 e2       	ldi	r22, 0x20	; 32
     67c:	8c 2f       	mov	r24, r28
     67e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <mcp_status_tx>
     682:	88 23       	and	r24, r24
     684:	19 f0       	breq	.+6      	; 0x68c <main+0x106>
		{			
			mcp_clear_flag(TX1IF_BIT);
     686:	85 e0       	ldi	r24, 0x05	; 5
     688:	0e 94 24 05 	call	0xa48	; 0xa48 <mcp_clear_flag>
		}
		
		if (mcp_status_tx(state, MCP_STAT_TX2))
     68c:	60 e8       	ldi	r22, 0x80	; 128
     68e:	8c 2f       	mov	r24, r28
     690:	0e 94 8d 05 	call	0xb1a	; 0xb1a <mcp_status_tx>
     694:	88 23       	and	r24, r24
     696:	19 f0       	breq	.+6      	; 0x69e <main+0x118>
		{
			mcp_clear_flag(TX2IF_BIT);
     698:	87 e0       	ldi	r24, 0x07	; 7
     69a:	0e 94 24 05 	call	0xa48	; 0xa48 <mcp_clear_flag>
		}
		
		if ( hcsr04_data_ready())
     69e:	0e 94 52 02 	call	0x4a4	; 0x4a4 <hcsr04_data_ready>
     6a2:	88 23       	and	r24, r24
     6a4:	19 f1       	breq	.+70     	; 0x6ec <main+0x166>
		{
			usart_write_str_mark(USART0, "data_ready", 0);
     6a6:	40 e0       	ldi	r20, 0x00	; 0
     6a8:	6b e6       	ldi	r22, 0x6B	; 107
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	0e 94 6a 07 	call	0xed4	; 0xed4 <usart_write_str_mark>
			hcs_cm = hcsr04_cm();
     6b2:	0e 94 30 02 	call	0x460	; 0x460 <hcsr04_cm>


			if ((hcs_cm < 5) && (break_flag == 0))
     6b6:	05 97       	sbiw	r24, 0x05	; 5
     6b8:	68 f4       	brcc	.+26     	; 0x6d4 <main+0x14e>
     6ba:	11 11       	cpse	r17, r1
     6bc:	17 c0       	rjmp	.+46     	; 0x6ec <main+0x166>
			{
				DIO_TOGGLE(1);
     6be:	89 e0       	ldi	r24, 0x09	; 9
     6c0:	0e 94 b8 01 	call	0x370	; 0x370 <dio_togg_pin>
				//DIO_TOGGLE(2);
				mcp_send_dataframe(MCP_TX(2), "B1", 2);
     6c4:	42 e0       	ldi	r20, 0x02	; 2
     6c6:	66 e7       	ldi	r22, 0x76	; 118
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	84 e0       	ldi	r24, 0x04	; 4
     6cc:	0e 94 59 05 	call	0xab2	; 0xab2 <mcp_send_dataframe>
				break_flag = 1;
     6d0:	11 e0       	ldi	r17, 0x01	; 1
     6d2:	0c c0       	rjmp	.+24     	; 0x6ec <main+0x166>
			}
			else if ((hcs_cm >= 5) && (break_flag == 1))
     6d4:	11 30       	cpi	r17, 0x01	; 1
     6d6:	51 f4       	brne	.+20     	; 0x6ec <main+0x166>
			{
				DIO_TOGGLE(1);
     6d8:	89 e0       	ldi	r24, 0x09	; 9
     6da:	0e 94 b8 01 	call	0x370	; 0x370 <dio_togg_pin>
				//DIO_TOGGLE(2);
				mcp_send_dataframe(MCP_TX(2), "B0", 2);
     6de:	42 e0       	ldi	r20, 0x02	; 2
     6e0:	69 e7       	ldi	r22, 0x79	; 121
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	84 e0       	ldi	r24, 0x04	; 4
     6e6:	0e 94 59 05 	call	0xab2	; 0xab2 <mcp_send_dataframe>
				break_flag = 0;
     6ea:	10 e0       	ldi	r17, 0x00	; 0
			
			
			
		}
		
		if (millis(500) == 0)
     6ec:	84 ef       	ldi	r24, 0xF4	; 244
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 db 05 	call	0xbb6	; 0xbb6 <millis>
     6f4:	89 2b       	or	r24, r25
     6f6:	09 f0       	breq	.+2      	; 0x6fa <main+0x174>
     6f8:	8b cf       	rjmp	.-234    	; 0x610 <main+0x8a>
		{
			//DIO_TOGGLE(1);
			DIO_TOGGLE(2);
     6fa:	8a e0       	ldi	r24, 0x0A	; 10
     6fc:	0e 94 b8 01 	call	0x370	; 0x370 <dio_togg_pin>
			hcsr04_trigger();
     700:	0e 94 20 02 	call	0x440	; 0x440 <hcsr04_trigger>
     704:	85 cf       	rjmp	.-246    	; 0x610 <main+0x8a>

00000706 <mcp_reset>:

uint8_t mcp_rx_status_rx(uint8_t rx_status_reg, uint8_t specific_bits) //volatile
{
	uint8_t temp = rx_status_reg & ((specific_bits == RX_STATUS_NO_RX)? RX_STATUS_BOTH_RX : specific_bits);
	return temp == specific_bits;
}
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	8c e0       	ldi	r24, 0x0C	; 12
     70a:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     70e:	80 ec       	ldi	r24, 0xC0	; 192
     710:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     714:	61 e0       	ldi	r22, 0x01	; 1
     716:	8c e0       	ldi	r24, 0x0C	; 12
     718:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     71c:	08 95       	ret

0000071e <mcp_set_mask_filter>:
     71e:	cf 92       	push	r12
     720:	df 92       	push	r13
     722:	ef 92       	push	r14
     724:	ff 92       	push	r15
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	d8 2f       	mov	r29, r24
     72c:	c6 2f       	mov	r28, r22
     72e:	69 01       	movw	r12, r18
     730:	7a 01       	movw	r14, r20
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	8c e0       	ldi	r24, 0x0C	; 12
     736:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     740:	8d 2f       	mov	r24, r29
     742:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     746:	c1 30       	cpi	r28, 0x01	; 1
     748:	31 f5       	brne	.+76     	; 0x796 <mcp_set_mask_filter+0x78>
     74a:	d7 01       	movw	r26, r14
     74c:	c6 01       	movw	r24, r12
     74e:	07 2e       	mov	r0, r23
     750:	75 e1       	ldi	r23, 0x15	; 21
     752:	b6 95       	lsr	r27
     754:	a7 95       	ror	r26
     756:	97 95       	ror	r25
     758:	87 95       	ror	r24
     75a:	7a 95       	dec	r23
     75c:	d1 f7       	brne	.-12     	; 0x752 <mcp_set_mask_filter+0x34>
     75e:	70 2d       	mov	r23, r0
     760:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     764:	d7 01       	movw	r26, r14
     766:	c6 01       	movw	r24, r12
     768:	07 2e       	mov	r0, r23
     76a:	7d e0       	ldi	r23, 0x0D	; 13
     76c:	b6 95       	lsr	r27
     76e:	a7 95       	ror	r26
     770:	97 95       	ror	r25
     772:	87 95       	ror	r24
     774:	7a 95       	dec	r23
     776:	d1 f7       	brne	.-12     	; 0x76c <mcp_set_mask_filter+0x4e>
     778:	70 2d       	mov	r23, r0
     77a:	80 7e       	andi	r24, 0xE0	; 224
     77c:	9e 2d       	mov	r25, r14
     77e:	93 70       	andi	r25, 0x03	; 3
     780:	89 2b       	or	r24, r25
     782:	88 60       	ori	r24, 0x08	; 8
     784:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     788:	8d 2d       	mov	r24, r13
     78a:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     78e:	8c 2d       	mov	r24, r12
     790:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     794:	0f c0       	rjmp	.+30     	; 0x7b4 <mcp_set_mask_filter+0x96>
     796:	c6 01       	movw	r24, r12
     798:	96 95       	lsr	r25
     79a:	87 95       	ror	r24
     79c:	96 95       	lsr	r25
     79e:	87 95       	ror	r24
     7a0:	96 95       	lsr	r25
     7a2:	87 95       	ror	r24
     7a4:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     7a8:	8c 2d       	mov	r24, r12
     7aa:	82 95       	swap	r24
     7ac:	88 0f       	add	r24, r24
     7ae:	80 7e       	andi	r24, 0xE0	; 224
     7b0:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	8c e0       	ldi	r24, 0x0C	; 12
     7b8:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	ff 90       	pop	r15
     7c2:	ef 90       	pop	r14
     7c4:	df 90       	pop	r13
     7c6:	cf 90       	pop	r12
     7c8:	08 95       	ret

000007ca <mcp_tx_id>:
     7ca:	cf 92       	push	r12
     7cc:	df 92       	push	r13
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	c8 2f       	mov	r28, r24
     7d8:	d6 2f       	mov	r29, r22
     7da:	69 01       	movw	r12, r18
     7dc:	7a 01       	movw	r14, r20
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	8c e0       	ldi	r24, 0x0C	; 12
     7e2:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     7e6:	d1 30       	cpi	r29, 0x01	; 1
     7e8:	81 f5       	brne	.+96     	; 0x84a <mcp_tx_id+0x80>
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     7f0:	8c 2f       	mov	r24, r28
     7f2:	86 95       	lsr	r24
     7f4:	82 95       	swap	r24
     7f6:	80 7f       	andi	r24, 0xF0	; 240
     7f8:	8f 5c       	subi	r24, 0xCF	; 207
     7fa:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     7fe:	d7 01       	movw	r26, r14
     800:	c6 01       	movw	r24, r12
     802:	07 2e       	mov	r0, r23
     804:	75 e1       	ldi	r23, 0x15	; 21
     806:	b6 95       	lsr	r27
     808:	a7 95       	ror	r26
     80a:	97 95       	ror	r25
     80c:	87 95       	ror	r24
     80e:	7a 95       	dec	r23
     810:	d1 f7       	brne	.-12     	; 0x806 <mcp_tx_id+0x3c>
     812:	70 2d       	mov	r23, r0
     814:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     818:	d7 01       	movw	r26, r14
     81a:	c6 01       	movw	r24, r12
     81c:	07 2e       	mov	r0, r23
     81e:	7d e0       	ldi	r23, 0x0D	; 13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	7a 95       	dec	r23
     82a:	d1 f7       	brne	.-12     	; 0x820 <mcp_tx_id+0x56>
     82c:	70 2d       	mov	r23, r0
     82e:	80 7e       	andi	r24, 0xE0	; 224
     830:	9e 2d       	mov	r25, r14
     832:	93 70       	andi	r25, 0x03	; 3
     834:	89 2b       	or	r24, r25
     836:	88 60       	ori	r24, 0x08	; 8
     838:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     83c:	8d 2d       	mov	r24, r13
     83e:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     842:	8c 2d       	mov	r24, r12
     844:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     848:	16 c0       	rjmp	.+44     	; 0x876 <__stack+0x17>
     84a:	c1 30       	cpi	r28, 0x01	; 1
     84c:	09 f4       	brne	.+2      	; 0x850 <mcp_tx_id+0x86>
     84e:	c0 e0       	ldi	r28, 0x00	; 0
     850:	8c 2f       	mov	r24, r28
     852:	80 64       	ori	r24, 0x40	; 64
     854:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     858:	c6 01       	movw	r24, r12
     85a:	96 95       	lsr	r25
     85c:	87 95       	ror	r24
     85e:	96 95       	lsr	r25
     860:	87 95       	ror	r24
     862:	96 95       	lsr	r25
     864:	87 95       	ror	r24
     866:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     86a:	8c 2d       	mov	r24, r12
     86c:	82 95       	swap	r24
     86e:	88 0f       	add	r24, r24
     870:	80 7e       	andi	r24, 0xE0	; 224
     872:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	8c e0       	ldi	r24, 0x0C	; 12
     87a:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	08 95       	ret

0000088c <mcp_tx_data>:
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	1f 93       	push	r17
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	c8 2f       	mov	r28, r24
     898:	d6 2f       	mov	r29, r22
     89a:	7a 01       	movw	r14, r20
     89c:	12 2f       	mov	r17, r18
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	8c e0       	ldi	r24, 0x0C	; 12
     8a2:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     8a6:	82 e0       	ldi	r24, 0x02	; 2
     8a8:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     8ac:	8c 2f       	mov	r24, r28
     8ae:	86 95       	lsr	r24
     8b0:	82 95       	swap	r24
     8b2:	80 7f       	andi	r24, 0xF0	; 240
     8b4:	8b 5c       	subi	r24, 0xCB	; 203
     8b6:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     8ba:	20 e4       	ldi	r18, 0x40	; 64
     8bc:	d2 9f       	mul	r29, r18
     8be:	c0 01       	movw	r24, r0
     8c0:	11 24       	eor	r1, r1
     8c2:	81 2b       	or	r24, r17
     8c4:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     8c8:	d1 11       	cpse	r29, r1
     8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <mcp_tx_data+0x48>
     8cc:	61 2f       	mov	r22, r17
     8ce:	c7 01       	movw	r24, r14
     8d0:	0e 94 0b 07 	call	0xe16	; 0xe16 <spi_send_str_size>
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	8c e0       	ldi	r24, 0x0C	; 12
     8d8:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	08 95       	ret

000008e8 <mcp_tx_trigger>:
     8e8:	cf 93       	push	r28
     8ea:	c8 2f       	mov	r28, r24
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	8c e0       	ldi	r24, 0x0C	; 12
     8f0:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     8f4:	8c 2f       	mov	r24, r28
     8f6:	80 68       	ori	r24, 0x80	; 128
     8f8:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	8c e0       	ldi	r24, 0x0C	; 12
     900:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     904:	8f e0       	ldi	r24, 0x0F	; 15
     906:	97 e2       	ldi	r25, 0x27	; 39
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	f1 f7       	brne	.-4      	; 0x908 <mcp_tx_trigger+0x20>
     90c:	00 c0       	rjmp	.+0      	; 0x90e <mcp_tx_trigger+0x26>
     90e:	00 00       	nop
     910:	cf 91       	pop	r28
     912:	08 95       	ret

00000914 <mcp_bit_modify>:
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	18 2f       	mov	r17, r24
     91c:	d6 2f       	mov	r29, r22
     91e:	c4 2f       	mov	r28, r20
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	8c e0       	ldi	r24, 0x0C	; 12
     924:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     928:	85 e0       	ldi	r24, 0x05	; 5
     92a:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     92e:	81 2f       	mov	r24, r17
     930:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     934:	8d 2f       	mov	r24, r29
     936:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     93a:	8c 2f       	mov	r24, r28
     93c:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     940:	61 e0       	ldi	r22, 0x01	; 1
     942:	8c e0       	ldi	r24, 0x0C	; 12
     944:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	08 95       	ret

00000950 <mcp_init>:
     950:	0e 94 4d 07 	call	0xe9a	; 0xe9a <spi_init>
     954:	0e 94 83 03 	call	0x706	; 0x706 <mcp_reset>
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	6f e0       	ldi	r22, 0x0F	; 15
     95c:	8c e0       	ldi	r24, 0x0C	; 12
     95e:	0e 94 8a 04 	call	0x914	; 0x914 <mcp_bit_modify>
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	67 e0       	ldi	r22, 0x07	; 7
     966:	8d e0       	ldi	r24, 0x0D	; 13
     968:	0e 94 8a 04 	call	0x914	; 0x914 <mcp_bit_modify>
     96c:	40 e0       	ldi	r20, 0x00	; 0
     96e:	60 e6       	ldi	r22, 0x60	; 96
     970:	80 e6       	ldi	r24, 0x60	; 96
     972:	0e 94 8a 04 	call	0x914	; 0x914 <mcp_bit_modify>
     976:	40 e0       	ldi	r20, 0x00	; 0
     978:	60 e6       	ldi	r22, 0x60	; 96
     97a:	80 e7       	ldi	r24, 0x70	; 112
     97c:	0e 94 8a 04 	call	0x914	; 0x914 <mcp_bit_modify>
     980:	4f ef       	ldi	r20, 0xFF	; 255
     982:	6f ef       	ldi	r22, 0xFF	; 255
     984:	8b e2       	ldi	r24, 0x2B	; 43
     986:	0e 94 8a 04 	call	0x914	; 0x914 <mcp_bit_modify>
     98a:	41 e4       	ldi	r20, 0x41	; 65
     98c:	6f ef       	ldi	r22, 0xFF	; 255
     98e:	8a e2       	ldi	r24, 0x2A	; 42
     990:	0e 94 8a 04 	call	0x914	; 0x914 <mcp_bit_modify>
     994:	41 eb       	ldi	r20, 0xB1	; 177
     996:	6f ef       	ldi	r22, 0xFF	; 255
     998:	89 e2       	ldi	r24, 0x29	; 41
     99a:	0e 94 8a 04 	call	0x914	; 0x914 <mcp_bit_modify>
     99e:	45 e0       	ldi	r20, 0x05	; 5
     9a0:	67 e4       	ldi	r22, 0x47	; 71
     9a2:	88 e2       	ldi	r24, 0x28	; 40
     9a4:	0e 94 8a 04 	call	0x914	; 0x914 <mcp_bit_modify>
     9a8:	2f ef       	ldi	r18, 0xFF	; 255
     9aa:	3f e0       	ldi	r19, 0x0F	; 15
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	80 e2       	ldi	r24, 0x20	; 32
     9b4:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp_set_mask_filter>
     9b8:	2f ef       	ldi	r18, 0xFF	; 255
     9ba:	3f e0       	ldi	r19, 0x0F	; 15
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	84 e2       	ldi	r24, 0x24	; 36
     9c4:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp_set_mask_filter>
     9c8:	2f e8       	ldi	r18, 0x8F	; 143
     9ca:	35 e0       	ldi	r19, 0x05	; 5
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp_set_mask_filter>
     9d8:	2f e7       	ldi	r18, 0x7F	; 127
     9da:	35 e0       	ldi	r19, 0x05	; 5
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	88 e0       	ldi	r24, 0x08	; 8
     9e4:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp_set_mask_filter>
     9e8:	2f e6       	ldi	r18, 0x6F	; 111
     9ea:	35 e0       	ldi	r19, 0x05	; 5
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	80 e1       	ldi	r24, 0x10	; 16
     9f4:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp_set_mask_filter>
     9f8:	2f e5       	ldi	r18, 0x5F	; 95
     9fa:	35 e0       	ldi	r19, 0x05	; 5
     9fc:	40 e0       	ldi	r20, 0x00	; 0
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	84 e1       	ldi	r24, 0x14	; 20
     a04:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp_set_mask_filter>
     a08:	2f e4       	ldi	r18, 0x4F	; 79
     a0a:	35 e0       	ldi	r19, 0x05	; 5
     a0c:	40 e0       	ldi	r20, 0x00	; 0
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	88 e1       	ldi	r24, 0x18	; 24
     a14:	0e 94 8f 03 	call	0x71e	; 0x71e <mcp_set_mask_filter>
     a18:	48 e0       	ldi	r20, 0x08	; 8
     a1a:	6f ef       	ldi	r22, 0xFF	; 255
     a1c:	8f e2       	ldi	r24, 0x2F	; 47
     a1e:	0e 94 8a 04 	call	0x914	; 0x914 <mcp_bit_modify>
     a22:	08 95       	ret

00000a24 <mcp_status>:
     a24:	cf 93       	push	r28
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	8c e0       	ldi	r24, 0x0C	; 12
     a2a:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     a2e:	80 ea       	ldi	r24, 0xA0	; 160
     a30:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     a34:	0e 94 65 07 	call	0xeca	; 0xeca <spi_read>
     a38:	c8 2f       	mov	r28, r24
     a3a:	61 e0       	ldi	r22, 0x01	; 1
     a3c:	8c e0       	ldi	r24, 0x0C	; 12
     a3e:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     a42:	8c 2f       	mov	r24, r28
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <mcp_clear_flag>:
     a48:	88 30       	cpi	r24, 0x08	; 8
     a4a:	b8 f4       	brcc	.+46     	; 0xa7a <mcp_clear_flag+0x32>
     a4c:	83 30       	cpi	r24, 0x03	; 3
     a4e:	31 f0       	breq	.+12     	; 0xa5c <mcp_clear_flag+0x14>
     a50:	85 30       	cpi	r24, 0x05	; 5
     a52:	31 f0       	breq	.+12     	; 0xa60 <mcp_clear_flag+0x18>
     a54:	87 30       	cpi	r24, 0x07	; 7
     a56:	29 f4       	brne	.+10     	; 0xa62 <mcp_clear_flag+0x1a>
     a58:	84 e0       	ldi	r24, 0x04	; 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <mcp_clear_flag+0x1a>
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	01 c0       	rjmp	.+2      	; 0xa62 <mcp_clear_flag+0x1a>
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <mcp_clear_flag+0x24>
     a68:	66 0f       	add	r22, r22
     a6a:	77 1f       	adc	r23, r23
     a6c:	8a 95       	dec	r24
     a6e:	e2 f7       	brpl	.-8      	; 0xa68 <mcp_clear_flag+0x20>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	8c e2       	ldi	r24, 0x2C	; 44
     a74:	0e 94 8a 04 	call	0x914	; 0x914 <mcp_bit_modify>
     a78:	08 95       	ret
     a7a:	80 31       	cpi	r24, 0x10	; 16
     a7c:	68 f4       	brcc	.+26     	; 0xa98 <mcp_clear_flag+0x50>
     a7e:	88 50       	subi	r24, 0x08	; 8
     a80:	61 e0       	ldi	r22, 0x01	; 1
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <mcp_clear_flag+0x42>
     a86:	66 0f       	add	r22, r22
     a88:	77 1f       	adc	r23, r23
     a8a:	8a 95       	dec	r24
     a8c:	e2 f7       	brpl	.-8      	; 0xa86 <mcp_clear_flag+0x3e>
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	8c e2       	ldi	r24, 0x2C	; 44
     a92:	0e 94 8a 04 	call	0x914	; 0x914 <mcp_bit_modify>
     a96:	08 95       	ret
     a98:	88 52       	subi	r24, 0x28	; 40
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <mcp_clear_flag+0x5c>
     aa0:	66 0f       	add	r22, r22
     aa2:	77 1f       	adc	r23, r23
     aa4:	8a 95       	dec	r24
     aa6:	e2 f7       	brpl	.-8      	; 0xaa0 <mcp_clear_flag+0x58>
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	8c e2       	ldi	r24, 0x2C	; 44
     aac:	0e 94 8a 04 	call	0x914	; 0x914 <mcp_bit_modify>
     ab0:	08 95       	ret

00000ab2 <mcp_send_dataframe>:
     ab2:	cf 93       	push	r28
     ab4:	c8 2f       	mov	r28, r24
     ab6:	24 2f       	mov	r18, r20
     ab8:	ab 01       	movw	r20, r22
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	0e 94 46 04 	call	0x88c	; 0x88c <mcp_tx_data>
     ac0:	8c 2f       	mov	r24, r28
     ac2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <mcp_tx_trigger>
     ac6:	cf 91       	pop	r28
     ac8:	08 95       	ret

00000aca <mcp_rx_status>:
     aca:	cf 93       	push	r28
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	8c e0       	ldi	r24, 0x0C	; 12
     ad0:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     ad4:	80 eb       	ldi	r24, 0xB0	; 176
     ad6:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
     ada:	0e 94 65 07 	call	0xeca	; 0xeca <spi_read>
     ade:	c8 2f       	mov	r28, r24
     ae0:	61 e0       	ldi	r22, 0x01	; 1
     ae2:	8c e0       	ldi	r24, 0x0C	; 12
     ae4:	0e 94 90 01 	call	0x320	; 0x320 <dio_set_pin_val>
     ae8:	8c 2f       	mov	r24, r28
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <mcp_rx_status_frame>:
     aee:	98 2f       	mov	r25, r24
     af0:	98 71       	andi	r25, 0x18	; 24
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	96 13       	cpse	r25, r22
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	08 95       	ret

00000afa <mcp_rx_status_filter>:

uint8_t mcp_rx_status_filter(uint8_t rx_status_reg, uint8_t specific_bits) // volatile
{
	return ((rx_status_reg & RX_STATUS_RXF_BITS) == specific_bits);
     afa:	98 2f       	mov	r25, r24
     afc:	97 70       	andi	r25, 0x07	; 7
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	96 13       	cpse	r25, r22
     b02:	80 e0       	ldi	r24, 0x00	; 0
}
     b04:	08 95       	ret

00000b06 <mcp_status_rx>:

uint8_t mcp_status_rx(uint8_t stat_reg, uint8_t specific_bits) //volatile
{
	uint8_t temp = stat_reg & ((specific_bits == MCP_STAT_NO_RX)? MCP_STAT_BOTH_RX : specific_bits);
     b06:	66 23       	and	r22, r22
     b08:	11 f0       	breq	.+4      	; 0xb0e <mcp_status_rx+0x8>
     b0a:	96 2f       	mov	r25, r22
     b0c:	01 c0       	rjmp	.+2      	; 0xb10 <mcp_status_rx+0xa>
     b0e:	93 e0       	ldi	r25, 0x03	; 3
	return temp == specific_bits;
     b10:	98 23       	and	r25, r24
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	96 13       	cpse	r25, r22
     b16:	80 e0       	ldi	r24, 0x00	; 0
}
     b18:	08 95       	ret

00000b1a <mcp_status_tx>:

uint8_t mcp_status_tx(uint8_t stat_reg, uint8_t specific_bits) // volatile
{
	uint8_t temp = stat_reg & ((specific_bits == MCP_STAT_NO_TX)? MCP_STAT_BOTH_TX : specific_bits);
     b1a:	66 23       	and	r22, r22
     b1c:	11 f0       	breq	.+4      	; 0xb22 <mcp_status_tx+0x8>
     b1e:	96 2f       	mov	r25, r22
     b20:	01 c0       	rjmp	.+2      	; 0xb24 <mcp_status_tx+0xa>
     b22:	98 ea       	ldi	r25, 0xA8	; 168
	return temp == specific_bits;	
     b24:	98 23       	and	r25, r24
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	96 13       	cpse	r25, r22
     b2a:	80 e0       	ldi	r24, 0x00	; 0
}
     b2c:	08 95       	ret

00000b2e <__vector_11>:
//the number of overflows needed to generate the needed ticks for making the
// delay time
static volatile unint16_t g_ovf_count;

void CONFIG_TMR0_OVF_ISR()
{
     b2e:	1f 92       	push	r1
     b30:	0f 92       	push	r0
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	0f 92       	push	r0
     b36:	11 24       	eor	r1, r1
     b38:	2f 93       	push	r18
     b3a:	3f 93       	push	r19
     b3c:	4f 93       	push	r20
     b3e:	5f 93       	push	r21
     b40:	6f 93       	push	r22
     b42:	7f 93       	push	r23
     b44:	8f 93       	push	r24
     b46:	9f 93       	push	r25
     b48:	af 93       	push	r26
     b4a:	bf 93       	push	r27
     b4c:	ef 93       	push	r30
     b4e:	ff 93       	push	r31
	cli();
     b50:	f8 94       	cli
	 a flag is that by decrementing the g_ovf_count in ISR then I don't have to 
	 guarantee that millis will be checked every 1024 cycles(because the program 
	 might be is too big so that I can't check this function every 1024 cycles
	 */
	//if there are remaining overflows yet
	if (g_ovf_count)
     b52:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <g_ovf_count>
     b56:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <g_ovf_count+0x1>
     b5a:	89 2b       	or	r24, r25
     b5c:	99 f0       	breq	.+38     	; 0xb84 <__vector_11+0x56>
	{
		/* if (g_ovf_count == 1) then the n_of actual overflows has ended and
		   there are some remaining ticks which will be out in TCNT0 to get all
		   the ticks needed precisely*/
		if (g_ovf_count == 1)
     b5e:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <g_ovf_count>
     b62:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <g_ovf_count+0x1>
     b66:	01 97       	sbiw	r24, 0x01	; 1
     b68:	21 f4       	brne	.+8      	; 0xb72 <__vector_11+0x44>
		{
			TCNT0 = 256 - g_last_ticks;
     b6a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <g_last_ticks>
     b6e:	81 95       	neg	r24
     b70:	82 bf       	out	0x32, r24	; 50
		}
		
		g_ovf_count-- ;
     b72:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <g_ovf_count>
     b76:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <g_ovf_count+0x1>
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <g_ovf_count+0x1>
     b80:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <g_ovf_count>
	}
	
	if (gp_tmr0_ovf_isr != NULL)
     b84:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <gp_tmr0_ovf_isr>
     b88:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <gp_tmr0_ovf_isr+0x1>
     b8c:	30 97       	sbiw	r30, 0x00	; 0
     b8e:	09 f0       	breq	.+2      	; 0xb92 <__vector_11+0x64>
	{
		gp_tmr0_ovf_isr();
     b90:	09 95       	icall
	}
	
	sei();
     b92:	78 94       	sei
}
     b94:	ff 91       	pop	r31
     b96:	ef 91       	pop	r30
     b98:	bf 91       	pop	r27
     b9a:	af 91       	pop	r26
     b9c:	9f 91       	pop	r25
     b9e:	8f 91       	pop	r24
     ba0:	7f 91       	pop	r23
     ba2:	6f 91       	pop	r22
     ba4:	5f 91       	pop	r21
     ba6:	4f 91       	pop	r20
     ba8:	3f 91       	pop	r19
     baa:	2f 91       	pop	r18
     bac:	0f 90       	pop	r0
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	0f 90       	pop	r0
     bb2:	1f 90       	pop	r1
     bb4:	18 95       	reti

00000bb6 <millis>:


bool millis(unint16_t t)
{
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
	if ((g_ovf_count == 0) && (TCCR0 == 0)) //happens only at the beginning
     bba:	40 91 7f 00 	lds	r20, 0x007F	; 0x80007f <g_ovf_count>
     bbe:	50 91 80 00 	lds	r21, 0x0080	; 0x800080 <g_ovf_count+0x1>
     bc2:	45 2b       	or	r20, r21
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <millis+0x12>
     bc6:	42 c0       	rjmp	.+132    	; 0xc4c <millis+0x96>
     bc8:	23 b7       	in	r18, 0x33	; 51
     bca:	21 11       	cpse	r18, r1
     bcc:	3f c0       	rjmp	.+126    	; 0xc4c <millis+0x96>
		//every overflow occur until this number reaches zero then the timer will recognize that it's timeout
		//in the .h file we can have the number of overflows and the number of remaining ticks(calculated automatically from the time
		//parameter
		//we put the number of overflows plus one(because the required number of ticks are not exactly multiples of 256 so there will be
        //some ticks less that 256 remaining at the end ticks in a static variable plus one for the remaining ticks.*/
		g_ovf_count= NUMBER_OF_OVFLOWS + 1;
     bce:	9c 01       	movw	r18, r24
     bd0:	a8 ee       	ldi	r26, 0xE8	; 232
     bd2:	b3 e0       	ldi	r27, 0x03	; 3
     bd4:	0e 94 ed 0b 	call	0x17da	; 0x17da <__umulhisi3>
     bd8:	8b 01       	movw	r16, r22
     bda:	9c 01       	movw	r18, r24
     bdc:	0f 2e       	mov	r0, r31
     bde:	ff e0       	ldi	r31, 0x0F	; 15
     be0:	36 95       	lsr	r19
     be2:	27 95       	ror	r18
     be4:	17 95       	ror	r17
     be6:	07 95       	ror	r16
     be8:	fa 95       	dec	r31
     bea:	d1 f7       	brne	.-12     	; 0xbe0 <millis+0x2a>
     bec:	f0 2d       	mov	r31, r0
     bee:	0f 5f       	subi	r16, 0xFF	; 255
     bf0:	1f 4f       	sbci	r17, 0xFF	; 255
     bf2:	10 93 80 00 	sts	0x0080, r17	; 0x800080 <g_ovf_count+0x1>
     bf6:	00 93 7f 00 	sts	0x007F, r16	; 0x80007f <g_ovf_count>

		//initialize timer0 with 1024 pre_scaler and activate the timer mode
		TCCR0 = 0x05;
     bfa:	25 e0       	ldi	r18, 0x05	; 5
     bfc:	23 bf       	out	0x33, r18	; 51
		#if (MILLIS_INTERRUPT == 1)
		TIMSK = (1 << 0); //enable timer0 interrupt
     bfe:	21 e0       	ldi	r18, 0x01	; 1
     c00:	29 bf       	out	0x39, r18	; 57
		//if the number of ovf is 1 meaning there is just the remaining ticks
		//make TCNT0=265-REMAINING_TICKS;
		//else TCNT=0
		g_last_ticks = REMAINING_TICKS;
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	88 7f       	andi	r24, 0xF8	; 248
     c08:	9f 77       	andi	r25, 0x7F	; 127
     c0a:	aa 27       	eor	r26, r26
     c0c:	bb 27       	eor	r27, r27
     c0e:	68 94       	set
     c10:	16 f8       	bld	r1, 6
     c12:	b6 95       	lsr	r27
     c14:	a7 95       	ror	r26
     c16:	97 95       	ror	r25
     c18:	87 95       	ror	r24
     c1a:	16 94       	lsr	r1
     c1c:	d1 f7       	brne	.-12     	; 0xc12 <millis+0x5c>
     c1e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <g_last_ticks>
		#endif
		
		
		if(g_ovf_count == 1)
     c22:	20 91 7f 00 	lds	r18, 0x007F	; 0x80007f <g_ovf_count>
     c26:	30 91 80 00 	lds	r19, 0x0080	; 0x800080 <g_ovf_count+0x1>
     c2a:	21 30       	cpi	r18, 0x01	; 1
     c2c:	31 05       	cpc	r19, r1
     c2e:	29 f4       	brne	.+10     	; 0xc3a <millis+0x84>
			TCNT0 = 256 - REMAINING_TICKS;
     c30:	68 2f       	mov	r22, r24
     c32:	61 95       	neg	r22
     c34:	62 bf       	out	0x32, r22	; 50
		}

	}
	#endif
	
	return true;
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	19 c0       	rjmp	.+50     	; 0xc6c <millis+0xb6>
		#endif
		
		
		if(g_ovf_count == 1)
			TCNT0 = 256 - REMAINING_TICKS;
		else if ( g_ovf_count > 1) 
     c3a:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <g_ovf_count>
     c3e:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <g_ovf_count+0x1>
     c42:	02 97       	sbiw	r24, 0x02	; 2
     c44:	80 f0       	brcs	.+32     	; 0xc66 <millis+0xb0>
			TCNT0 = 0;
     c46:	12 be       	out	0x32, r1	; 50
		}

	}
	#endif
	
	return true;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	10 c0       	rjmp	.+32     	; 0xc6c <millis+0xb6>
			TCNT0 = 0;


	}// the below part is different between interrupt millis and polling millis   
	#if (MILLIS_INTERRUPT == 1)
	else if (g_ovf_count == 0) // we only check for the timeout state(g_ovf_count reaches 0) other states are handled in the OVF ISR
     c4c:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <g_ovf_count>
     c50:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <g_ovf_count+0x1>
     c54:	89 2b       	or	r24, r25
     c56:	49 f4       	brne	.+18     	; 0xc6a <millis+0xb4>
	{
		TCCR0 = 0;//disable the timer and return false
     c58:	13 be       	out	0x33, r1	; 51
		TCNT0 = 0;
     c5a:	12 be       	out	0x32, r1	; 50
		TIMSK &= ~(1<<0);
     c5c:	89 b7       	in	r24, 0x39	; 57
     c5e:	8e 7f       	andi	r24, 0xFE	; 254
     c60:	89 bf       	out	0x39, r24	; 57
		return false;
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	03 c0       	rjmp	.+6      	; 0xc6c <millis+0xb6>
		}

	}
	#endif
	
	return true;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <millis+0xb6>
     c6a:	81 e0       	ldi	r24, 0x01	; 1
}
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	08 95       	ret

00000c72 <MQ2_get_res>:
}

//-----------------------------------------------------
//reads the analog value then derives the Resistance value value
static float MQ2_get_res()
{
     c72:	8f 92       	push	r8
     c74:	9f 92       	push	r9
     c76:	af 92       	push	r10
     c78:	bf 92       	push	r11
     c7a:	cf 92       	push	r12
     c7c:	df 92       	push	r13
     c7e:	ef 92       	push	r14
     c80:	ff 92       	push	r15
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	c2 e3       	ldi	r28, 0x32	; 50
	char arr[10];
	unsigned char i;
	float rs = 0;
     c8a:	c1 2c       	mov	r12, r1
     c8c:	d1 2c       	mov	r13, r1
     c8e:	76 01       	movw	r14, r12
	);
}

void _delay_ms_loop(uint16_t __count)
{
	__asm__ volatile (
     c90:	00 e2       	ldi	r16, 0x20	; 32
     c92:	1e e4       	ldi	r17, 0x4E	; 78
	//rs = MQ2_CALC_R_VALUE(adc_result);
	
	
	for (i = 0; i < READ_SAMPLE_TIMES; i++ )
	{
		adc_result = ADC_read(MQ2_PIN);
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	0e 94 8f 00 	call	0x11e	; 0x11e <ADC_read>
		rs += MQ2_CALC_R_VALUE(adc_result);
     c9a:	bc 01       	movw	r22, r24
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 43 09 	call	0x1286	; 0x1286 <__floatunsisf>
     ca4:	4b 01       	movw	r8, r22
     ca6:	5c 01       	movw	r10, r24
     ca8:	9b 01       	movw	r18, r22
     caa:	ac 01       	movw	r20, r24
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 ec       	ldi	r23, 0xC0	; 192
     cb0:	8f e7       	ldi	r24, 0x7F	; 127
     cb2:	94 e4       	ldi	r25, 0x44	; 68
     cb4:	0e 94 35 08 	call	0x106a	; 0x106a <__subsf3>
     cb8:	a5 01       	movw	r20, r10
     cba:	94 01       	movw	r18, r8
     cbc:	0e 94 a2 08 	call	0x1144	; 0x1144 <__divsf3>
     cc0:	9b 01       	movw	r18, r22
     cc2:	ac 01       	movw	r20, r24
     cc4:	c7 01       	movw	r24, r14
     cc6:	b6 01       	movw	r22, r12
     cc8:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     ccc:	6b 01       	movw	r12, r22
     cce:	7c 01       	movw	r14, r24
     cd0:	c8 01       	movw	r24, r16
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <MQ2_get_res+0x60>
     cd6:	c1 50       	subi	r28, 0x01	; 1
	
	//adc_result = ADC_read(MQ2_PIN);
	//rs = MQ2_CALC_R_VALUE(adc_result);
	
	
	for (i = 0; i < READ_SAMPLE_TIMES; i++ )
     cd8:	e9 f6       	brne	.-70     	; 0xc94 <MQ2_get_res+0x22>
	UART_sendStrByMark(arr, 0);
	UART_sendChr(13);
	UART_sendChr(10);
*/
	
	return rs;
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	48 e4       	ldi	r20, 0x48	; 72
     ce0:	52 e4       	ldi	r21, 0x42	; 66
     ce2:	c7 01       	movw	r24, r14
     ce4:	b6 01       	movw	r22, r12
     ce6:	0e 94 a2 08 	call	0x1144	; 0x1144 <__divsf3>
}
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	bf 90       	pop	r11
     cfa:	af 90       	pop	r10
     cfc:	9f 90       	pop	r9
     cfe:	8f 90       	pop	r8
     d00:	08 95       	ret

00000d02 <MQ2_init>:


void MQ2_init()
{
     d02:	8f 92       	push	r8
     d04:	9f 92       	push	r9
     d06:	af 92       	push	r10
     d08:	bf 92       	push	r11
     d0a:	cf 92       	push	r12
     d0c:	df 92       	push	r13
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
	ADC_init();
     d18:	0e 94 8a 00 	call	0x114	; 0x114 <ADC_init>
     d1c:	1a e0       	ldi	r17, 0x0A	; 10
static float MQ2_Calibration()
{
	char arr[10];
	
	unsigned char i;
	float val = 0;
     d1e:	c1 2c       	mov	r12, r1
     d20:	d1 2c       	mov	r13, r1
     d22:	76 01       	movw	r14, r12
     d24:	c8 ec       	ldi	r28, 0xC8	; 200
     d26:	d0 e0       	ldi	r29, 0x00	; 0
	for (i = 0; i < CALIBARAION_SAMPLE_TIMES; i++ ) 
	{   
		//take multiple samples
		//it derives the resistance Rs from the analog read
		//applying the voltage divider formula to get the result
		adc_result = ADC_read(MQ2_PIN);
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	0e 94 8f 00 	call	0x11e	; 0x11e <ADC_read>
		val += MQ2_CALC_R_VALUE(adc_result);
     d2e:	bc 01       	movw	r22, r24
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 43 09 	call	0x1286	; 0x1286 <__floatunsisf>
     d38:	4b 01       	movw	r8, r22
     d3a:	5c 01       	movw	r10, r24
     d3c:	9b 01       	movw	r18, r22
     d3e:	ac 01       	movw	r20, r24
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	70 ec       	ldi	r23, 0xC0	; 192
     d44:	8f e7       	ldi	r24, 0x7F	; 127
     d46:	94 e4       	ldi	r25, 0x44	; 68
     d48:	0e 94 35 08 	call	0x106a	; 0x106a <__subsf3>
     d4c:	a5 01       	movw	r20, r10
     d4e:	94 01       	movw	r18, r8
     d50:	0e 94 a2 08 	call	0x1144	; 0x1144 <__divsf3>
     d54:	9b 01       	movw	r18, r22
     d56:	ac 01       	movw	r20, r24
     d58:	c7 01       	movw	r24, r14
     d5a:	b6 01       	movw	r22, r12
     d5c:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     d60:	6b 01       	movw	r12, r22
     d62:	7c 01       	movw	r14, r24
     d64:	88 e8       	ldi	r24, 0x88	; 136
     d66:	93 e1       	ldi	r25, 0x13	; 19
     d68:	fe 01       	movw	r30, r28
     d6a:	31 97       	sbiw	r30, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <MQ2_init+0x68>
     d6e:	01 97       	sbiw	r24, 0x01	; 1
	}
	else if (tmp > 65535)
	{
		ticks = (uint16_t)(ms_time * 10.0);
		
		while(ticks)
     d70:	d9 f7       	brne	.-10     	; 0xd68 <MQ2_init+0x66>
     d72:	11 50       	subi	r17, 0x01	; 1
	unint16_t adc_result;
	
	//adc_result = ADC_read(MQ2_PIN);
	//val = MQ2_CALC_R_VALUE(adc_result);
	
	for (i = 0; i < CALIBARAION_SAMPLE_TIMES; i++ ) 
     d74:	c9 f6       	brne	.-78     	; 0xd28 <MQ2_init+0x26>
		adc_result = ADC_read(MQ2_PIN);
		val += MQ2_CALC_R_VALUE(adc_result);
		delay_msec(CALIBRATION_SAMPLE_INTERVAL);
	}
	//calculate the average value
	val = val / CALIBARAION_SAMPLE_TIMES;
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	40 e2       	ldi	r20, 0x20	; 32
     d7c:	51 e4       	ldi	r21, 0x41	; 65
     d7e:	c7 01       	movw	r24, r14
     d80:	b6 01       	movw	r22, r12
     d82:	0e 94 a2 08 	call	0x1144	; 0x1144 <__divsf3>


void MQ2_init()
{
	ADC_init();
	MQ2_R0 = MQ2_Calibration();
     d86:	2e ea       	ldi	r18, 0xAE	; 174
     d88:	37 e4       	ldi	r19, 0x47	; 71
     d8a:	4d e1       	ldi	r20, 0x1D	; 29
     d8c:	51 e4       	ldi	r21, 0x41	; 65
     d8e:	0e 94 a2 08 	call	0x1144	; 0x1144 <__divsf3>
     d92:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <MQ2_R0>
     d96:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <MQ2_R0+0x1>
     d9a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <MQ2_R0+0x2>
     d9e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <MQ2_R0+0x3>
}
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	1f 91       	pop	r17
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	cf 90       	pop	r12
     db0:	bf 90       	pop	r11
     db2:	af 90       	pop	r10
     db4:	9f 90       	pop	r9
     db6:	8f 90       	pop	r8
     db8:	08 95       	ret

00000dba <MQ2_get_result>:

}*/

unint16_t MQ2_get_result()
{
	unint16_t ppm_result = MQ2_GetPercentage((MQ2_get_res(MQ2_PIN) / MQ2_R0), SMOKE_SLOPE, SMOKE_Y, SMOKE_X); 
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 39 06 	call	0xc72	; 0xc72 <MQ2_get_res>

static unsigned int MQ2_GetPercentage(float ratio, float m, float y, float x)
{
	char arr[10];
	double temp;
	temp = log10(ratio);
     dc2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <MQ2_R0>
     dc6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <MQ2_R0+0x1>
     dca:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <MQ2_R0+0x2>
     dce:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <MQ2_R0+0x3>
     dd2:	0e 94 a2 08 	call	0x1144	; 0x1144 <__divsf3>
     dd6:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <log10>
		UART_sendStrByMark("log10 value is", 0);
		UART_sendStrByMark(arr, 0);
		UART_sendChr(13);
		UART_sendChr(10);*/
		
	temp = (((temp - y) / m) + x);
     dda:	24 e1       	ldi	r18, 0x14	; 20
     ddc:	3e ea       	ldi	r19, 0xAE	; 174
     dde:	47 e0       	ldi	r20, 0x07	; 7
     de0:	5f e3       	ldi	r21, 0x3F	; 63
     de2:	0e 94 35 08 	call	0x106a	; 0x106a <__subsf3>
     de6:	29 ea       	ldi	r18, 0xA9	; 169
     de8:	35 e0       	ldi	r19, 0x05	; 5
     dea:	43 ee       	ldi	r20, 0xE3	; 227
     dec:	5e eb       	ldi	r21, 0xBE	; 190
     dee:	0e 94 a2 08 	call	0x1144	; 0x1144 <__divsf3>
		UART_sendStrByMark(arr, 0);
		UART_sendChr(13);
		UART_sendChr(10);*/
				
		
	return (unint16_t)(pow(10,( ((log10(ratio) - y) / m) + x)));
     df2:	23 e3       	ldi	r18, 0x33	; 51
     df4:	33 e3       	ldi	r19, 0x33	; 51
     df6:	43 e1       	ldi	r20, 0x13	; 19
     df8:	50 e4       	ldi	r21, 0x40	; 64
     dfa:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
     dfe:	9b 01       	movw	r18, r22
     e00:	ac 01       	movw	r20, r24
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	80 e2       	ldi	r24, 0x20	; 32
     e08:	91 e4       	ldi	r25, 0x41	; 65
     e0a:	0e 94 96 0a 	call	0x152c	; 0x152c <pow>

unint16_t MQ2_get_result()
{
	unint16_t ppm_result = MQ2_GetPercentage((MQ2_get_res(MQ2_PIN) / MQ2_R0), SMOKE_SLOPE, SMOKE_Y, SMOKE_X); 
	
	return ppm_result;	
     e0e:	0e 94 14 09 	call	0x1228	; 0x1228 <__fixunssfsi>
     e12:	cb 01       	movw	r24, r22
     e14:	08 95       	ret

00000e16 <spi_send_str_size>:
	}
	
}

void spi_send_str_size(const unint8_t *Str, unint8_t size)
{
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
	unint8_t i = 0;
	
	while (i < size)
     e1e:	66 23       	and	r22, r22
     e20:	71 f0       	breq	.+28     	; 0xe3e <spi_send_str_size+0x28>
     e22:	ec 01       	movw	r28, r24
     e24:	61 50       	subi	r22, 0x01	; 1
     e26:	06 2f       	mov	r16, r22
     e28:	10 e0       	ldi	r17, 0x00	; 0
     e2a:	0f 5f       	subi	r16, 0xFF	; 255
     e2c:	1f 4f       	sbci	r17, 0xFF	; 255
     e2e:	08 0f       	add	r16, r24
     e30:	19 1f       	adc	r17, r25
	{
		spi_send(Str[i]);
     e32:	89 91       	ld	r24, Y+
     e34:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>

void spi_send_str_size(const unint8_t *Str, unint8_t size)
{
	unint8_t i = 0;
	
	while (i < size)
     e38:	c0 17       	cp	r28, r16
     e3a:	d1 07       	cpc	r29, r17
     e3c:	d1 f7       	brne	.-12     	; 0xe32 <spi_send_str_size+0x1c>
	{
		spi_send(Str[i]);
		i++;
	}
}
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	08 95       	ret

00000e48 <__vector_12>:
#include "spi_mcu_config.h"

static void ( * gp_spi_isr)(void);

void CONFIG_SPI_ISR() // finished
{
     e48:	1f 92       	push	r1
     e4a:	0f 92       	push	r0
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	0f 92       	push	r0
     e50:	11 24       	eor	r1, r1
     e52:	2f 93       	push	r18
     e54:	3f 93       	push	r19
     e56:	4f 93       	push	r20
     e58:	5f 93       	push	r21
     e5a:	6f 93       	push	r22
     e5c:	7f 93       	push	r23
     e5e:	8f 93       	push	r24
     e60:	9f 93       	push	r25
     e62:	af 93       	push	r26
     e64:	bf 93       	push	r27
     e66:	ef 93       	push	r30
     e68:	ff 93       	push	r31
	//-----------------------------------------------------------------------
	// we need to Global interrupt to prevent nested interrupt .
	cli();
     e6a:	f8 94       	cli
	//-----------------------------------------------------------------------

	gp_spi_isr();
     e6c:	e0 91 88 00 	lds	r30, 0x0088	; 0x800088 <gp_spi_isr>
     e70:	f0 91 89 00 	lds	r31, 0x0089	; 0x800089 <gp_spi_isr+0x1>
     e74:	09 95       	icall

	sei();
     e76:	78 94       	sei
}
     e78:	ff 91       	pop	r31
     e7a:	ef 91       	pop	r30
     e7c:	bf 91       	pop	r27
     e7e:	af 91       	pop	r26
     e80:	9f 91       	pop	r25
     e82:	8f 91       	pop	r24
     e84:	7f 91       	pop	r23
     e86:	6f 91       	pop	r22
     e88:	5f 91       	pop	r21
     e8a:	4f 91       	pop	r20
     e8c:	3f 91       	pop	r19
     e8e:	2f 91       	pop	r18
     e90:	0f 90       	pop	r0
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	0f 90       	pop	r0
     e96:	1f 90       	pop	r1
     e98:	18 95       	reti

00000e9a <spi_init>:


void spi_init()
{	
#if (SPI_NODE_TYPE == SPI_MASTER)
	DIO_SET_DIR(MOSI, DIO_OUTPUT);
     e9a:	61 e0       	ldi	r22, 0x01	; 1
     e9c:	8d e0       	ldi	r24, 0x0D	; 13
     e9e:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_set_pin_dir>
	DIO_SET_DIR(SS, DIO_OUTPUT);
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	8c e0       	ldi	r24, 0x0C	; 12
     ea6:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_set_pin_dir>
	DIO_SET_DIR(SCK, DIO_OUTPUT);
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	8f e0       	ldi	r24, 0x0F	; 15
     eae:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_set_pin_dir>
	DIO_SET_DIR(MISO, DIO_INPUT);
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	8e e0       	ldi	r24, 0x0E	; 14
     eb6:	0e 94 2e 01 	call	0x25c	; 0x25c <dio_set_pin_dir>
	
	//SPI_DIR  |= (1 << MOSI) | (1 << SCK) | (1 << SS);
	//SPI_DIR &= ~(1 << MISO);
	SPCR = (1 << SPE) | (DATA_ORDER << DORD) | 
     eba:	80 e5       	ldi	r24, 0x50	; 80
     ebc:	8d b9       	out	0x0d, r24	; 13
	       (1 << MSTR) | (POLARITY << CPOL) | (PHASE << CPHA) | (SPR0_1 << SPR0);
	SPSR = (SPI2X << SPI2X);
     ebe:	1e b8       	out	0x0e, r1	; 14
     ec0:	08 95       	ret

00000ec2 <spi_send>:
}


void spi_send(unint8_t data)
{
	SPDR = data; //send datA by SPI
     ec2:	8f b9       	out	0x0f, r24	; 15
	
// 	if (spi_int_stat() == false)
// 	{
		while(BIT_IS_CLEAR(SPSR,SPIF))
     ec4:	77 9b       	sbis	0x0e, 7	; 14
     ec6:	fe cf       	rjmp	.-4      	; 0xec4 <spi_send+0x2>
		{
			
		} //wait until SPI flag becomes 1 (data is sent correctly)
	//}
	
}
     ec8:	08 95       	ret

00000eca <spi_read>:

unint8_t spi_read(void)   /*here the slave must write the byte after that the master calls this function*/   
{
	
#if (SPI_NODE_TYPE == SPI_MASTER)
	spi_send('1');
     eca:	81 e3       	ldi	r24, 0x31	; 49
     ecc:	0e 94 61 07 	call	0xec2	; 0xec2 <spi_send>
		
	}
	
#endif

	return SPDR;
     ed0:	8f b1       	in	r24, 0x0f	; 15
}
     ed2:	08 95       	ret

00000ed4 <usart_write_str_mark>:
extern inline bool usart_is_data_ready(unint8_t usart_no);
#endif


void usart_write_str_mark(unint8_t usart_no, unint8_t * str, unint8_t mark)
{
     ed4:	ff 92       	push	r15
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	fb 01       	movw	r30, r22
	unint8_t i = 0;
	
	while(str[i] != mark)
     ee0:	60 81       	ld	r22, Z
     ee2:	46 17       	cp	r20, r22
     ee4:	71 f0       	breq	.+28     	; 0xf02 <usart_write_str_mark+0x2e>
     ee6:	d4 2f       	mov	r29, r20
     ee8:	8f 01       	movw	r16, r30
     eea:	f8 2e       	mov	r15, r24
     eec:	c0 e0       	ldi	r28, 0x00	; 0
	{
		usart_write(usart_no, str[i]);
     eee:	8f 2d       	mov	r24, r15
     ef0:	0e 94 2f 08 	call	0x105e	; 0x105e <usart_write>
		i++;
     ef4:	cf 5f       	subi	r28, 0xFF	; 255

void usart_write_str_mark(unint8_t usart_no, unint8_t * str, unint8_t mark)
{
	unint8_t i = 0;
	
	while(str[i] != mark)
     ef6:	f8 01       	movw	r30, r16
     ef8:	ec 0f       	add	r30, r28
     efa:	f1 1d       	adc	r31, r1
     efc:	60 81       	ld	r22, Z
     efe:	6d 13       	cpse	r22, r29
     f00:	f6 cf       	rjmp	.-20     	; 0xeee <usart_write_str_mark+0x1a>
	{
		usart_write(usart_no, str[i]);
		i++;
	}
}
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	08 95       	ret

00000f0e <__vector_15>:
	USART_RXC_ISR[0] = p_usart_rx_function;
}

void usart_set_tx_isr (unint8_t usart_no, void ( * p_usart_tx_function)(void))
{
	USART_TXC_ISR[0] = p_usart_tx_function;
     f0e:	1f 92       	push	r1
     f10:	0f 92       	push	r0
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	0f 92       	push	r0
     f16:	11 24       	eor	r1, r1
     f18:	2f 93       	push	r18
     f1a:	3f 93       	push	r19
     f1c:	4f 93       	push	r20
     f1e:	5f 93       	push	r21
     f20:	6f 93       	push	r22
     f22:	7f 93       	push	r23
     f24:	8f 93       	push	r24
     f26:	9f 93       	push	r25
     f28:	af 93       	push	r26
     f2a:	bf 93       	push	r27
     f2c:	ef 93       	push	r30
     f2e:	ff 93       	push	r31
     f30:	f8 94       	cli
     f32:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <USART_TXC_ISR>
     f36:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <USART_TXC_ISR+0x1>
     f3a:	30 97       	sbiw	r30, 0x00	; 0
     f3c:	09 f0       	breq	.+2      	; 0xf40 <__vector_15+0x32>
     f3e:	09 95       	icall
     f40:	78 94       	sei
     f42:	ff 91       	pop	r31
     f44:	ef 91       	pop	r30
     f46:	bf 91       	pop	r27
     f48:	af 91       	pop	r26
     f4a:	9f 91       	pop	r25
     f4c:	8f 91       	pop	r24
     f4e:	7f 91       	pop	r23
     f50:	6f 91       	pop	r22
     f52:	5f 91       	pop	r21
     f54:	4f 91       	pop	r20
     f56:	3f 91       	pop	r19
     f58:	2f 91       	pop	r18
     f5a:	0f 90       	pop	r0
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	0f 90       	pop	r0
     f60:	1f 90       	pop	r1
     f62:	18 95       	reti

00000f64 <__vector_13>:
     f64:	1f 92       	push	r1
     f66:	0f 92       	push	r0
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	0f 92       	push	r0
     f6c:	11 24       	eor	r1, r1
     f6e:	2f 93       	push	r18
     f70:	3f 93       	push	r19
     f72:	4f 93       	push	r20
     f74:	5f 93       	push	r21
     f76:	6f 93       	push	r22
     f78:	7f 93       	push	r23
     f7a:	8f 93       	push	r24
     f7c:	9f 93       	push	r25
     f7e:	af 93       	push	r26
     f80:	bf 93       	push	r27
     f82:	ef 93       	push	r30
     f84:	ff 93       	push	r31
     f86:	f8 94       	cli
     f88:	e0 91 8a 00 	lds	r30, 0x008A	; 0x80008a <USART_RXC_ISR>
     f8c:	f0 91 8b 00 	lds	r31, 0x008B	; 0x80008b <USART_RXC_ISR+0x1>
     f90:	30 97       	sbiw	r30, 0x00	; 0
     f92:	09 f0       	breq	.+2      	; 0xf96 <__vector_13+0x32>
     f94:	09 95       	icall
     f96:	78 94       	sei
     f98:	ff 91       	pop	r31
     f9a:	ef 91       	pop	r30
     f9c:	bf 91       	pop	r27
     f9e:	af 91       	pop	r26
     fa0:	9f 91       	pop	r25
     fa2:	8f 91       	pop	r24
     fa4:	7f 91       	pop	r23
     fa6:	6f 91       	pop	r22
     fa8:	5f 91       	pop	r21
     faa:	4f 91       	pop	r20
     fac:	3f 91       	pop	r19
     fae:	2f 91       	pop	r18
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	0f 90       	pop	r0
     fb6:	1f 90       	pop	r1
     fb8:	18 95       	reti

00000fba <usart_init>:
}

/***************************************************/
void usart_init (uint8_t usart_no, uint32_t baud_rate, uint8_t data_size, uint8_t tx_or_rx, uint8_t parity, uint8_t stop_bits, uint8_t sample_phase)
{
     fba:	af 92       	push	r10
     fbc:	cf 92       	push	r12
     fbe:	ef 92       	push	r14
     fc0:	ff 92       	push	r15
     fc2:	0f 93       	push	r16
     fc4:	cf 93       	push	r28
     fc6:	c2 2f       	mov	r28, r18
    if (USART0 == usart_no)
     fc8:	81 11       	cpse	r24, r1
     fca:	42 c0       	rjmp	.+132    	; 0x1050 <usart_init+0x96>
	{
		/*calculate UBBR value the formula is (CPU_FREQUENCY / (16_OR_8 * BAUD RATE))  -1 */
		unint16_t UBBR_value = FIXP_DIV(FIXP_FREQ, FIXP_MUL(FIXP_8_16, FIXP_BAUD, UART_PRECISION_BITS),
     fcc:	db 01       	movw	r26, r22
     fce:	ca 01       	movw	r24, r20
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	aa 1f       	adc	r26, r26
     fd6:	bb 1f       	adc	r27, r27
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	aa 1f       	adc	r26, r26
     fde:	bb 1f       	adc	r27, r27
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	aa 1f       	adc	r26, r26
     fe6:	bb 1f       	adc	r27, r27
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	aa 1f       	adc	r26, r26
     fee:	bb 1f       	adc	r27, r27
     ff0:	9c 01       	movw	r18, r24
     ff2:	ad 01       	movw	r20, r26
     ff4:	20 7f       	andi	r18, 0xF0	; 240
     ff6:	5f 77       	andi	r21, 0x7F	; 127
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	78 e4       	ldi	r23, 0x48	; 72
     ffc:	88 ee       	ldi	r24, 0xE8	; 232
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	0e 94 cb 0b 	call	0x1796	; 0x1796 <__udivmodsi4>
    1004:	22 50       	subi	r18, 0x02	; 2
    1006:	31 09       	sbc	r19, r1
										    UART_PRECISION_BITS) - (1<<UART_PRECISION_BITS);
		if ((UBBR_value & 1)) //if the precision bit is 0.1 in binary meaning 0.5 in decimal we should round up
    1008:	20 ff       	sbrs	r18, 0
    100a:	05 c0       	rjmp	.+10     	; 0x1016 <usart_init+0x5c>
		{
			UBBR_value = (UBBR_value >> 1) + 1; //remove the precision bit and round up
    100c:	36 95       	lsr	r19
    100e:	27 95       	ror	r18
    1010:	2f 5f       	subi	r18, 0xFF	; 255
    1012:	3f 4f       	sbci	r19, 0xFF	; 255
    1014:	02 c0       	rjmp	.+4      	; 0x101a <usart_init+0x60>
		}
		else //if the precision bit is not 0.1 in binary meaning less than 0.5 in decimal we should round down
		{
			UBBR_value >>= UART_PRECISION_BITS; // round down by just removing the precision bit
    1016:	36 95       	lsr	r19
    1018:	27 95       	ror	r18
		}
	
		//PORTB = UBBR_value; just for testing
		//setting the U2X bit to 1 for double speed asynchronous
		UCSRA = (DOUBLE_SPEED << U2X);	
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	8b b9       	out	0x0b, r24	; 11
			* RXEN  = 1/0 Receiver En/Disable
			* TXEN  = 1/0 Transmitter En/DisEnable
			* UCSZ2 = 0   For 8-bit data mode
			* RXB8 & TXB8 not used for 8-bit data mode
			***********************************************************************/ 
		UCSRB = (tx_or_rx << RXEN_TXEN) | (data_size & (1 << 2));
    101e:	00 0f       	add	r16, r16
    1020:	00 0f       	add	r16, r16
    1022:	00 0f       	add	r16, r16
    1024:	8c 2f       	mov	r24, r28
    1026:	84 70       	andi	r24, 0x04	; 4
    1028:	08 2b       	or	r16, r24
    102a:	0a b9       	out	0x0a, r16	; 10
			* UPM1:0  = 0 Disable parity bit
			* USBS    = 0 One stop bit
			* UCSZ1:0 = 11 For 8-bit data mode
			* UCPOL   = 0 Used with the Synchronous operation only
			***********************************************************************/ 
		UCSRC = (1 << URSEL) | (parity << UPM_0_1) | (stop_bits << USBS) | ((data_size & 0x03) << UCSZ_0_1) | (sample_phase << UCPOL);
    102c:	cc 0c       	add	r12, r12
    102e:	cc 0c       	add	r12, r12
    1030:	cc 0c       	add	r12, r12
    1032:	8a 2d       	mov	r24, r10
    1034:	80 68       	ori	r24, 0x80	; 128
    1036:	ac 2c       	mov	r10, r12
    1038:	a8 2a       	or	r10, r24
    103a:	80 e1       	ldi	r24, 0x10	; 16
    103c:	e8 9e       	mul	r14, r24
    103e:	70 01       	movw	r14, r0
    1040:	11 24       	eor	r1, r1
    1042:	ea 28       	or	r14, r10
    1044:	c3 70       	andi	r28, 0x03	; 3
    1046:	cc 0f       	add	r28, r28
    1048:	ec 2a       	or	r14, r28
    104a:	e0 bc       	out	0x20, r14	; 32
 	
		//Put the upper part of the UBBR value here (bits 8 to 11)
		UBRRH = (unint8_t)(UBBR_value >> 8);
    104c:	30 bd       	out	0x20, r19	; 32
		//Put the remaining part of the UBBR value here
		UBRRL = (unint8_t)UBBR_value;
    104e:	29 b9       	out	0x09, r18	; 9
	}

}
    1050:	cf 91       	pop	r28
    1052:	0f 91       	pop	r16
    1054:	ff 90       	pop	r15
    1056:	ef 90       	pop	r14
    1058:	cf 90       	pop	r12
    105a:	af 90       	pop	r10
    105c:	08 95       	ret

0000105e <usart_write>:
void usart_write(unint8_t usart_no, unint8_t data)
{
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	//#if(DATA_REGISTER_EMPTY_INTERRUP==0) //if the send interrupt is not activated keep the flag polling
	if (BIT_IS_CLEAR(UCSRB, UDRIE))
    105e:	55 99       	sbic	0x0a, 5	; 10
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <usart_write+0x8>
	{
		while (BIT_IS_CLEAR(UCSRA,UDRE))
    1062:	5d 9b       	sbis	0x0b, 5	; 11
    1064:	fe cf       	rjmp	.-4      	; 0x1062 <usart_write+0x4>
	}

	
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	
	UDR = data;
    1066:	6c b9       	out	0x0c, r22	; 12
    1068:	08 95       	ret

0000106a <__subsf3>:
    106a:	50 58       	subi	r21, 0x80	; 128

0000106c <__addsf3>:
    106c:	bb 27       	eor	r27, r27
    106e:	aa 27       	eor	r26, r26
    1070:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3x>
    1074:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_round>
    1078:	0e 94 89 09 	call	0x1312	; 0x1312 <__fp_pscA>
    107c:	38 f0       	brcs	.+14     	; 0x108c <__addsf3+0x20>
    107e:	0e 94 90 09 	call	0x1320	; 0x1320 <__fp_pscB>
    1082:	20 f0       	brcs	.+8      	; 0x108c <__addsf3+0x20>
    1084:	39 f4       	brne	.+14     	; 0x1094 <__addsf3+0x28>
    1086:	9f 3f       	cpi	r25, 0xFF	; 255
    1088:	19 f4       	brne	.+6      	; 0x1090 <__addsf3+0x24>
    108a:	26 f4       	brtc	.+8      	; 0x1094 <__addsf3+0x28>
    108c:	0c 94 86 09 	jmp	0x130c	; 0x130c <__fp_nan>
    1090:	0e f4       	brtc	.+2      	; 0x1094 <__addsf3+0x28>
    1092:	e0 95       	com	r30
    1094:	e7 fb       	bst	r30, 7
    1096:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__fp_inf>

0000109a <__addsf3x>:
    109a:	e9 2f       	mov	r30, r25
    109c:	0e 94 a8 09 	call	0x1350	; 0x1350 <__fp_split3>
    10a0:	58 f3       	brcs	.-42     	; 0x1078 <__addsf3+0xc>
    10a2:	ba 17       	cp	r27, r26
    10a4:	62 07       	cpc	r22, r18
    10a6:	73 07       	cpc	r23, r19
    10a8:	84 07       	cpc	r24, r20
    10aa:	95 07       	cpc	r25, r21
    10ac:	20 f0       	brcs	.+8      	; 0x10b6 <__addsf3x+0x1c>
    10ae:	79 f4       	brne	.+30     	; 0x10ce <__addsf3x+0x34>
    10b0:	a6 f5       	brtc	.+104    	; 0x111a <__addsf3x+0x80>
    10b2:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__fp_zero>
    10b6:	0e f4       	brtc	.+2      	; 0x10ba <__addsf3x+0x20>
    10b8:	e0 95       	com	r30
    10ba:	0b 2e       	mov	r0, r27
    10bc:	ba 2f       	mov	r27, r26
    10be:	a0 2d       	mov	r26, r0
    10c0:	0b 01       	movw	r0, r22
    10c2:	b9 01       	movw	r22, r18
    10c4:	90 01       	movw	r18, r0
    10c6:	0c 01       	movw	r0, r24
    10c8:	ca 01       	movw	r24, r20
    10ca:	a0 01       	movw	r20, r0
    10cc:	11 24       	eor	r1, r1
    10ce:	ff 27       	eor	r31, r31
    10d0:	59 1b       	sub	r21, r25
    10d2:	99 f0       	breq	.+38     	; 0x10fa <__addsf3x+0x60>
    10d4:	59 3f       	cpi	r21, 0xF9	; 249
    10d6:	50 f4       	brcc	.+20     	; 0x10ec <__addsf3x+0x52>
    10d8:	50 3e       	cpi	r21, 0xE0	; 224
    10da:	68 f1       	brcs	.+90     	; 0x1136 <__addsf3x+0x9c>
    10dc:	1a 16       	cp	r1, r26
    10de:	f0 40       	sbci	r31, 0x00	; 0
    10e0:	a2 2f       	mov	r26, r18
    10e2:	23 2f       	mov	r18, r19
    10e4:	34 2f       	mov	r19, r20
    10e6:	44 27       	eor	r20, r20
    10e8:	58 5f       	subi	r21, 0xF8	; 248
    10ea:	f3 cf       	rjmp	.-26     	; 0x10d2 <__addsf3x+0x38>
    10ec:	46 95       	lsr	r20
    10ee:	37 95       	ror	r19
    10f0:	27 95       	ror	r18
    10f2:	a7 95       	ror	r26
    10f4:	f0 40       	sbci	r31, 0x00	; 0
    10f6:	53 95       	inc	r21
    10f8:	c9 f7       	brne	.-14     	; 0x10ec <__addsf3x+0x52>
    10fa:	7e f4       	brtc	.+30     	; 0x111a <__addsf3x+0x80>
    10fc:	1f 16       	cp	r1, r31
    10fe:	ba 0b       	sbc	r27, r26
    1100:	62 0b       	sbc	r22, r18
    1102:	73 0b       	sbc	r23, r19
    1104:	84 0b       	sbc	r24, r20
    1106:	ba f0       	brmi	.+46     	; 0x1136 <__addsf3x+0x9c>
    1108:	91 50       	subi	r25, 0x01	; 1
    110a:	a1 f0       	breq	.+40     	; 0x1134 <__addsf3x+0x9a>
    110c:	ff 0f       	add	r31, r31
    110e:	bb 1f       	adc	r27, r27
    1110:	66 1f       	adc	r22, r22
    1112:	77 1f       	adc	r23, r23
    1114:	88 1f       	adc	r24, r24
    1116:	c2 f7       	brpl	.-16     	; 0x1108 <__addsf3x+0x6e>
    1118:	0e c0       	rjmp	.+28     	; 0x1136 <__addsf3x+0x9c>
    111a:	ba 0f       	add	r27, r26
    111c:	62 1f       	adc	r22, r18
    111e:	73 1f       	adc	r23, r19
    1120:	84 1f       	adc	r24, r20
    1122:	48 f4       	brcc	.+18     	; 0x1136 <__addsf3x+0x9c>
    1124:	87 95       	ror	r24
    1126:	77 95       	ror	r23
    1128:	67 95       	ror	r22
    112a:	b7 95       	ror	r27
    112c:	f7 95       	ror	r31
    112e:	9e 3f       	cpi	r25, 0xFE	; 254
    1130:	08 f0       	brcs	.+2      	; 0x1134 <__addsf3x+0x9a>
    1132:	b0 cf       	rjmp	.-160    	; 0x1094 <__addsf3+0x28>
    1134:	93 95       	inc	r25
    1136:	88 0f       	add	r24, r24
    1138:	08 f0       	brcs	.+2      	; 0x113c <__addsf3x+0xa2>
    113a:	99 27       	eor	r25, r25
    113c:	ee 0f       	add	r30, r30
    113e:	97 95       	ror	r25
    1140:	87 95       	ror	r24
    1142:	08 95       	ret

00001144 <__divsf3>:
    1144:	0e 94 b6 08 	call	0x116c	; 0x116c <__divsf3x>
    1148:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_round>
    114c:	0e 94 90 09 	call	0x1320	; 0x1320 <__fp_pscB>
    1150:	58 f0       	brcs	.+22     	; 0x1168 <__divsf3+0x24>
    1152:	0e 94 89 09 	call	0x1312	; 0x1312 <__fp_pscA>
    1156:	40 f0       	brcs	.+16     	; 0x1168 <__divsf3+0x24>
    1158:	29 f4       	brne	.+10     	; 0x1164 <__divsf3+0x20>
    115a:	5f 3f       	cpi	r21, 0xFF	; 255
    115c:	29 f0       	breq	.+10     	; 0x1168 <__divsf3+0x24>
    115e:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__fp_inf>
    1162:	51 11       	cpse	r21, r1
    1164:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__fp_szero>
    1168:	0c 94 86 09 	jmp	0x130c	; 0x130c <__fp_nan>

0000116c <__divsf3x>:
    116c:	0e 94 a8 09 	call	0x1350	; 0x1350 <__fp_split3>
    1170:	68 f3       	brcs	.-38     	; 0x114c <__divsf3+0x8>

00001172 <__divsf3_pse>:
    1172:	99 23       	and	r25, r25
    1174:	b1 f3       	breq	.-20     	; 0x1162 <__divsf3+0x1e>
    1176:	55 23       	and	r21, r21
    1178:	91 f3       	breq	.-28     	; 0x115e <__divsf3+0x1a>
    117a:	95 1b       	sub	r25, r21
    117c:	55 0b       	sbc	r21, r21
    117e:	bb 27       	eor	r27, r27
    1180:	aa 27       	eor	r26, r26
    1182:	62 17       	cp	r22, r18
    1184:	73 07       	cpc	r23, r19
    1186:	84 07       	cpc	r24, r20
    1188:	38 f0       	brcs	.+14     	; 0x1198 <__divsf3_pse+0x26>
    118a:	9f 5f       	subi	r25, 0xFF	; 255
    118c:	5f 4f       	sbci	r21, 0xFF	; 255
    118e:	22 0f       	add	r18, r18
    1190:	33 1f       	adc	r19, r19
    1192:	44 1f       	adc	r20, r20
    1194:	aa 1f       	adc	r26, r26
    1196:	a9 f3       	breq	.-22     	; 0x1182 <__divsf3_pse+0x10>
    1198:	35 d0       	rcall	.+106    	; 0x1204 <__divsf3_pse+0x92>
    119a:	0e 2e       	mov	r0, r30
    119c:	3a f0       	brmi	.+14     	; 0x11ac <__divsf3_pse+0x3a>
    119e:	e0 e8       	ldi	r30, 0x80	; 128
    11a0:	32 d0       	rcall	.+100    	; 0x1206 <__divsf3_pse+0x94>
    11a2:	91 50       	subi	r25, 0x01	; 1
    11a4:	50 40       	sbci	r21, 0x00	; 0
    11a6:	e6 95       	lsr	r30
    11a8:	00 1c       	adc	r0, r0
    11aa:	ca f7       	brpl	.-14     	; 0x119e <__divsf3_pse+0x2c>
    11ac:	2b d0       	rcall	.+86     	; 0x1204 <__divsf3_pse+0x92>
    11ae:	fe 2f       	mov	r31, r30
    11b0:	29 d0       	rcall	.+82     	; 0x1204 <__divsf3_pse+0x92>
    11b2:	66 0f       	add	r22, r22
    11b4:	77 1f       	adc	r23, r23
    11b6:	88 1f       	adc	r24, r24
    11b8:	bb 1f       	adc	r27, r27
    11ba:	26 17       	cp	r18, r22
    11bc:	37 07       	cpc	r19, r23
    11be:	48 07       	cpc	r20, r24
    11c0:	ab 07       	cpc	r26, r27
    11c2:	b0 e8       	ldi	r27, 0x80	; 128
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <__divsf3_pse+0x56>
    11c6:	bb 0b       	sbc	r27, r27
    11c8:	80 2d       	mov	r24, r0
    11ca:	bf 01       	movw	r22, r30
    11cc:	ff 27       	eor	r31, r31
    11ce:	93 58       	subi	r25, 0x83	; 131
    11d0:	5f 4f       	sbci	r21, 0xFF	; 255
    11d2:	3a f0       	brmi	.+14     	; 0x11e2 <__divsf3_pse+0x70>
    11d4:	9e 3f       	cpi	r25, 0xFE	; 254
    11d6:	51 05       	cpc	r21, r1
    11d8:	78 f0       	brcs	.+30     	; 0x11f8 <__divsf3_pse+0x86>
    11da:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__fp_inf>
    11de:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__fp_szero>
    11e2:	5f 3f       	cpi	r21, 0xFF	; 255
    11e4:	e4 f3       	brlt	.-8      	; 0x11de <__divsf3_pse+0x6c>
    11e6:	98 3e       	cpi	r25, 0xE8	; 232
    11e8:	d4 f3       	brlt	.-12     	; 0x11de <__divsf3_pse+0x6c>
    11ea:	86 95       	lsr	r24
    11ec:	77 95       	ror	r23
    11ee:	67 95       	ror	r22
    11f0:	b7 95       	ror	r27
    11f2:	f7 95       	ror	r31
    11f4:	9f 5f       	subi	r25, 0xFF	; 255
    11f6:	c9 f7       	brne	.-14     	; 0x11ea <__divsf3_pse+0x78>
    11f8:	88 0f       	add	r24, r24
    11fa:	91 1d       	adc	r25, r1
    11fc:	96 95       	lsr	r25
    11fe:	87 95       	ror	r24
    1200:	97 f9       	bld	r25, 7
    1202:	08 95       	ret
    1204:	e1 e0       	ldi	r30, 0x01	; 1
    1206:	66 0f       	add	r22, r22
    1208:	77 1f       	adc	r23, r23
    120a:	88 1f       	adc	r24, r24
    120c:	bb 1f       	adc	r27, r27
    120e:	62 17       	cp	r22, r18
    1210:	73 07       	cpc	r23, r19
    1212:	84 07       	cpc	r24, r20
    1214:	ba 07       	cpc	r27, r26
    1216:	20 f0       	brcs	.+8      	; 0x1220 <__divsf3_pse+0xae>
    1218:	62 1b       	sub	r22, r18
    121a:	73 0b       	sbc	r23, r19
    121c:	84 0b       	sbc	r24, r20
    121e:	ba 0b       	sbc	r27, r26
    1220:	ee 1f       	adc	r30, r30
    1222:	88 f7       	brcc	.-30     	; 0x1206 <__divsf3_pse+0x94>
    1224:	e0 95       	com	r30
    1226:	08 95       	ret

00001228 <__fixunssfsi>:
    1228:	0e 94 b0 09 	call	0x1360	; 0x1360 <__fp_splitA>
    122c:	88 f0       	brcs	.+34     	; 0x1250 <__fixunssfsi+0x28>
    122e:	9f 57       	subi	r25, 0x7F	; 127
    1230:	98 f0       	brcs	.+38     	; 0x1258 <__fixunssfsi+0x30>
    1232:	b9 2f       	mov	r27, r25
    1234:	99 27       	eor	r25, r25
    1236:	b7 51       	subi	r27, 0x17	; 23
    1238:	b0 f0       	brcs	.+44     	; 0x1266 <__fixunssfsi+0x3e>
    123a:	e1 f0       	breq	.+56     	; 0x1274 <__fixunssfsi+0x4c>
    123c:	66 0f       	add	r22, r22
    123e:	77 1f       	adc	r23, r23
    1240:	88 1f       	adc	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	1a f0       	brmi	.+6      	; 0x124c <__fixunssfsi+0x24>
    1246:	ba 95       	dec	r27
    1248:	c9 f7       	brne	.-14     	; 0x123c <__fixunssfsi+0x14>
    124a:	14 c0       	rjmp	.+40     	; 0x1274 <__fixunssfsi+0x4c>
    124c:	b1 30       	cpi	r27, 0x01	; 1
    124e:	91 f0       	breq	.+36     	; 0x1274 <__fixunssfsi+0x4c>
    1250:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fp_zero>
    1254:	b1 e0       	ldi	r27, 0x01	; 1
    1256:	08 95       	ret
    1258:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__fp_zero>
    125c:	67 2f       	mov	r22, r23
    125e:	78 2f       	mov	r23, r24
    1260:	88 27       	eor	r24, r24
    1262:	b8 5f       	subi	r27, 0xF8	; 248
    1264:	39 f0       	breq	.+14     	; 0x1274 <__fixunssfsi+0x4c>
    1266:	b9 3f       	cpi	r27, 0xF9	; 249
    1268:	cc f3       	brlt	.-14     	; 0x125c <__fixunssfsi+0x34>
    126a:	86 95       	lsr	r24
    126c:	77 95       	ror	r23
    126e:	67 95       	ror	r22
    1270:	b3 95       	inc	r27
    1272:	d9 f7       	brne	.-10     	; 0x126a <__fixunssfsi+0x42>
    1274:	3e f4       	brtc	.+14     	; 0x1284 <__fixunssfsi+0x5c>
    1276:	90 95       	com	r25
    1278:	80 95       	com	r24
    127a:	70 95       	com	r23
    127c:	61 95       	neg	r22
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	8f 4f       	sbci	r24, 0xFF	; 255
    1282:	9f 4f       	sbci	r25, 0xFF	; 255
    1284:	08 95       	ret

00001286 <__floatunsisf>:
    1286:	e8 94       	clt
    1288:	09 c0       	rjmp	.+18     	; 0x129c <__floatsisf+0x12>

0000128a <__floatsisf>:
    128a:	97 fb       	bst	r25, 7
    128c:	3e f4       	brtc	.+14     	; 0x129c <__floatsisf+0x12>
    128e:	90 95       	com	r25
    1290:	80 95       	com	r24
    1292:	70 95       	com	r23
    1294:	61 95       	neg	r22
    1296:	7f 4f       	sbci	r23, 0xFF	; 255
    1298:	8f 4f       	sbci	r24, 0xFF	; 255
    129a:	9f 4f       	sbci	r25, 0xFF	; 255
    129c:	99 23       	and	r25, r25
    129e:	a9 f0       	breq	.+42     	; 0x12ca <__floatsisf+0x40>
    12a0:	f9 2f       	mov	r31, r25
    12a2:	96 e9       	ldi	r25, 0x96	; 150
    12a4:	bb 27       	eor	r27, r27
    12a6:	93 95       	inc	r25
    12a8:	f6 95       	lsr	r31
    12aa:	87 95       	ror	r24
    12ac:	77 95       	ror	r23
    12ae:	67 95       	ror	r22
    12b0:	b7 95       	ror	r27
    12b2:	f1 11       	cpse	r31, r1
    12b4:	f8 cf       	rjmp	.-16     	; 0x12a6 <__floatsisf+0x1c>
    12b6:	fa f4       	brpl	.+62     	; 0x12f6 <__floatsisf+0x6c>
    12b8:	bb 0f       	add	r27, r27
    12ba:	11 f4       	brne	.+4      	; 0x12c0 <__floatsisf+0x36>
    12bc:	60 ff       	sbrs	r22, 0
    12be:	1b c0       	rjmp	.+54     	; 0x12f6 <__floatsisf+0x6c>
    12c0:	6f 5f       	subi	r22, 0xFF	; 255
    12c2:	7f 4f       	sbci	r23, 0xFF	; 255
    12c4:	8f 4f       	sbci	r24, 0xFF	; 255
    12c6:	9f 4f       	sbci	r25, 0xFF	; 255
    12c8:	16 c0       	rjmp	.+44     	; 0x12f6 <__floatsisf+0x6c>
    12ca:	88 23       	and	r24, r24
    12cc:	11 f0       	breq	.+4      	; 0x12d2 <__floatsisf+0x48>
    12ce:	96 e9       	ldi	r25, 0x96	; 150
    12d0:	11 c0       	rjmp	.+34     	; 0x12f4 <__floatsisf+0x6a>
    12d2:	77 23       	and	r23, r23
    12d4:	21 f0       	breq	.+8      	; 0x12de <__floatsisf+0x54>
    12d6:	9e e8       	ldi	r25, 0x8E	; 142
    12d8:	87 2f       	mov	r24, r23
    12da:	76 2f       	mov	r23, r22
    12dc:	05 c0       	rjmp	.+10     	; 0x12e8 <__floatsisf+0x5e>
    12de:	66 23       	and	r22, r22
    12e0:	71 f0       	breq	.+28     	; 0x12fe <__floatsisf+0x74>
    12e2:	96 e8       	ldi	r25, 0x86	; 134
    12e4:	86 2f       	mov	r24, r22
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	2a f0       	brmi	.+10     	; 0x12f6 <__floatsisf+0x6c>
    12ec:	9a 95       	dec	r25
    12ee:	66 0f       	add	r22, r22
    12f0:	77 1f       	adc	r23, r23
    12f2:	88 1f       	adc	r24, r24
    12f4:	da f7       	brpl	.-10     	; 0x12ec <__floatsisf+0x62>
    12f6:	88 0f       	add	r24, r24
    12f8:	96 95       	lsr	r25
    12fa:	87 95       	ror	r24
    12fc:	97 f9       	bld	r25, 7
    12fe:	08 95       	ret

00001300 <__fp_inf>:
    1300:	97 f9       	bld	r25, 7
    1302:	9f 67       	ori	r25, 0x7F	; 127
    1304:	80 e8       	ldi	r24, 0x80	; 128
    1306:	70 e0       	ldi	r23, 0x00	; 0
    1308:	60 e0       	ldi	r22, 0x00	; 0
    130a:	08 95       	ret

0000130c <__fp_nan>:
    130c:	9f ef       	ldi	r25, 0xFF	; 255
    130e:	80 ec       	ldi	r24, 0xC0	; 192
    1310:	08 95       	ret

00001312 <__fp_pscA>:
    1312:	00 24       	eor	r0, r0
    1314:	0a 94       	dec	r0
    1316:	16 16       	cp	r1, r22
    1318:	17 06       	cpc	r1, r23
    131a:	18 06       	cpc	r1, r24
    131c:	09 06       	cpc	r0, r25
    131e:	08 95       	ret

00001320 <__fp_pscB>:
    1320:	00 24       	eor	r0, r0
    1322:	0a 94       	dec	r0
    1324:	12 16       	cp	r1, r18
    1326:	13 06       	cpc	r1, r19
    1328:	14 06       	cpc	r1, r20
    132a:	05 06       	cpc	r0, r21
    132c:	08 95       	ret

0000132e <__fp_round>:
    132e:	09 2e       	mov	r0, r25
    1330:	03 94       	inc	r0
    1332:	00 0c       	add	r0, r0
    1334:	11 f4       	brne	.+4      	; 0x133a <__fp_round+0xc>
    1336:	88 23       	and	r24, r24
    1338:	52 f0       	brmi	.+20     	; 0x134e <__fp_round+0x20>
    133a:	bb 0f       	add	r27, r27
    133c:	40 f4       	brcc	.+16     	; 0x134e <__fp_round+0x20>
    133e:	bf 2b       	or	r27, r31
    1340:	11 f4       	brne	.+4      	; 0x1346 <__fp_round+0x18>
    1342:	60 ff       	sbrs	r22, 0
    1344:	04 c0       	rjmp	.+8      	; 0x134e <__fp_round+0x20>
    1346:	6f 5f       	subi	r22, 0xFF	; 255
    1348:	7f 4f       	sbci	r23, 0xFF	; 255
    134a:	8f 4f       	sbci	r24, 0xFF	; 255
    134c:	9f 4f       	sbci	r25, 0xFF	; 255
    134e:	08 95       	ret

00001350 <__fp_split3>:
    1350:	57 fd       	sbrc	r21, 7
    1352:	90 58       	subi	r25, 0x80	; 128
    1354:	44 0f       	add	r20, r20
    1356:	55 1f       	adc	r21, r21
    1358:	59 f0       	breq	.+22     	; 0x1370 <__fp_splitA+0x10>
    135a:	5f 3f       	cpi	r21, 0xFF	; 255
    135c:	71 f0       	breq	.+28     	; 0x137a <__fp_splitA+0x1a>
    135e:	47 95       	ror	r20

00001360 <__fp_splitA>:
    1360:	88 0f       	add	r24, r24
    1362:	97 fb       	bst	r25, 7
    1364:	99 1f       	adc	r25, r25
    1366:	61 f0       	breq	.+24     	; 0x1380 <__fp_splitA+0x20>
    1368:	9f 3f       	cpi	r25, 0xFF	; 255
    136a:	79 f0       	breq	.+30     	; 0x138a <__fp_splitA+0x2a>
    136c:	87 95       	ror	r24
    136e:	08 95       	ret
    1370:	12 16       	cp	r1, r18
    1372:	13 06       	cpc	r1, r19
    1374:	14 06       	cpc	r1, r20
    1376:	55 1f       	adc	r21, r21
    1378:	f2 cf       	rjmp	.-28     	; 0x135e <__fp_split3+0xe>
    137a:	46 95       	lsr	r20
    137c:	f1 df       	rcall	.-30     	; 0x1360 <__fp_splitA>
    137e:	08 c0       	rjmp	.+16     	; 0x1390 <__fp_splitA+0x30>
    1380:	16 16       	cp	r1, r22
    1382:	17 06       	cpc	r1, r23
    1384:	18 06       	cpc	r1, r24
    1386:	99 1f       	adc	r25, r25
    1388:	f1 cf       	rjmp	.-30     	; 0x136c <__fp_splitA+0xc>
    138a:	86 95       	lsr	r24
    138c:	71 05       	cpc	r23, r1
    138e:	61 05       	cpc	r22, r1
    1390:	08 94       	sec
    1392:	08 95       	ret

00001394 <__fp_zero>:
    1394:	e8 94       	clt

00001396 <__fp_szero>:
    1396:	bb 27       	eor	r27, r27
    1398:	66 27       	eor	r22, r22
    139a:	77 27       	eor	r23, r23
    139c:	cb 01       	movw	r24, r22
    139e:	97 f9       	bld	r25, 7
    13a0:	08 95       	ret

000013a2 <log10>:
    13a2:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <log>
    13a6:	29 ed       	ldi	r18, 0xD9	; 217
    13a8:	3b e5       	ldi	r19, 0x5B	; 91
    13aa:	4e ed       	ldi	r20, 0xDE	; 222
    13ac:	5e e3       	ldi	r21, 0x3E	; 62
    13ae:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__mulsf3>
    13b2:	16 f0       	brts	.+4      	; 0x13b8 <log10+0x16>
    13b4:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__fp_mpack>
    13b8:	0c 94 86 09 	jmp	0x130c	; 0x130c <__fp_nan>
    13bc:	68 94       	set
    13be:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__fp_inf>

000013c2 <log>:
    13c2:	0e 94 b0 09 	call	0x1360	; 0x1360 <__fp_splitA>
    13c6:	a8 f3       	brcs	.-22     	; 0x13b2 <log10+0x10>
    13c8:	99 23       	and	r25, r25
    13ca:	c1 f3       	breq	.-16     	; 0x13bc <log10+0x1a>
    13cc:	ae f3       	brts	.-22     	; 0x13b8 <log10+0x16>
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	1f 93       	push	r17
    13d4:	0f 93       	push	r16
    13d6:	ff 92       	push	r15
    13d8:	c9 2f       	mov	r28, r25
    13da:	dd 27       	eor	r29, r29
    13dc:	88 23       	and	r24, r24
    13de:	2a f0       	brmi	.+10     	; 0x13ea <log+0x28>
    13e0:	21 97       	sbiw	r28, 0x01	; 1
    13e2:	66 0f       	add	r22, r22
    13e4:	77 1f       	adc	r23, r23
    13e6:	88 1f       	adc	r24, r24
    13e8:	da f7       	brpl	.-10     	; 0x13e0 <log+0x1e>
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	40 e8       	ldi	r20, 0x80	; 128
    13f0:	5f eb       	ldi	r21, 0xBF	; 191
    13f2:	9f e3       	ldi	r25, 0x3F	; 63
    13f4:	88 39       	cpi	r24, 0x98	; 152
    13f6:	20 f0       	brcs	.+8      	; 0x1400 <log+0x3e>
    13f8:	80 3e       	cpi	r24, 0xE0	; 224
    13fa:	38 f0       	brcs	.+14     	; 0x140a <log+0x48>
    13fc:	21 96       	adiw	r28, 0x01	; 1
    13fe:	8f 77       	andi	r24, 0x7F	; 127
    1400:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
    1404:	e4 e5       	ldi	r30, 0x54	; 84
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	04 c0       	rjmp	.+8      	; 0x1412 <log+0x50>
    140a:	0e 94 36 08 	call	0x106c	; 0x106c <__addsf3>
    140e:	e1 e8       	ldi	r30, 0x81	; 129
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	0e 94 2e 0b 	call	0x165c	; 0x165c <__fp_powser>
    1416:	8b 01       	movw	r16, r22
    1418:	be 01       	movw	r22, r28
    141a:	ec 01       	movw	r28, r24
    141c:	fb 2e       	mov	r15, r27
    141e:	6f 57       	subi	r22, 0x7F	; 127
    1420:	71 09       	sbc	r23, r1
    1422:	75 95       	asr	r23
    1424:	77 1f       	adc	r23, r23
    1426:	88 0b       	sbc	r24, r24
    1428:	99 0b       	sbc	r25, r25
    142a:	0e 94 45 09 	call	0x128a	; 0x128a <__floatsisf>
    142e:	28 e1       	ldi	r18, 0x18	; 24
    1430:	32 e7       	ldi	r19, 0x72	; 114
    1432:	41 e3       	ldi	r20, 0x31	; 49
    1434:	5f e3       	ldi	r21, 0x3F	; 63
    1436:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__mulsf3x>
    143a:	af 2d       	mov	r26, r15
    143c:	98 01       	movw	r18, r16
    143e:	ae 01       	movw	r20, r28
    1440:	ff 90       	pop	r15
    1442:	0f 91       	pop	r16
    1444:	1f 91       	pop	r17
    1446:	cf 91       	pop	r28
    1448:	df 91       	pop	r29
    144a:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3x>
    144e:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_round>

00001452 <__mulsf3>:
    1452:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__mulsf3x>
    1456:	0c 94 97 09 	jmp	0x132e	; 0x132e <__fp_round>
    145a:	0e 94 89 09 	call	0x1312	; 0x1312 <__fp_pscA>
    145e:	38 f0       	brcs	.+14     	; 0x146e <__mulsf3+0x1c>
    1460:	0e 94 90 09 	call	0x1320	; 0x1320 <__fp_pscB>
    1464:	20 f0       	brcs	.+8      	; 0x146e <__mulsf3+0x1c>
    1466:	95 23       	and	r25, r21
    1468:	11 f0       	breq	.+4      	; 0x146e <__mulsf3+0x1c>
    146a:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__fp_inf>
    146e:	0c 94 86 09 	jmp	0x130c	; 0x130c <__fp_nan>
    1472:	11 24       	eor	r1, r1
    1474:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__fp_szero>

00001478 <__mulsf3x>:
    1478:	0e 94 a8 09 	call	0x1350	; 0x1350 <__fp_split3>
    147c:	70 f3       	brcs	.-36     	; 0x145a <__mulsf3+0x8>

0000147e <__mulsf3_pse>:
    147e:	95 9f       	mul	r25, r21
    1480:	c1 f3       	breq	.-16     	; 0x1472 <__mulsf3+0x20>
    1482:	95 0f       	add	r25, r21
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	55 1f       	adc	r21, r21
    1488:	62 9f       	mul	r22, r18
    148a:	f0 01       	movw	r30, r0
    148c:	72 9f       	mul	r23, r18
    148e:	bb 27       	eor	r27, r27
    1490:	f0 0d       	add	r31, r0
    1492:	b1 1d       	adc	r27, r1
    1494:	63 9f       	mul	r22, r19
    1496:	aa 27       	eor	r26, r26
    1498:	f0 0d       	add	r31, r0
    149a:	b1 1d       	adc	r27, r1
    149c:	aa 1f       	adc	r26, r26
    149e:	64 9f       	mul	r22, r20
    14a0:	66 27       	eor	r22, r22
    14a2:	b0 0d       	add	r27, r0
    14a4:	a1 1d       	adc	r26, r1
    14a6:	66 1f       	adc	r22, r22
    14a8:	82 9f       	mul	r24, r18
    14aa:	22 27       	eor	r18, r18
    14ac:	b0 0d       	add	r27, r0
    14ae:	a1 1d       	adc	r26, r1
    14b0:	62 1f       	adc	r22, r18
    14b2:	73 9f       	mul	r23, r19
    14b4:	b0 0d       	add	r27, r0
    14b6:	a1 1d       	adc	r26, r1
    14b8:	62 1f       	adc	r22, r18
    14ba:	83 9f       	mul	r24, r19
    14bc:	a0 0d       	add	r26, r0
    14be:	61 1d       	adc	r22, r1
    14c0:	22 1f       	adc	r18, r18
    14c2:	74 9f       	mul	r23, r20
    14c4:	33 27       	eor	r19, r19
    14c6:	a0 0d       	add	r26, r0
    14c8:	61 1d       	adc	r22, r1
    14ca:	23 1f       	adc	r18, r19
    14cc:	84 9f       	mul	r24, r20
    14ce:	60 0d       	add	r22, r0
    14d0:	21 1d       	adc	r18, r1
    14d2:	82 2f       	mov	r24, r18
    14d4:	76 2f       	mov	r23, r22
    14d6:	6a 2f       	mov	r22, r26
    14d8:	11 24       	eor	r1, r1
    14da:	9f 57       	subi	r25, 0x7F	; 127
    14dc:	50 40       	sbci	r21, 0x00	; 0
    14de:	9a f0       	brmi	.+38     	; 0x1506 <__mulsf3_pse+0x88>
    14e0:	f1 f0       	breq	.+60     	; 0x151e <__mulsf3_pse+0xa0>
    14e2:	88 23       	and	r24, r24
    14e4:	4a f0       	brmi	.+18     	; 0x14f8 <__mulsf3_pse+0x7a>
    14e6:	ee 0f       	add	r30, r30
    14e8:	ff 1f       	adc	r31, r31
    14ea:	bb 1f       	adc	r27, r27
    14ec:	66 1f       	adc	r22, r22
    14ee:	77 1f       	adc	r23, r23
    14f0:	88 1f       	adc	r24, r24
    14f2:	91 50       	subi	r25, 0x01	; 1
    14f4:	50 40       	sbci	r21, 0x00	; 0
    14f6:	a9 f7       	brne	.-22     	; 0x14e2 <__mulsf3_pse+0x64>
    14f8:	9e 3f       	cpi	r25, 0xFE	; 254
    14fa:	51 05       	cpc	r21, r1
    14fc:	80 f0       	brcs	.+32     	; 0x151e <__mulsf3_pse+0xa0>
    14fe:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__fp_inf>
    1502:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__fp_szero>
    1506:	5f 3f       	cpi	r21, 0xFF	; 255
    1508:	e4 f3       	brlt	.-8      	; 0x1502 <__mulsf3_pse+0x84>
    150a:	98 3e       	cpi	r25, 0xE8	; 232
    150c:	d4 f3       	brlt	.-12     	; 0x1502 <__mulsf3_pse+0x84>
    150e:	86 95       	lsr	r24
    1510:	77 95       	ror	r23
    1512:	67 95       	ror	r22
    1514:	b7 95       	ror	r27
    1516:	f7 95       	ror	r31
    1518:	e7 95       	ror	r30
    151a:	9f 5f       	subi	r25, 0xFF	; 255
    151c:	c1 f7       	brne	.-16     	; 0x150e <__mulsf3_pse+0x90>
    151e:	fe 2b       	or	r31, r30
    1520:	88 0f       	add	r24, r24
    1522:	91 1d       	adc	r25, r1
    1524:	96 95       	lsr	r25
    1526:	87 95       	ror	r24
    1528:	97 f9       	bld	r25, 7
    152a:	08 95       	ret

0000152c <pow>:
    152c:	fa 01       	movw	r30, r20
    152e:	ee 0f       	add	r30, r30
    1530:	ff 1f       	adc	r31, r31
    1532:	30 96       	adiw	r30, 0x00	; 0
    1534:	21 05       	cpc	r18, r1
    1536:	31 05       	cpc	r19, r1
    1538:	a1 f1       	breq	.+104    	; 0x15a2 <pow+0x76>
    153a:	61 15       	cp	r22, r1
    153c:	71 05       	cpc	r23, r1
    153e:	61 f4       	brne	.+24     	; 0x1558 <pow+0x2c>
    1540:	80 38       	cpi	r24, 0x80	; 128
    1542:	bf e3       	ldi	r27, 0x3F	; 63
    1544:	9b 07       	cpc	r25, r27
    1546:	49 f1       	breq	.+82     	; 0x159a <pow+0x6e>
    1548:	68 94       	set
    154a:	90 38       	cpi	r25, 0x80	; 128
    154c:	81 05       	cpc	r24, r1
    154e:	61 f0       	breq	.+24     	; 0x1568 <pow+0x3c>
    1550:	80 38       	cpi	r24, 0x80	; 128
    1552:	bf ef       	ldi	r27, 0xFF	; 255
    1554:	9b 07       	cpc	r25, r27
    1556:	41 f0       	breq	.+16     	; 0x1568 <pow+0x3c>
    1558:	99 23       	and	r25, r25
    155a:	4a f5       	brpl	.+82     	; 0x15ae <pow+0x82>
    155c:	ff 3f       	cpi	r31, 0xFF	; 255
    155e:	e1 05       	cpc	r30, r1
    1560:	31 05       	cpc	r19, r1
    1562:	21 05       	cpc	r18, r1
    1564:	19 f1       	breq	.+70     	; 0x15ac <pow+0x80>
    1566:	e8 94       	clt
    1568:	08 94       	sec
    156a:	e7 95       	ror	r30
    156c:	d9 01       	movw	r26, r18
    156e:	aa 23       	and	r26, r26
    1570:	29 f4       	brne	.+10     	; 0x157c <pow+0x50>
    1572:	ab 2f       	mov	r26, r27
    1574:	be 2f       	mov	r27, r30
    1576:	f8 5f       	subi	r31, 0xF8	; 248
    1578:	d0 f3       	brcs	.-12     	; 0x156e <pow+0x42>
    157a:	10 c0       	rjmp	.+32     	; 0x159c <pow+0x70>
    157c:	ff 5f       	subi	r31, 0xFF	; 255
    157e:	70 f4       	brcc	.+28     	; 0x159c <pow+0x70>
    1580:	a6 95       	lsr	r26
    1582:	e0 f7       	brcc	.-8      	; 0x157c <pow+0x50>
    1584:	f7 39       	cpi	r31, 0x97	; 151
    1586:	50 f0       	brcs	.+20     	; 0x159c <pow+0x70>
    1588:	19 f0       	breq	.+6      	; 0x1590 <pow+0x64>
    158a:	ff 3a       	cpi	r31, 0xAF	; 175
    158c:	38 f4       	brcc	.+14     	; 0x159c <pow+0x70>
    158e:	9f 77       	andi	r25, 0x7F	; 127
    1590:	9f 93       	push	r25
    1592:	0d d0       	rcall	.+26     	; 0x15ae <pow+0x82>
    1594:	0f 90       	pop	r0
    1596:	07 fc       	sbrc	r0, 7
    1598:	90 58       	subi	r25, 0x80	; 128
    159a:	08 95       	ret
    159c:	46 f0       	brts	.+16     	; 0x15ae <pow+0x82>
    159e:	0c 94 86 09 	jmp	0x130c	; 0x130c <__fp_nan>
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	80 e8       	ldi	r24, 0x80	; 128
    15a8:	9f e3       	ldi	r25, 0x3F	; 63
    15aa:	08 95       	ret
    15ac:	4f e7       	ldi	r20, 0x7F	; 127
    15ae:	9f 77       	andi	r25, 0x7F	; 127
    15b0:	5f 93       	push	r21
    15b2:	4f 93       	push	r20
    15b4:	3f 93       	push	r19
    15b6:	2f 93       	push	r18
    15b8:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <log>
    15bc:	2f 91       	pop	r18
    15be:	3f 91       	pop	r19
    15c0:	4f 91       	pop	r20
    15c2:	5f 91       	pop	r21
    15c4:	0e 94 29 0a 	call	0x1452	; 0x1452 <__mulsf3>
    15c8:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <exp>
    15cc:	29 f4       	brne	.+10     	; 0x15d8 <pow+0xac>
    15ce:	16 f0       	brts	.+4      	; 0x15d4 <pow+0xa8>
    15d0:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__fp_inf>
    15d4:	0c 94 ca 09 	jmp	0x1394	; 0x1394 <__fp_zero>
    15d8:	0c 94 86 09 	jmp	0x130c	; 0x130c <__fp_nan>

000015dc <exp>:
    15dc:	0e 94 b0 09 	call	0x1360	; 0x1360 <__fp_splitA>
    15e0:	a8 f3       	brcs	.-22     	; 0x15cc <pow+0xa0>
    15e2:	96 38       	cpi	r25, 0x86	; 134
    15e4:	a0 f7       	brcc	.-24     	; 0x15ce <pow+0xa2>
    15e6:	07 f8       	bld	r0, 7
    15e8:	0f 92       	push	r0
    15ea:	e8 94       	clt
    15ec:	2b e3       	ldi	r18, 0x3B	; 59
    15ee:	3a ea       	ldi	r19, 0xAA	; 170
    15f0:	48 eb       	ldi	r20, 0xB8	; 184
    15f2:	5f e7       	ldi	r21, 0x7F	; 127
    15f4:	0e 94 3f 0a 	call	0x147e	; 0x147e <__mulsf3_pse>
    15f8:	0f 92       	push	r0
    15fa:	0f 92       	push	r0
    15fc:	0f 92       	push	r0
    15fe:	4d b7       	in	r20, 0x3d	; 61
    1600:	5e b7       	in	r21, 0x3e	; 62
    1602:	0f 92       	push	r0
    1604:	0e 94 97 0b 	call	0x172e	; 0x172e <modf>
    1608:	ee ea       	ldi	r30, 0xAE	; 174
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	0e 94 2e 0b 	call	0x165c	; 0x165c <__fp_powser>
    1610:	4f 91       	pop	r20
    1612:	5f 91       	pop	r21
    1614:	ef 91       	pop	r30
    1616:	ff 91       	pop	r31
    1618:	e5 95       	asr	r30
    161a:	ee 1f       	adc	r30, r30
    161c:	ff 1f       	adc	r31, r31
    161e:	49 f0       	breq	.+18     	; 0x1632 <exp+0x56>
    1620:	fe 57       	subi	r31, 0x7E	; 126
    1622:	e0 68       	ori	r30, 0x80	; 128
    1624:	44 27       	eor	r20, r20
    1626:	ee 0f       	add	r30, r30
    1628:	44 1f       	adc	r20, r20
    162a:	fa 95       	dec	r31
    162c:	e1 f7       	brne	.-8      	; 0x1626 <exp+0x4a>
    162e:	41 95       	neg	r20
    1630:	55 0b       	sbc	r21, r21
    1632:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <ldexp>
    1636:	0f 90       	pop	r0
    1638:	07 fe       	sbrs	r0, 7
    163a:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <inverse>
    163e:	08 95       	ret

00001640 <__fp_mpack>:
    1640:	9f 3f       	cpi	r25, 0xFF	; 255
    1642:	31 f0       	breq	.+12     	; 0x1650 <__fp_mpack_finite+0xc>

00001644 <__fp_mpack_finite>:
    1644:	91 50       	subi	r25, 0x01	; 1
    1646:	20 f4       	brcc	.+8      	; 0x1650 <__fp_mpack_finite+0xc>
    1648:	87 95       	ror	r24
    164a:	77 95       	ror	r23
    164c:	67 95       	ror	r22
    164e:	b7 95       	ror	r27
    1650:	88 0f       	add	r24, r24
    1652:	91 1d       	adc	r25, r1
    1654:	96 95       	lsr	r25
    1656:	87 95       	ror	r24
    1658:	97 f9       	bld	r25, 7
    165a:	08 95       	ret

0000165c <__fp_powser>:
    165c:	df 93       	push	r29
    165e:	cf 93       	push	r28
    1660:	1f 93       	push	r17
    1662:	0f 93       	push	r16
    1664:	ff 92       	push	r15
    1666:	ef 92       	push	r14
    1668:	df 92       	push	r13
    166a:	7b 01       	movw	r14, r22
    166c:	8c 01       	movw	r16, r24
    166e:	68 94       	set
    1670:	06 c0       	rjmp	.+12     	; 0x167e <__fp_powser+0x22>
    1672:	da 2e       	mov	r13, r26
    1674:	ef 01       	movw	r28, r30
    1676:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__mulsf3x>
    167a:	fe 01       	movw	r30, r28
    167c:	e8 94       	clt
    167e:	a5 91       	lpm	r26, Z+
    1680:	25 91       	lpm	r18, Z+
    1682:	35 91       	lpm	r19, Z+
    1684:	45 91       	lpm	r20, Z+
    1686:	55 91       	lpm	r21, Z+
    1688:	a6 f3       	brts	.-24     	; 0x1672 <__fp_powser+0x16>
    168a:	ef 01       	movw	r28, r30
    168c:	0e 94 4d 08 	call	0x109a	; 0x109a <__addsf3x>
    1690:	fe 01       	movw	r30, r28
    1692:	97 01       	movw	r18, r14
    1694:	a8 01       	movw	r20, r16
    1696:	da 94       	dec	r13
    1698:	69 f7       	brne	.-38     	; 0x1674 <__fp_powser+0x18>
    169a:	df 90       	pop	r13
    169c:	ef 90       	pop	r14
    169e:	ff 90       	pop	r15
    16a0:	0f 91       	pop	r16
    16a2:	1f 91       	pop	r17
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret

000016aa <inverse>:
    16aa:	9b 01       	movw	r18, r22
    16ac:	ac 01       	movw	r20, r24
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	70 e0       	ldi	r23, 0x00	; 0
    16b2:	80 e8       	ldi	r24, 0x80	; 128
    16b4:	9f e3       	ldi	r25, 0x3F	; 63
    16b6:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <__divsf3>
    16ba:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__fp_inf>
    16be:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__fp_mpack>

000016c2 <ldexp>:
    16c2:	0e 94 b0 09 	call	0x1360	; 0x1360 <__fp_splitA>
    16c6:	d8 f3       	brcs	.-10     	; 0x16be <inverse+0x14>
    16c8:	99 23       	and	r25, r25
    16ca:	c9 f3       	breq	.-14     	; 0x16be <inverse+0x14>
    16cc:	94 0f       	add	r25, r20
    16ce:	51 1d       	adc	r21, r1
    16d0:	a3 f3       	brvs	.-24     	; 0x16ba <inverse+0x10>
    16d2:	91 50       	subi	r25, 0x01	; 1
    16d4:	50 40       	sbci	r21, 0x00	; 0
    16d6:	94 f0       	brlt	.+36     	; 0x16fc <ldexp+0x3a>
    16d8:	59 f0       	breq	.+22     	; 0x16f0 <ldexp+0x2e>
    16da:	88 23       	and	r24, r24
    16dc:	32 f0       	brmi	.+12     	; 0x16ea <ldexp+0x28>
    16de:	66 0f       	add	r22, r22
    16e0:	77 1f       	adc	r23, r23
    16e2:	88 1f       	adc	r24, r24
    16e4:	91 50       	subi	r25, 0x01	; 1
    16e6:	50 40       	sbci	r21, 0x00	; 0
    16e8:	c1 f7       	brne	.-16     	; 0x16da <ldexp+0x18>
    16ea:	9e 3f       	cpi	r25, 0xFE	; 254
    16ec:	51 05       	cpc	r21, r1
    16ee:	2c f7       	brge	.-54     	; 0x16ba <inverse+0x10>
    16f0:	88 0f       	add	r24, r24
    16f2:	91 1d       	adc	r25, r1
    16f4:	96 95       	lsr	r25
    16f6:	87 95       	ror	r24
    16f8:	97 f9       	bld	r25, 7
    16fa:	08 95       	ret
    16fc:	5f 3f       	cpi	r21, 0xFF	; 255
    16fe:	ac f0       	brlt	.+42     	; 0x172a <ldexp+0x68>
    1700:	98 3e       	cpi	r25, 0xE8	; 232
    1702:	9c f0       	brlt	.+38     	; 0x172a <ldexp+0x68>
    1704:	bb 27       	eor	r27, r27
    1706:	86 95       	lsr	r24
    1708:	77 95       	ror	r23
    170a:	67 95       	ror	r22
    170c:	b7 95       	ror	r27
    170e:	08 f4       	brcc	.+2      	; 0x1712 <ldexp+0x50>
    1710:	b1 60       	ori	r27, 0x01	; 1
    1712:	93 95       	inc	r25
    1714:	c1 f7       	brne	.-16     	; 0x1706 <ldexp+0x44>
    1716:	bb 0f       	add	r27, r27
    1718:	58 f7       	brcc	.-42     	; 0x16f0 <ldexp+0x2e>
    171a:	11 f4       	brne	.+4      	; 0x1720 <ldexp+0x5e>
    171c:	60 ff       	sbrs	r22, 0
    171e:	e8 cf       	rjmp	.-48     	; 0x16f0 <ldexp+0x2e>
    1720:	6f 5f       	subi	r22, 0xFF	; 255
    1722:	7f 4f       	sbci	r23, 0xFF	; 255
    1724:	8f 4f       	sbci	r24, 0xFF	; 255
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	e3 cf       	rjmp	.-58     	; 0x16f0 <ldexp+0x2e>
    172a:	0c 94 cb 09 	jmp	0x1396	; 0x1396 <__fp_szero>

0000172e <modf>:
    172e:	fa 01       	movw	r30, r20
    1730:	dc 01       	movw	r26, r24
    1732:	aa 0f       	add	r26, r26
    1734:	bb 1f       	adc	r27, r27
    1736:	9b 01       	movw	r18, r22
    1738:	ac 01       	movw	r20, r24
    173a:	bf 57       	subi	r27, 0x7F	; 127
    173c:	28 f4       	brcc	.+10     	; 0x1748 <modf+0x1a>
    173e:	22 27       	eor	r18, r18
    1740:	33 27       	eor	r19, r19
    1742:	44 27       	eor	r20, r20
    1744:	50 78       	andi	r21, 0x80	; 128
    1746:	20 c0       	rjmp	.+64     	; 0x1788 <modf+0x5a>
    1748:	b7 51       	subi	r27, 0x17	; 23
    174a:	90 f4       	brcc	.+36     	; 0x1770 <modf+0x42>
    174c:	ab 2f       	mov	r26, r27
    174e:	00 24       	eor	r0, r0
    1750:	46 95       	lsr	r20
    1752:	37 95       	ror	r19
    1754:	27 95       	ror	r18
    1756:	01 1c       	adc	r0, r1
    1758:	a3 95       	inc	r26
    175a:	d2 f3       	brmi	.-12     	; 0x1750 <modf+0x22>
    175c:	00 20       	and	r0, r0
    175e:	71 f0       	breq	.+28     	; 0x177c <modf+0x4e>
    1760:	22 0f       	add	r18, r18
    1762:	33 1f       	adc	r19, r19
    1764:	44 1f       	adc	r20, r20
    1766:	b3 95       	inc	r27
    1768:	da f3       	brmi	.-10     	; 0x1760 <modf+0x32>
    176a:	0e d0       	rcall	.+28     	; 0x1788 <modf+0x5a>
    176c:	0c 94 35 08 	jmp	0x106a	; 0x106a <__subsf3>
    1770:	61 30       	cpi	r22, 0x01	; 1
    1772:	71 05       	cpc	r23, r1
    1774:	a0 e8       	ldi	r26, 0x80	; 128
    1776:	8a 07       	cpc	r24, r26
    1778:	b9 46       	sbci	r27, 0x69	; 105
    177a:	30 f4       	brcc	.+12     	; 0x1788 <modf+0x5a>
    177c:	9b 01       	movw	r18, r22
    177e:	ac 01       	movw	r20, r24
    1780:	66 27       	eor	r22, r22
    1782:	77 27       	eor	r23, r23
    1784:	88 27       	eor	r24, r24
    1786:	90 78       	andi	r25, 0x80	; 128
    1788:	30 96       	adiw	r30, 0x00	; 0
    178a:	21 f0       	breq	.+8      	; 0x1794 <modf+0x66>
    178c:	20 83       	st	Z, r18
    178e:	31 83       	std	Z+1, r19	; 0x01
    1790:	42 83       	std	Z+2, r20	; 0x02
    1792:	53 83       	std	Z+3, r21	; 0x03
    1794:	08 95       	ret

00001796 <__udivmodsi4>:
    1796:	a1 e2       	ldi	r26, 0x21	; 33
    1798:	1a 2e       	mov	r1, r26
    179a:	aa 1b       	sub	r26, r26
    179c:	bb 1b       	sub	r27, r27
    179e:	fd 01       	movw	r30, r26
    17a0:	0d c0       	rjmp	.+26     	; 0x17bc <__udivmodsi4_ep>

000017a2 <__udivmodsi4_loop>:
    17a2:	aa 1f       	adc	r26, r26
    17a4:	bb 1f       	adc	r27, r27
    17a6:	ee 1f       	adc	r30, r30
    17a8:	ff 1f       	adc	r31, r31
    17aa:	a2 17       	cp	r26, r18
    17ac:	b3 07       	cpc	r27, r19
    17ae:	e4 07       	cpc	r30, r20
    17b0:	f5 07       	cpc	r31, r21
    17b2:	20 f0       	brcs	.+8      	; 0x17bc <__udivmodsi4_ep>
    17b4:	a2 1b       	sub	r26, r18
    17b6:	b3 0b       	sbc	r27, r19
    17b8:	e4 0b       	sbc	r30, r20
    17ba:	f5 0b       	sbc	r31, r21

000017bc <__udivmodsi4_ep>:
    17bc:	66 1f       	adc	r22, r22
    17be:	77 1f       	adc	r23, r23
    17c0:	88 1f       	adc	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	1a 94       	dec	r1
    17c6:	69 f7       	brne	.-38     	; 0x17a2 <__udivmodsi4_loop>
    17c8:	60 95       	com	r22
    17ca:	70 95       	com	r23
    17cc:	80 95       	com	r24
    17ce:	90 95       	com	r25
    17d0:	9b 01       	movw	r18, r22
    17d2:	ac 01       	movw	r20, r24
    17d4:	bd 01       	movw	r22, r26
    17d6:	cf 01       	movw	r24, r30
    17d8:	08 95       	ret

000017da <__umulhisi3>:
    17da:	a2 9f       	mul	r26, r18
    17dc:	b0 01       	movw	r22, r0
    17de:	b3 9f       	mul	r27, r19
    17e0:	c0 01       	movw	r24, r0
    17e2:	a3 9f       	mul	r26, r19
    17e4:	70 0d       	add	r23, r0
    17e6:	81 1d       	adc	r24, r1
    17e8:	11 24       	eor	r1, r1
    17ea:	91 1d       	adc	r25, r1
    17ec:	b2 9f       	mul	r27, r18
    17ee:	70 0d       	add	r23, r0
    17f0:	81 1d       	adc	r24, r1
    17f2:	11 24       	eor	r1, r1
    17f4:	91 1d       	adc	r25, r1
    17f6:	08 95       	ret

000017f8 <__itoa_ncheck>:
    17f8:	bb 27       	eor	r27, r27
    17fa:	4a 30       	cpi	r20, 0x0A	; 10
    17fc:	31 f4       	brne	.+12     	; 0x180a <__itoa_ncheck+0x12>
    17fe:	99 23       	and	r25, r25
    1800:	22 f4       	brpl	.+8      	; 0x180a <__itoa_ncheck+0x12>
    1802:	bd e2       	ldi	r27, 0x2D	; 45
    1804:	90 95       	com	r25
    1806:	81 95       	neg	r24
    1808:	9f 4f       	sbci	r25, 0xFF	; 255
    180a:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__utoa_common>

0000180e <__utoa_ncheck>:
    180e:	bb 27       	eor	r27, r27

00001810 <__utoa_common>:
    1810:	fb 01       	movw	r30, r22
    1812:	55 27       	eor	r21, r21
    1814:	aa 27       	eor	r26, r26
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	aa 1f       	adc	r26, r26
    181c:	a4 17       	cp	r26, r20
    181e:	10 f0       	brcs	.+4      	; 0x1824 <__utoa_common+0x14>
    1820:	a4 1b       	sub	r26, r20
    1822:	83 95       	inc	r24
    1824:	50 51       	subi	r21, 0x10	; 16
    1826:	b9 f7       	brne	.-18     	; 0x1816 <__utoa_common+0x6>
    1828:	a0 5d       	subi	r26, 0xD0	; 208
    182a:	aa 33       	cpi	r26, 0x3A	; 58
    182c:	08 f0       	brcs	.+2      	; 0x1830 <__utoa_common+0x20>
    182e:	a9 5d       	subi	r26, 0xD9	; 217
    1830:	a1 93       	st	Z+, r26
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	79 f7       	brne	.-34     	; 0x1814 <__utoa_common+0x4>
    1836:	b1 11       	cpse	r27, r1
    1838:	b1 93       	st	Z+, r27
    183a:	11 92       	st	Z+, r1
    183c:	cb 01       	movw	r24, r22
    183e:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <strrev>

00001842 <strrev>:
    1842:	dc 01       	movw	r26, r24
    1844:	fc 01       	movw	r30, r24
    1846:	67 2f       	mov	r22, r23
    1848:	71 91       	ld	r23, Z+
    184a:	77 23       	and	r23, r23
    184c:	e1 f7       	brne	.-8      	; 0x1846 <strrev+0x4>
    184e:	32 97       	sbiw	r30, 0x02	; 2
    1850:	04 c0       	rjmp	.+8      	; 0x185a <strrev+0x18>
    1852:	7c 91       	ld	r23, X
    1854:	6d 93       	st	X+, r22
    1856:	70 83       	st	Z, r23
    1858:	62 91       	ld	r22, -Z
    185a:	ae 17       	cp	r26, r30
    185c:	bf 07       	cpc	r27, r31
    185e:	c8 f3       	brcs	.-14     	; 0x1852 <strrev+0x10>
    1860:	08 95       	ret

00001862 <_exit>:
    1862:	f8 94       	cli

00001864 <__stop_program>:
    1864:	ff cf       	rjmp	.-2      	; 0x1864 <__stop_program>
